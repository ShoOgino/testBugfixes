{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","commits":[{"id":"5968426c5e8ed6fc30566c0b1ef0d99e4bbfa89d","date":1494861965,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistance() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(-1, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, cov=cov(c,d), dist=distance(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getDouble(\"cov\").equals(-625.0D));\n    assertTrue(tuples.get(0).getDouble(\"dist\").equals(264.5751311064591D));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistance() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(-1, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, cov=cov(c,d), dist=distance(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getDouble(\"cov\").equals(-625.0D));\n    assertTrue(tuples.get(0).getDouble(\"dist\").equals(264.5751311064591D));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistance() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(-1, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, cov=cov(c,d), dist=distance(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getDouble(\"cov\").equals(-625.0D));\n    assertTrue(tuples.get(0).getDouble(\"dist\").equals(264.5751311064591D));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdb6ca63bec9ca0f6ef05ec63b2893110ac2f861","date":1504899868,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","sourceNew":"  @Test\n  public void testDistance() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(-1, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), \" +\n                   \"tuple(colc=c, cold=d, cov=cov(c,d), dist=distance(c,d), \" +\n                         \"mdist=manhattanDistance(c,d), edist=earthMoversDistance(c, d), cdist=canberraDistance(c,d),\" +\n                         \"chdist=chebyshevDistance(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getDouble(\"cov\").equals(-625.0D));\n    assertTrue(tuples.get(0).getDouble(\"dist\").equals(264.5751311064591D));\n    assertTrue(tuples.get(0).getDouble(\"mdist\").equals(500.0D));\n    assertTrue(tuples.get(0).getDouble(\"cdist\").equals(4.0D));\n    assertTrue(tuples.get(0).getDouble(\"chdist\").equals(200.0D));\n    assertTrue(tuples.get(0).getDouble(\"edist\").equals(1400.0D));\n  }\n\n","sourceOld":"  @Test\n  public void testDistance() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(-1, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, cov=cov(c,d), dist=distance(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getDouble(\"cov\").equals(-625.0D));\n    assertTrue(tuples.get(0).getDouble(\"dist\").equals(264.5751311064591D));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08e30330b33aca2e2864d648a9e1ed2d2f4086f3","date":1504933371,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","sourceNew":"  @Test\n  public void testDistance() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(-1, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), \" +\n                   \"tuple(colc=c, cold=d, cov=cov(c,d), dist=distance(c,d), \" +\n                         \"mdist=manhattanDistance(c,d), edist=earthMoversDistance(c, d), cdist=canberraDistance(c,d),\" +\n                         \"chdist=chebyshevDistance(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getDouble(\"cov\").equals(-625.0D));\n    assertTrue(tuples.get(0).getDouble(\"dist\").equals(264.5751311064591D));\n    assertTrue(tuples.get(0).getDouble(\"mdist\").equals(500.0D));\n    assertTrue(tuples.get(0).getDouble(\"cdist\").equals(4.0D));\n    assertTrue(tuples.get(0).getDouble(\"chdist\").equals(200.0D));\n    assertTrue(tuples.get(0).getDouble(\"edist\").equals(1400.0D));\n  }\n\n","sourceOld":"  @Test\n  public void testDistance() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(-1, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, cov=cov(c,d), dist=distance(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getDouble(\"cov\").equals(-625.0D));\n    assertTrue(tuples.get(0).getDouble(\"dist\").equals(264.5751311064591D));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","sourceNew":"  @Test\n  public void testDistance() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(-1, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), \" +\n                   \"tuple(colc=c, cold=d, cov=cov(c,d), dist=distance(c,d), \" +\n                         \"mdist=manhattanDistance(c,d), edist=earthMoversDistance(c, d), cdist=canberraDistance(c,d),\" +\n                         \"chdist=chebyshevDistance(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getDouble(\"cov\").equals(-625.0D));\n    assertTrue(tuples.get(0).getDouble(\"dist\").equals(264.5751311064591D));\n    assertTrue(tuples.get(0).getDouble(\"mdist\").equals(500.0D));\n    assertTrue(tuples.get(0).getDouble(\"cdist\").equals(4.0D));\n    assertTrue(tuples.get(0).getDouble(\"chdist\").equals(200.0D));\n    assertTrue(tuples.get(0).getDouble(\"edist\").equals(1400.0D));\n  }\n\n","sourceOld":"  @Test\n  public void testDistance() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(-1, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, cov=cov(c,d), dist=distance(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getDouble(\"cov\").equals(-625.0D));\n    assertTrue(tuples.get(0).getDouble(\"dist\").equals(264.5751311064591D));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f033e640613edeb07d8952279368806db4ab299","date":1511393468,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","sourceNew":"  @Test\n  public void testDistance() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=array(1,2,3,4),\" +\n                       \"b=array(2,3,4,5), \" +\n                       \"c=array(3,4,5,6), \" +\n                       \"d=distance(a, b), \" +\n                       \"e=distance(a, c),\" +\n                       \"f=distance(b, c),\" +\n                       \"g=transpose(matrix(a, b, c)),\" +\n                       \"h=distance(g),\" +\n                       \"i=distance(a, b, type=manhattan), \" +\n                       \"j=distance(a, c, type=manhattan),\" +\n                       \"k=distance(b, c, type=manhattan),\" +\n                       \"l=transpose(matrix(a, b, c)),\" +\n                       \"m=distance(l, type=manhattan),\" +\n                       \"n=distance(a, b, type=canberra), \" +\n                       \"o=distance(a, c, type=canberra),\" +\n                       \"p=distance(b, c, type=canberra),\" +\n                       \"q=transpose(matrix(a, b, c)),\" +\n                       \"r=distance(q, type=canberra),\" +\n                       \"s=distance(a, b, type=earthMovers), \" +\n                       \"t=distance(a, c, type=earthMovers),\" +\n                       \"u=distance(b, c, type=earthMovers),\" +\n                       \"w=transpose(matrix(a, b, c)),\" +\n                       \"x=distance(w, type=earthMovers),\" +\n                       \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number d = (Number)tuples.get(0).get(\"d\");\n    assertEquals(d.doubleValue(), 2.0, 0.0);\n    Number e = (Number)tuples.get(0).get(\"e\");\n    assertEquals(e.doubleValue(), 4.0, 0.0);\n    Number f = (Number)tuples.get(0).get(\"f\");\n    assertEquals(f.doubleValue(), 2.0, 0.0);\n\n    List<List<Number>> h = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(h.size(), 3);\n    assertEquals(h.get(0).size(), 3);\n    List<Number> row0 = h.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 2, 0);\n    assertEquals(row0.get(2).doubleValue(), 4, 0);\n\n    List<Number> row1 = h.get(1);\n    assertEquals(row1.get(0).doubleValue(), 2, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2, 0);\n\n    List<Number> row2 = h.get(2);\n    assertEquals(row2.get(0).doubleValue(), 4, 0);\n    assertEquals(row2.get(1).doubleValue(), 2, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number i = (Number)tuples.get(0).get(\"i\");\n    assertEquals(i.doubleValue(), 4.0, 0.0);\n    Number j = (Number)tuples.get(0).get(\"j\");\n    assertEquals(j.doubleValue(), 8.0, 0.0);\n    Number k = (Number)tuples.get(0).get(\"k\");\n    assertEquals(k.doubleValue(), 4.0, 0.0);\n\n    List<List<Number>> m = (List<List<Number>>)tuples.get(0).get(\"m\");\n    assertEquals(m.size(), 3);\n    assertEquals(m.get(0).size(), 3);\n    row0 = m.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 4, 0);\n    assertEquals(row0.get(2).doubleValue(), 8, 0);\n\n    row1 = m.get(1);\n    assertEquals(row1.get(0).doubleValue(), 4, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 4, 0);\n\n    row2 = m.get(2);\n    assertEquals(row2.get(0).doubleValue(), 8, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number n = (Number)tuples.get(0).get(\"n\");\n    assertEquals(n.doubleValue(), 0.787302, 0.0001);\n    Number o = (Number)tuples.get(0).get(\"o\");\n    assertEquals(o.doubleValue(), 1.283333, 0.0001);\n    Number p = (Number)tuples.get(0).get(\"p\");\n    assertEquals(p.doubleValue(), 0.544877, 0.0001);\n\n    List<List<Number>> r = (List<List<Number>>)tuples.get(0).get(\"r\");\n    assertEquals(r.size(), 3);\n    assertEquals(r.get(0).size(), 3);\n    row0 = r.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 0.787302, .0001);\n    assertEquals(row0.get(2).doubleValue(), 1.283333, .0001);\n\n    row1 = r.get(1);\n    assertEquals(row1.get(0).doubleValue(), 0.787302, .0001);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.544877, .0001);\n\n    row2 = r.get(2);\n    assertEquals(row2.get(0).doubleValue(), 1.283333, .0001);\n    assertEquals(row2.get(1).doubleValue(), 0.544877, .0001);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n    Number s = (Number)tuples.get(0).get(\"s\");\n    assertEquals(s.doubleValue(), 10.0, 0);\n    Number t = (Number)tuples.get(0).get(\"t\");\n    assertEquals(t.doubleValue(), 20.0, 0);\n    Number u = (Number)tuples.get(0).get(\"u\");\n    assertEquals(u.doubleValue(), 10.0, 0);\n\n    List<List<Number>> x = (List<List<Number>>)tuples.get(0).get(\"x\");\n    assertEquals(x.size(), 3);\n    assertEquals(x.get(0).size(), 3);\n    row0 = x.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 10.0, 0);\n    assertEquals(row0.get(2).doubleValue(), 20, 0);\n\n    row1 = x.get(1);\n    assertEquals(row1.get(0).doubleValue(), 10, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 10, 0);\n\n    row2 = x.get(2);\n    assertEquals(row2.get(0).doubleValue(), 20, 0);\n    assertEquals(row2.get(1).doubleValue(), 10, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testDistance() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(-1, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), \" +\n                   \"tuple(colc=c, cold=d, cov=cov(c,d), dist=distance(c,d), \" +\n                         \"mdist=manhattanDistance(c,d), edist=earthMoversDistance(c, d), cdist=canberraDistance(c,d),\" +\n                         \"chdist=chebyshevDistance(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getDouble(\"cov\").equals(-625.0D));\n    assertTrue(tuples.get(0).getDouble(\"dist\").equals(264.5751311064591D));\n    assertTrue(tuples.get(0).getDouble(\"mdist\").equals(500.0D));\n    assertTrue(tuples.get(0).getDouble(\"cdist\").equals(4.0D));\n    assertTrue(tuples.get(0).getDouble(\"chdist\").equals(200.0D));\n    assertTrue(tuples.get(0).getDouble(\"edist\").equals(1400.0D));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistance().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","sourceNew":"  @Test\n  public void testDistance() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=array(1,2,3,4),\" +\n                       \"b=array(2,3,4,5), \" +\n                       \"c=array(3,4,5,6), \" +\n                       \"d=distance(a, b), \" +\n                       \"e=distance(a, c),\" +\n                       \"f=distance(b, c),\" +\n                       \"g=transpose(matrix(a, b, c)),\" +\n                       \"h=distance(g),\" +\n                       \"i=distance(a, b, type=manhattan), \" +\n                       \"j=distance(a, c, type=manhattan),\" +\n                       \"k=distance(b, c, type=manhattan),\" +\n                       \"l=transpose(matrix(a, b, c)),\" +\n                       \"m=distance(l, type=manhattan),\" +\n                       \"n=distance(a, b, type=canberra), \" +\n                       \"o=distance(a, c, type=canberra),\" +\n                       \"p=distance(b, c, type=canberra),\" +\n                       \"q=transpose(matrix(a, b, c)),\" +\n                       \"r=distance(q, type=canberra),\" +\n                       \"s=distance(a, b, type=earthMovers), \" +\n                       \"t=distance(a, c, type=earthMovers),\" +\n                       \"u=distance(b, c, type=earthMovers),\" +\n                       \"w=transpose(matrix(a, b, c)),\" +\n                       \"x=distance(w, type=earthMovers),\" +\n                       \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number d = (Number)tuples.get(0).get(\"d\");\n    assertEquals(d.doubleValue(), 2.0, 0.0);\n    Number e = (Number)tuples.get(0).get(\"e\");\n    assertEquals(e.doubleValue(), 4.0, 0.0);\n    Number f = (Number)tuples.get(0).get(\"f\");\n    assertEquals(f.doubleValue(), 2.0, 0.0);\n\n    List<List<Number>> h = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(h.size(), 3);\n    assertEquals(h.get(0).size(), 3);\n    List<Number> row0 = h.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 2, 0);\n    assertEquals(row0.get(2).doubleValue(), 4, 0);\n\n    List<Number> row1 = h.get(1);\n    assertEquals(row1.get(0).doubleValue(), 2, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2, 0);\n\n    List<Number> row2 = h.get(2);\n    assertEquals(row2.get(0).doubleValue(), 4, 0);\n    assertEquals(row2.get(1).doubleValue(), 2, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number i = (Number)tuples.get(0).get(\"i\");\n    assertEquals(i.doubleValue(), 4.0, 0.0);\n    Number j = (Number)tuples.get(0).get(\"j\");\n    assertEquals(j.doubleValue(), 8.0, 0.0);\n    Number k = (Number)tuples.get(0).get(\"k\");\n    assertEquals(k.doubleValue(), 4.0, 0.0);\n\n    List<List<Number>> m = (List<List<Number>>)tuples.get(0).get(\"m\");\n    assertEquals(m.size(), 3);\n    assertEquals(m.get(0).size(), 3);\n    row0 = m.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 4, 0);\n    assertEquals(row0.get(2).doubleValue(), 8, 0);\n\n    row1 = m.get(1);\n    assertEquals(row1.get(0).doubleValue(), 4, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 4, 0);\n\n    row2 = m.get(2);\n    assertEquals(row2.get(0).doubleValue(), 8, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number n = (Number)tuples.get(0).get(\"n\");\n    assertEquals(n.doubleValue(), 0.787302, 0.0001);\n    Number o = (Number)tuples.get(0).get(\"o\");\n    assertEquals(o.doubleValue(), 1.283333, 0.0001);\n    Number p = (Number)tuples.get(0).get(\"p\");\n    assertEquals(p.doubleValue(), 0.544877, 0.0001);\n\n    List<List<Number>> r = (List<List<Number>>)tuples.get(0).get(\"r\");\n    assertEquals(r.size(), 3);\n    assertEquals(r.get(0).size(), 3);\n    row0 = r.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 0.787302, .0001);\n    assertEquals(row0.get(2).doubleValue(), 1.283333, .0001);\n\n    row1 = r.get(1);\n    assertEquals(row1.get(0).doubleValue(), 0.787302, .0001);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.544877, .0001);\n\n    row2 = r.get(2);\n    assertEquals(row2.get(0).doubleValue(), 1.283333, .0001);\n    assertEquals(row2.get(1).doubleValue(), 0.544877, .0001);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n    Number s = (Number)tuples.get(0).get(\"s\");\n    assertEquals(s.doubleValue(), 10.0, 0);\n    Number t = (Number)tuples.get(0).get(\"t\");\n    assertEquals(t.doubleValue(), 20.0, 0);\n    Number u = (Number)tuples.get(0).get(\"u\");\n    assertEquals(u.doubleValue(), 10.0, 0);\n\n    List<List<Number>> x = (List<List<Number>>)tuples.get(0).get(\"x\");\n    assertEquals(x.size(), 3);\n    assertEquals(x.get(0).size(), 3);\n    row0 = x.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 10.0, 0);\n    assertEquals(row0.get(2).doubleValue(), 20, 0);\n\n    row1 = x.get(1);\n    assertEquals(row1.get(0).doubleValue(), 10, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 10, 0);\n\n    row2 = x.get(2);\n    assertEquals(row2.get(0).doubleValue(), 20, 0);\n    assertEquals(row2.get(1).doubleValue(), 10, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testDistance() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=array(1,2,3,4),\" +\n                       \"b=array(2,3,4,5), \" +\n                       \"c=array(3,4,5,6), \" +\n                       \"d=distance(a, b), \" +\n                       \"e=distance(a, c),\" +\n                       \"f=distance(b, c),\" +\n                       \"g=transpose(matrix(a, b, c)),\" +\n                       \"h=distance(g),\" +\n                       \"i=distance(a, b, type=manhattan), \" +\n                       \"j=distance(a, c, type=manhattan),\" +\n                       \"k=distance(b, c, type=manhattan),\" +\n                       \"l=transpose(matrix(a, b, c)),\" +\n                       \"m=distance(l, type=manhattan),\" +\n                       \"n=distance(a, b, type=canberra), \" +\n                       \"o=distance(a, c, type=canberra),\" +\n                       \"p=distance(b, c, type=canberra),\" +\n                       \"q=transpose(matrix(a, b, c)),\" +\n                       \"r=distance(q, type=canberra),\" +\n                       \"s=distance(a, b, type=earthMovers), \" +\n                       \"t=distance(a, c, type=earthMovers),\" +\n                       \"u=distance(b, c, type=earthMovers),\" +\n                       \"w=transpose(matrix(a, b, c)),\" +\n                       \"x=distance(w, type=earthMovers),\" +\n                       \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number d = (Number)tuples.get(0).get(\"d\");\n    assertEquals(d.doubleValue(), 2.0, 0.0);\n    Number e = (Number)tuples.get(0).get(\"e\");\n    assertEquals(e.doubleValue(), 4.0, 0.0);\n    Number f = (Number)tuples.get(0).get(\"f\");\n    assertEquals(f.doubleValue(), 2.0, 0.0);\n\n    List<List<Number>> h = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(h.size(), 3);\n    assertEquals(h.get(0).size(), 3);\n    List<Number> row0 = h.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 2, 0);\n    assertEquals(row0.get(2).doubleValue(), 4, 0);\n\n    List<Number> row1 = h.get(1);\n    assertEquals(row1.get(0).doubleValue(), 2, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2, 0);\n\n    List<Number> row2 = h.get(2);\n    assertEquals(row2.get(0).doubleValue(), 4, 0);\n    assertEquals(row2.get(1).doubleValue(), 2, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number i = (Number)tuples.get(0).get(\"i\");\n    assertEquals(i.doubleValue(), 4.0, 0.0);\n    Number j = (Number)tuples.get(0).get(\"j\");\n    assertEquals(j.doubleValue(), 8.0, 0.0);\n    Number k = (Number)tuples.get(0).get(\"k\");\n    assertEquals(k.doubleValue(), 4.0, 0.0);\n\n    List<List<Number>> m = (List<List<Number>>)tuples.get(0).get(\"m\");\n    assertEquals(m.size(), 3);\n    assertEquals(m.get(0).size(), 3);\n    row0 = m.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 4, 0);\n    assertEquals(row0.get(2).doubleValue(), 8, 0);\n\n    row1 = m.get(1);\n    assertEquals(row1.get(0).doubleValue(), 4, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 4, 0);\n\n    row2 = m.get(2);\n    assertEquals(row2.get(0).doubleValue(), 8, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number n = (Number)tuples.get(0).get(\"n\");\n    assertEquals(n.doubleValue(), 0.787302, 0.0001);\n    Number o = (Number)tuples.get(0).get(\"o\");\n    assertEquals(o.doubleValue(), 1.283333, 0.0001);\n    Number p = (Number)tuples.get(0).get(\"p\");\n    assertEquals(p.doubleValue(), 0.544877, 0.0001);\n\n    List<List<Number>> r = (List<List<Number>>)tuples.get(0).get(\"r\");\n    assertEquals(r.size(), 3);\n    assertEquals(r.get(0).size(), 3);\n    row0 = r.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 0.787302, .0001);\n    assertEquals(row0.get(2).doubleValue(), 1.283333, .0001);\n\n    row1 = r.get(1);\n    assertEquals(row1.get(0).doubleValue(), 0.787302, .0001);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.544877, .0001);\n\n    row2 = r.get(2);\n    assertEquals(row2.get(0).doubleValue(), 1.283333, .0001);\n    assertEquals(row2.get(1).doubleValue(), 0.544877, .0001);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n    Number s = (Number)tuples.get(0).get(\"s\");\n    assertEquals(s.doubleValue(), 10.0, 0);\n    Number t = (Number)tuples.get(0).get(\"t\");\n    assertEquals(t.doubleValue(), 20.0, 0);\n    Number u = (Number)tuples.get(0).get(\"u\");\n    assertEquals(u.doubleValue(), 10.0, 0);\n\n    List<List<Number>> x = (List<List<Number>>)tuples.get(0).get(\"x\");\n    assertEquals(x.size(), 3);\n    assertEquals(x.get(0).size(), 3);\n    row0 = x.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 10.0, 0);\n    assertEquals(row0.get(2).doubleValue(), 20, 0);\n\n    row1 = x.get(1);\n    assertEquals(row1.get(0).doubleValue(), 10, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 10, 0);\n\n    row2 = x.get(2);\n    assertEquals(row2.get(0).doubleValue(), 20, 0);\n    assertEquals(row2.get(1).doubleValue(), 10, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f033e640613edeb07d8952279368806db4ab299":["08e30330b33aca2e2864d648a9e1ed2d2f4086f3"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["e9017cf144952056066919f1ebc7897ff9bd71b1","08e30330b33aca2e2864d648a9e1ed2d2f4086f3"],"08e30330b33aca2e2864d648a9e1ed2d2f4086f3":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","fdb6ca63bec9ca0f6ef05ec63b2893110ac2f861"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdb6ca63bec9ca0f6ef05ec63b2893110ac2f861":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5968426c5e8ed6fc30566c0b1ef0d99e4bbfa89d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["2f033e640613edeb07d8952279368806db4ab299"],"5968426c5e8ed6fc30566c0b1ef0d99e4bbfa89d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2f033e640613edeb07d8952279368806db4ab299":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"08e30330b33aca2e2864d648a9e1ed2d2f4086f3":["2f033e640613edeb07d8952279368806db4ab299","685bd38810c206c93e9058f3c2cfa9827c086c27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","5968426c5e8ed6fc30566c0b1ef0d99e4bbfa89d"],"fdb6ca63bec9ca0f6ef05ec63b2893110ac2f861":["08e30330b33aca2e2864d648a9e1ed2d2f4086f3"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["e9017cf144952056066919f1ebc7897ff9bd71b1","08e30330b33aca2e2864d648a9e1ed2d2f4086f3","fdb6ca63bec9ca0f6ef05ec63b2893110ac2f861"],"5968426c5e8ed6fc30566c0b1ef0d99e4bbfa89d":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}