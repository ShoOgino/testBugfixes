{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testCircleOpto().mjava","commits":[{"id":"86fcb04ff2d63aad8754270211d5fc084d3526b9","date":1459278881,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testCircleOpto().mjava","pathOld":"/dev/null","sourceNew":"  // TODO: does not really belong here, but we test it like this for now\n  // we can make a fake IndexReader to send boxes directly to Point visitors instead?\n  public void testCircleOpto() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      // circle\n      final double centerLat = -90 + 180.0 * random().nextDouble();\n      final double centerLon = -180 + 360.0 * random().nextDouble();\n      final double radius = 50_000_000D * random().nextDouble();\n      final GeoRect box = GeoUtils.circleToBBox(centerLat, centerLon, radius);\n      // TODO: remove this leniency!\n      if (box.crossesDateline()) {\n        --i; // try again...\n        continue;\n      }\n      final double axisLat = GeoUtils.axisLat(centerLat, radius);\n\n      for (int k = 0; k < 1000; ++k) {\n\n        double[] latBounds = {-90, box.minLat, axisLat, box.maxLat, 90};\n        double[] lonBounds = {-180, box.minLon, centerLon, box.maxLon, 180};\n        // first choose an upper left corner\n        int maxLatRow = random().nextInt(4);\n        double latMax = randomInRange(latBounds[maxLatRow], latBounds[maxLatRow + 1]);\n        int minLonCol = random().nextInt(4);\n        double lonMin = randomInRange(lonBounds[minLonCol], lonBounds[minLonCol + 1]);\n        // now choose a lower right corner\n        int minLatMaxRow = maxLatRow == 3 ? 3 : maxLatRow + 1; // make sure it will at least cross into the bbox\n        int minLatRow = random().nextInt(minLatMaxRow);\n        double latMin = randomInRange(latBounds[minLatRow], Math.min(latBounds[minLatRow + 1], latMax));\n        int maxLonMinCol = Math.max(minLonCol, 1); // make sure it will at least cross into the bbox\n        int maxLonCol = maxLonMinCol + random().nextInt(4 - maxLonMinCol);\n        double lonMax = randomInRange(Math.max(lonBounds[maxLonCol], lonMin), lonBounds[maxLonCol + 1]);\n\n        assert latMax >= latMin;\n        assert lonMax >= lonMin;\n\n        if (isDisjoint(centerLat, centerLon, radius, axisLat, latMin, latMax, lonMin, lonMax)) {\n          // intersects says false: test a ton of points\n          for (int j = 0; j < 200; j++) {\n            double lat = latMin + (latMax - latMin) * random().nextDouble();\n            double lon = lonMin + (lonMax - lonMin) * random().nextDouble();\n\n            if (random().nextBoolean()) {\n              // explicitly test an edge\n              int edge = random().nextInt(4);\n              if (edge == 0) {\n                lat = latMin;\n              } else if (edge == 1) {\n                lat = latMax;\n              } else if (edge == 2) {\n                lon = lonMin;\n              } else if (edge == 3) {\n                lon = lonMax;\n              }\n            }\n            double distance = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n            try {\n            assertTrue(String.format(Locale.ROOT, \"\\nisDisjoint(\\n\" +\n                    \"centerLat=%s\\n\" +\n                    \"centerLon=%s\\n\" +\n                    \"radius=%s\\n\" +\n                    \"latMin=%s\\n\" +\n                    \"latMax=%s\\n\" +\n                    \"lonMin=%s\\n\" +\n                    \"lonMax=%s) == false BUT\\n\" +\n                    \"haversin(%s, %s, %s, %s) = %s\\nbbox=%s\",\n                centerLat, centerLon, radius, latMin, latMax, lonMin, lonMax,\n                centerLat, centerLon, lat, lon, distance, GeoUtils.circleToBBox(centerLat, centerLon, radius)),\n                distance > radius);\n            } catch (AssertionError e) {\n              GeoTestUtil.toWebGLEarth(latMin, latMax, lonMin, lonMax, centerLat, centerLon, radius);\n              throw e;\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43ddc1b7a872fafd838d3f3129984ca661e29b36","date":1459526591,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testCircleOpto().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testCircleOpto().mjava","sourceNew":"  // TODO: does not really belong here, but we test it like this for now\n  // we can make a fake IndexReader to send boxes directly to Point visitors instead?\n  public void testCircleOpto() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      // circle\n      final double centerLat = -90 + 180.0 * random().nextDouble();\n      final double centerLon = -180 + 360.0 * random().nextDouble();\n      final double radius = 50_000_000D * random().nextDouble();\n      final GeoRect box = GeoRect.fromPointDistance(centerLat, centerLon, radius);\n      // TODO: remove this leniency!\n      if (box.crossesDateline()) {\n        --i; // try again...\n        continue;\n      }\n      final double axisLat = GeoRect.axisLat(centerLat, radius);\n\n      for (int k = 0; k < 1000; ++k) {\n\n        double[] latBounds = {-90, box.minLat, axisLat, box.maxLat, 90};\n        double[] lonBounds = {-180, box.minLon, centerLon, box.maxLon, 180};\n        // first choose an upper left corner\n        int maxLatRow = random().nextInt(4);\n        double latMax = randomInRange(latBounds[maxLatRow], latBounds[maxLatRow + 1]);\n        int minLonCol = random().nextInt(4);\n        double lonMin = randomInRange(lonBounds[minLonCol], lonBounds[minLonCol + 1]);\n        // now choose a lower right corner\n        int minLatMaxRow = maxLatRow == 3 ? 3 : maxLatRow + 1; // make sure it will at least cross into the bbox\n        int minLatRow = random().nextInt(minLatMaxRow);\n        double latMin = randomInRange(latBounds[minLatRow], Math.min(latBounds[minLatRow + 1], latMax));\n        int maxLonMinCol = Math.max(minLonCol, 1); // make sure it will at least cross into the bbox\n        int maxLonCol = maxLonMinCol + random().nextInt(4 - maxLonMinCol);\n        double lonMax = randomInRange(Math.max(lonBounds[maxLonCol], lonMin), lonBounds[maxLonCol + 1]);\n\n        assert latMax >= latMin;\n        assert lonMax >= lonMin;\n\n        if (isDisjoint(centerLat, centerLon, radius, axisLat, latMin, latMax, lonMin, lonMax)) {\n          // intersects says false: test a ton of points\n          for (int j = 0; j < 200; j++) {\n            double lat = latMin + (latMax - latMin) * random().nextDouble();\n            double lon = lonMin + (lonMax - lonMin) * random().nextDouble();\n\n            if (random().nextBoolean()) {\n              // explicitly test an edge\n              int edge = random().nextInt(4);\n              if (edge == 0) {\n                lat = latMin;\n              } else if (edge == 1) {\n                lat = latMax;\n              } else if (edge == 2) {\n                lon = lonMin;\n              } else if (edge == 3) {\n                lon = lonMax;\n              }\n            }\n            double distance = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n            try {\n            assertTrue(String.format(Locale.ROOT, \"\\nisDisjoint(\\n\" +\n                    \"centerLat=%s\\n\" +\n                    \"centerLon=%s\\n\" +\n                    \"radius=%s\\n\" +\n                    \"latMin=%s\\n\" +\n                    \"latMax=%s\\n\" +\n                    \"lonMin=%s\\n\" +\n                    \"lonMax=%s) == false BUT\\n\" +\n                    \"haversin(%s, %s, %s, %s) = %s\\nbbox=%s\",\n                centerLat, centerLon, radius, latMin, latMax, lonMin, lonMax,\n                centerLat, centerLon, lat, lon, distance, GeoRect.fromPointDistance(centerLat, centerLon, radius)),\n                distance > radius);\n            } catch (AssertionError e) {\n              GeoTestUtil.toWebGLEarth(latMin, latMax, lonMin, lonMax, centerLat, centerLon, radius);\n              throw e;\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: does not really belong here, but we test it like this for now\n  // we can make a fake IndexReader to send boxes directly to Point visitors instead?\n  public void testCircleOpto() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      // circle\n      final double centerLat = -90 + 180.0 * random().nextDouble();\n      final double centerLon = -180 + 360.0 * random().nextDouble();\n      final double radius = 50_000_000D * random().nextDouble();\n      final GeoRect box = GeoUtils.circleToBBox(centerLat, centerLon, radius);\n      // TODO: remove this leniency!\n      if (box.crossesDateline()) {\n        --i; // try again...\n        continue;\n      }\n      final double axisLat = GeoUtils.axisLat(centerLat, radius);\n\n      for (int k = 0; k < 1000; ++k) {\n\n        double[] latBounds = {-90, box.minLat, axisLat, box.maxLat, 90};\n        double[] lonBounds = {-180, box.minLon, centerLon, box.maxLon, 180};\n        // first choose an upper left corner\n        int maxLatRow = random().nextInt(4);\n        double latMax = randomInRange(latBounds[maxLatRow], latBounds[maxLatRow + 1]);\n        int minLonCol = random().nextInt(4);\n        double lonMin = randomInRange(lonBounds[minLonCol], lonBounds[minLonCol + 1]);\n        // now choose a lower right corner\n        int minLatMaxRow = maxLatRow == 3 ? 3 : maxLatRow + 1; // make sure it will at least cross into the bbox\n        int minLatRow = random().nextInt(minLatMaxRow);\n        double latMin = randomInRange(latBounds[minLatRow], Math.min(latBounds[minLatRow + 1], latMax));\n        int maxLonMinCol = Math.max(minLonCol, 1); // make sure it will at least cross into the bbox\n        int maxLonCol = maxLonMinCol + random().nextInt(4 - maxLonMinCol);\n        double lonMax = randomInRange(Math.max(lonBounds[maxLonCol], lonMin), lonBounds[maxLonCol + 1]);\n\n        assert latMax >= latMin;\n        assert lonMax >= lonMin;\n\n        if (isDisjoint(centerLat, centerLon, radius, axisLat, latMin, latMax, lonMin, lonMax)) {\n          // intersects says false: test a ton of points\n          for (int j = 0; j < 200; j++) {\n            double lat = latMin + (latMax - latMin) * random().nextDouble();\n            double lon = lonMin + (lonMax - lonMin) * random().nextDouble();\n\n            if (random().nextBoolean()) {\n              // explicitly test an edge\n              int edge = random().nextInt(4);\n              if (edge == 0) {\n                lat = latMin;\n              } else if (edge == 1) {\n                lat = latMax;\n              } else if (edge == 2) {\n                lon = lonMin;\n              } else if (edge == 3) {\n                lon = lonMax;\n              }\n            }\n            double distance = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n            try {\n            assertTrue(String.format(Locale.ROOT, \"\\nisDisjoint(\\n\" +\n                    \"centerLat=%s\\n\" +\n                    \"centerLon=%s\\n\" +\n                    \"radius=%s\\n\" +\n                    \"latMin=%s\\n\" +\n                    \"latMax=%s\\n\" +\n                    \"lonMin=%s\\n\" +\n                    \"lonMax=%s) == false BUT\\n\" +\n                    \"haversin(%s, %s, %s, %s) = %s\\nbbox=%s\",\n                centerLat, centerLon, radius, latMin, latMax, lonMin, lonMax,\n                centerLat, centerLon, lat, lon, distance, GeoUtils.circleToBBox(centerLat, centerLon, radius)),\n                distance > radius);\n            } catch (AssertionError e) {\n              GeoTestUtil.toWebGLEarth(latMin, latMax, lonMin, lonMax, centerLat, centerLon, radius);\n              throw e;\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testCircleOpto().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testCircleOpto().mjava","sourceNew":"  // TODO: does not really belong here, but we test it like this for now\n  // we can make a fake IndexReader to send boxes directly to Point visitors instead?\n  public void testCircleOpto() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      // circle\n      final double centerLat = -90 + 180.0 * random().nextDouble();\n      final double centerLon = -180 + 360.0 * random().nextDouble();\n      final double radius = 50_000_000D * random().nextDouble();\n      final Rectangle box = Rectangle.fromPointDistance(centerLat, centerLon, radius);\n      // TODO: remove this leniency!\n      if (box.crossesDateline()) {\n        --i; // try again...\n        continue;\n      }\n      final double axisLat = Rectangle.axisLat(centerLat, radius);\n\n      for (int k = 0; k < 1000; ++k) {\n\n        double[] latBounds = {-90, box.minLat, axisLat, box.maxLat, 90};\n        double[] lonBounds = {-180, box.minLon, centerLon, box.maxLon, 180};\n        // first choose an upper left corner\n        int maxLatRow = random().nextInt(4);\n        double latMax = randomInRange(latBounds[maxLatRow], latBounds[maxLatRow + 1]);\n        int minLonCol = random().nextInt(4);\n        double lonMin = randomInRange(lonBounds[minLonCol], lonBounds[minLonCol + 1]);\n        // now choose a lower right corner\n        int minLatMaxRow = maxLatRow == 3 ? 3 : maxLatRow + 1; // make sure it will at least cross into the bbox\n        int minLatRow = random().nextInt(minLatMaxRow);\n        double latMin = randomInRange(latBounds[minLatRow], Math.min(latBounds[minLatRow + 1], latMax));\n        int maxLonMinCol = Math.max(minLonCol, 1); // make sure it will at least cross into the bbox\n        int maxLonCol = maxLonMinCol + random().nextInt(4 - maxLonMinCol);\n        double lonMax = randomInRange(Math.max(lonBounds[maxLonCol], lonMin), lonBounds[maxLonCol + 1]);\n\n        assert latMax >= latMin;\n        assert lonMax >= lonMin;\n\n        if (isDisjoint(centerLat, centerLon, radius, axisLat, latMin, latMax, lonMin, lonMax)) {\n          // intersects says false: test a ton of points\n          for (int j = 0; j < 200; j++) {\n            double lat = latMin + (latMax - latMin) * random().nextDouble();\n            double lon = lonMin + (lonMax - lonMin) * random().nextDouble();\n\n            if (random().nextBoolean()) {\n              // explicitly test an edge\n              int edge = random().nextInt(4);\n              if (edge == 0) {\n                lat = latMin;\n              } else if (edge == 1) {\n                lat = latMax;\n              } else if (edge == 2) {\n                lon = lonMin;\n              } else if (edge == 3) {\n                lon = lonMax;\n              }\n            }\n            double distance = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n            try {\n            assertTrue(String.format(Locale.ROOT, \"\\nisDisjoint(\\n\" +\n                    \"centerLat=%s\\n\" +\n                    \"centerLon=%s\\n\" +\n                    \"radius=%s\\n\" +\n                    \"latMin=%s\\n\" +\n                    \"latMax=%s\\n\" +\n                    \"lonMin=%s\\n\" +\n                    \"lonMax=%s) == false BUT\\n\" +\n                    \"haversin(%s, %s, %s, %s) = %s\\nbbox=%s\",\n                centerLat, centerLon, radius, latMin, latMax, lonMin, lonMax,\n                centerLat, centerLon, lat, lon, distance, Rectangle.fromPointDistance(centerLat, centerLon, radius)),\n                distance > radius);\n            } catch (AssertionError e) {\n              GeoTestUtil.toWebGLEarth(latMin, latMax, lonMin, lonMax, centerLat, centerLon, radius);\n              throw e;\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: does not really belong here, but we test it like this for now\n  // we can make a fake IndexReader to send boxes directly to Point visitors instead?\n  public void testCircleOpto() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      // circle\n      final double centerLat = -90 + 180.0 * random().nextDouble();\n      final double centerLon = -180 + 360.0 * random().nextDouble();\n      final double radius = 50_000_000D * random().nextDouble();\n      final GeoRect box = GeoRect.fromPointDistance(centerLat, centerLon, radius);\n      // TODO: remove this leniency!\n      if (box.crossesDateline()) {\n        --i; // try again...\n        continue;\n      }\n      final double axisLat = GeoRect.axisLat(centerLat, radius);\n\n      for (int k = 0; k < 1000; ++k) {\n\n        double[] latBounds = {-90, box.minLat, axisLat, box.maxLat, 90};\n        double[] lonBounds = {-180, box.minLon, centerLon, box.maxLon, 180};\n        // first choose an upper left corner\n        int maxLatRow = random().nextInt(4);\n        double latMax = randomInRange(latBounds[maxLatRow], latBounds[maxLatRow + 1]);\n        int minLonCol = random().nextInt(4);\n        double lonMin = randomInRange(lonBounds[minLonCol], lonBounds[minLonCol + 1]);\n        // now choose a lower right corner\n        int minLatMaxRow = maxLatRow == 3 ? 3 : maxLatRow + 1; // make sure it will at least cross into the bbox\n        int minLatRow = random().nextInt(minLatMaxRow);\n        double latMin = randomInRange(latBounds[minLatRow], Math.min(latBounds[minLatRow + 1], latMax));\n        int maxLonMinCol = Math.max(minLonCol, 1); // make sure it will at least cross into the bbox\n        int maxLonCol = maxLonMinCol + random().nextInt(4 - maxLonMinCol);\n        double lonMax = randomInRange(Math.max(lonBounds[maxLonCol], lonMin), lonBounds[maxLonCol + 1]);\n\n        assert latMax >= latMin;\n        assert lonMax >= lonMin;\n\n        if (isDisjoint(centerLat, centerLon, radius, axisLat, latMin, latMax, lonMin, lonMax)) {\n          // intersects says false: test a ton of points\n          for (int j = 0; j < 200; j++) {\n            double lat = latMin + (latMax - latMin) * random().nextDouble();\n            double lon = lonMin + (lonMax - lonMin) * random().nextDouble();\n\n            if (random().nextBoolean()) {\n              // explicitly test an edge\n              int edge = random().nextInt(4);\n              if (edge == 0) {\n                lat = latMin;\n              } else if (edge == 1) {\n                lat = latMax;\n              } else if (edge == 2) {\n                lon = lonMin;\n              } else if (edge == 3) {\n                lon = lonMax;\n              }\n            }\n            double distance = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n            try {\n            assertTrue(String.format(Locale.ROOT, \"\\nisDisjoint(\\n\" +\n                    \"centerLat=%s\\n\" +\n                    \"centerLon=%s\\n\" +\n                    \"radius=%s\\n\" +\n                    \"latMin=%s\\n\" +\n                    \"latMax=%s\\n\" +\n                    \"lonMin=%s\\n\" +\n                    \"lonMax=%s) == false BUT\\n\" +\n                    \"haversin(%s, %s, %s, %s) = %s\\nbbox=%s\",\n                centerLat, centerLon, radius, latMin, latMax, lonMin, lonMax,\n                centerLat, centerLon, lat, lon, distance, GeoRect.fromPointDistance(centerLat, centerLon, radius)),\n                distance > radius);\n            } catch (AssertionError e) {\n              GeoTestUtil.toWebGLEarth(latMin, latMax, lonMin, lonMax, centerLat, centerLon, radius);\n              throw e;\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["43ddc1b7a872fafd838d3f3129984ca661e29b36"],"43ddc1b7a872fafd838d3f3129984ca661e29b36":["86fcb04ff2d63aad8754270211d5fc084d3526b9"],"86fcb04ff2d63aad8754270211d5fc084d3526b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86fcb04ff2d63aad8754270211d5fc084d3526b9"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43ddc1b7a872fafd838d3f3129984ca661e29b36":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"86fcb04ff2d63aad8754270211d5fc084d3526b9":["43ddc1b7a872fafd838d3f3129984ca661e29b36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}