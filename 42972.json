{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testPostingsEnumFreqs().mjava","commits":[{"id":"8f86136183a1cb9d265c318e2f06c51cb5017342","date":1428094771,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testPostingsEnumFreqs().mjava","pathOld":"/dev/null","sourceNew":"  public void testPostingsEnumFreqs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"bar bar\", ft));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    Terms terms = getOnlySegmentReader(reader).getTermVector(0, \"foo\");\n    TermsEnum termsEnum = terms.iterator(null);\n    assertNotNull(termsEnum);\n    assertEquals(new BytesRef(\"bar\"), termsEnum.next());\n    \n    // simple use (FREQS)\n    PostingsEnum postings = termsEnum.postings(null, null);\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    PostingsEnum postings2 = termsEnum.postings(null, postings);\n    assertNotNull(postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(null, docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for any flags: ok\n    for (int flag : new int[] { NONE, FREQS, POSITIONS, PAYLOADS, OFFSETS, ALL }) {\n      postings = termsEnum.postings(null, null, flag);\n      assertEquals(-1, postings.docID());\n      assertEquals(0, postings.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n      // reuse that too\n      postings2 = termsEnum.postings(null, postings, flag);\n      assertNotNull(postings2);\n      // and it had better work\n      assertEquals(-1, postings2.docID());\n      assertEquals(0, postings2.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings2.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    }\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testPostingsEnumFreqs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPostingsEnum#testDocsOnly().mjava","sourceNew":"  public void testPostingsEnumFreqs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"bar bar\", ft));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    Terms terms = getOnlySegmentReader(reader).getTermVector(0, \"foo\");\n    TermsEnum termsEnum = terms.iterator(null);\n    assertNotNull(termsEnum);\n    assertEquals(new BytesRef(\"bar\"), termsEnum.next());\n    \n    // simple use (FREQS)\n    PostingsEnum postings = termsEnum.postings(null, null);\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    PostingsEnum postings2 = termsEnum.postings(null, postings);\n    assertNotNull(postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(null, docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for any flags: ok\n    for (int flag : new int[] { NONE, FREQS, POSITIONS, PAYLOADS, OFFSETS, ALL }) {\n      postings = termsEnum.postings(null, null, flag);\n      assertEquals(-1, postings.docID());\n      assertEquals(0, postings.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n      // reuse that too\n      postings2 = termsEnum.postings(null, postings, flag);\n      assertNotNull(postings2);\n      // and it had better work\n      assertEquals(-1, postings2.docID());\n      assertEquals(0, postings2.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings2.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    }\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsOnly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(null);\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    // sugar method (FREQS)\n    PostingsEnum postings = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"));\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(1, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    TermsEnum termsEnum = getOnlySegmentReader(reader).terms(\"foo\").iterator(null);\n    termsEnum.seekExact(new BytesRef(\"bar\"));\n    PostingsEnum postings2 = termsEnum.postings(null, postings);\n    assertNotNull(postings2);\n    assertSame(postings, postings2);\n    // and it had better work\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(1, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    assertEquals(1, docsOnly.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(null, docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    assertSame(docsOnly, docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    assertEquals(1, docsOnly2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // we did not index positions\n    PostingsEnum docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.POSITIONS);\n    assertNull(docsAndPositionsEnum);\n    \n    // we did not index positions\n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.PAYLOADS);\n    assertNull(docsAndPositionsEnum);\n    \n    // we did not index positions\n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.OFFSETS);\n    assertNull(docsAndPositionsEnum);\n    \n    // we did not index positions\n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.ALL);\n    assertNull(docsAndPositionsEnum);\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testPostingsEnumFreqs().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testPostingsEnumFreqs().mjava","sourceNew":"  public void testPostingsEnumFreqs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"bar bar\", ft));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    Terms terms = getOnlySegmentReader(reader).getTermVector(0, \"foo\");\n    TermsEnum termsEnum = terms.iterator();\n    assertNotNull(termsEnum);\n    assertEquals(new BytesRef(\"bar\"), termsEnum.next());\n    \n    // simple use (FREQS)\n    PostingsEnum postings = termsEnum.postings(null, null);\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    PostingsEnum postings2 = termsEnum.postings(null, postings);\n    assertNotNull(postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(null, docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for any flags: ok\n    for (int flag : new int[] { NONE, FREQS, POSITIONS, PAYLOADS, OFFSETS, ALL }) {\n      postings = termsEnum.postings(null, null, flag);\n      assertEquals(-1, postings.docID());\n      assertEquals(0, postings.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n      // reuse that too\n      postings2 = termsEnum.postings(null, postings, flag);\n      assertNotNull(postings2);\n      // and it had better work\n      assertEquals(-1, postings2.docID());\n      assertEquals(0, postings2.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings2.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    }\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPostingsEnumFreqs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"bar bar\", ft));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    Terms terms = getOnlySegmentReader(reader).getTermVector(0, \"foo\");\n    TermsEnum termsEnum = terms.iterator(null);\n    assertNotNull(termsEnum);\n    assertEquals(new BytesRef(\"bar\"), termsEnum.next());\n    \n    // simple use (FREQS)\n    PostingsEnum postings = termsEnum.postings(null, null);\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    PostingsEnum postings2 = termsEnum.postings(null, postings);\n    assertNotNull(postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(null, docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for any flags: ok\n    for (int flag : new int[] { NONE, FREQS, POSITIONS, PAYLOADS, OFFSETS, ALL }) {\n      postings = termsEnum.postings(null, null, flag);\n      assertEquals(-1, postings.docID());\n      assertEquals(0, postings.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n      // reuse that too\n      postings2 = termsEnum.postings(null, postings, flag);\n      assertNotNull(postings2);\n      // and it had better work\n      assertEquals(-1, postings2.docID());\n      assertEquals(0, postings2.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings2.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    }\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testPostingsEnumFreqs().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testPostingsEnumFreqs().mjava","sourceNew":"  public void testPostingsEnumFreqs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"bar bar\", ft));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    Terms terms = getOnlySegmentReader(reader).getTermVector(0, \"foo\");\n    TermsEnum termsEnum = terms.iterator();\n    assertNotNull(termsEnum);\n    assertEquals(new BytesRef(\"bar\"), termsEnum.next());\n    \n    // simple use (FREQS)\n    PostingsEnum postings = termsEnum.postings(null);\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    PostingsEnum postings2 = termsEnum.postings(postings);\n    assertNotNull(postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for any flags: ok\n    for (int flag : new int[] { NONE, FREQS, POSITIONS, PAYLOADS, OFFSETS, ALL }) {\n      postings = termsEnum.postings(null, flag);\n      assertEquals(-1, postings.docID());\n      assertEquals(0, postings.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n      // reuse that too\n      postings2 = termsEnum.postings(postings, flag);\n      assertNotNull(postings2);\n      // and it had better work\n      assertEquals(-1, postings2.docID());\n      assertEquals(0, postings2.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings2.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    }\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPostingsEnumFreqs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"bar bar\", ft));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    Terms terms = getOnlySegmentReader(reader).getTermVector(0, \"foo\");\n    TermsEnum termsEnum = terms.iterator();\n    assertNotNull(termsEnum);\n    assertEquals(new BytesRef(\"bar\"), termsEnum.next());\n    \n    // simple use (FREQS)\n    PostingsEnum postings = termsEnum.postings(null, null);\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    PostingsEnum postings2 = termsEnum.postings(null, postings);\n    assertNotNull(postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(null, docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for any flags: ok\n    for (int flag : new int[] { NONE, FREQS, POSITIONS, PAYLOADS, OFFSETS, ALL }) {\n      postings = termsEnum.postings(null, null, flag);\n      assertEquals(-1, postings.docID());\n      assertEquals(0, postings.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n      // reuse that too\n      postings2 = termsEnum.postings(null, postings, flag);\n      assertNotNull(postings2);\n      // and it had better work\n      assertEquals(-1, postings2.docID());\n      assertEquals(0, postings2.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings2.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    }\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testPostingsEnumFreqs().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testPostingsEnumFreqs().mjava","sourceNew":"  public void testPostingsEnumFreqs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"bar bar\", ft));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw);\n    \n    Terms terms = getOnlySegmentReader(reader).getTermVector(0, \"foo\");\n    TermsEnum termsEnum = terms.iterator();\n    assertNotNull(termsEnum);\n    assertEquals(new BytesRef(\"bar\"), termsEnum.next());\n    \n    // simple use (FREQS)\n    PostingsEnum postings = termsEnum.postings(null);\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    PostingsEnum postings2 = termsEnum.postings(postings);\n    assertNotNull(postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for any flags: ok\n    for (int flag : new int[] { NONE, FREQS, POSITIONS, PAYLOADS, OFFSETS, ALL }) {\n      postings = termsEnum.postings(null, flag);\n      assertEquals(-1, postings.docID());\n      assertEquals(0, postings.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n      // reuse that too\n      postings2 = termsEnum.postings(postings, flag);\n      assertNotNull(postings2);\n      // and it had better work\n      assertEquals(-1, postings2.docID());\n      assertEquals(0, postings2.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings2.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    }\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPostingsEnumFreqs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"bar bar\", ft));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    Terms terms = getOnlySegmentReader(reader).getTermVector(0, \"foo\");\n    TermsEnum termsEnum = terms.iterator();\n    assertNotNull(termsEnum);\n    assertEquals(new BytesRef(\"bar\"), termsEnum.next());\n    \n    // simple use (FREQS)\n    PostingsEnum postings = termsEnum.postings(null);\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    PostingsEnum postings2 = termsEnum.postings(postings);\n    assertNotNull(postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for any flags: ok\n    for (int flag : new int[] { NONE, FREQS, POSITIONS, PAYLOADS, OFFSETS, ALL }) {\n      postings = termsEnum.postings(null, flag);\n      assertEquals(-1, postings.docID());\n      assertEquals(0, postings.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n      // reuse that too\n      postings2 = termsEnum.postings(postings, flag);\n      assertNotNull(postings2);\n      // and it had better work\n      assertEquals(-1, postings2.docID());\n      assertEquals(0, postings2.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings2.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    }\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testPostingsEnumFreqs().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testPostingsEnumFreqs().mjava","sourceNew":"  public void testPostingsEnumFreqs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"bar bar\", ft));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw);\n    \n    Terms terms = getOnlyLeafReader(reader).getTermVector(0, \"foo\");\n    TermsEnum termsEnum = terms.iterator();\n    assertNotNull(termsEnum);\n    assertEquals(new BytesRef(\"bar\"), termsEnum.next());\n    \n    // simple use (FREQS)\n    PostingsEnum postings = termsEnum.postings(null);\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    PostingsEnum postings2 = termsEnum.postings(postings);\n    assertNotNull(postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for any flags: ok\n    for (int flag : new int[] { NONE, FREQS, POSITIONS, PAYLOADS, OFFSETS, ALL }) {\n      postings = termsEnum.postings(null, flag);\n      assertEquals(-1, postings.docID());\n      assertEquals(0, postings.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n      // reuse that too\n      postings2 = termsEnum.postings(postings, flag);\n      assertNotNull(postings2);\n      // and it had better work\n      assertEquals(-1, postings2.docID());\n      assertEquals(0, postings2.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings2.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    }\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPostingsEnumFreqs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"bar bar\", ft));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw);\n    \n    Terms terms = getOnlySegmentReader(reader).getTermVector(0, \"foo\");\n    TermsEnum termsEnum = terms.iterator();\n    assertNotNull(termsEnum);\n    assertEquals(new BytesRef(\"bar\"), termsEnum.next());\n    \n    // simple use (FREQS)\n    PostingsEnum postings = termsEnum.postings(null);\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    PostingsEnum postings2 = termsEnum.postings(postings);\n    assertNotNull(postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for any flags: ok\n    for (int flag : new int[] { NONE, FREQS, POSITIONS, PAYLOADS, OFFSETS, ALL }) {\n      postings = termsEnum.postings(null, flag);\n      assertEquals(-1, postings.docID());\n      assertEquals(0, postings.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n      // reuse that too\n      postings2 = termsEnum.postings(postings, flag);\n      assertNotNull(postings2);\n      // and it had better work\n      assertEquals(-1, postings2.docID());\n      assertEquals(0, postings2.nextDoc());\n      if (flag != NONE) {\n        assertEquals(2, postings2.freq());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    }\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["8f86136183a1cb9d265c318e2f06c51cb5017342"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["2a1862266772deb28cdcb7d996b64d2177022687"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"2a1862266772deb28cdcb7d996b64d2177022687":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f86136183a1cb9d265c318e2f06c51cb5017342"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f86136183a1cb9d265c318e2f06c51cb5017342":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["2a1862266772deb28cdcb7d996b64d2177022687"],"2a1862266772deb28cdcb7d996b64d2177022687":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b4e3cd382d0d075a0f1725649c084bb6510c483","8f86136183a1cb9d265c318e2f06c51cb5017342"],"8f86136183a1cb9d265c318e2f06c51cb5017342":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}