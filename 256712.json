{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#popPendingSeek().mjava","commits":[{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#popPendingSeek().mjava","pathOld":"/dev/null","sourceNew":"    private boolean popPendingSeek() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check pop newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      // if a .next() has advanced beyond the\n      // after-surrogates range we had last seeked to, we\n      // must seek back to the start and resume .next from\n      // there.  this pops the pending seek off the stack.\n      final Term t = termEnum.term();\n      if (surrogateSeekUpto > 0) {\n        final int seekPrefix = surrogateSeekPending[surrogateSeekUpto-1];\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seekPrefix=\" + seekPrefix);\n        }\n        if (newSuffixStart < seekPrefix) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = UnicodeUtil.UNI_SUR_HIGH_START;\n          Term t2 = protoTerm.createTerm(new String(pendingPrefix, 0, 1+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    do pop; seek back to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          surrogateDidSeekBack[surrogateSeekUpto-1] = true;\n\n          // +2 because we don't want to re-check the\n          // surrogates we just seek'd back to\n          newSuffixStart = seekPrefix + 2;\n          return true;\n        } else if (newSuffixStart == seekPrefix && surrogateDidSeekBack[surrogateSeekUpto-1] && t != null && t.field() == fieldInfo.name && t.text().charAt(seekPrefix) > UnicodeUtil.UNI_SUR_LOW_END) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = 0xffff;\n          Term t2 = protoTerm.createTerm(new String(pendingPrefix, 0, 1+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    finish pop; seek fwd to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found term=\" + (termEnum.term() == null ? null : UnicodeUtil.toHexString(termEnum.term().text())));\n          }\n          surrogateSeekUpto--;\n\n          if (termEnum.term() == null || termEnum.term().field() != fieldInfo.name) {\n            // force pop\n            newSuffixStart = -1;\n          } else {\n            newSuffixStart = termEnum.newSuffixStart;\n          }\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#popPendingSeek().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#popPendingSeek().mjava","sourceNew":"    private boolean popPendingSeek() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check pop newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      // if a .next() has advanced beyond the\n      // after-surrogates range we had last seeked to, we\n      // must seek back to the start and resume .next from\n      // there.  this pops the pending seek off the stack.\n      final Term t = termEnum.term();\n      if (surrogateSeekUpto > 0) {\n        final int seekPrefix = surrogateSeekPending[surrogateSeekUpto-1];\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seekPrefix=\" + seekPrefix);\n        }\n        if (newSuffixStart < seekPrefix) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = UnicodeUtil.UNI_SUR_HIGH_START;\n          pendingPrefix[1+seekPrefix] = UnicodeUtil.UNI_SUR_LOW_START;\n          Term t2 = protoTerm.createTerm(new BytesRef(pendingPrefix, 0, 2+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    do pop; seek back to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          surrogateDidSeekBack[surrogateSeekUpto-1] = true;\n\n          // +2 because we don't want to re-check the\n          // surrogates we just seek'd back to\n          newSuffixStart = seekPrefix + 2;\n          return true;\n        } else if (newSuffixStart == seekPrefix && surrogateDidSeekBack[surrogateSeekUpto-1] && t != null && t.field() == fieldInfo.name && t.text().charAt(seekPrefix) > UnicodeUtil.UNI_SUR_LOW_END) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = 0xffff;\n          Term t2 = protoTerm.createTerm(new BytesRef(pendingPrefix, 0, 1+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    finish pop; seek fwd to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found term=\" + (termEnum.term() == null ? null : UnicodeUtil.toHexString(termEnum.term().text())));\n          }\n          surrogateSeekUpto--;\n\n          if (termEnum.term() == null || termEnum.term().field() != fieldInfo.name) {\n            // force pop\n            newSuffixStart = -1;\n          } else {\n            newSuffixStart = termEnum.newSuffixStart;\n          }\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":"    private boolean popPendingSeek() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check pop newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      // if a .next() has advanced beyond the\n      // after-surrogates range we had last seeked to, we\n      // must seek back to the start and resume .next from\n      // there.  this pops the pending seek off the stack.\n      final Term t = termEnum.term();\n      if (surrogateSeekUpto > 0) {\n        final int seekPrefix = surrogateSeekPending[surrogateSeekUpto-1];\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seekPrefix=\" + seekPrefix);\n        }\n        if (newSuffixStart < seekPrefix) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = UnicodeUtil.UNI_SUR_HIGH_START;\n          Term t2 = protoTerm.createTerm(new String(pendingPrefix, 0, 1+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    do pop; seek back to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          surrogateDidSeekBack[surrogateSeekUpto-1] = true;\n\n          // +2 because we don't want to re-check the\n          // surrogates we just seek'd back to\n          newSuffixStart = seekPrefix + 2;\n          return true;\n        } else if (newSuffixStart == seekPrefix && surrogateDidSeekBack[surrogateSeekUpto-1] && t != null && t.field() == fieldInfo.name && t.text().charAt(seekPrefix) > UnicodeUtil.UNI_SUR_LOW_END) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = 0xffff;\n          Term t2 = protoTerm.createTerm(new String(pendingPrefix, 0, 1+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    finish pop; seek fwd to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found term=\" + (termEnum.term() == null ? null : UnicodeUtil.toHexString(termEnum.term().text())));\n          }\n          surrogateSeekUpto--;\n\n          if (termEnum.term() == null || termEnum.term().field() != fieldInfo.name) {\n            // force pop\n            newSuffixStart = -1;\n          } else {\n            newSuffixStart = termEnum.newSuffixStart;\n          }\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#popPendingSeek().mjava","pathOld":"/dev/null","sourceNew":"    private boolean popPendingSeek() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check pop newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      // if a .next() has advanced beyond the\n      // after-surrogates range we had last seeked to, we\n      // must seek back to the start and resume .next from\n      // there.  this pops the pending seek off the stack.\n      final Term t = termEnum.term();\n      if (surrogateSeekUpto > 0) {\n        final int seekPrefix = surrogateSeekPending[surrogateSeekUpto-1];\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seekPrefix=\" + seekPrefix);\n        }\n        if (newSuffixStart < seekPrefix) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = UnicodeUtil.UNI_SUR_HIGH_START;\n          pendingPrefix[1+seekPrefix] = UnicodeUtil.UNI_SUR_LOW_START;\n          Term t2 = protoTerm.createTerm(new BytesRef(pendingPrefix, 0, 2+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    do pop; seek back to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          surrogateDidSeekBack[surrogateSeekUpto-1] = true;\n\n          // +2 because we don't want to re-check the\n          // surrogates we just seek'd back to\n          newSuffixStart = seekPrefix + 2;\n          return true;\n        } else if (newSuffixStart == seekPrefix && surrogateDidSeekBack[surrogateSeekUpto-1] && t != null && t.field() == fieldInfo.name && t.text().charAt(seekPrefix) > UnicodeUtil.UNI_SUR_LOW_END) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = 0xffff;\n          Term t2 = protoTerm.createTerm(new BytesRef(pendingPrefix, 0, 1+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    finish pop; seek fwd to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found term=\" + (termEnum.term() == null ? null : UnicodeUtil.toHexString(termEnum.term().text())));\n          }\n          surrogateSeekUpto--;\n\n          if (termEnum.term() == null || termEnum.term().field() != fieldInfo.name) {\n            // force pop\n            newSuffixStart = -1;\n          } else {\n            newSuffixStart = termEnum.newSuffixStart;\n          }\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#popPendingSeek().mjava","sourceNew":null,"sourceOld":"    private boolean popPendingSeek() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check pop newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      // if a .next() has advanced beyond the\n      // after-surrogates range we had last seeked to, we\n      // must seek back to the start and resume .next from\n      // there.  this pops the pending seek off the stack.\n      final Term t = termEnum.term();\n      if (surrogateSeekUpto > 0) {\n        final int seekPrefix = surrogateSeekPending[surrogateSeekUpto-1];\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seekPrefix=\" + seekPrefix);\n        }\n        if (newSuffixStart < seekPrefix) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = UnicodeUtil.UNI_SUR_HIGH_START;\n          pendingPrefix[1+seekPrefix] = UnicodeUtil.UNI_SUR_LOW_START;\n          Term t2 = protoTerm.createTerm(new BytesRef(pendingPrefix, 0, 2+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    do pop; seek back to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          surrogateDidSeekBack[surrogateSeekUpto-1] = true;\n\n          // +2 because we don't want to re-check the\n          // surrogates we just seek'd back to\n          newSuffixStart = seekPrefix + 2;\n          return true;\n        } else if (newSuffixStart == seekPrefix && surrogateDidSeekBack[surrogateSeekUpto-1] && t != null && t.field() == fieldInfo.name && t.text().charAt(seekPrefix) > UnicodeUtil.UNI_SUR_LOW_END) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = 0xffff;\n          Term t2 = protoTerm.createTerm(new BytesRef(pendingPrefix, 0, 1+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    finish pop; seek fwd to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found term=\" + (termEnum.term() == null ? null : UnicodeUtil.toHexString(termEnum.term().text())));\n          }\n          surrogateSeekUpto--;\n\n          if (termEnum.term() == null || termEnum.term().field() != fieldInfo.name) {\n            // force pop\n            newSuffixStart = -1;\n          } else {\n            newSuffixStart = termEnum.newSuffixStart;\n          }\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#popPendingSeek().mjava","sourceNew":null,"sourceOld":"    private boolean popPendingSeek() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check pop newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      // if a .next() has advanced beyond the\n      // after-surrogates range we had last seeked to, we\n      // must seek back to the start and resume .next from\n      // there.  this pops the pending seek off the stack.\n      final Term t = termEnum.term();\n      if (surrogateSeekUpto > 0) {\n        final int seekPrefix = surrogateSeekPending[surrogateSeekUpto-1];\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seekPrefix=\" + seekPrefix);\n        }\n        if (newSuffixStart < seekPrefix) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = UnicodeUtil.UNI_SUR_HIGH_START;\n          pendingPrefix[1+seekPrefix] = UnicodeUtil.UNI_SUR_LOW_START;\n          Term t2 = protoTerm.createTerm(new BytesRef(pendingPrefix, 0, 2+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    do pop; seek back to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          surrogateDidSeekBack[surrogateSeekUpto-1] = true;\n\n          // +2 because we don't want to re-check the\n          // surrogates we just seek'd back to\n          newSuffixStart = seekPrefix + 2;\n          return true;\n        } else if (newSuffixStart == seekPrefix && surrogateDidSeekBack[surrogateSeekUpto-1] && t != null && t.field() == fieldInfo.name && t.text().charAt(seekPrefix) > UnicodeUtil.UNI_SUR_LOW_END) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = 0xffff;\n          Term t2 = protoTerm.createTerm(new BytesRef(pendingPrefix, 0, 1+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    finish pop; seek fwd to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found term=\" + (termEnum.term() == null ? null : UnicodeUtil.toHexString(termEnum.term().text())));\n          }\n          surrogateSeekUpto--;\n\n          if (termEnum.term() == null || termEnum.term().field() != fieldInfo.name) {\n            // force pop\n            newSuffixStart = -1;\n          } else {\n            newSuffixStart = termEnum.newSuffixStart;\n          }\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#popPendingSeek().mjava","sourceNew":null,"sourceOld":"    private boolean popPendingSeek() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  check pop newSuffix=\" + newSuffixStart + \" stack=\" + getStack());\n      }\n      // if a .next() has advanced beyond the\n      // after-surrogates range we had last seeked to, we\n      // must seek back to the start and resume .next from\n      // there.  this pops the pending seek off the stack.\n      final Term t = termEnum.term();\n      if (surrogateSeekUpto > 0) {\n        final int seekPrefix = surrogateSeekPending[surrogateSeekUpto-1];\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seekPrefix=\" + seekPrefix);\n        }\n        if (newSuffixStart < seekPrefix) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = UnicodeUtil.UNI_SUR_HIGH_START;\n          pendingPrefix[1+seekPrefix] = UnicodeUtil.UNI_SUR_LOW_START;\n          Term t2 = protoTerm.createTerm(new BytesRef(pendingPrefix, 0, 2+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    do pop; seek back to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          surrogateDidSeekBack[surrogateSeekUpto-1] = true;\n\n          // +2 because we don't want to re-check the\n          // surrogates we just seek'd back to\n          newSuffixStart = seekPrefix + 2;\n          return true;\n        } else if (newSuffixStart == seekPrefix && surrogateDidSeekBack[surrogateSeekUpto-1] && t != null && t.field() == fieldInfo.name && t.text().charAt(seekPrefix) > UnicodeUtil.UNI_SUR_LOW_END) {\n          assert pendingPrefix != null;\n          assert pendingPrefix.length > seekPrefix;\n          pendingPrefix[seekPrefix] = 0xffff;\n          Term t2 = protoTerm.createTerm(new BytesRef(pendingPrefix, 0, 1+seekPrefix));\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    finish pop; seek fwd to \" + UnicodeUtil.toHexString(t2.text()));\n          }\n          getTermsDict().seekEnum(termEnum, t2);\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    found term=\" + (termEnum.term() == null ? null : UnicodeUtil.toHexString(termEnum.term().text())));\n          }\n          surrogateSeekUpto--;\n\n          if (termEnum.term() == null || termEnum.term().field() != fieldInfo.name) {\n            // force pop\n            newSuffixStart = -1;\n          } else {\n            newSuffixStart = termEnum.newSuffixStart;\n          }\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["08932c793647a36953d1816b1060121f48820d3f"],"08932c793647a36953d1816b1060121f48820d3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b103252dee6afa1b6d7a622c773d178788eb85a"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57","5f4e87790277826a2aea119328600dfb07761f32"],"08932c793647a36953d1816b1060121f48820d3f":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3242a09f703274d3b9283f2064a1a33064b53a1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}