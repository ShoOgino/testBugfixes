{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum#SlowCollatedTermRangeTermsEnum(TermsEnum,String,String,boolean,boolean,Collator).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum#SlowCollatedTermRangeTermsEnum(TermsEnum,String,String,boolean,boolean,Collator).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum#SlowCollatedTermRangeTermsEnum(TermsEnum,String,String,boolean,boolean,Collator).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public SlowCollatedTermRangeTermsEnum(TermsEnum tenum, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    super(tenum);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n\n    // TODO: optimize\n    BytesRef startBytesRef = new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public SlowCollatedTermRangeTermsEnum(TermsEnum tenum, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    super(tenum);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n\n    // TODO: optimize\n    BytesRef startBytesRef = new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum#SlowCollatedTermRangeTermsEnum(TermsEnum,String,String,boolean,boolean,Collator).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum#SlowCollatedTermRangeTermsEnum(TermsEnum,String,String,boolean,boolean,Collator).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   */\n  public SlowCollatedTermRangeTermsEnum(TermsEnum tenum, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) {\n    super(tenum);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n\n    // TODO: optimize\n    BytesRef startBytesRef = new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public SlowCollatedTermRangeTermsEnum(TermsEnum tenum, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    super(tenum);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n\n    // TODO: optimize\n    BytesRef startBytesRef = new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum#SlowCollatedTermRangeTermsEnum(TermsEnum,String,String,boolean,boolean,Collator).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum#SlowCollatedTermRangeTermsEnum(TermsEnum,String,String,boolean,boolean,Collator).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   */\n  public SlowCollatedTermRangeTermsEnum(TermsEnum tenum, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) {\n    super(tenum);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n\n    // TODO: optimize\n    BytesRef startBytesRef = new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public SlowCollatedTermRangeTermsEnum(TermsEnum tenum, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    super(tenum);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n\n    // TODO: optimize\n    BytesRef startBytesRef = new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum#SlowCollatedTermRangeTermsEnum(TermsEnum,String,String,boolean,boolean,Collator).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum#SlowCollatedTermRangeTermsEnum(TermsEnum,String,String,boolean,boolean,Collator).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum source of the terms to enumerate.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   */\n  public SlowCollatedTermRangeTermsEnum(TermsEnum tenum, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) {\n    super(tenum);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n\n    // TODO: optimize\n    BytesRef startBytesRef = new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   */\n  public SlowCollatedTermRangeTermsEnum(TermsEnum tenum, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) {\n    super(tenum);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n\n    // TODO: optimize\n    BytesRef startBytesRef = new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59cae262d4251e10e2a034b17c45776f6b4c7e68","date":1424712773,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum#SlowCollatedTermRangeTermsEnum(TermsEnum,String,String,boolean,boolean,Collator).mjava","sourceNew":null,"sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum source of the terms to enumerate.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   */\n  public SlowCollatedTermRangeTermsEnum(TermsEnum tenum, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) {\n    super(tenum);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n\n    // TODO: optimize\n    BytesRef startBytesRef = new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59cae262d4251e10e2a034b17c45776f6b4c7e68":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59cae262d4251e10e2a034b17c45776f6b4c7e68"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["59cae262d4251e10e2a034b17c45776f6b4c7e68"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"59cae262d4251e10e2a034b17c45776f6b4c7e68":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}