{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","commits":[{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    eventContextRef.set(null);\n    this.path = \"/admin/autoscaling\";\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 3},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e60d2470ddb8ba7812792045388fe6936ea6adc","date":1498551379,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    eventContextRef.set(null);\n    this.path = \"/admin/autoscaling\";\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 3},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    eventContextRef.set(null);\n    this.path = \"/admin/autoscaling\";\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 3},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"face217c60f59b356129804dd0f7508779078fe3","date":1498692025,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n    this.path = \"/admin/autoscaling\";\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 3},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    eventContextRef.set(null);\n    this.path = \"/admin/autoscaling\";\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 3},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7427c059f8ca782712a1bb2e67ff3a56c6d20162","date":1499216619,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 3},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n    this.path = \"/admin/autoscaling\";\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 3},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dedb25ff3e9aec15179700ba9e9d2d7b2e70af69","date":1499219089,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 3},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n    this.path = \"/admin/autoscaling\";\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 3},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cc58dbf9573e66a3054c7c372862b8e5a77a9da","date":1504796681,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testSearchRate\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testSearchRate hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4e412fed1b23292038553fbe85fe61cd7aa8472","date":1505751927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testSearchRate\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testSearchRate hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e9ae2fb2f75e4dc95285c6fa084a21034436cf1","date":1507109084,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(Charsets.UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e46ef1a2b9cf8410947a87a43aba2b400394e773","date":1517224576,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeLost hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeAdded\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeAdded hasn't run already\n    }\n    try {\n      CollectionAdminRequest.deleteCollection(\"testNodeWithMultipleReplicasLost\").process(solrClient);\n    } catch (Exception e) {\n      // expected if testNodeWithMultipleReplicasLost hasn't run already\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"155b2aeb14a205060a557e1b67bdf30f8f48ec02","date":1522430818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa5e39259dfd4a68287c824d3b7e1bc9097dc895","date":1522505041,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6","date":1536060944,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    reset();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            JettySolrRunner j = cluster.stopJettySolrRunner(i1);\n            cluster.waitForJettyToStop(j);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    reset();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            cluster.stopJettySolrRunner(i1);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    reset();\n  }\n\n","bugFix":["face217c60f59b356129804dd0f7508779078fe3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            JettySolrRunner j = cluster.stopJettySolrRunner(i1);\n            cluster.waitForJettyToStop(j);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    reset();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            JettySolrRunner j = cluster.stopJettySolrRunner(i1);\n            cluster.waitForJettyToStop(j);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            JettySolrRunner j = cluster.stopJettySolrRunner(i1);\n            cluster.waitForJettyToStop(j);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    reset();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            JettySolrRunner j = cluster.stopJettySolrRunner(i1);\n            cluster.waitForJettyToStop(j);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#setUp().mjava","sourceNew":null,"sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // remove everything from autoscaling.json in ZK\n    zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(UTF_8), true);\n\n    if (cluster.getJettySolrRunners().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n        List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n        for (int i1 = 0; i1 < jettySolrRunners.size(); i1++) {\n          JettySolrRunner jettySolrRunner = jettySolrRunners.get(i1);\n          if (jettySolrRunner == randomJetty) {\n            JettySolrRunner j = cluster.stopJettySolrRunner(i1);\n            cluster.waitForJettyToStop(j);\n            break;\n          }\n        }\n      }\n    }\n\n    cluster.deleteAllCollections();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e46ef1a2b9cf8410947a87a43aba2b400394e773":["4e9ae2fb2f75e4dc95285c6fa084a21034436cf1"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a4e412fed1b23292038553fbe85fe61cd7aa8472"],"5e60d2470ddb8ba7812792045388fe6936ea6adc":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"7427c059f8ca782712a1bb2e67ff3a56c6d20162":["face217c60f59b356129804dd0f7508779078fe3"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"face217c60f59b356129804dd0f7508779078fe3":["5e60d2470ddb8ba7812792045388fe6936ea6adc"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["e46ef1a2b9cf8410947a87a43aba2b400394e773","155b2aeb14a205060a557e1b67bdf30f8f48ec02"],"1cc58dbf9573e66a3054c7c372862b8e5a77a9da":["e0d9c88546c1a130d50b56981790d87a308daffd"],"a4e412fed1b23292038553fbe85fe61cd7aa8472":["1cc58dbf9573e66a3054c7c372862b8e5a77a9da"],"155b2aeb14a205060a557e1b67bdf30f8f48ec02":["e46ef1a2b9cf8410947a87a43aba2b400394e773"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["89948af0461fead48f44ba8fb7866f107ce83f22"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"4e9ae2fb2f75e4dc95285c6fa084a21034436cf1":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0d9c88546c1a130d50b56981790d87a308daffd":["face217c60f59b356129804dd0f7508779078fe3","dedb25ff3e9aec15179700ba9e9d2d7b2e70af69"],"dedb25ff3e9aec15179700ba9e9d2d7b2e70af69":["7427c059f8ca782712a1bb2e67ff3a56c6d20162"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"e46ef1a2b9cf8410947a87a43aba2b400394e773":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895","155b2aeb14a205060a557e1b67bdf30f8f48ec02"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"5e60d2470ddb8ba7812792045388fe6936ea6adc":["face217c60f59b356129804dd0f7508779078fe3"],"7427c059f8ca782712a1bb2e67ff3a56c6d20162":["dedb25ff3e9aec15179700ba9e9d2d7b2e70af69"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"face217c60f59b356129804dd0f7508779078fe3":["7427c059f8ca782712a1bb2e67ff3a56c6d20162","e0d9c88546c1a130d50b56981790d87a308daffd"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"1cc58dbf9573e66a3054c7c372862b8e5a77a9da":["a4e412fed1b23292038553fbe85fe61cd7aa8472"],"a4e412fed1b23292038553fbe85fe61cd7aa8472":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"155b2aeb14a205060a557e1b67bdf30f8f48ec02":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"4e9ae2fb2f75e4dc95285c6fa084a21034436cf1":["e46ef1a2b9cf8410947a87a43aba2b400394e773"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","1f6b20dc453cee198956989b90aa24bef0232bcf"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["5e60d2470ddb8ba7812792045388fe6936ea6adc"],"e0d9c88546c1a130d50b56981790d87a308daffd":["1cc58dbf9573e66a3054c7c372862b8e5a77a9da"],"560c18d71dad43d675158783c3840f8c80d6d39c":["4e9ae2fb2f75e4dc95285c6fa084a21034436cf1"],"dedb25ff3e9aec15179700ba9e9d2d7b2e70af69":["e0d9c88546c1a130d50b56981790d87a308daffd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}