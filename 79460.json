{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#transitionSorted(Transition).mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#transitionSorted(Transition).mjava","pathOld":"/dev/null","sourceNew":"  private boolean transitionSorted(Transition t) {\n\n    int upto = t.transitionUpto;\n    if (upto == states[2*t.source]) {\n      // Transition isn't initialzed yet (this is the first transition); don't check:\n      return true;\n    }\n\n    int nextDest = transitions[upto];\n    int nextMin = transitions[upto+1];\n    int nextMax = transitions[upto+2];\n    if (nextMin > t.min) {\n      return true;\n    } else if (nextMin < t.min) {\n      return false;\n    }\n\n    // Min is equal, now test max:\n    if (nextMax > t.max) {\n      return true;\n    } else if (nextMax < t.max) {\n      return false;\n    }\n\n    // Max is also equal, now test dest:\n    if (nextDest > t.dest) {\n      return true;\n    } else if (nextDest < t.dest) {\n      return false;\n    }\n\n    // We should never see fully equal transitions here:\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#transitionSorted(Transition).mjava","pathOld":"/dev/null","sourceNew":"  private boolean transitionSorted(Transition t) {\n\n    int upto = t.transitionUpto;\n    if (upto == states[2*t.source]) {\n      // Transition isn't initialzed yet (this is the first transition); don't check:\n      return true;\n    }\n\n    int nextDest = transitions[upto];\n    int nextMin = transitions[upto+1];\n    int nextMax = transitions[upto+2];\n    if (nextMin > t.min) {\n      return true;\n    } else if (nextMin < t.min) {\n      return false;\n    }\n\n    // Min is equal, now test max:\n    if (nextMax > t.max) {\n      return true;\n    } else if (nextMax < t.max) {\n      return false;\n    }\n\n    // Max is also equal, now test dest:\n    if (nextDest > t.dest) {\n      return true;\n    } else if (nextDest < t.dest) {\n      return false;\n    }\n\n    // We should never see fully equal transitions here:\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2af44fa9bd43d5df330d6438c1af390323f7d567","date":1574847240,"type":3,"author":"Benedict Jin","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#transitionSorted(Transition).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#transitionSorted(Transition).mjava","sourceNew":"  private boolean transitionSorted(Transition t) {\n\n    int upto = t.transitionUpto;\n    if (upto == states[2*t.source]) {\n      // Transition isn't initialized yet (this is the first transition); don't check:\n      return true;\n    }\n\n    int nextDest = transitions[upto];\n    int nextMin = transitions[upto+1];\n    int nextMax = transitions[upto+2];\n    if (nextMin > t.min) {\n      return true;\n    } else if (nextMin < t.min) {\n      return false;\n    }\n\n    // Min is equal, now test max:\n    if (nextMax > t.max) {\n      return true;\n    } else if (nextMax < t.max) {\n      return false;\n    }\n\n    // Max is also equal, now test dest:\n    if (nextDest > t.dest) {\n      return true;\n    } else if (nextDest < t.dest) {\n      return false;\n    }\n\n    // We should never see fully equal transitions here:\n    return false;\n  }\n\n","sourceOld":"  private boolean transitionSorted(Transition t) {\n\n    int upto = t.transitionUpto;\n    if (upto == states[2*t.source]) {\n      // Transition isn't initialzed yet (this is the first transition); don't check:\n      return true;\n    }\n\n    int nextDest = transitions[upto];\n    int nextMin = transitions[upto+1];\n    int nextMax = transitions[upto+2];\n    if (nextMin > t.min) {\n      return true;\n    } else if (nextMin < t.min) {\n      return false;\n    }\n\n    // Min is equal, now test max:\n    if (nextMax > t.max) {\n      return true;\n    } else if (nextMax < t.max) {\n      return false;\n    }\n\n    // Max is also equal, now test dest:\n    if (nextDest > t.dest) {\n      return true;\n    } else if (nextDest < t.dest) {\n      return false;\n    }\n\n    // We should never see fully equal transitions here:\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"2af44fa9bd43d5df330d6438c1af390323f7d567":["3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2af44fa9bd43d5df330d6438c1af390323f7d567"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"2af44fa9bd43d5df330d6438c1af390323f7d567":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","2af44fa9bd43d5df330d6438c1af390323f7d567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}