{"path":"lucene/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","commits":[{"id":"85dda37116c8d94fccd74dfe59f4d7fe4503e74c","date":1327234819,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicIndexReader> subReaders = new ArrayList<AtomicIndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos fieldInfos = new FieldInfos();\n    for(AtomicIndexReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicIndexReader> subReaders = new ArrayList<AtomicIndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos fieldInfos = new FieldInfos();\n    for(AtomicIndexReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos fieldInfos = new FieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicIndexReader> subReaders = new ArrayList<AtomicIndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos fieldInfos = new FieldInfos();\n    for(AtomicIndexReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos fieldInfos = new FieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos fieldInfos = new FieldInfos();\n    for(IndexReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getMergedFieldInfos(IndexReader).mjava","sourceNew":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos fieldInfos = new FieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","sourceOld":"  /** Call this to get the (merged) FieldInfos for a\n   *  composite reader */\n  public static FieldInfos getMergedFieldInfos(IndexReader reader) {\n    final List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    final FieldInfos fieldInfos = new FieldInfos();\n    for(AtomicReader subReader : subReaders) {\n      fieldInfos.add(subReader.getFieldInfos());\n    }\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85dda37116c8d94fccd74dfe59f4d7fe4503e74c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["85dda37116c8d94fccd74dfe59f4d7fe4503e74c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"85dda37116c8d94fccd74dfe59f4d7fe4503e74c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85dda37116c8d94fccd74dfe59f4d7fe4503e74c","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}