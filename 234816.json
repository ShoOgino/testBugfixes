{"path":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","commits":[{"id":"4ceaa9738cad9616d1831286111af106e13e0e4b","date":1114543820,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * Searcher#search(Query,Filter,Sort)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                                      Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c4613d31c11672fd9194bd0d30b4fa9826516205"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4613d31c11672fd9194bd0d30b4fa9826516205","date":1133473845,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * Searcher#search(Query,Filter,Sort)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * Searcher#search(Query,Filter,Sort)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                                      Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","bugFix":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  /** Search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * Searcher#search(Query,Filter,Sort)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * Searcher#search(Query,Filter,Sort)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  /** Search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   * \n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","sourceOld":"  /** Search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * Searcher#search(Query,Filter,Sort)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  /** Search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   * \n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createQueryWeight(query), filter, n, sort);\n  }\n\n","sourceOld":"  /** Search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   * \n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  /** Search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   * \n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","sourceOld":"  /** Search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   * \n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createQueryWeight(query), filter, n, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a500dd22dc0d0067549985770141cbb3f3e27e81","date":1255630939,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  /** Search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   * \n   * <p>NOTE: this does not compute scores by default.  If\n   * you need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create}\n   * and then pass that to {@link #search(Query, Filter,\n   * Collector)}.</p>\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","sourceOld":"  /** Search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   * \n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4300909ad7f715cab32c2b093a469f6b03ccc41","date":1256580262,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  /** Search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   * \n   * <p>NOTE: this does not compute scores by default; use\n   * {@link IndexSearcher#setDefaultFieldSortScoring} to\n   * enable scoring.\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","sourceOld":"  /** Search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   * \n   * <p>NOTE: this does not compute scores by default.  If\n   * you need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create}\n   * and then pass that to {@link #search(Query, Filter,\n   * Collector)}.</p>\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  /** Search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   * \n   * <p>NOTE: this does not compute scores by default; use\n   * {@link IndexSearcher#setDefaultFieldSortScoring} to\n   * enable scoring.\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","sourceOld":"  /** Search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   * \n   * <p>NOTE: this does not compute scores by default; use\n   * {@link IndexSearcher#setDefaultFieldSortScoring} to\n   * enable scoring.\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort) throws IOException {\n    return search(createWeight(query), filter, n, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"c4613d31c11672fd9194bd0d30b4fa9826516205":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"c4300909ad7f715cab32c2b093a469f6b03ccc41":["a500dd22dc0d0067549985770141cbb3f3e27e81"],"a500dd22dc0d0067549985770141cbb3f3e27e81":["fe941135bdfc28c81e20b4d21422f8726af34925"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["c4613d31c11672fd9194bd0d30b4fa9826516205"],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c4300909ad7f715cab32c2b093a469f6b03ccc41"]},"commit2Childs":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["c4613d31c11672fd9194bd0d30b4fa9826516205"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"c4613d31c11672fd9194bd0d30b4fa9826516205":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"c4300909ad7f715cab32c2b093a469f6b03ccc41":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a500dd22dc0d0067549985770141cbb3f3e27e81":["c4300909ad7f715cab32c2b093a469f6b03ccc41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"fe941135bdfc28c81e20b4d21422f8726af34925":["a500dd22dc0d0067549985770141cbb3f3e27e81"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}