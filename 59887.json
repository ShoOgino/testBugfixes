{"path":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCachingPolicy().mjava","commits":[{"id":"04c507acd0ef1ea7a7f2fcc76b99e987627a17ab","date":1444921426,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCachingPolicy().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetQueryCachingPolicy() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCachingPolicy(), searcher.getQueryCachingPolicy());\n    QueryCachingPolicy dummyPolicy = new QueryCachingPolicy() {\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        return false;\n      }\n      @Override\n      public void onUse(Query query) {}\n    };\n    searcher.setQueryCachingPolicy(dummyPolicy);\n    assertEquals(dummyPolicy, searcher.getQueryCachingPolicy());\n\n    IndexSearcher.setDefaultQueryCachingPolicy(dummyPolicy);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyPolicy, searcher.getQueryCachingPolicy());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f40dbcd244dc82447a23719db34376cdcc9cfe","date":1461323366,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCachingPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCachingPolicy().mjava","sourceNew":"  public void testGetQueryCachingPolicy() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCachingPolicy(), searcher.getQueryCachingPolicy());\n    QueryCachingPolicy dummyPolicy = new QueryCachingPolicy() {\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return false;\n      }\n      @Override\n      public void onUse(Query query) {}\n    };\n    searcher.setQueryCachingPolicy(dummyPolicy);\n    assertEquals(dummyPolicy, searcher.getQueryCachingPolicy());\n\n    IndexSearcher.setDefaultQueryCachingPolicy(dummyPolicy);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyPolicy, searcher.getQueryCachingPolicy());\n  }\n\n","sourceOld":"  public void testGetQueryCachingPolicy() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCachingPolicy(), searcher.getQueryCachingPolicy());\n    QueryCachingPolicy dummyPolicy = new QueryCachingPolicy() {\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        return false;\n      }\n      @Override\n      public void onUse(Query query) {}\n    };\n    searcher.setQueryCachingPolicy(dummyPolicy);\n    assertEquals(dummyPolicy, searcher.getQueryCachingPolicy());\n\n    IndexSearcher.setDefaultQueryCachingPolicy(dummyPolicy);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyPolicy, searcher.getQueryCachingPolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCachingPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCachingPolicy().mjava","sourceNew":"  public void testGetQueryCachingPolicy() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCachingPolicy(), searcher.getQueryCachingPolicy());\n    QueryCachingPolicy dummyPolicy = new QueryCachingPolicy() {\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return false;\n      }\n      @Override\n      public void onUse(Query query) {}\n    };\n    searcher.setQueryCachingPolicy(dummyPolicy);\n    assertEquals(dummyPolicy, searcher.getQueryCachingPolicy());\n\n    IndexSearcher.setDefaultQueryCachingPolicy(dummyPolicy);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyPolicy, searcher.getQueryCachingPolicy());\n  }\n\n","sourceOld":"  public void testGetQueryCachingPolicy() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCachingPolicy(), searcher.getQueryCachingPolicy());\n    QueryCachingPolicy dummyPolicy = new QueryCachingPolicy() {\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        return false;\n      }\n      @Override\n      public void onUse(Query query) {}\n    };\n    searcher.setQueryCachingPolicy(dummyPolicy);\n    assertEquals(dummyPolicy, searcher.getQueryCachingPolicy());\n\n    IndexSearcher.setDefaultQueryCachingPolicy(dummyPolicy);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyPolicy, searcher.getQueryCachingPolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04c507acd0ef1ea7a7f2fcc76b99e987627a17ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["04c507acd0ef1ea7a7f2fcc76b99e987627a17ab","25f40dbcd244dc82447a23719db34376cdcc9cfe"],"25f40dbcd244dc82447a23719db34376cdcc9cfe":["04c507acd0ef1ea7a7f2fcc76b99e987627a17ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"]},"commit2Childs":{"04c507acd0ef1ea7a7f2fcc76b99e987627a17ab":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","25f40dbcd244dc82447a23719db34376cdcc9cfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04c507acd0ef1ea7a7f2fcc76b99e987627a17ab"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25f40dbcd244dc82447a23719db34376cdcc9cfe":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}