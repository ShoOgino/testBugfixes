{"path":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","commits":[{"id":"00743482822ec0841b0344a37944b666e6a0228d","date":1313588663,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5145e7af5e55022ec6ba083c0aef480e49e0d3b","date":1319475599,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","bugFix":["25833e37398c5210d7bddaca9d14de45e194439a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5145e7af5e55022ec6ba083c0aef480e49e0d3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00743482822ec0841b0344a37944b666e6a0228d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c5145e7af5e55022ec6ba083c0aef480e49e0d3b":["00743482822ec0841b0344a37944b666e6a0228d"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00743482822ec0841b0344a37944b666e6a0228d"],"00743482822ec0841b0344a37944b666e6a0228d":["c5145e7af5e55022ec6ba083c0aef480e49e0d3b"],"c5145e7af5e55022ec6ba083c0aef480e49e0d3b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}