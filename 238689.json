{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String stateFilter) {\n    CloudState cloudState = this.cloudState;\n    if (cloudState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + cloudState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + coreName;\n      if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (stateFilter == null || stateFilter.equals(nodeProps.getState())) {\n          nodes.add(nodeProps);\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String stateFilter) {\n    CloudState cloudState = this.cloudState;\n    if (cloudState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + cloudState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + coreName;\n      if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (stateFilter == null || stateFilter.equals(nodeProps.getState())) {\n          nodes.add(nodeProps);\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String stateFilter) {\n    CloudState cloudState = this.cloudState;\n    if (cloudState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + cloudState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + coreName;\n      if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (stateFilter == null || stateFilter.equals(nodeProps.getState())) {\n          nodes.add(nodeProps);\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"551d5d56c2bf2378027fdecc5035c127ab9abbe5","date":1328757344,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String stateFilter) {\n    CloudState cloudState = this.cloudState;\n    if (cloudState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + cloudState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (stateFilter == null || stateFilter.equals(nodeProps.getState())) {\n          nodes.add(nodeProps);\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String stateFilter) {\n    CloudState cloudState = this.cloudState;\n    if (cloudState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + cloudState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + coreName;\n      if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (stateFilter == null || stateFilter.equals(nodeProps.getState())) {\n          nodes.add(nodeProps);\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter) {\n    return getReplicaProps(collection, shardId, thisNodeName, coreName, mustMatchStateFilter, null);\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String stateFilter) {\n    CloudState cloudState = this.cloudState;\n    if (cloudState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + cloudState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (stateFilter == null || stateFilter.equals(nodeProps.getState())) {\n          nodes.add(nodeProps);\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisCoreNodeName, String coreName, String mustMatchStateFilter) {\n    return getReplicaProps(collection, shardId, thisCoreNodeName, coreName, mustMatchStateFilter, null);\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter) {\n    return getReplicaProps(collection, shardId, thisNodeName, coreName, mustMatchStateFilter, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2d2facad861c539d42173b0e4538d64b7fda80","date":1405194900,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisCoreNodeName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisCoreNodeName, String coreName, String mustMatchStateFilter) {\n    return getReplicaProps(collection, shardId, thisCoreNodeName, coreName, mustMatchStateFilter, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisCoreNodeName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["be2d2facad861c539d42173b0e4538d64b7fda80"],"551d5d56c2bf2378027fdecc5035c127ab9abbe5":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"be2d2facad861c539d42173b0e4538d64b7fda80":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["551d5d56c2bf2378027fdecc5035c127ab9abbe5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a219f1dcad1700e84807666bdbd2b573e8de7021"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"551d5d56c2bf2378027fdecc5035c127ab9abbe5":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"be2d2facad861c539d42173b0e4538d64b7fda80":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["551d5d56c2bf2378027fdecc5035c127ab9abbe5","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["be2d2facad861c539d42173b0e4538d64b7fda80"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}