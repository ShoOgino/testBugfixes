{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOutliers().mjava","commits":[{"id":"0028dcaa058de495a7b164a874c48c6da01708f7","date":1534188111,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOutliers().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOutliers() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(id=0.0), tuple(id=1), tuple(id=2), tuple(id=3)), \" +\n        \"               b=normalDistribution(100, 5),\" +\n        \"               d=array(100, 110, 90, 99), \" +\n        \"               e=outliers(b, d, .05, .95, a),\" +\n        \"               f=outliers(b, d, .05, .95))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map> out = (List<Map>)tuples.get(0).get(\"e\");\n    assertEquals(out.size(), 2);\n    Map high = out.get(0);\n    assertEquals(((String)high.get(\"id\")), \"1\");\n\n    assertEquals(((Number)high.get(\"cumulativeProbablity\")).doubleValue(), 0.9772498680518208, 0.0 );\n    assertEquals(((Number)high.get(\"highOutlierValue\")).doubleValue(), 110.0, 0.0);\n    assertEquals(((Boolean)high.get(\"highOutlier\")).booleanValue(), true);\n\n\n    Map low = out.get(1);\n    assertEquals(((String)low.get(\"id\")), \"2\");\n    assertEquals(((Number)low.get(\"cumulativeProbablity\")).doubleValue(), 0.022750131948179167, 0.0 );\n    assertEquals(((Number)low.get(\"lowOutlierValue\")).doubleValue(), 90, 0.0);\n    assertEquals(((Boolean)low.get(\"lowOutlier\")).booleanValue(), true);\n\n\n    List<Map> out1 = (List<Map>)tuples.get(0).get(\"f\");\n    assertEquals(out1.size(), 2);\n    Map high1 = out1.get(0);\n    assert(high1.get(\"id\") == null);\n    assertEquals(((Number)high1.get(\"cumulativeProbablity\")).doubleValue(), 0.9772498680518208, 0.0 );\n    assertEquals(((Number)high1.get(\"highOutlierValue\")).doubleValue(), 110.0, 0.0);\n    assertEquals(((Boolean)high1.get(\"highOutlier\")).booleanValue(), true);\n\n\n    Map low1 = out1.get(1);\n    assert(low1.get(\"id\") == null);\n    assertEquals(((Number)low1.get(\"cumulativeProbablity\")).doubleValue(), 0.022750131948179167, 0.0 );\n    assertEquals(((Number)low1.get(\"lowOutlierValue\")).doubleValue(), 90, 0.0);\n    assertEquals(((Boolean)low1.get(\"lowOutlier\")).booleanValue(), true);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f16908806e473fa1b428038ab1be037a49695398","date":1534254634,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOutliers().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOutliers().mjava","sourceNew":"  @Test\n  public void testOutliers() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(id=0.0), tuple(id=1), tuple(id=2), tuple(id=3)), \" +\n        \"               b=normalDistribution(100, 5),\" +\n        \"               d=array(100, 110, 90, 99), \" +\n        \"               e=outliers(b, d, .05, .95, a),\" +\n        \"               f=outliers(b, d, .05, .95))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map> out = (List<Map>)tuples.get(0).get(\"e\");\n    assertEquals(out.size(), 2);\n    Map high = out.get(0);\n    assertEquals(((String)high.get(\"id\")), \"1\");\n\n    assertEquals(((Number)high.get(\"cumulativeProbablity_d\")).doubleValue(), 0.9772498680518208, 0.0 );\n    assertEquals(((Number)high.get(\"highOutlierValue_d\")).doubleValue(), 110.0, 0.0);\n\n\n    Map low = out.get(1);\n    assertEquals(((String)low.get(\"id\")), \"2\");\n    assertEquals(((Number)low.get(\"cumulativeProbablity_d\")).doubleValue(), 0.022750131948179167, 0.0 );\n    assertEquals(((Number)low.get(\"lowOutlierValue_d\")).doubleValue(), 90, 0.0);\n\n\n    List<Map> out1 = (List<Map>)tuples.get(0).get(\"f\");\n    assertEquals(out1.size(), 2);\n    Map high1 = out1.get(0);\n    assert(high1.get(\"id\") == null);\n    assertEquals(((Number)high1.get(\"cumulativeProbablity_d\")).doubleValue(), 0.9772498680518208, 0.0 );\n    assertEquals(((Number)high1.get(\"highOutlierValue_d\")).doubleValue(), 110.0, 0.0);\n\n\n    Map low1 = out1.get(1);\n    assert(low1.get(\"id\") == null);\n    assertEquals(((Number)low1.get(\"cumulativeProbablity_d\")).doubleValue(), 0.022750131948179167, 0.0 );\n    assertEquals(((Number)low1.get(\"lowOutlierValue_d\")).doubleValue(), 90, 0.0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testOutliers() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(id=0.0), tuple(id=1), tuple(id=2), tuple(id=3)), \" +\n        \"               b=normalDistribution(100, 5),\" +\n        \"               d=array(100, 110, 90, 99), \" +\n        \"               e=outliers(b, d, .05, .95, a),\" +\n        \"               f=outliers(b, d, .05, .95))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map> out = (List<Map>)tuples.get(0).get(\"e\");\n    assertEquals(out.size(), 2);\n    Map high = out.get(0);\n    assertEquals(((String)high.get(\"id\")), \"1\");\n\n    assertEquals(((Number)high.get(\"cumulativeProbablity\")).doubleValue(), 0.9772498680518208, 0.0 );\n    assertEquals(((Number)high.get(\"highOutlierValue\")).doubleValue(), 110.0, 0.0);\n    assertEquals(((Boolean)high.get(\"highOutlier\")).booleanValue(), true);\n\n\n    Map low = out.get(1);\n    assertEquals(((String)low.get(\"id\")), \"2\");\n    assertEquals(((Number)low.get(\"cumulativeProbablity\")).doubleValue(), 0.022750131948179167, 0.0 );\n    assertEquals(((Number)low.get(\"lowOutlierValue\")).doubleValue(), 90, 0.0);\n    assertEquals(((Boolean)low.get(\"lowOutlier\")).booleanValue(), true);\n\n\n    List<Map> out1 = (List<Map>)tuples.get(0).get(\"f\");\n    assertEquals(out1.size(), 2);\n    Map high1 = out1.get(0);\n    assert(high1.get(\"id\") == null);\n    assertEquals(((Number)high1.get(\"cumulativeProbablity\")).doubleValue(), 0.9772498680518208, 0.0 );\n    assertEquals(((Number)high1.get(\"highOutlierValue\")).doubleValue(), 110.0, 0.0);\n    assertEquals(((Boolean)high1.get(\"highOutlier\")).booleanValue(), true);\n\n\n    Map low1 = out1.get(1);\n    assert(low1.get(\"id\") == null);\n    assertEquals(((Number)low1.get(\"cumulativeProbablity\")).doubleValue(), 0.022750131948179167, 0.0 );\n    assertEquals(((Number)low1.get(\"lowOutlierValue\")).doubleValue(), 90, 0.0);\n    assertEquals(((Boolean)low1.get(\"lowOutlier\")).booleanValue(), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOutliers().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOutliers().mjava","sourceNew":"  @Test\n  public void testOutliers() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(id=0.0), tuple(id=1), tuple(id=2), tuple(id=3)), \" +\n        \"               b=normalDistribution(100, 5),\" +\n        \"               d=array(100, 110, 90, 99), \" +\n        \"               e=outliers(b, d, .05, .95, a),\" +\n        \"               f=outliers(b, d, .05, .95))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<Map> out = (List<Map>)tuples.get(0).get(\"e\");\n    assertEquals(out.size(), 2);\n    @SuppressWarnings({\"rawtypes\"})\n    Map high = out.get(0);\n    assertEquals(((String)high.get(\"id\")), \"1\");\n\n    assertEquals(((Number)high.get(\"cumulativeProbablity_d\")).doubleValue(), 0.9772498680518208, 0.0 );\n    assertEquals(((Number)high.get(\"highOutlierValue_d\")).doubleValue(), 110.0, 0.0);\n\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map low = out.get(1);\n    assertEquals(((String)low.get(\"id\")), \"2\");\n    assertEquals(((Number)low.get(\"cumulativeProbablity_d\")).doubleValue(), 0.022750131948179167, 0.0 );\n    assertEquals(((Number)low.get(\"lowOutlierValue_d\")).doubleValue(), 90, 0.0);\n\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<Map> out1 = (List<Map>)tuples.get(0).get(\"f\");\n    assertEquals(out1.size(), 2);\n    @SuppressWarnings({\"rawtypes\"})\n    Map high1 = out1.get(0);\n    assert(high1.get(\"id\") == null);\n    assertEquals(((Number)high1.get(\"cumulativeProbablity_d\")).doubleValue(), 0.9772498680518208, 0.0 );\n    assertEquals(((Number)high1.get(\"highOutlierValue_d\")).doubleValue(), 110.0, 0.0);\n\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map low1 = out1.get(1);\n    assert(low1.get(\"id\") == null);\n    assertEquals(((Number)low1.get(\"cumulativeProbablity_d\")).doubleValue(), 0.022750131948179167, 0.0 );\n    assertEquals(((Number)low1.get(\"lowOutlierValue_d\")).doubleValue(), 90, 0.0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testOutliers() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(id=0.0), tuple(id=1), tuple(id=2), tuple(id=3)), \" +\n        \"               b=normalDistribution(100, 5),\" +\n        \"               d=array(100, 110, 90, 99), \" +\n        \"               e=outliers(b, d, .05, .95, a),\" +\n        \"               f=outliers(b, d, .05, .95))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map> out = (List<Map>)tuples.get(0).get(\"e\");\n    assertEquals(out.size(), 2);\n    Map high = out.get(0);\n    assertEquals(((String)high.get(\"id\")), \"1\");\n\n    assertEquals(((Number)high.get(\"cumulativeProbablity_d\")).doubleValue(), 0.9772498680518208, 0.0 );\n    assertEquals(((Number)high.get(\"highOutlierValue_d\")).doubleValue(), 110.0, 0.0);\n\n\n    Map low = out.get(1);\n    assertEquals(((String)low.get(\"id\")), \"2\");\n    assertEquals(((Number)low.get(\"cumulativeProbablity_d\")).doubleValue(), 0.022750131948179167, 0.0 );\n    assertEquals(((Number)low.get(\"lowOutlierValue_d\")).doubleValue(), 90, 0.0);\n\n\n    List<Map> out1 = (List<Map>)tuples.get(0).get(\"f\");\n    assertEquals(out1.size(), 2);\n    Map high1 = out1.get(0);\n    assert(high1.get(\"id\") == null);\n    assertEquals(((Number)high1.get(\"cumulativeProbablity_d\")).doubleValue(), 0.9772498680518208, 0.0 );\n    assertEquals(((Number)high1.get(\"highOutlierValue_d\")).doubleValue(), 110.0, 0.0);\n\n\n    Map low1 = out1.get(1);\n    assert(low1.get(\"id\") == null);\n    assertEquals(((Number)low1.get(\"cumulativeProbablity_d\")).doubleValue(), 0.022750131948179167, 0.0 );\n    assertEquals(((Number)low1.get(\"lowOutlierValue_d\")).doubleValue(), 90, 0.0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["f16908806e473fa1b428038ab1be037a49695398"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f16908806e473fa1b428038ab1be037a49695398":["0028dcaa058de495a7b164a874c48c6da01708f7"],"0028dcaa058de495a7b164a874c48c6da01708f7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0028dcaa058de495a7b164a874c48c6da01708f7"],"f16908806e473fa1b428038ab1be037a49695398":["9ba1b632c041956c93c41aa1143d16a567014891"],"0028dcaa058de495a7b164a874c48c6da01708f7":["f16908806e473fa1b428038ab1be037a49695398"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}