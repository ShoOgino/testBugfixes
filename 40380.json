{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testOverwrittenMethods().mjava","commits":[{"id":"a03034a121f635bebacef74693404e3273b614a6","date":1511880957,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testOverwrittenMethods().mjava","pathOld":"/dev/null","sourceNew":"  private int testOverwrittenMethods() throws Exception {\n    int overridableMethodCount = 0;\n    for (final Method superClassMethod : LTRScoringModel.class.getDeclaredMethods()) {\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n\n      ++overridableMethodCount;\n      if (Arrays.asList(\n          \"getName\",  // the wrapper model's name is its own name i.e. _not_ the name of the wrapped model\n          \"getFeatureStoreName\", // wrapper and wrapped model feature store should match, so need not override\n          \"getParams\" // the wrapper model's params are its own params i.e. _not_ the params of the wrapped model\n          ).contains(superClassMethod.getName())) {\n        try {\n          final Method subClassMethod = WrapperModel.class.getDeclaredMethod(\n              superClassMethod.getName(),\n              superClassMethod.getParameterTypes());\n          fail(WrapperModel.class + \" need not override\\n'\" + superClassMethod + \"'\"\n               + \" but it does override\\n'\" + subClassMethod + \"'\");\n        } catch (NoSuchMethodException e) {\n          // ok\n        }\n      } else {\n        try {\n          final Method subClassMethod = WrapperModel.class.getDeclaredMethod(\n              superClassMethod.getName(),\n              superClassMethod.getParameterTypes());\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } catch (NoSuchMethodException e) {\n          fail(WrapperModel.class + \" needs to override '\" + superClassMethod + \"'\");\n        }\n      }\n    }\n    return overridableMethodCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testOverwrittenMethods().mjava","pathOld":"/dev/null","sourceNew":"  private int testOverwrittenMethods() throws Exception {\n    int overridableMethodCount = 0;\n    for (final Method superClassMethod : LTRScoringModel.class.getDeclaredMethods()) {\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n\n      ++overridableMethodCount;\n      if (Arrays.asList(\n          \"getName\",  // the wrapper model's name is its own name i.e. _not_ the name of the wrapped model\n          \"getFeatureStoreName\", // wrapper and wrapped model feature store should match, so need not override\n          \"getParams\" // the wrapper model's params are its own params i.e. _not_ the params of the wrapped model\n          ).contains(superClassMethod.getName())) {\n        try {\n          final Method subClassMethod = WrapperModel.class.getDeclaredMethod(\n              superClassMethod.getName(),\n              superClassMethod.getParameterTypes());\n          fail(WrapperModel.class + \" need not override\\n'\" + superClassMethod + \"'\"\n               + \" but it does override\\n'\" + subClassMethod + \"'\");\n        } catch (NoSuchMethodException e) {\n          // ok\n        }\n      } else {\n        try {\n          final Method subClassMethod = WrapperModel.class.getDeclaredMethod(\n              superClassMethod.getName(),\n              superClassMethod.getParameterTypes());\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } catch (NoSuchMethodException e) {\n          fail(WrapperModel.class + \" needs to override '\" + superClassMethod + \"'\");\n        }\n      }\n    }\n    return overridableMethodCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a03034a121f635bebacef74693404e3273b614a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a03034a121f635bebacef74693404e3273b614a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1aad05eeff7818b0833c02ac6b743aa72054963b"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1aad05eeff7818b0833c02ac6b743aa72054963b","a03034a121f635bebacef74693404e3273b614a6"],"a03034a121f635bebacef74693404e3273b614a6":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}