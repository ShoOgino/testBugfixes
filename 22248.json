{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    ChecksumIndexInput input = d.openChecksumInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    ChecksumIndexInput input = d.openChecksumInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    ChecksumIndexInput input = d.openChecksumInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702","1f3b037cd083286b2af89f96e768f85dcd8072d6","ffa56322f560268d9e8c21373d8a84a9bbbbb7e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b11b097f011a298f1a54676482032c2b261e26f3","date":1411698138,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","b11b097f011a298f1a54676482032c2b261e26f3"],"b11b097f011a298f1a54676482032c2b261e26f3":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6bd27530a2846413fe2d00030493c0e2d3a072"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["5f6bd27530a2846413fe2d00030493c0e2d3a072","b11b097f011a298f1a54676482032c2b261e26f3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b11b097f011a298f1a54676482032c2b261e26f3":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}