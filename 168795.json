{"path":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","pathOld":"/dev/null","sourceNew":"  public void runTest(Directory directory, boolean autoCommit, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      final int docCount = writer.docCount();\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.UN_TOKENIZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.TOKENIZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      if (!autoCommit) {\n        writer.close();\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n        writer.setMaxBufferedDocs(2);\n      }\n\n      IndexReader reader = IndexReader.open(directory);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, boolean autoCommit, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      final int docCount = writer.docCount();\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.UN_TOKENIZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.TOKENIZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      if (!autoCommit) {\n        writer.close();\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(2);\n      }\n\n      IndexReader reader = IndexReader.open(directory);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, boolean autoCommit, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      final int docCount = writer.docCount();\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.UN_TOKENIZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.TOKENIZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      if (!autoCommit) {\n        writer.close();\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n        writer.setMaxBufferedDocs(2);\n      }\n\n      IndexReader reader = IndexReader.open(directory);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, boolean autoCommit, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      final int docCount = writer.docCount();\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      if (!autoCommit) {\n        writer.close();\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(2);\n      }\n\n      IndexReader reader = IndexReader.open(directory);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, boolean autoCommit, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      final int docCount = writer.docCount();\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.UN_TOKENIZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.TOKENIZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      if (!autoCommit) {\n        writer.close();\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(2);\n      }\n\n      IndexReader reader = IndexReader.open(directory);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, boolean autoCommit, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      final int docCount = writer.docCount();\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      if (!autoCommit) {\n        writer.close();\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n        writer.setMaxBufferedDocs(2);\n      }\n\n      IndexReader reader = IndexReader.open(directory);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, boolean autoCommit, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      final int docCount = writer.docCount();\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      if (!autoCommit) {\n        writer.close();\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(2);\n      }\n\n      IndexReader reader = IndexReader.open(directory);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, boolean autoCommit, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      final int docCount = writer.docCount();\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      if (!autoCommit) {\n        writer.close();\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n        writer.setMaxBufferedDocs(2);\n      }\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, boolean autoCommit, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      final int docCount = writer.docCount();\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      if (!autoCommit) {\n        writer.close();\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n        writer.setMaxBufferedDocs(2);\n      }\n\n      IndexReader reader = IndexReader.open(directory);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, boolean autoCommit, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      final int docCount = writer.docCount();\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      if (!autoCommit) {\n        writer.close();\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n        writer.setMaxBufferedDocs(2);\n      }\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, boolean autoCommit, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      final int docCount = writer.docCount();\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      if (!autoCommit) {\n        writer.close();\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n        writer.setMaxBufferedDocs(2);\n      }\n\n      IndexReader reader = IndexReader.open(directory);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      writer.close();\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, boolean autoCommit, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      final int docCount = writer.docCount();\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      if (!autoCommit) {\n        writer.close();\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n        writer.setMaxBufferedDocs(2);\n      }\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["c4ae99f08f69aa3acba7cd75134e8447eb747559","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87c966e9308847938a7c905c2e46a56d8df788b8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"87c966e9308847938a7c905c2e46a56d8df788b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}