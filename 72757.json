{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder#templateXPath().mjava","commits":[{"id":"0428b9e5eb6ff76866de67d9bb57efef95ef23ef","date":1477560144,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder#templateXPath().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void templateXPath() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_variableXpath);\n    DIHConfiguration cfg = di.getConfig();\n\n    RequestInfo rp = new RequestInfo(null, createMap(\"command\", \"full-import\"), null);\n    List<Map<String, Object>> l = new ArrayList<>();\n    l.add(createMap(\"id\", 1, \"name\", \"iphone\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 2, \"name\", \"ipad\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 3, \"name\", \"pixel\", \"manufacturer\", \"Google\"));\n\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n\n    List<Map<String,Object>> nestedData = new ArrayList<>();\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Menlo Park, California, U.S\", \"year\", \"1998\", \"year2\", \"1998\"));\n\n    MockStringDataSource.setData(\"companies.xml\", xml_attrVariableXpath);\n    MockStringDataSource.setData(\"companies2.xml\", xml_variableXpath);\n    MockStringDataSource.setData(\"companies3.xml\", xml_variableForEach);\n\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(3, swi.docs.size());\n    for (int i = 0; i < l.size(); i++) {\n      SolrInputDocument doc = swi.docs.get(i);\n\n      Map<String, Object> map = l.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n\n      map = nestedData.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(3, di.getDocBuilder().importStatistics.docCount.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder#templateXPath().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void templateXPath() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_variableXpath);\n    DIHConfiguration cfg = di.getConfig();\n\n    RequestInfo rp = new RequestInfo(null, createMap(\"command\", \"full-import\"), null);\n    List<Map<String, Object>> l = new ArrayList<>();\n    l.add(createMap(\"id\", 1, \"name\", \"iphone\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 2, \"name\", \"ipad\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 3, \"name\", \"pixel\", \"manufacturer\", \"Google\"));\n\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n\n    List<Map<String,Object>> nestedData = new ArrayList<>();\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Menlo Park, California, U.S\", \"year\", \"1998\", \"year2\", \"1998\"));\n\n    MockStringDataSource.setData(\"companies.xml\", xml_attrVariableXpath);\n    MockStringDataSource.setData(\"companies2.xml\", xml_variableXpath);\n    MockStringDataSource.setData(\"companies3.xml\", xml_variableForEach);\n\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(3, swi.docs.size());\n    for (int i = 0; i < l.size(); i++) {\n      SolrInputDocument doc = swi.docs.get(i);\n\n      Map<String, Object> map = l.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n\n      map = nestedData.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(3, di.getDocBuilder().importStatistics.docCount.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder#templateXPath().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder#templateXPath().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void templateXPath() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_variableXpath);\n    DIHConfiguration cfg = di.getConfig();\n\n    RequestInfo rp = new RequestInfo(null, createMap(\"command\", \"full-import\"), null);\n    List<Map<String, Object>> l = new ArrayList<>();\n    l.add(createMap(\"id\", 1, \"name\", \"iphone\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 2, \"name\", \"ipad\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 3, \"name\", \"pixel\", \"manufacturer\", \"Google\"));\n\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n\n    List<Map<String,Object>> nestedData = new ArrayList<>();\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Menlo Park, California, U.S\", \"year\", \"1998\", \"year2\", \"1998\"));\n\n    MockStringDataSource.setData(\"companies.xml\", xml_attrVariableXpath);\n    MockStringDataSource.setData(\"companies2.xml\", xml_variableXpath);\n    MockStringDataSource.setData(\"companies3.xml\", xml_variableForEach);\n\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(3, swi.docs.size());\n    for (int i = 0; i < l.size(); i++) {\n      SolrInputDocument doc = swi.docs.get(i);\n\n      Map<String, Object> map = l.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n\n      map = nestedData.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(3, di.getDocBuilder().importStatistics.docCount.get());\n  }\n\n","sourceOld":"  @Test\n  public void templateXPath() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_variableXpath);\n    DIHConfiguration cfg = di.getConfig();\n\n    RequestInfo rp = new RequestInfo(null, createMap(\"command\", \"full-import\"), null);\n    List<Map<String, Object>> l = new ArrayList<>();\n    l.add(createMap(\"id\", 1, \"name\", \"iphone\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 2, \"name\", \"ipad\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 3, \"name\", \"pixel\", \"manufacturer\", \"Google\"));\n\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n\n    List<Map<String,Object>> nestedData = new ArrayList<>();\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Menlo Park, California, U.S\", \"year\", \"1998\", \"year2\", \"1998\"));\n\n    MockStringDataSource.setData(\"companies.xml\", xml_attrVariableXpath);\n    MockStringDataSource.setData(\"companies2.xml\", xml_variableXpath);\n    MockStringDataSource.setData(\"companies3.xml\", xml_variableForEach);\n\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(3, swi.docs.size());\n    for (int i = 0; i < l.size(); i++) {\n      SolrInputDocument doc = swi.docs.get(i);\n\n      Map<String, Object> map = l.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n\n      map = nestedData.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(3, di.getDocBuilder().importStatistics.docCount.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder#templateXPath().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder#templateXPath().mjava","sourceNew":"  @Test\n  public void templateXPath() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_variableXpath);\n    DIHConfiguration cfg = di.getConfig();\n\n    RequestInfo rp = new RequestInfo(null, createMap(\"command\", \"full-import\"), null);\n    List<Map<String, Object>> l = new ArrayList<>();\n    l.add(createMap(\"id\", 1, \"name\", \"iphone\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 2, \"name\", \"ipad\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 3, \"name\", \"pixel\", \"manufacturer\", \"Google\"));\n\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n\n    List<Map<String,Object>> nestedData = new ArrayList<>();\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Menlo Park, California, U.S\", \"year\", \"1998\", \"year2\", \"1998\"));\n\n    MockStringDataSource.setData(\"companies.xml\", xml_attrVariableXpath);\n    MockStringDataSource.setData(\"companies2.xml\", xml_variableXpath);\n    MockStringDataSource.setData(\"companies3.xml\", xml_variableForEach);\n\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(3, swi.docs.size());\n    for (int i = 0; i < l.size(); i++) {\n      SolrInputDocument doc = swi.docs.get(i);\n\n      Map<String, Object> map = l.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n\n      map = nestedData.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(3, di.getDocBuilder().importStatistics.docCount.get());\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void templateXPath() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_variableXpath);\n    DIHConfiguration cfg = di.getConfig();\n\n    RequestInfo rp = new RequestInfo(null, createMap(\"command\", \"full-import\"), null);\n    List<Map<String, Object>> l = new ArrayList<>();\n    l.add(createMap(\"id\", 1, \"name\", \"iphone\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 2, \"name\", \"ipad\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 3, \"name\", \"pixel\", \"manufacturer\", \"Google\"));\n\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n\n    List<Map<String,Object>> nestedData = new ArrayList<>();\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Menlo Park, California, U.S\", \"year\", \"1998\", \"year2\", \"1998\"));\n\n    MockStringDataSource.setData(\"companies.xml\", xml_attrVariableXpath);\n    MockStringDataSource.setData(\"companies2.xml\", xml_variableXpath);\n    MockStringDataSource.setData(\"companies3.xml\", xml_variableForEach);\n\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(3, swi.docs.size());\n    for (int i = 0; i < l.size(); i++) {\n      SolrInputDocument doc = swi.docs.get(i);\n\n      Map<String, Object> map = l.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n\n      map = nestedData.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(3, di.getDocBuilder().importStatistics.docCount.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder#templateXPath().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder#templateXPath().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void templateXPath() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_variableXpath);\n    DIHConfiguration cfg = di.getConfig();\n\n    RequestInfo rp = new RequestInfo(null, createMap(\"command\", \"full-import\"), null);\n    List<Map<String, Object>> l = new ArrayList<>();\n    l.add(createMap(\"id\", 1, \"name\", \"iphone\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 2, \"name\", \"ipad\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 3, \"name\", \"pixel\", \"manufacturer\", \"Google\"));\n\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n\n    List<Map<String,Object>> nestedData = new ArrayList<>();\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Menlo Park, California, U.S\", \"year\", \"1998\", \"year2\", \"1998\"));\n\n    MockStringDataSource.setData(\"companies.xml\", xml_attrVariableXpath);\n    MockStringDataSource.setData(\"companies2.xml\", xml_variableXpath);\n    MockStringDataSource.setData(\"companies3.xml\", xml_variableForEach);\n\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(3, swi.docs.size());\n    for (int i = 0; i < l.size(); i++) {\n      SolrInputDocument doc = swi.docs.get(i);\n\n      Map<String, Object> map = l.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n\n      map = nestedData.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(3, di.getDocBuilder().importStatistics.docCount.get());\n  }\n\n","sourceOld":"  @Test\n  public void templateXPath() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_variableXpath);\n    DIHConfiguration cfg = di.getConfig();\n\n    RequestInfo rp = new RequestInfo(null, createMap(\"command\", \"full-import\"), null);\n    List<Map<String, Object>> l = new ArrayList<>();\n    l.add(createMap(\"id\", 1, \"name\", \"iphone\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 2, \"name\", \"ipad\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 3, \"name\", \"pixel\", \"manufacturer\", \"Google\"));\n\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n\n    List<Map<String,Object>> nestedData = new ArrayList<>();\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Menlo Park, California, U.S\", \"year\", \"1998\", \"year2\", \"1998\"));\n\n    MockStringDataSource.setData(\"companies.xml\", xml_attrVariableXpath);\n    MockStringDataSource.setData(\"companies2.xml\", xml_variableXpath);\n    MockStringDataSource.setData(\"companies3.xml\", xml_variableForEach);\n\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(3, swi.docs.size());\n    for (int i = 0; i < l.size(); i++) {\n      SolrInputDocument doc = swi.docs.get(i);\n\n      Map<String, Object> map = l.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n\n      map = nestedData.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(3, di.getDocBuilder().importStatistics.docCount.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder#templateXPath().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void templateXPath() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_variableXpath);\n    DIHConfiguration cfg = di.getConfig();\n\n    RequestInfo rp = new RequestInfo(null, createMap(\"command\", \"full-import\"), null);\n    List<Map<String, Object>> l = new ArrayList<>();\n    l.add(createMap(\"id\", 1, \"name\", \"iphone\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 2, \"name\", \"ipad\", \"manufacturer\", \"Apple\"));\n    l.add(createMap(\"id\", 3, \"name\", \"pixel\", \"manufacturer\", \"Google\"));\n\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n\n    List<Map<String,Object>> nestedData = new ArrayList<>();\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Cupertino, California, U.S\", \"year\", \"1976\", \"year2\", \"1976\"));\n    nestedData.add(createMap(\"founded\", \"Menlo Park, California, U.S\", \"year\", \"1998\", \"year2\", \"1998\"));\n\n    MockStringDataSource.setData(\"companies.xml\", xml_attrVariableXpath);\n    MockStringDataSource.setData(\"companies2.xml\", xml_variableXpath);\n    MockStringDataSource.setData(\"companies3.xml\", xml_variableForEach);\n\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(3, swi.docs.size());\n    for (int i = 0; i < l.size(); i++) {\n      SolrInputDocument doc = swi.docs.get(i);\n\n      Map<String, Object> map = l.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n\n      map = nestedData.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(3, di.getDocBuilder().importStatistics.docCount.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["0428b9e5eb6ff76866de67d9bb57efef95ef23ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0428b9e5eb6ff76866de67d9bb57efef95ef23ef"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"0428b9e5eb6ff76866de67d9bb57efef95ef23ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","0428b9e5eb6ff76866de67d9bb57efef95ef23ef"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"0428b9e5eb6ff76866de67d9bb57efef95ef23ef":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}