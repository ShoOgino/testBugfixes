{"path":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","commits":[{"id":"8984893e6e8e4eaf80ab863dafae092a2e9b0eaa","date":1261431504,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"/dev/null","sourceNew":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    Collections.sort(mergeThreads, new CompareByMergeDocCount());\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    Collections.sort(mergeThreads, new CompareByMergeDocCount());\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    Collections.sort(mergeThreads, new CompareByMergeDocCount());\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8984893e6e8e4eaf80ab863dafae092a2e9b0eaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8984893e6e8e4eaf80ab863dafae092a2e9b0eaa"]},"commit2Childs":{"8984893e6e8e4eaf80ab863dafae092a2e9b0eaa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8984893e6e8e4eaf80ab863dafae092a2e9b0eaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}