{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"083df6f7d2115772bdcf0f53c63aa859e664c69e","date":1332809829,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","bugFix":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"044244fb346dc6965d217fce709880d0e3bc2e9f","date":1343347260,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n    try {\n      // :nocommit: refactor doCreate completley into this method - only did it this way so patch would be straight forward w/o huge amounts of indenting changes\n\n      SolrCore core = doCreate(dcore);\n      coreInitFailures.remove(name);\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        synchronized (coreInitFailures) {\n          // remove first so insertion order is updated and newest is last\n          coreInitFailures.remove(name);\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cee0d276a5aee45373d831d0328b4544eec95754","date":1343349574,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, dcore.getInstanceDir());\n      }\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController != null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n    try {\n      // :nocommit: refactor doCreate completley into this method - only did it this way so patch would be straight forward w/o huge amounts of indenting changes\n\n      SolrCore core = doCreate(dcore);\n      coreInitFailures.remove(name);\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        synchronized (coreInitFailures) {\n          // remove first so insertion order is updated and newest is last\n          coreInitFailures.remove(name);\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["46083459332303d872db23d62e641cc6165fe93c","33d70ca4ca21ddd57ae5432d9f7a999f8cbfbe83"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, dcore.getInstanceDir());\n      }\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController != null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, dcore.getInstanceDir());\n      }\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController != null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4d5fc8284faca306256427bbbb86017a32002cf","date":1347055110,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, dcore.getInstanceDir());\n      }\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController != null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to create core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, dcore.getInstanceDir());\n      }\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController != null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33d70ca4ca21ddd57ae5432d9f7a999f8cbfbe83","date":1347415425,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, dcore.getInstanceDir());\n      }\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController == null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to create core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, dcore.getInstanceDir());\n      }\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController != null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to create core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","bugFix":["cee0d276a5aee45373d831d0328b4544eec95754"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, dcore.getInstanceDir());\n      }\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController == null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to create core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, dcore.getInstanceDir());\n      }\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController == null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to create core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46083459332303d872db23d62e641cc6165fe93c","date":1351189543,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController == null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to create core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, dcore.getInstanceDir());\n      }\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController == null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to create core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","bugFix":["cee0d276a5aee45373d831d0328b4544eec95754"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController == null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to create core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, dcore.getInstanceDir());\n      }\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController == null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to create core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      if (zkController != null) {\n        return createFromZk(instanceDir, dcore);\n      } else {\n        return createFromLocal(instanceDir, dcore);\n      }\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n\n    // :TODO: would be really nice if this method wrapped any underlying errors and only threw SolrException\n\n    final String name = dcore.getName();\n    Exception failure = null;\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n      // Initialize the solr config\n      SolrResourceLoader solrLoader = null;\n      \n      SolrConfig config = null;\n      String zkConfigName = null;\n      if(zkController == null) {\n        solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n        config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n      } else {\n        try {\n          String collection = dcore.getCloudDescriptor().getCollectionName();\n          zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n          \n          zkConfigName = zkController.readConfigName(collection);\n          if (zkConfigName == null) {\n            log.error(\"Could not find config name for collection:\" + collection);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"Could not find config name for collection:\" + collection);\n          }\n          solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n          config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                       \"\", e);\n        }\n      }\n    \n      IndexSchema schema = null;\n      if (indexSchemaCache != null) {\n        if (zkController == null) {\n          File schemaFile = new File(dcore.getSchemaName());\n          if (!schemaFile.isAbsolute()) {\n            schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n                                  + File.separator + dcore.getSchemaName());\n          }\n          if (schemaFile.exists()) {\n            String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                                                                                    schemaFile.lastModified()));\n            schema = indexSchemaCache.get(key);\n            if (schema == null) {\n              log.info(\"creating new schema object for core: \" + dcore.name);\n              schema = new IndexSchema(config, dcore.getSchemaName(), null);\n              indexSchemaCache.put(key, schema);\n            } else {\n              log.info(\"re-using schema object for core: \" + dcore.name);\n            }\n          }\n        } else {\n          // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n          // Don't like this cache though - how does it empty as last modified changes?\n        }\n      }\n      if(schema == null){\n        if(zkController != null) {\n          try {\n            schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n          } catch (KeeperException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                                         \"\", e);\n          }\n        } else {\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n        }\n      }\n\n      SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n      if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n        // always kick off recovery if we are in standalone mode.\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (ParserConfigurationException e1) {\n      failure = e1;\n      throw e1;\n    } catch (IOException e2) {\n      failure = e2;\n      throw e2;\n    } catch (SAXException e3) {\n      failure = e3;\n      throw e3;\n    } catch (RuntimeException e4) {\n      failure = e4;\n      throw e4;\n    } finally {\n      if (null != failure) {\n        log.error(\"Unable to create core: \" + name, failure);\n      }\n      synchronized (coreInitFailures) {\n        // remove first so insertion order is updated and newest is last\n        coreInitFailures.remove(name);\n        if (null != failure) {\n          coreInitFailures.put(name, failure);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      if (zkController != null) {\n        return createFromZk(instanceDir, dcore);\n      } else {\n        return createFromLocal(instanceDir, dcore);\n      }\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      if (zkController != null) {\n        return createFromZk(instanceDir, dcore);\n      } else {\n        return createFromLocal(instanceDir, dcore);\n      }\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      SolrCore created = null;\n      if (zkController != null) {\n        created = createFromZk(instanceDir, dcore);\n      } else {\n        created = createFromLocal(instanceDir, dcore);\n      }\n\n      coreMaps.addCreated(created); // For persisting newly-created cores.\n      return created;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      if (zkController != null) {\n        return createFromZk(instanceDir, dcore);\n      } else {\n        return createFromLocal(instanceDir, dcore);\n      }\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","bugFix":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3278df77f7f499b55fdb79861c0641450444e7d0","date":1366238988,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n    \n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      SolrCore created = null;\n      if (zkController != null) {\n        created = createFromZk(instanceDir, dcore);\n      } else {\n        created = createFromLocal(instanceDir, dcore);\n      }\n\n      coreMaps.addCreated(created); // For persisting newly-created cores.\n      return created;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      SolrCore created = null;\n      if (zkController != null) {\n        created = createFromZk(instanceDir, dcore);\n      } else {\n        created = createFromLocal(instanceDir, dcore);\n      }\n\n      coreMaps.addCreated(created); // For persisting newly-created cores.\n      return created;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":" /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n    \n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      SolrCore created = null;\n      if (zkController != null) {\n        created = createFromZk(instanceDir, dcore);\n      } else {\n        created = createFromLocal(instanceDir, dcore);\n      }\n\n      coreMaps.addCreated(created); // For persisting newly-created cores.\n      return created;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n    \n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      SolrCore created = null;\n      if (zkController != null) {\n        created = createFromZk(instanceDir, dcore);\n      } else {\n        created = createFromLocal(instanceDir, dcore);\n      }\n\n      coreMaps.addCreated(created); // For persisting newly-created cores.\n      return created;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n    \n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      SolrCore created = null;\n      if (zkController != null) {\n        created = createFromZk(instanceDir, dcore);\n      } else {\n        created = createFromLocal(instanceDir, dcore);\n      }\n\n      coreMaps.addCreated(created); // For persisting newly-created cores.\n      return created;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","sourceOld":" /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n    \n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      SolrCore created = null;\n      if (zkController != null) {\n        created = createFromZk(instanceDir, dcore);\n      } else {\n        created = createFromLocal(instanceDir, dcore);\n      }\n\n      coreMaps.addCreated(created); // For persisting newly-created cores.\n      return created;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n    \n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      SolrCore created = null;\n      if (zkController != null) {\n        created = createFromZk(instanceDir, dcore);\n      } else {\n        created = createFromLocal(instanceDir, dcore);\n      }\n\n      solrCores.addCreated(created); // For persisting newly-created cores.\n      return created;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n    \n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      SolrCore created = null;\n      if (zkController != null) {\n        created = createFromZk(instanceDir, dcore);\n      } else {\n        created = createFromLocal(instanceDir, dcore);\n      }\n\n      coreMaps.addCreated(created); // For persisting newly-created cores.\n      return created;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n    \n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      SolrCore created = null;\n      if (zkSys.getZkController() != null) {\n        created = zkSys.createFromZk(instanceDir, dcore, loader);\n      } else {\n        created = createFromLocal(instanceDir, dcore);\n      }\n\n      solrCores.addCreated(created); // For persisting newly-created cores.\n      return created;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n    \n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      SolrCore created = null;\n      if (zkController != null) {\n        created = createFromZk(instanceDir, dcore);\n      } else {\n        created = createFromLocal(instanceDir, dcore);\n      }\n\n      solrCores.addCreated(created); // For persisting newly-created cores.\n      return created;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n\n    try {\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      SolrCore core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n    }\n    catch (Exception e) {\n      throw recordAndThrow(dcore.getName(), \"Unable to create core: \" + dcore.getName(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n    \n    final String name = dcore.getName();\n\n    try {\n      // Make the instanceDir relative to the cores instanceDir if not absolute\n      File idir = new File(dcore.getInstanceDir());\n      String instanceDir = idir.getPath();\n      log.info(\"Creating SolrCore '{}' using instanceDir: {}\",\n               dcore.getName(), instanceDir);\n\n      // Initialize the solr config\n      SolrCore created = null;\n      if (zkSys.getZkController() != null) {\n        created = zkSys.createFromZk(instanceDir, dcore, loader);\n      } else {\n        created = createFromLocal(instanceDir, dcore);\n      }\n\n      solrCores.addCreated(created); // For persisting newly-created cores.\n      return created;\n\n      // :TODO: Java7...\n      // http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html\n    } catch (Exception ex) {\n      throw recordAndThrow(name, \"Unable to create core: \" + name, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85032ab568b3f50eabd577aaa994ba197db93758","date":1404157267,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor, publishing the core state to the cluster\n   * @param cd the CoreDescriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor cd) {\n    return create(cd, true);\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n\n    try {\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      SolrCore core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      return core;\n\n    }\n    catch (Exception e) {\n      throw recordAndThrow(dcore.getName(), \"Unable to create core: \" + dcore.getName(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor, publishing the core state to the cluster\n   * @param cd the CoreDescriptor\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor cd) {\n    return create(cd, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["08970e5b8411182a29412c177eff67ec1110095b"],"2acf500f78aa12b92e371fd89c719291986b6b90":["083df6f7d2115772bdcf0f53c63aa859e664c69e","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"33d70ca4ca21ddd57ae5432d9f7a999f8cbfbe83":["e4d5fc8284faca306256427bbbb86017a32002cf"],"08970e5b8411182a29412c177eff67ec1110095b":["3278df77f7f499b55fdb79861c0641450444e7d0"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["85032ab568b3f50eabd577aaa994ba197db93758"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["9409650933cc688e77e565092a25e58adfc2e18d"],"aba371508186796cc6151d8223a5b4e16d02e26e":["46d8ada1fff8d18cb197c38c7983225162599948","cee0d276a5aee45373d831d0328b4544eec95754"],"9409650933cc688e77e565092a25e58adfc2e18d":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"3278df77f7f499b55fdb79861c0641450444e7d0":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b374d78db8148ec6796fdf37148b33897ab40a8c":["46083459332303d872db23d62e641cc6165fe93c"],"46083459332303d872db23d62e641cc6165fe93c":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"f2126b84bd093fa3d921582a109a0ee578c28126":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","46083459332303d872db23d62e641cc6165fe93c"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["33d70ca4ca21ddd57ae5432d9f7a999f8cbfbe83"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["a837c064b67fa63a9394136e31218b908cdcf783"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["083df6f7d2115772bdcf0f53c63aa859e664c69e"],"083df6f7d2115772bdcf0f53c63aa859e664c69e":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"46d8ada1fff8d18cb197c38c7983225162599948":["083df6f7d2115772bdcf0f53c63aa859e664c69e","2acf500f78aa12b92e371fd89c719291986b6b90"],"044244fb346dc6965d217fce709880d0e3bc2e9f":["2acf500f78aa12b92e371fd89c719291986b6b90"],"e4d5fc8284faca306256427bbbb86017a32002cf":["cee0d276a5aee45373d831d0328b4544eec95754"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["083df6f7d2115772bdcf0f53c63aa859e664c69e","2acf500f78aa12b92e371fd89c719291986b6b90"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cee0d276a5aee45373d831d0328b4544eec95754"],"cee0d276a5aee45373d831d0328b4544eec95754":["044244fb346dc6965d217fce709880d0e3bc2e9f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d4e985daefcb892b529223b478c47985fc3c483":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"a837c064b67fa63a9394136e31218b908cdcf783":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"85032ab568b3f50eabd577aaa994ba197db93758":["2d4e985daefcb892b529223b478c47985fc3c483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["9409650933cc688e77e565092a25e58adfc2e18d"],"2acf500f78aa12b92e371fd89c719291986b6b90":["46d8ada1fff8d18cb197c38c7983225162599948","044244fb346dc6965d217fce709880d0e3bc2e9f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"33d70ca4ca21ddd57ae5432d9f7a999f8cbfbe83":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"08970e5b8411182a29412c177eff67ec1110095b":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["2d4e985daefcb892b529223b478c47985fc3c483"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"9409650933cc688e77e565092a25e58adfc2e18d":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3278df77f7f499b55fdb79861c0641450444e7d0":["08970e5b8411182a29412c177eff67ec1110095b"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["a837c064b67fa63a9394136e31218b908cdcf783"],"46083459332303d872db23d62e641cc6165fe93c":["b374d78db8148ec6796fdf37148b33897ab40a8c","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["46083459332303d872db23d62e641cc6165fe93c","f2126b84bd093fa3d921582a109a0ee578c28126"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["3278df77f7f499b55fdb79861c0641450444e7d0"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"083df6f7d2115772bdcf0f53c63aa859e664c69e":["2acf500f78aa12b92e371fd89c719291986b6b90","9279c7cd47f17e1e8b674a3741ff5f040bc680be","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"46d8ada1fff8d18cb197c38c7983225162599948":["aba371508186796cc6151d8223a5b4e16d02e26e"],"044244fb346dc6965d217fce709880d0e3bc2e9f":["cee0d276a5aee45373d831d0328b4544eec95754"],"e4d5fc8284faca306256427bbbb86017a32002cf":["33d70ca4ca21ddd57ae5432d9f7a999f8cbfbe83"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"cee0d276a5aee45373d831d0328b4544eec95754":["aba371508186796cc6151d8223a5b4e16d02e26e","e4d5fc8284faca306256427bbbb86017a32002cf","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","083df6f7d2115772bdcf0f53c63aa859e664c69e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2d4e985daefcb892b529223b478c47985fc3c483":["85032ab568b3f50eabd577aaa994ba197db93758"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"85032ab568b3f50eabd577aaa994ba197db93758":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","f2126b84bd093fa3d921582a109a0ee578c28126","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}