{"path":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","sourceNew":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, totTF));\n      return totTF;\n    }\n\n","sourceOld":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, totTF));\n      return totTF;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29e23e367cc757f42cdfce2bcbf21e68cd209cda","date":1343071560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","sourceNew":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, field.omitTF ? -1 : totTF));\n      return totTF;\n    }\n\n","sourceOld":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, totTF));\n      return totTF;\n    }\n\n","bugFix":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55c178897422fc01a257353a67f2ee23f1c82403","date":1343076368,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","sourceNew":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = -1;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n        }\n        postingsConsumer.finishDoc();\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, field.omitTF ? -1 : totTF));\n      return totTF;\n    }\n\n","sourceOld":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, field.omitTF ? -1 : totTF));\n      return totTF;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57635ff388fa1bee703f3b892a86a3e48975576a","date":1343077051,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","sourceNew":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = -1;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n        }\n        postingsConsumer.finishDoc();\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, field.omitTF ? -1 : totTF));\n      return totTF;\n    }\n\n","sourceOld":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, totTF));\n      return totTF;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","sourceNew":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = -1;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n        }\n        postingsConsumer.finishDoc();\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, field.omitTF ? -1 : totTF));\n      return totTF;\n    }\n\n","sourceOld":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, totTF));\n      return totTF;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","sourceNew":null,"sourceOld":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = -1;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n        }\n        postingsConsumer.finishDoc();\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, field.omitTF ? -1 : totTF));\n      return totTF;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55c178897422fc01a257353a67f2ee23f1c82403":["29e23e367cc757f42cdfce2bcbf21e68cd209cda"],"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","55c178897422fc01a257353a67f2ee23f1c82403"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["55c178897422fc01a257353a67f2ee23f1c82403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29e23e367cc757f42cdfce2bcbf21e68cd209cda":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"57635ff388fa1bee703f3b892a86a3e48975576a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","55c178897422fc01a257353a67f2ee23f1c82403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"]},"commit2Childs":{"55c178897422fc01a257353a67f2ee23f1c82403":["aba371508186796cc6151d8223a5b4e16d02e26e","519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","57635ff388fa1bee703f3b892a86a3e48975576a"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","29e23e367cc757f42cdfce2bcbf21e68cd209cda","57635ff388fa1bee703f3b892a86a3e48975576a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29e23e367cc757f42cdfce2bcbf21e68cd209cda":["55c178897422fc01a257353a67f2ee23f1c82403"],"57635ff388fa1bee703f3b892a86a3e48975576a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","57635ff388fa1bee703f3b892a86a3e48975576a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}