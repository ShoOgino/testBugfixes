{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    Directory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    Directory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    Directory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = new MockRAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory(newRandom());\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = new MockRAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory(newRandom());\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","sourceNew":null,"sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","sourceNew":null,"sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testStopWordSearching().mjava","sourceNew":null,"sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, analyzer, true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        new String[] { \"body\" }, analyzer);\n    mfqp.setDefaultOperator(QueryParserWrapper.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}