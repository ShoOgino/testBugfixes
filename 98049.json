{"path":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","sourceNew":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @Override\n     public Iterator<Term> iterator() {\n       ArrayList<Iterator<Term>> subs = new ArrayList<Iterator<Term>>(iterables.size());\n       for (Iterable<Term> iterable : iterables) {\n         subs.add(iterable.iterator());\n       }\n       return mergedIterator(subs);\n     }\n   };\n  }\n\n","sourceOld":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @Override\n     public Iterator<Term> iterator() {\n       ArrayList<Iterator<Term>> subs = new ArrayList<Iterator<Term>>(iterables.size());\n       for (Iterable<Term> iterable : iterables) {\n         subs.add(iterable.iterator());\n       }\n       return mergedIterator(subs);\n     }\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","sourceNew":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Iterator<Term> iterator() {\n       Iterator<Term> subs[] = new Iterator[iterables.size()];\n       for (int i = 0; i < iterables.size(); i++) {\n         subs[i] = iterables.get(i).iterator();\n       }\n       return new MergedIterator<Term>(subs);\n     }\n   };\n  }\n\n","sourceOld":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @Override\n     public Iterator<Term> iterator() {\n       ArrayList<Iterator<Term>> subs = new ArrayList<Iterator<Term>>(iterables.size());\n       for (Iterable<Term> iterable : iterables) {\n         subs.add(iterable.iterator());\n       }\n       return mergedIterator(subs);\n     }\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","sourceNew":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Iterator<Term> iterator() {\n       Iterator<Term> subs[] = new Iterator[iterables.size()];\n       for (int i = 0; i < iterables.size(); i++) {\n         subs[i] = iterables.get(i).iterator();\n       }\n       return new MergedIterator<Term>(subs);\n     }\n   };\n  }\n\n","sourceOld":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @Override\n     public Iterator<Term> iterator() {\n       ArrayList<Iterator<Term>> subs = new ArrayList<Iterator<Term>>(iterables.size());\n       for (Iterable<Term> iterable : iterables) {\n         subs.add(iterable.iterator());\n       }\n       return mergedIterator(subs);\n     }\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","sourceNew":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Iterator<Term> iterator() {\n       Iterator<Term> subs[] = new Iterator[iterables.size()];\n       for (int i = 0; i < iterables.size(); i++) {\n         subs[i] = iterables.get(i).iterator();\n       }\n       return new MergedIterator<Term>(subs);\n     }\n   };\n  }\n\n","sourceOld":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @Override\n     public Iterator<Term> iterator() {\n       ArrayList<Iterator<Term>> subs = new ArrayList<Iterator<Term>>(iterables.size());\n       for (Iterable<Term> iterable : iterables) {\n         subs.add(iterable.iterator());\n       }\n       return mergedIterator(subs);\n     }\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b182ba7efb94b61b17c69eaaf2fd165c97d301d7","date":1345567693,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","sourceNew":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n     @Override\n     public Iterator<Term> iterator() {\n       Iterator<Term> subs[] = new Iterator[iterables.size()];\n       for (int i = 0; i < iterables.size(); i++) {\n         subs[i] = iterables.get(i).iterator();\n       }\n       return new MergedIterator<Term>(subs);\n     }\n   };\n  }\n\n","sourceOld":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Iterator<Term> iterator() {\n       Iterator<Term> subs[] = new Iterator[iterables.size()];\n       for (int i = 0; i < iterables.size(); i++) {\n         subs[i] = iterables.get(i).iterator();\n       }\n       return new MergedIterator<Term>(subs);\n     }\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","sourceNew":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n     @Override\n     public Iterator<Term> iterator() {\n       Iterator<Term> subs[] = new Iterator[iterables.size()];\n       for (int i = 0; i < iterables.size(); i++) {\n         subs[i] = iterables.get(i).iterator();\n       }\n       return new MergedIterator<Term>(subs);\n     }\n   };\n  }\n\n","sourceOld":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Iterator<Term> iterator() {\n       Iterator<Term> subs[] = new Iterator[iterables.size()];\n       for (int i = 0; i < iterables.size(); i++) {\n         subs[i] = iterables.get(i).iterator();\n       }\n       return new MergedIterator<Term>(subs);\n     }\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CoalescedUpdates#termsIterable().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CoalescedDeletes#termsIterable().mjava","sourceNew":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n     @Override\n     public Iterator<Term> iterator() {\n       Iterator<Term> subs[] = new Iterator[iterables.size()];\n       for (int i = 0; i < iterables.size(); i++) {\n         subs[i] = iterables.get(i).iterator();\n       }\n       return new MergedIterator<Term>(subs);\n     }\n   };\n  }\n\n","sourceOld":" public Iterable<Term> termsIterable() {\n   return new Iterable<Term>() {\n     @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n     @Override\n     public Iterator<Term> iterator() {\n       Iterator<Term> subs[] = new Iterator[iterables.size()];\n       for (int i = 0; i < iterables.size(); i++) {\n         subs[i] = iterables.get(i).iterator();\n       }\n       return new MergedIterator<Term>(subs);\n     }\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","b182ba7efb94b61b17c69eaaf2fd165c97d301d7"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["b182ba7efb94b61b17c69eaaf2fd165c97d301d7"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b182ba7efb94b61b17c69eaaf2fd165c97d301d7":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fb07ab105350b80ed9d63ca64b117084ed7391bc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"b182ba7efb94b61b17c69eaaf2fd165c97d301d7":["001b25b42373b22a52f399dbf072f1224632e8e6","73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c7869f64c874ebf7f317d22c00baf2b6857797a6","b182ba7efb94b61b17c69eaaf2fd165c97d301d7","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["001b25b42373b22a52f399dbf072f1224632e8e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","c7869f64c874ebf7f317d22c00baf2b6857797a6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}