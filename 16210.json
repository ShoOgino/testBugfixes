{"path":"src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int).mjava","commits":[{"id":"dda77265180d41bf85c84c995e25eda7b8e1b74d","date":1096395352,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int).mjava","pathOld":"src/java/org/apache/lucene/store/OutputStream#writeBytes(byte[],int).mjava","sourceNew":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see InputStream#readBytes(byte[],int,int)\n   */\n  public void writeBytes(byte[] b, int length) throws IOException {\n    for (int i = 0; i < length; i++)\n      writeByte(b[i]);\n  }\n\n","sourceOld":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see InputStream#readBytes(byte[],int,int)\n   */\n  public final void writeBytes(byte[] b, int length) throws IOException {\n    for (int i = 0; i < length; i++)\n      writeByte(b[i]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77f2eb0d13b43db148a5e4f61c166fa3688a2df9","date":1096404326,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int).mjava","sourceNew":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see IndexInput#readBytes(byte[],int,int)\n   */\n  public void writeBytes(byte[] b, int length) throws IOException {\n    for (int i = 0; i < length; i++)\n      writeByte(b[i]);\n  }\n\n","sourceOld":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see InputStream#readBytes(byte[],int,int)\n   */\n  public void writeBytes(byte[] b, int length) throws IOException {\n    for (int i = 0; i < length; i++)\n      writeByte(b[i]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c493b9789ad0f3deb14aa73312bca235d3dcf889","date":1140541240,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int).mjava","sourceNew":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see IndexInput#readBytes(byte[],int,int)\n   */\n  public void writeBytes(byte[] b, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, 0, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, length);\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see IndexInput#readBytes(byte[],int,int)\n   */\n  public void writeBytes(byte[] b, int length) throws IOException {\n    for (int i = 0; i < length; i++)\n      writeByte(b[i]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d66188c7c847c94b9441fff8c9dba58d48bccd48","date":1141330609,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int).mjava","sourceNew":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see IndexInput#readBytes(byte[],int,int)\n   */\n  public void writeBytes(byte[] b, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, 0, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see IndexInput#readBytes(byte[],int,int)\n   */\n  public void writeBytes(byte[] b, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, 0, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, length);\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8522ae207a56c6db28ca06fe6cc33e70911c3600","date":1173935743,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int).mjava","sourceNew":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see IndexInput#readBytes(byte[],int,int)\n   */\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see IndexInput#readBytes(byte[],int,int)\n   */\n  public void writeBytes(byte[] b, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, 0, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d66188c7c847c94b9441fff8c9dba58d48bccd48":["c493b9789ad0f3deb14aa73312bca235d3dcf889"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["d66188c7c847c94b9441fff8c9dba58d48bccd48"],"c493b9789ad0f3deb14aa73312bca235d3dcf889":["77f2eb0d13b43db148a5e4f61c166fa3688a2df9"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77f2eb0d13b43db148a5e4f61c166fa3688a2df9":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8522ae207a56c6db28ca06fe6cc33e70911c3600"]},"commit2Childs":{"d66188c7c847c94b9441fff8c9dba58d48bccd48":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c493b9789ad0f3deb14aa73312bca235d3dcf889":["d66188c7c847c94b9441fff8c9dba58d48bccd48"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["77f2eb0d13b43db148a5e4f61c166fa3688a2df9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"77f2eb0d13b43db148a5e4f61c166fa3688a2df9":["c493b9789ad0f3deb14aa73312bca235d3dcf889"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}