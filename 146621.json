{"path":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testLeadingWildcardType().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testLeadingWildcardType().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testLeadingWildcardType().mjava","sourceNew":"  public void testLeadingWildcardType() throws Exception {\n    QueryParser qp = getParser(null);\n    qp.setAllowLeadingWildcard(true);\n    assertEquals(WildcardQuery.class, qp.parse(\"t*erm*\").getClass());\n    assertEquals(WildcardQuery.class, qp.parse(\"?term*\").getClass());\n    assertEquals(WildcardQuery.class, qp.parse(\"*term*\").getClass());\n  }\n\n","sourceOld":"  public void testLeadingWildcardType() throws Exception {\n    QueryParser qp = getParser(null);\n    qp.setAllowLeadingWildcard(true);\n    assertEquals(WildcardQuery.class, qp.parse(\"t*erm*\").getClass());\n    assertEquals(WildcardQuery.class, qp.parse(\"?term*\").getClass());\n    assertEquals(WildcardQuery.class, qp.parse(\"*term*\").getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testLeadingWildcardType().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testLeadingWildcardType().mjava","sourceNew":"  public void testLeadingWildcardType() throws Exception {\n    QueryParser qp = getParser(null);\n    qp.setAllowLeadingWildcard(true);\n    assertEquals(WildcardQuery.class, qp.parse(\"t*erm*\").getClass());\n    assertEquals(WildcardQuery.class, qp.parse(\"?term*\").getClass());\n    assertEquals(WildcardQuery.class, qp.parse(\"*term*\").getClass());\n  }\n\n","sourceOld":"  public void testLeadingWildcardType() throws Exception {\n    QueryParser qp = getParser(null);\n    qp.setAllowLeadingWildcard(true);\n    assertEquals(WildcardQuery.class, qp.parse(\"t*erm*\").getClass());\n    assertEquals(WildcardQuery.class, qp.parse(\"?term*\").getClass());\n    assertEquals(WildcardQuery.class, qp.parse(\"*term*\").getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}