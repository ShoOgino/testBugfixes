{"path":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(TEMP_DIR, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(TEMP_DIR, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(TEMP_DIR, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(TEMP_DIR, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(TEMP_DIR, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(TEMP_DIR, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(TEMP_DIR, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(TEMP_DIR, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(TEMP_DIR, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(TEMP_DIR, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(TEMP_DIR, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(dataDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(TEMP_DIR, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = createTempDir();\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = createTempDir();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = createTempDir();\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = createTempDir();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = new File(dataDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = createTempDir().toFile();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = createTempDir();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = createTempDir().toFile();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    h.getCore().withSearcher(searcher -> {\n      checker.build(core, searcher);\n      SpellChecker sc = checker.getSpellChecker();\n      assertTrue(\"sc is null and it shouldn't be\", sc != null);\n      StringDistance sd = sc.getStringDistance();\n      assertTrue(\"sd is null and it shouldn't be\", sd != null);\n      assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n      return null;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = createTempDir().toFile();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = createTempDir().toFile();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    h.getCore().withSearcher(searcher -> {\n      checker.build(core, searcher);\n      SpellChecker sc = checker.getSpellChecker();\n      assertTrue(\"sc is null and it shouldn't be\", sc != null);\n      StringDistance sd = sc.getStringDistance();\n      assertTrue(\"sd is null and it shouldn't be\", sd != null);\n      assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n      return null;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = createTempDir().toFile();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = createTempDir().toFile();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    h.getCore().withSearcher(searcher -> {\n      checker.build(core, searcher);\n      SpellChecker sc = checker.getSpellChecker();\n      assertTrue(\"sc is null and it shouldn't be\", sc != null);\n      StringDistance sd = sc.getStringDistance();\n      assertTrue(\"sd is null and it shouldn't be\", sd != null);\n      assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n      return null;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File indexDir = createTempDir().toFile();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(AbstractLuceneSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    h.getCore().withSearcher(searcher -> {\n      checker.build(core, searcher);\n      SpellChecker sc = checker.getSpellChecker();\n      assertTrue(\"sc is null and it shouldn't be\", sc != null);\n      StringDistance sd = sc.getStringDistance();\n      assertTrue(\"sd is null and it shouldn't be\", sd != null);\n      assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n      return null;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"4ab833f2b623042c834458d4cbcad05073a93793":["f4abec28b874149a7223e32cc7a01704c27790de"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["f4abec28b874149a7223e32cc7a01704c27790de","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}