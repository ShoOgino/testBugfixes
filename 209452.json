{"path":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#mergeOneField(MergeState,FieldInfo).mjava","sourceNew":"  /** Default naive merge implemenation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointReaders.length;i++) {\n                     PointReader pointReader = mergeState.pointReaders[i];\n                     if (pointReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's PointReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","sourceOld":"  /** Default naive merge implemenation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new DimensionalReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.dimensionalReaders.length;i++) {\n                     DimensionalReader dimensionalReader = mergeState.dimensionalReaders[i];\n                     if (dimensionalReader == null) {\n                       // This segment has no dimensional values\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     dimensionalReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's DimensionalReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8103cf1cacd18ca5dad781c270b4a8e7c07b35fc","date":1456162138,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","sourceNew":"  /** Default naive merge implementation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointReaders.length;i++) {\n                     PointReader pointReader = mergeState.pointReaders[i];\n                     if (pointReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's PointReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","sourceOld":"  /** Default naive merge implemenation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointReaders.length;i++) {\n                     PointReader pointReader = mergeState.pointReaders[i];\n                     if (pointReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's PointReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","sourceNew":"  /** Default naive merge implementation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointReaders.length;i++) {\n                     PointReader pointReader = mergeState.pointReaders[i];\n                     if (pointReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's PointReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","sourceOld":"  /** Default naive merge implemenation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointReaders.length;i++) {\n                     PointReader pointReader = mergeState.pointReaders[i];\n                     if (pointReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's PointReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","date":1456959208,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","sourceNew":"  /** Default naive merge implementation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointReaders.length;i++) {\n                     PointReader pointReader = mergeState.pointReaders[i];\n                     if (pointReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's PointReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long size(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n               });\n  }\n\n","sourceOld":"  /** Default naive merge implementation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointReaders.length;i++) {\n                     PointReader pointReader = mergeState.pointReaders[i];\n                     if (pointReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's PointReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251c5b33f0a2c8988550b63c78ed22b0e84524e5","date":1456961997,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","sourceNew":"  /** Default naive merge implementation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointReaders.length;i++) {\n                     PointReader pointReader = mergeState.pointReaders[i];\n                     if (pointReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's PointReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long size(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getDocCount(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","sourceOld":"  /** Default naive merge implementation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointReaders.length;i++) {\n                     PointReader pointReader = mergeState.pointReaders[i];\n                     if (pointReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's PointReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long size(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","sourceNew":"  /** Default naive merge implementation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointReaders.length;i++) {\n                     PointReader pointReader = mergeState.pointReaders[i];\n                     if (pointReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's PointReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long size(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getDocCount(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","sourceOld":"  /** Default naive merge implementation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointReaders.length;i++) {\n                     PointReader pointReader = mergeState.pointReaders[i];\n                     if (pointReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's PointReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointsWriter#mergeOneField(MergeState,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#mergeOneField(MergeState,FieldInfo).mjava","sourceNew":"  /** Default naive merge implementation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointsReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointsReaders.length;i++) {\n                     PointsReader pointsReader = mergeState.pointsReaders[i];\n                     if (pointsReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointsReader.intersect(fieldInfo.name,\n                                            new IntersectVisitor() {\n                                              @Override\n                                              public void visit(int docID) {\n                                                // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                throw new IllegalStateException();\n                                              }\n\n                                              @Override\n                                              public void visit(int docID, byte[] packedValue) throws IOException {\n                                                int newDocID = docMap.get(docID);\n                                                if (newDocID != -1) {\n                                                  // Not deleted:\n                                                  mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                }\n                                              }\n\n                                              @Override\n                                              public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                // Forces this segment's PointsReader to always visit all docs + values:\n                                                return Relation.CELL_CROSSES_QUERY;\n                                              }\n                                            });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long size(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getDocCount(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","sourceOld":"  /** Default naive merge implementation for one field: it just re-indexes all the values\n   *  from the incoming segment.  The default codec overrides this for 1D fields and uses\n   *  a faster but more complex implementation. */\n  protected void mergeOneField(MergeState mergeState, FieldInfo fieldInfo) throws IOException {\n    writeField(fieldInfo,\n               new PointReader() {\n                 @Override\n                 public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                   if (fieldName.equals(fieldInfo.name) == false) {\n                     throw new IllegalArgumentException(\"field name must match the field being merged\");\n                   }\n                   for (int i=0;i<mergeState.pointReaders.length;i++) {\n                     PointReader pointReader = mergeState.pointReaders[i];\n                     if (pointReader == null) {\n                       // This segment has no points\n                       continue;\n                     }\n                     MergeState.DocMap docMap = mergeState.docMaps[i];\n                     int docBase = mergeState.docBase[i];\n                     pointReader.intersect(fieldInfo.name,\n                                                 new IntersectVisitor() {\n                                                   @Override\n                                                   public void visit(int docID) {\n                                                     // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                     throw new IllegalStateException();\n                                                   }\n\n                                                   @Override\n                                                   public void visit(int docID, byte[] packedValue) throws IOException {\n                                                     int newDocID = docMap.get(docID);\n                                                     if (newDocID != -1) {\n                                                       // Not deleted:\n                                                       mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                     }\n                                                   }\n\n                                                   @Override\n                                                   public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                     // Forces this segment's PointReader to always visit all docs + values:\n                                                     return Relation.CELL_CROSSES_QUERY;\n                                                   }\n                                                 });\n                   }\n                 }\n\n                 @Override\n                 public void checkIntegrity() {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long ramBytesUsed() {\n                   return 0L;\n                 }\n\n                 @Override\n                 public void close() {\n                 }\n\n                 @Override\n                 public byte[] getMinPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public byte[] getMaxPackedValue(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getNumDimensions(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getBytesPerDimension(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public long size(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n\n                 @Override\n                 public int getDocCount(String fieldName) {\n                   throw new UnsupportedOperationException();\n                 }\n               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251c5b33f0a2c8988550b63c78ed22b0e84524e5":["879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8103cf1cacd18ca5dad781c270b4a8e7c07b35fc":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","8103cf1cacd18ca5dad781c270b4a8e7c07b35fc"],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["419a8f52c6635419beb951255cacbbb281044c57"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["419a8f52c6635419beb951255cacbbb281044c57","251c5b33f0a2c8988550b63c78ed22b0e84524e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"]},"commit2Childs":{"251c5b33f0a2c8988550b63c78ed22b0e84524e5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["8103cf1cacd18ca5dad781c270b4a8e7c07b35fc","419a8f52c6635419beb951255cacbbb281044c57"],"8103cf1cacd18ca5dad781c270b4a8e7c07b35fc":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"419a8f52c6635419beb951255cacbbb281044c57":["879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["251c5b33f0a2c8988550b63c78ed22b0e84524e5"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}