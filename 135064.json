{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#doTestImpactSerialization(int[],long[]).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#doTestImpactSerialization(int[],long[]).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestImpactSerialization(int[] freqs, long[] norms) throws IOException {\n    CompetitiveFreqNormAccumulator acc = new CompetitiveFreqNormAccumulator();\n    for (int i = 0; i < freqs.length; ++i) {\n      acc.add(freqs[i], norms[i]);\n    }\n    try(Directory dir = newDirectory()) {\n      try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n        Lucene50SkipWriter.writeImpacts(acc, out);\n      }\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        byte[] b = new byte[Math.toIntExact(in.length())];\n        in.readBytes(b, 0, b.length);\n        Lucene50ScoreSkipReader.readImpacts(new ByteArrayDataInput(b), new SimScorer(\"\") {\n          int i = 0;\n\n          @Override\n          public float score(float freq, long norm) {\n            assert freq == freqs[i];\n            assert norm == norms[i];\n            i++;\n            return 0;\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#doTestImpactSerialization(List[Impact]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#doTestImpactSerialization(int[],long[]).mjava","sourceNew":"  private void doTestImpactSerialization(List<Impact> impacts) throws IOException {\n    CompetitiveImpactAccumulator acc = new CompetitiveImpactAccumulator();\n    for (Impact impact : impacts) {\n      acc.add(impact.freq, impact.norm);\n    }\n    try(Directory dir = newDirectory()) {\n      try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n        Lucene50SkipWriter.writeImpacts(acc, out);\n      }\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        byte[] b = new byte[Math.toIntExact(in.length())];\n        in.readBytes(b, 0, b.length);\n        List<Impact> impacts2 = Lucene50ScoreSkipReader.readImpacts(new ByteArrayDataInput(b), new MutableImpactList());\n        assertEquals(impacts, impacts2);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestImpactSerialization(int[] freqs, long[] norms) throws IOException {\n    CompetitiveFreqNormAccumulator acc = new CompetitiveFreqNormAccumulator();\n    for (int i = 0; i < freqs.length; ++i) {\n      acc.add(freqs[i], norms[i]);\n    }\n    try(Directory dir = newDirectory()) {\n      try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n        Lucene50SkipWriter.writeImpacts(acc, out);\n      }\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        byte[] b = new byte[Math.toIntExact(in.length())];\n        in.readBytes(b, 0, b.length);\n        Lucene50ScoreSkipReader.readImpacts(new ByteArrayDataInput(b), new SimScorer(\"\") {\n          int i = 0;\n\n          @Override\n          public float score(float freq, long norm) {\n            assert freq == freqs[i];\n            assert norm == norms[i];\n            i++;\n            return 0;\n          }\n        });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"]},"commit2Childs":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}