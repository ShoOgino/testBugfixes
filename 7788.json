{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","commits":[{"id":"73187ff81dbd931417f46f53360c5dcf390ebde2","date":1342466689,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomDiscreteMultiValueHighlighting() throws Exception {\n    String[] randomValues = new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];\n    for (int i = 0; i < randomValues.length; i++) {\n      String randomValue;\n      do {\n        randomValue = _TestUtil.randomSimpleString(random());\n      } while (\"\".equals(randomValue));\n      randomValues[i] = randomValue;\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n\n    int numDocs = randomValues.length * 5;\n    int numFields = 2 + random().nextInt(5);\n    int numTerms = 2 + random().nextInt(3);\n    List<Doc> docs = new ArrayList<Doc>(numDocs);\n    List<Document> documents = new ArrayList<Document>(numDocs);\n    Map<String, Set<Integer>> valueToDocId = new HashMap<String, Set<Integer>>();\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      String[][] fields = new String[numFields][numTerms];\n      for (int j = 0; j < numFields; j++) {\n        String[] fieldValues = new String[numTerms];\n        fieldValues[0] = getRandomValue(randomValues, valueToDocId, i);\n        StringBuilder builder = new StringBuilder(fieldValues[0]);\n        for (int k = 1; k < numTerms; k++) {\n          fieldValues[k] = getRandomValue(randomValues, valueToDocId, i);\n          builder.append(' ').append(fieldValues[k]);\n        }\n        document.add(new Field(F, builder.toString(), customType));\n        fields[j] = fieldValues;\n      }\n      docs.add(new Doc(fields));\n      documents.add(document);\n    }\n    writer.addDocuments(documents);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    try {\n      int highlightIters = 1 + random().nextInt(120 * RANDOM_MULTIPLIER);\n      for (int highlightIter = 0; highlightIter < highlightIters; highlightIter++) {\n        String queryTerm = randomValues[random().nextInt(randomValues.length)];\n        int randomHit = valueToDocId.get(queryTerm).iterator().next();\n        List<StringBuilder> builders = new ArrayList<StringBuilder>();\n        for (String[] fieldValues : docs.get(randomHit).fieldValues) {\n          StringBuilder builder = new StringBuilder();\n          boolean hit = false;\n          for (int i = 0; i < fieldValues.length; i++) {\n            if (queryTerm.equals(fieldValues[i])) {\n              builder.append(\"<b>\").append(queryTerm).append(\"</b>\");\n              hit = true;\n            } else {\n              builder.append(fieldValues[i]);\n            }\n            if (i != fieldValues.length - 1) {\n              builder.append(' ');\n            }\n          }\n          if (hit) {\n            builders.add(builder);\n          }\n        }\n\n        FieldQuery fq = new FieldQuery(tq(queryTerm), true, true);\n        FieldTermStack stack = new FieldTermStack(reader, randomHit, F, fq);\n\n        FieldPhraseList fpl = new FieldPhraseList(stack, fq);\n        SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);\n        FieldFragList ffl = sflb.createFieldFragList(fpl, 300);\n\n        SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n        sfb.setDiscreteMultiValueHighlighting(true);\n        String[] actualFragments = sfb.createFragments(reader, randomHit, F, ffl, numFields);\n        assertEquals(builders.size(), actualFragments.length);\n        for (int i = 0; i < actualFragments.length; i++) {\n          assertEquals(builders.get(i).toString(), actualFragments[i]);\n        }\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomDiscreteMultiValueHighlighting() throws Exception {\n    String[] randomValues = new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];\n    for (int i = 0; i < randomValues.length; i++) {\n      String randomValue;\n      do {\n        randomValue = _TestUtil.randomSimpleString(random());\n      } while (\"\".equals(randomValue));\n      randomValues[i] = randomValue;\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n\n    int numDocs = randomValues.length * 5;\n    int numFields = 2 + random().nextInt(5);\n    int numTerms = 2 + random().nextInt(3);\n    List<Doc> docs = new ArrayList<Doc>(numDocs);\n    List<Document> documents = new ArrayList<Document>(numDocs);\n    Map<String, Set<Integer>> valueToDocId = new HashMap<String, Set<Integer>>();\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      String[][] fields = new String[numFields][numTerms];\n      for (int j = 0; j < numFields; j++) {\n        String[] fieldValues = new String[numTerms];\n        fieldValues[0] = getRandomValue(randomValues, valueToDocId, i);\n        StringBuilder builder = new StringBuilder(fieldValues[0]);\n        for (int k = 1; k < numTerms; k++) {\n          fieldValues[k] = getRandomValue(randomValues, valueToDocId, i);\n          builder.append(' ').append(fieldValues[k]);\n        }\n        document.add(new Field(F, builder.toString(), customType));\n        fields[j] = fieldValues;\n      }\n      docs.add(new Doc(fields));\n      documents.add(document);\n    }\n    writer.addDocuments(documents);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    try {\n      int highlightIters = 1 + random().nextInt(120 * RANDOM_MULTIPLIER);\n      for (int highlightIter = 0; highlightIter < highlightIters; highlightIter++) {\n        String queryTerm = randomValues[random().nextInt(randomValues.length)];\n        int randomHit = valueToDocId.get(queryTerm).iterator().next();\n        List<StringBuilder> builders = new ArrayList<StringBuilder>();\n        for (String[] fieldValues : docs.get(randomHit).fieldValues) {\n          StringBuilder builder = new StringBuilder();\n          boolean hit = false;\n          for (int i = 0; i < fieldValues.length; i++) {\n            if (queryTerm.equals(fieldValues[i])) {\n              builder.append(\"<b>\").append(queryTerm).append(\"</b>\");\n              hit = true;\n            } else {\n              builder.append(fieldValues[i]);\n            }\n            if (i != fieldValues.length - 1) {\n              builder.append(' ');\n            }\n          }\n          if (hit) {\n            builders.add(builder);\n          }\n        }\n\n        FieldQuery fq = new FieldQuery(tq(queryTerm), true, true);\n        FieldTermStack stack = new FieldTermStack(reader, randomHit, F, fq);\n\n        FieldPhraseList fpl = new FieldPhraseList(stack, fq);\n        SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);\n        FieldFragList ffl = sflb.createFieldFragList(fpl, 300);\n\n        SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n        sfb.setDiscreteMultiValueHighlighting(true);\n        String[] actualFragments = sfb.createFragments(reader, randomHit, F, ffl, numFields);\n        assertEquals(builders.size(), actualFragments.length);\n        for (int i = 0; i < actualFragments.length; i++) {\n          assertEquals(builders.get(i).toString(), actualFragments[i]);\n        }\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomDiscreteMultiValueHighlighting() throws Exception {\n    String[] randomValues = new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];\n    for (int i = 0; i < randomValues.length; i++) {\n      String randomValue;\n      do {\n        randomValue = _TestUtil.randomSimpleString(random());\n      } while (\"\".equals(randomValue));\n      randomValues[i] = randomValue;\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n\n    int numDocs = randomValues.length * 5;\n    int numFields = 2 + random().nextInt(5);\n    int numTerms = 2 + random().nextInt(3);\n    List<Doc> docs = new ArrayList<Doc>(numDocs);\n    List<Document> documents = new ArrayList<Document>(numDocs);\n    Map<String, Set<Integer>> valueToDocId = new HashMap<String, Set<Integer>>();\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      String[][] fields = new String[numFields][numTerms];\n      for (int j = 0; j < numFields; j++) {\n        String[] fieldValues = new String[numTerms];\n        fieldValues[0] = getRandomValue(randomValues, valueToDocId, i);\n        StringBuilder builder = new StringBuilder(fieldValues[0]);\n        for (int k = 1; k < numTerms; k++) {\n          fieldValues[k] = getRandomValue(randomValues, valueToDocId, i);\n          builder.append(' ').append(fieldValues[k]);\n        }\n        document.add(new Field(F, builder.toString(), customType));\n        fields[j] = fieldValues;\n      }\n      docs.add(new Doc(fields));\n      documents.add(document);\n    }\n    writer.addDocuments(documents);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    try {\n      int highlightIters = 1 + random().nextInt(120 * RANDOM_MULTIPLIER);\n      for (int highlightIter = 0; highlightIter < highlightIters; highlightIter++) {\n        String queryTerm = randomValues[random().nextInt(randomValues.length)];\n        int randomHit = valueToDocId.get(queryTerm).iterator().next();\n        List<StringBuilder> builders = new ArrayList<StringBuilder>();\n        for (String[] fieldValues : docs.get(randomHit).fieldValues) {\n          StringBuilder builder = new StringBuilder();\n          boolean hit = false;\n          for (int i = 0; i < fieldValues.length; i++) {\n            if (queryTerm.equals(fieldValues[i])) {\n              builder.append(\"<b>\").append(queryTerm).append(\"</b>\");\n              hit = true;\n            } else {\n              builder.append(fieldValues[i]);\n            }\n            if (i != fieldValues.length - 1) {\n              builder.append(' ');\n            }\n          }\n          if (hit) {\n            builders.add(builder);\n          }\n        }\n\n        FieldQuery fq = new FieldQuery(tq(queryTerm), true, true);\n        FieldTermStack stack = new FieldTermStack(reader, randomHit, F, fq);\n\n        FieldPhraseList fpl = new FieldPhraseList(stack, fq);\n        SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);\n        FieldFragList ffl = sflb.createFieldFragList(fpl, 300);\n\n        SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n        sfb.setDiscreteMultiValueHighlighting(true);\n        String[] actualFragments = sfb.createFragments(reader, randomHit, F, ffl, numFields);\n        assertEquals(builders.size(), actualFragments.length);\n        for (int i = 0; i < actualFragments.length; i++) {\n          assertEquals(builders.get(i).toString(), actualFragments[i]);\n        }\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","sourceNew":"  public void testRandomDiscreteMultiValueHighlighting() throws Exception {\n    String[] randomValues = new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];\n    for (int i = 0; i < randomValues.length; i++) {\n      String randomValue;\n      do {\n        randomValue = TestUtil.randomSimpleString(random());\n      } while (\"\".equals(randomValue));\n      randomValues[i] = randomValue;\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n\n    int numDocs = randomValues.length * 5;\n    int numFields = 2 + random().nextInt(5);\n    int numTerms = 2 + random().nextInt(3);\n    List<Doc> docs = new ArrayList<Doc>(numDocs);\n    List<Document> documents = new ArrayList<Document>(numDocs);\n    Map<String, Set<Integer>> valueToDocId = new HashMap<String, Set<Integer>>();\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      String[][] fields = new String[numFields][numTerms];\n      for (int j = 0; j < numFields; j++) {\n        String[] fieldValues = new String[numTerms];\n        fieldValues[0] = getRandomValue(randomValues, valueToDocId, i);\n        StringBuilder builder = new StringBuilder(fieldValues[0]);\n        for (int k = 1; k < numTerms; k++) {\n          fieldValues[k] = getRandomValue(randomValues, valueToDocId, i);\n          builder.append(' ').append(fieldValues[k]);\n        }\n        document.add(new Field(F, builder.toString(), customType));\n        fields[j] = fieldValues;\n      }\n      docs.add(new Doc(fields));\n      documents.add(document);\n    }\n    writer.addDocuments(documents);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    try {\n      int highlightIters = 1 + random().nextInt(120 * RANDOM_MULTIPLIER);\n      for (int highlightIter = 0; highlightIter < highlightIters; highlightIter++) {\n        String queryTerm = randomValues[random().nextInt(randomValues.length)];\n        int randomHit = valueToDocId.get(queryTerm).iterator().next();\n        List<StringBuilder> builders = new ArrayList<StringBuilder>();\n        for (String[] fieldValues : docs.get(randomHit).fieldValues) {\n          StringBuilder builder = new StringBuilder();\n          boolean hit = false;\n          for (int i = 0; i < fieldValues.length; i++) {\n            if (queryTerm.equals(fieldValues[i])) {\n              builder.append(\"<b>\").append(queryTerm).append(\"</b>\");\n              hit = true;\n            } else {\n              builder.append(fieldValues[i]);\n            }\n            if (i != fieldValues.length - 1) {\n              builder.append(' ');\n            }\n          }\n          if (hit) {\n            builders.add(builder);\n          }\n        }\n\n        FieldQuery fq = new FieldQuery(tq(queryTerm), true, true);\n        FieldTermStack stack = new FieldTermStack(reader, randomHit, F, fq);\n\n        FieldPhraseList fpl = new FieldPhraseList(stack, fq);\n        SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);\n        FieldFragList ffl = sflb.createFieldFragList(fpl, 300);\n\n        SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n        sfb.setDiscreteMultiValueHighlighting(true);\n        String[] actualFragments = sfb.createFragments(reader, randomHit, F, ffl, numFields);\n        assertEquals(builders.size(), actualFragments.length);\n        for (int i = 0; i < actualFragments.length; i++) {\n          assertEquals(builders.get(i).toString(), actualFragments[i]);\n        }\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandomDiscreteMultiValueHighlighting() throws Exception {\n    String[] randomValues = new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];\n    for (int i = 0; i < randomValues.length; i++) {\n      String randomValue;\n      do {\n        randomValue = _TestUtil.randomSimpleString(random());\n      } while (\"\".equals(randomValue));\n      randomValues[i] = randomValue;\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n\n    int numDocs = randomValues.length * 5;\n    int numFields = 2 + random().nextInt(5);\n    int numTerms = 2 + random().nextInt(3);\n    List<Doc> docs = new ArrayList<Doc>(numDocs);\n    List<Document> documents = new ArrayList<Document>(numDocs);\n    Map<String, Set<Integer>> valueToDocId = new HashMap<String, Set<Integer>>();\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      String[][] fields = new String[numFields][numTerms];\n      for (int j = 0; j < numFields; j++) {\n        String[] fieldValues = new String[numTerms];\n        fieldValues[0] = getRandomValue(randomValues, valueToDocId, i);\n        StringBuilder builder = new StringBuilder(fieldValues[0]);\n        for (int k = 1; k < numTerms; k++) {\n          fieldValues[k] = getRandomValue(randomValues, valueToDocId, i);\n          builder.append(' ').append(fieldValues[k]);\n        }\n        document.add(new Field(F, builder.toString(), customType));\n        fields[j] = fieldValues;\n      }\n      docs.add(new Doc(fields));\n      documents.add(document);\n    }\n    writer.addDocuments(documents);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    try {\n      int highlightIters = 1 + random().nextInt(120 * RANDOM_MULTIPLIER);\n      for (int highlightIter = 0; highlightIter < highlightIters; highlightIter++) {\n        String queryTerm = randomValues[random().nextInt(randomValues.length)];\n        int randomHit = valueToDocId.get(queryTerm).iterator().next();\n        List<StringBuilder> builders = new ArrayList<StringBuilder>();\n        for (String[] fieldValues : docs.get(randomHit).fieldValues) {\n          StringBuilder builder = new StringBuilder();\n          boolean hit = false;\n          for (int i = 0; i < fieldValues.length; i++) {\n            if (queryTerm.equals(fieldValues[i])) {\n              builder.append(\"<b>\").append(queryTerm).append(\"</b>\");\n              hit = true;\n            } else {\n              builder.append(fieldValues[i]);\n            }\n            if (i != fieldValues.length - 1) {\n              builder.append(' ');\n            }\n          }\n          if (hit) {\n            builders.add(builder);\n          }\n        }\n\n        FieldQuery fq = new FieldQuery(tq(queryTerm), true, true);\n        FieldTermStack stack = new FieldTermStack(reader, randomHit, F, fq);\n\n        FieldPhraseList fpl = new FieldPhraseList(stack, fq);\n        SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);\n        FieldFragList ffl = sflb.createFieldFragList(fpl, 300);\n\n        SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n        sfb.setDiscreteMultiValueHighlighting(true);\n        String[] actualFragments = sfb.createFragments(reader, randomHit, F, ffl, numFields);\n        assertEquals(builders.size(), actualFragments.length);\n        for (int i = 0; i < actualFragments.length; i++) {\n          assertEquals(builders.get(i).toString(), actualFragments[i]);\n        }\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","sourceNew":"  public void testRandomDiscreteMultiValueHighlighting() throws Exception {\n    String[] randomValues = new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];\n    for (int i = 0; i < randomValues.length; i++) {\n      String randomValue;\n      do {\n        randomValue = TestUtil.randomSimpleString(random());\n      } while (\"\".equals(randomValue));\n      randomValues[i] = randomValue;\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n\n    int numDocs = randomValues.length * 5;\n    int numFields = 2 + random().nextInt(5);\n    int numTerms = 2 + random().nextInt(3);\n    List<Doc> docs = new ArrayList<>(numDocs);\n    List<Document> documents = new ArrayList<>(numDocs);\n    Map<String, Set<Integer>> valueToDocId = new HashMap<>();\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      String[][] fields = new String[numFields][numTerms];\n      for (int j = 0; j < numFields; j++) {\n        String[] fieldValues = new String[numTerms];\n        fieldValues[0] = getRandomValue(randomValues, valueToDocId, i);\n        StringBuilder builder = new StringBuilder(fieldValues[0]);\n        for (int k = 1; k < numTerms; k++) {\n          fieldValues[k] = getRandomValue(randomValues, valueToDocId, i);\n          builder.append(' ').append(fieldValues[k]);\n        }\n        document.add(new Field(F, builder.toString(), customType));\n        fields[j] = fieldValues;\n      }\n      docs.add(new Doc(fields));\n      documents.add(document);\n    }\n    writer.addDocuments(documents);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    try {\n      int highlightIters = 1 + random().nextInt(120 * RANDOM_MULTIPLIER);\n      for (int highlightIter = 0; highlightIter < highlightIters; highlightIter++) {\n        String queryTerm = randomValues[random().nextInt(randomValues.length)];\n        int randomHit = valueToDocId.get(queryTerm).iterator().next();\n        List<StringBuilder> builders = new ArrayList<>();\n        for (String[] fieldValues : docs.get(randomHit).fieldValues) {\n          StringBuilder builder = new StringBuilder();\n          boolean hit = false;\n          for (int i = 0; i < fieldValues.length; i++) {\n            if (queryTerm.equals(fieldValues[i])) {\n              builder.append(\"<b>\").append(queryTerm).append(\"</b>\");\n              hit = true;\n            } else {\n              builder.append(fieldValues[i]);\n            }\n            if (i != fieldValues.length - 1) {\n              builder.append(' ');\n            }\n          }\n          if (hit) {\n            builders.add(builder);\n          }\n        }\n\n        FieldQuery fq = new FieldQuery(tq(queryTerm), true, true);\n        FieldTermStack stack = new FieldTermStack(reader, randomHit, F, fq);\n\n        FieldPhraseList fpl = new FieldPhraseList(stack, fq);\n        SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);\n        FieldFragList ffl = sflb.createFieldFragList(fpl, 300);\n\n        SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n        sfb.setDiscreteMultiValueHighlighting(true);\n        String[] actualFragments = sfb.createFragments(reader, randomHit, F, ffl, numFields);\n        assertEquals(builders.size(), actualFragments.length);\n        for (int i = 0; i < actualFragments.length; i++) {\n          assertEquals(builders.get(i).toString(), actualFragments[i]);\n        }\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandomDiscreteMultiValueHighlighting() throws Exception {\n    String[] randomValues = new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];\n    for (int i = 0; i < randomValues.length; i++) {\n      String randomValue;\n      do {\n        randomValue = TestUtil.randomSimpleString(random());\n      } while (\"\".equals(randomValue));\n      randomValues[i] = randomValue;\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n\n    int numDocs = randomValues.length * 5;\n    int numFields = 2 + random().nextInt(5);\n    int numTerms = 2 + random().nextInt(3);\n    List<Doc> docs = new ArrayList<Doc>(numDocs);\n    List<Document> documents = new ArrayList<Document>(numDocs);\n    Map<String, Set<Integer>> valueToDocId = new HashMap<String, Set<Integer>>();\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      String[][] fields = new String[numFields][numTerms];\n      for (int j = 0; j < numFields; j++) {\n        String[] fieldValues = new String[numTerms];\n        fieldValues[0] = getRandomValue(randomValues, valueToDocId, i);\n        StringBuilder builder = new StringBuilder(fieldValues[0]);\n        for (int k = 1; k < numTerms; k++) {\n          fieldValues[k] = getRandomValue(randomValues, valueToDocId, i);\n          builder.append(' ').append(fieldValues[k]);\n        }\n        document.add(new Field(F, builder.toString(), customType));\n        fields[j] = fieldValues;\n      }\n      docs.add(new Doc(fields));\n      documents.add(document);\n    }\n    writer.addDocuments(documents);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    try {\n      int highlightIters = 1 + random().nextInt(120 * RANDOM_MULTIPLIER);\n      for (int highlightIter = 0; highlightIter < highlightIters; highlightIter++) {\n        String queryTerm = randomValues[random().nextInt(randomValues.length)];\n        int randomHit = valueToDocId.get(queryTerm).iterator().next();\n        List<StringBuilder> builders = new ArrayList<StringBuilder>();\n        for (String[] fieldValues : docs.get(randomHit).fieldValues) {\n          StringBuilder builder = new StringBuilder();\n          boolean hit = false;\n          for (int i = 0; i < fieldValues.length; i++) {\n            if (queryTerm.equals(fieldValues[i])) {\n              builder.append(\"<b>\").append(queryTerm).append(\"</b>\");\n              hit = true;\n            } else {\n              builder.append(fieldValues[i]);\n            }\n            if (i != fieldValues.length - 1) {\n              builder.append(' ');\n            }\n          }\n          if (hit) {\n            builders.add(builder);\n          }\n        }\n\n        FieldQuery fq = new FieldQuery(tq(queryTerm), true, true);\n        FieldTermStack stack = new FieldTermStack(reader, randomHit, F, fq);\n\n        FieldPhraseList fpl = new FieldPhraseList(stack, fq);\n        SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);\n        FieldFragList ffl = sflb.createFieldFragList(fpl, 300);\n\n        SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n        sfb.setDiscreteMultiValueHighlighting(true);\n        String[] actualFragments = sfb.createFragments(reader, randomHit, F, ffl, numFields);\n        assertEquals(builders.size(), actualFragments.length);\n        for (int i = 0; i < actualFragments.length; i++) {\n          assertEquals(builders.get(i).toString(), actualFragments[i]);\n        }\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","sourceNew":"  public void testRandomDiscreteMultiValueHighlighting() throws Exception {\n    String[] randomValues = new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];\n    for (int i = 0; i < randomValues.length; i++) {\n      String randomValue;\n      do {\n        randomValue = TestUtil.randomSimpleString(random());\n      } while (\"\".equals(randomValue));\n      randomValues[i] = randomValue;\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n\n    int numDocs = randomValues.length * 5;\n    int numFields = 2 + random().nextInt(5);\n    int numTerms = 2 + random().nextInt(3);\n    List<Doc> docs = new ArrayList<>(numDocs);\n    List<Document> documents = new ArrayList<>(numDocs);\n    Map<String, Set<Integer>> valueToDocId = new HashMap<>();\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      String[][] fields = new String[numFields][numTerms];\n      for (int j = 0; j < numFields; j++) {\n        String[] fieldValues = new String[numTerms];\n        fieldValues[0] = getRandomValue(randomValues, valueToDocId, i);\n        StringBuilder builder = new StringBuilder(fieldValues[0]);\n        for (int k = 1; k < numTerms; k++) {\n          fieldValues[k] = getRandomValue(randomValues, valueToDocId, i);\n          builder.append(' ').append(fieldValues[k]);\n        }\n        document.add(new Field(F, builder.toString(), customType));\n        fields[j] = fieldValues;\n      }\n      docs.add(new Doc(fields));\n      documents.add(document);\n    }\n    writer.addDocuments(documents);\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    try {\n      int highlightIters = 1 + random().nextInt(120 * RANDOM_MULTIPLIER);\n      for (int highlightIter = 0; highlightIter < highlightIters; highlightIter++) {\n        String queryTerm = randomValues[random().nextInt(randomValues.length)];\n        int randomHit = valueToDocId.get(queryTerm).iterator().next();\n        List<StringBuilder> builders = new ArrayList<>();\n        for (String[] fieldValues : docs.get(randomHit).fieldValues) {\n          StringBuilder builder = new StringBuilder();\n          boolean hit = false;\n          for (int i = 0; i < fieldValues.length; i++) {\n            if (queryTerm.equals(fieldValues[i])) {\n              builder.append(\"<b>\").append(queryTerm).append(\"</b>\");\n              hit = true;\n            } else {\n              builder.append(fieldValues[i]);\n            }\n            if (i != fieldValues.length - 1) {\n              builder.append(' ');\n            }\n          }\n          if (hit) {\n            builders.add(builder);\n          }\n        }\n\n        FieldQuery fq = new FieldQuery(tq(queryTerm), true, true);\n        FieldTermStack stack = new FieldTermStack(reader, randomHit, F, fq);\n\n        FieldPhraseList fpl = new FieldPhraseList(stack, fq);\n        SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);\n        FieldFragList ffl = sflb.createFieldFragList(fpl, 300);\n\n        SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n        sfb.setDiscreteMultiValueHighlighting(true);\n        String[] actualFragments = sfb.createFragments(reader, randomHit, F, ffl, numFields);\n        assertEquals(builders.size(), actualFragments.length);\n        for (int i = 0; i < actualFragments.length; i++) {\n          assertEquals(builders.get(i).toString(), actualFragments[i]);\n        }\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandomDiscreteMultiValueHighlighting() throws Exception {\n    String[] randomValues = new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];\n    for (int i = 0; i < randomValues.length; i++) {\n      String randomValue;\n      do {\n        randomValue = TestUtil.randomSimpleString(random());\n      } while (\"\".equals(randomValue));\n      randomValues[i] = randomValue;\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n\n    int numDocs = randomValues.length * 5;\n    int numFields = 2 + random().nextInt(5);\n    int numTerms = 2 + random().nextInt(3);\n    List<Doc> docs = new ArrayList<>(numDocs);\n    List<Document> documents = new ArrayList<>(numDocs);\n    Map<String, Set<Integer>> valueToDocId = new HashMap<>();\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      String[][] fields = new String[numFields][numTerms];\n      for (int j = 0; j < numFields; j++) {\n        String[] fieldValues = new String[numTerms];\n        fieldValues[0] = getRandomValue(randomValues, valueToDocId, i);\n        StringBuilder builder = new StringBuilder(fieldValues[0]);\n        for (int k = 1; k < numTerms; k++) {\n          fieldValues[k] = getRandomValue(randomValues, valueToDocId, i);\n          builder.append(' ').append(fieldValues[k]);\n        }\n        document.add(new Field(F, builder.toString(), customType));\n        fields[j] = fieldValues;\n      }\n      docs.add(new Doc(fields));\n      documents.add(document);\n    }\n    writer.addDocuments(documents);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    try {\n      int highlightIters = 1 + random().nextInt(120 * RANDOM_MULTIPLIER);\n      for (int highlightIter = 0; highlightIter < highlightIters; highlightIter++) {\n        String queryTerm = randomValues[random().nextInt(randomValues.length)];\n        int randomHit = valueToDocId.get(queryTerm).iterator().next();\n        List<StringBuilder> builders = new ArrayList<>();\n        for (String[] fieldValues : docs.get(randomHit).fieldValues) {\n          StringBuilder builder = new StringBuilder();\n          boolean hit = false;\n          for (int i = 0; i < fieldValues.length; i++) {\n            if (queryTerm.equals(fieldValues[i])) {\n              builder.append(\"<b>\").append(queryTerm).append(\"</b>\");\n              hit = true;\n            } else {\n              builder.append(fieldValues[i]);\n            }\n            if (i != fieldValues.length - 1) {\n              builder.append(' ');\n            }\n          }\n          if (hit) {\n            builders.add(builder);\n          }\n        }\n\n        FieldQuery fq = new FieldQuery(tq(queryTerm), true, true);\n        FieldTermStack stack = new FieldTermStack(reader, randomHit, F, fq);\n\n        FieldPhraseList fpl = new FieldPhraseList(stack, fq);\n        SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);\n        FieldFragList ffl = sflb.createFieldFragList(fpl, 300);\n\n        SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n        sfb.setDiscreteMultiValueHighlighting(true);\n        String[] actualFragments = sfb.createFragments(reader, randomHit, F, ffl, numFields);\n        assertEquals(builders.size(), actualFragments.length);\n        for (int i = 0; i < actualFragments.length; i++) {\n          assertEquals(builders.get(i).toString(), actualFragments[i]);\n        }\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","sourceNew":"  public void testRandomDiscreteMultiValueHighlighting() throws Exception {\n    String[] randomValues = new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];\n    for (int i = 0; i < randomValues.length; i++) {\n      String randomValue;\n      do {\n        randomValue = TestUtil.randomSimpleString(random());\n      } while (\"\".equals(randomValue));\n      randomValues[i] = randomValue;\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n\n    int numDocs = randomValues.length * 5;\n    int numFields = 2 + random().nextInt(5);\n    int numTerms = 2 + random().nextInt(3);\n    List<Doc> docs = new ArrayList<>(numDocs);\n    List<Document> documents = new ArrayList<>(numDocs);\n    Map<String, Set<Integer>> valueToDocId = new HashMap<>();\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      String[][] fields = new String[numFields][numTerms];\n      for (int j = 0; j < numFields; j++) {\n        String[] fieldValues = new String[numTerms];\n        fieldValues[0] = getRandomValue(randomValues, valueToDocId, i);\n        StringBuilder builder = new StringBuilder(fieldValues[0]);\n        for (int k = 1; k < numTerms; k++) {\n          fieldValues[k] = getRandomValue(randomValues, valueToDocId, i);\n          builder.append(' ').append(fieldValues[k]);\n        }\n        document.add(new Field(F, builder.toString(), customType));\n        fields[j] = fieldValues;\n      }\n      docs.add(new Doc(fields));\n      documents.add(document);\n    }\n    writer.addDocuments(documents);\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    try {\n      int highlightIters = 1 + random().nextInt(120 * RANDOM_MULTIPLIER);\n      for (int highlightIter = 0; highlightIter < highlightIters; highlightIter++) {\n        String queryTerm = randomValues[random().nextInt(randomValues.length)];\n        int randomHit = valueToDocId.get(queryTerm).iterator().next();\n        List<StringBuilder> builders = new ArrayList<>();\n        for (String[] fieldValues : docs.get(randomHit).fieldValues) {\n          StringBuilder builder = new StringBuilder();\n          boolean hit = false;\n          for (int i = 0; i < fieldValues.length; i++) {\n            if (queryTerm.equals(fieldValues[i])) {\n              builder.append(\"<b>\").append(queryTerm).append(\"</b>\");\n              hit = true;\n            } else {\n              builder.append(fieldValues[i]);\n            }\n            if (i != fieldValues.length - 1) {\n              builder.append(' ');\n            }\n          }\n          if (hit) {\n            builders.add(builder);\n          }\n        }\n\n        FieldQuery fq = new FieldQuery(tq(queryTerm), true, true);\n        FieldTermStack stack = new FieldTermStack(reader, randomHit, F, fq);\n\n        FieldPhraseList fpl = new FieldPhraseList(stack, fq);\n        SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);\n        FieldFragList ffl = sflb.createFieldFragList(fpl, 300);\n\n        SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n        sfb.setDiscreteMultiValueHighlighting(true);\n        String[] actualFragments = sfb.createFragments(reader, randomHit, F, ffl, numFields);\n        assertEquals(builders.size(), actualFragments.length);\n        for (int i = 0; i < actualFragments.length; i++) {\n          assertEquals(builders.get(i).toString(), actualFragments[i]);\n        }\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandomDiscreteMultiValueHighlighting() throws Exception {\n    String[] randomValues = new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];\n    for (int i = 0; i < randomValues.length; i++) {\n      String randomValue;\n      do {\n        randomValue = TestUtil.randomSimpleString(random());\n      } while (\"\".equals(randomValue));\n      randomValues[i] = randomValue;\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n\n    int numDocs = randomValues.length * 5;\n    int numFields = 2 + random().nextInt(5);\n    int numTerms = 2 + random().nextInt(3);\n    List<Doc> docs = new ArrayList<>(numDocs);\n    List<Document> documents = new ArrayList<>(numDocs);\n    Map<String, Set<Integer>> valueToDocId = new HashMap<>();\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      String[][] fields = new String[numFields][numTerms];\n      for (int j = 0; j < numFields; j++) {\n        String[] fieldValues = new String[numTerms];\n        fieldValues[0] = getRandomValue(randomValues, valueToDocId, i);\n        StringBuilder builder = new StringBuilder(fieldValues[0]);\n        for (int k = 1; k < numTerms; k++) {\n          fieldValues[k] = getRandomValue(randomValues, valueToDocId, i);\n          builder.append(' ').append(fieldValues[k]);\n        }\n        document.add(new Field(F, builder.toString(), customType));\n        fields[j] = fieldValues;\n      }\n      docs.add(new Doc(fields));\n      documents.add(document);\n    }\n    writer.addDocuments(documents);\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    try {\n      int highlightIters = 1 + random().nextInt(120 * RANDOM_MULTIPLIER);\n      for (int highlightIter = 0; highlightIter < highlightIters; highlightIter++) {\n        String queryTerm = randomValues[random().nextInt(randomValues.length)];\n        int randomHit = valueToDocId.get(queryTerm).iterator().next();\n        List<StringBuilder> builders = new ArrayList<>();\n        for (String[] fieldValues : docs.get(randomHit).fieldValues) {\n          StringBuilder builder = new StringBuilder();\n          boolean hit = false;\n          for (int i = 0; i < fieldValues.length; i++) {\n            if (queryTerm.equals(fieldValues[i])) {\n              builder.append(\"<b>\").append(queryTerm).append(\"</b>\");\n              hit = true;\n            } else {\n              builder.append(fieldValues[i]);\n            }\n            if (i != fieldValues.length - 1) {\n              builder.append(' ');\n            }\n          }\n          if (hit) {\n            builders.add(builder);\n          }\n        }\n\n        FieldQuery fq = new FieldQuery(tq(queryTerm), true, true);\n        FieldTermStack stack = new FieldTermStack(reader, randomHit, F, fq);\n\n        FieldPhraseList fpl = new FieldPhraseList(stack, fq);\n        SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);\n        FieldFragList ffl = sflb.createFieldFragList(fpl, 300);\n\n        SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n        sfb.setDiscreteMultiValueHighlighting(true);\n        String[] actualFragments = sfb.createFragments(reader, randomHit, F, ffl, numFields);\n        assertEquals(builders.size(), actualFragments.length);\n        for (int i = 0; i < actualFragments.length; i++) {\n          assertEquals(builders.get(i).toString(), actualFragments[i]);\n        }\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testRandomDiscreteMultiValueHighlighting().mjava","sourceNew":"  public void testRandomDiscreteMultiValueHighlighting() throws Exception {\n    String[] randomValues = new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];\n    for (int i = 0; i < randomValues.length; i++) {\n      String randomValue;\n      do {\n        randomValue = TestUtil.randomSimpleString(random());\n      } while (\"\".equals(randomValue));\n      randomValues[i] = randomValue;\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n\n    int numDocs = randomValues.length * 5;\n    int numFields = 2 + random().nextInt(5);\n    int numTerms = 2 + random().nextInt(3);\n    List<Doc> docs = new ArrayList<>(numDocs);\n    List<Document> documents = new ArrayList<>(numDocs);\n    Map<String, Set<Integer>> valueToDocId = new HashMap<>();\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      String[][] fields = new String[numFields][numTerms];\n      for (int j = 0; j < numFields; j++) {\n        String[] fieldValues = new String[numTerms];\n        fieldValues[0] = getRandomValue(randomValues, valueToDocId, i);\n        StringBuilder builder = new StringBuilder(fieldValues[0]);\n        for (int k = 1; k < numTerms; k++) {\n          fieldValues[k] = getRandomValue(randomValues, valueToDocId, i);\n          builder.append(' ').append(fieldValues[k]);\n        }\n        document.add(new Field(F, builder.toString(), customType));\n        fields[j] = fieldValues;\n      }\n      docs.add(new Doc(fields));\n      documents.add(document);\n    }\n    writer.addDocuments(documents);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    try {\n      int highlightIters = 1 + random().nextInt(120 * RANDOM_MULTIPLIER);\n      for (int highlightIter = 0; highlightIter < highlightIters; highlightIter++) {\n        String queryTerm = randomValues[random().nextInt(randomValues.length)];\n        int randomHit = valueToDocId.get(queryTerm).iterator().next();\n        List<StringBuilder> builders = new ArrayList<>();\n        for (String[] fieldValues : docs.get(randomHit).fieldValues) {\n          StringBuilder builder = new StringBuilder();\n          boolean hit = false;\n          for (int i = 0; i < fieldValues.length; i++) {\n            if (queryTerm.equals(fieldValues[i])) {\n              builder.append(\"<b>\").append(queryTerm).append(\"</b>\");\n              hit = true;\n            } else {\n              builder.append(fieldValues[i]);\n            }\n            if (i != fieldValues.length - 1) {\n              builder.append(' ');\n            }\n          }\n          if (hit) {\n            builders.add(builder);\n          }\n        }\n\n        FieldQuery fq = new FieldQuery(tq(queryTerm), true, true);\n        FieldTermStack stack = new FieldTermStack(reader, randomHit, F, fq);\n\n        FieldPhraseList fpl = new FieldPhraseList(stack, fq);\n        SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);\n        FieldFragList ffl = sflb.createFieldFragList(fpl, 300);\n\n        SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n        sfb.setDiscreteMultiValueHighlighting(true);\n        String[] actualFragments = sfb.createFragments(reader, randomHit, F, ffl, numFields);\n        assertEquals(builders.size(), actualFragments.length);\n        for (int i = 0; i < actualFragments.length; i++) {\n          assertEquals(builders.get(i).toString(), actualFragments[i]);\n        }\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandomDiscreteMultiValueHighlighting() throws Exception {\n    String[] randomValues = new String[3 + random().nextInt(10 * RANDOM_MULTIPLIER)];\n    for (int i = 0; i < randomValues.length; i++) {\n      String randomValue;\n      do {\n        randomValue = TestUtil.randomSimpleString(random());\n      } while (\"\".equals(randomValue));\n      randomValues[i] = randomValue;\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n\n    int numDocs = randomValues.length * 5;\n    int numFields = 2 + random().nextInt(5);\n    int numTerms = 2 + random().nextInt(3);\n    List<Doc> docs = new ArrayList<>(numDocs);\n    List<Document> documents = new ArrayList<>(numDocs);\n    Map<String, Set<Integer>> valueToDocId = new HashMap<>();\n    for (int i = 0; i < numDocs; i++) {\n      Document document = new Document();\n      String[][] fields = new String[numFields][numTerms];\n      for (int j = 0; j < numFields; j++) {\n        String[] fieldValues = new String[numTerms];\n        fieldValues[0] = getRandomValue(randomValues, valueToDocId, i);\n        StringBuilder builder = new StringBuilder(fieldValues[0]);\n        for (int k = 1; k < numTerms; k++) {\n          fieldValues[k] = getRandomValue(randomValues, valueToDocId, i);\n          builder.append(' ').append(fieldValues[k]);\n        }\n        document.add(new Field(F, builder.toString(), customType));\n        fields[j] = fieldValues;\n      }\n      docs.add(new Doc(fields));\n      documents.add(document);\n    }\n    writer.addDocuments(documents);\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    try {\n      int highlightIters = 1 + random().nextInt(120 * RANDOM_MULTIPLIER);\n      for (int highlightIter = 0; highlightIter < highlightIters; highlightIter++) {\n        String queryTerm = randomValues[random().nextInt(randomValues.length)];\n        int randomHit = valueToDocId.get(queryTerm).iterator().next();\n        List<StringBuilder> builders = new ArrayList<>();\n        for (String[] fieldValues : docs.get(randomHit).fieldValues) {\n          StringBuilder builder = new StringBuilder();\n          boolean hit = false;\n          for (int i = 0; i < fieldValues.length; i++) {\n            if (queryTerm.equals(fieldValues[i])) {\n              builder.append(\"<b>\").append(queryTerm).append(\"</b>\");\n              hit = true;\n            } else {\n              builder.append(fieldValues[i]);\n            }\n            if (i != fieldValues.length - 1) {\n              builder.append(' ');\n            }\n          }\n          if (hit) {\n            builders.add(builder);\n          }\n        }\n\n        FieldQuery fq = new FieldQuery(tq(queryTerm), true, true);\n        FieldTermStack stack = new FieldTermStack(reader, randomHit, F, fq);\n\n        FieldPhraseList fpl = new FieldPhraseList(stack, fq);\n        SimpleFragListBuilder sflb = new SimpleFragListBuilder(100);\n        FieldFragList ffl = sflb.createFieldFragList(fpl, 300);\n\n        SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n        sfb.setDiscreteMultiValueHighlighting(true);\n        String[] actualFragments = sfb.createFragments(reader, randomHit, F, ffl, numFields);\n        assertEquals(builders.size(), actualFragments.length);\n        for (int i = 0; i < actualFragments.length; i++) {\n          assertEquals(builders.get(i).toString(), actualFragments[i]);\n        }\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"73187ff81dbd931417f46f53360c5dcf390ebde2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73187ff81dbd931417f46f53360c5dcf390ebde2"],"6613659748fe4411a7dcf85266e55db1f95f7315":["73187ff81dbd931417f46f53360c5dcf390ebde2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73187ff81dbd931417f46f53360c5dcf390ebde2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"73187ff81dbd931417f46f53360c5dcf390ebde2":["aba371508186796cc6151d8223a5b4e16d02e26e","6613659748fe4411a7dcf85266e55db1f95f7315","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73187ff81dbd931417f46f53360c5dcf390ebde2","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}