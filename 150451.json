{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    replicator.publish(createRevision(1));\n    Revision old = new IndexRevision(sourceWriter);\n    replicator.publish(createRevision(2));\n    try {\n      replicator.publish(old);\n      fail(\"should have failed to publish an older revision\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","sourceNew":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    replicator.publish(createRevision(1));\n    Revision old = new IndexRevision(sourceWriter);\n    replicator.publish(createRevision(2));\n    try {\n      replicator.publish(old);\n      fail(\"should have failed to publish an older revision\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n  }\n\n","sourceOld":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    replicator.publish(createRevision(1));\n    Revision old = new IndexRevision(sourceWriter);\n    replicator.publish(createRevision(2));\n    try {\n      replicator.publish(old);\n      fail(\"should have failed to publish an older revision\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","sourceNew":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    replicator.publish(createRevision(1));\n    Revision old = new IndexRevision(sourceWriter);\n    replicator.publish(createRevision(2));\n    try {\n      replicator.publish(old);\n      fail(\"should have failed to publish an older revision\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n  }\n\n","sourceOld":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    replicator.publish(createRevision(1));\n    Revision old = new IndexRevision(sourceWriter);\n    replicator.publish(createRevision(2));\n    try {\n      replicator.publish(old);\n      fail(\"should have failed to publish an older revision\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","sourceNew":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    // we look to see that certain files are deleted:\n    if (sourceDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)sourceDir).setEnableVirusScanner(false);\n    }\n    try {\n      replicator.publish(createRevision(1));\n      Revision old = new IndexRevision(sourceWriter);\n      replicator.publish(createRevision(2));\n      try {\n        replicator.publish(old);\n        fail(\"should have failed to publish an older revision\");\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n      assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n    } finally {\n      if (sourceDir instanceof MockDirectoryWrapper) {\n        // set back to on for other tests\n        ((MockDirectoryWrapper)sourceDir).setEnableVirusScanner(true);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    replicator.publish(createRevision(1));\n    Revision old = new IndexRevision(sourceWriter);\n    replicator.publish(createRevision(2));\n    try {\n      replicator.publish(old);\n      fail(\"should have failed to publish an older revision\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","sourceNew":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    replicator.publish(createRevision(1));\n    Revision old = new IndexRevision(sourceWriter);\n    replicator.publish(createRevision(2));\n    try {\n      replicator.publish(old);\n      fail(\"should have failed to publish an older revision\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n  }\n\n","sourceOld":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    // we look to see that certain files are deleted:\n    if (sourceDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)sourceDir).setEnableVirusScanner(false);\n    }\n    try {\n      replicator.publish(createRevision(1));\n      Revision old = new IndexRevision(sourceWriter);\n      replicator.publish(createRevision(2));\n      try {\n        replicator.publish(old);\n        fail(\"should have failed to publish an older revision\");\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n      assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n    } finally {\n      if (sourceDir instanceof MockDirectoryWrapper) {\n        // set back to on for other tests\n        ((MockDirectoryWrapper)sourceDir).setEnableVirusScanner(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","sourceNew":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    replicator.publish(createRevision(1));\n    Revision old = new IndexRevision(sourceWriter);\n    replicator.publish(createRevision(2));\n    try {\n      replicator.publish(old);\n      fail(\"should have failed to publish an older revision\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n  }\n\n","sourceOld":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    // we look to see that certain files are deleted:\n    if (sourceDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)sourceDir).setEnableVirusScanner(false);\n    }\n    try {\n      replicator.publish(createRevision(1));\n      Revision old = new IndexRevision(sourceWriter);\n      replicator.publish(createRevision(2));\n      try {\n        replicator.publish(old);\n        fail(\"should have failed to publish an older revision\");\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n      assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n    } finally {\n      if (sourceDir instanceof MockDirectoryWrapper) {\n        // set back to on for other tests\n        ((MockDirectoryWrapper)sourceDir).setEnableVirusScanner(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","sourceNew":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    replicator.publish(createRevision(1));\n    Revision old = new IndexRevision(sourceWriter);\n    replicator.publish(createRevision(2));\n    try {\n      replicator.publish(old);\n      fail(\"should have failed to publish an older revision\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n  }\n\n","sourceOld":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    // we look to see that certain files are deleted:\n    if (sourceDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)sourceDir).setEnableVirusScanner(false);\n    }\n    try {\n      replicator.publish(createRevision(1));\n      Revision old = new IndexRevision(sourceWriter);\n      replicator.publish(createRevision(2));\n      try {\n        replicator.publish(old);\n        fail(\"should have failed to publish an older revision\");\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n      assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n    } finally {\n      if (sourceDir instanceof MockDirectoryWrapper) {\n        // set back to on for other tests\n        ((MockDirectoryWrapper)sourceDir).setEnableVirusScanner(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","sourceNew":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    replicator.publish(createRevision(1));\n    Revision old = new IndexRevision(sourceWriter);\n    replicator.publish(createRevision(2));\n    try {\n      replicator.publish(old);\n      fail(\"should have failed to publish an older revision\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n  }\n\n","sourceOld":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    // we look to see that certain files are deleted:\n    if (sourceDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)sourceDir).setEnableVirusScanner(false);\n    }\n    try {\n      replicator.publish(createRevision(1));\n      Revision old = new IndexRevision(sourceWriter);\n      replicator.publish(createRevision(2));\n      try {\n        replicator.publish(old);\n        fail(\"should have failed to publish an older revision\");\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n      assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n    } finally {\n      if (sourceDir instanceof MockDirectoryWrapper) {\n        // set back to on for other tests\n        ((MockDirectoryWrapper)sourceDir).setEnableVirusScanner(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testPublishOlderRev().mjava","sourceNew":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    replicator.publish(createRevision(1));\n    Revision old = new IndexRevision(sourceWriter);\n    replicator.publish(createRevision(2));\n    // should fail to publish an older revision\n    expectThrows(IllegalArgumentException.class, () -> {\n      replicator.publish(old);\n    });\n    assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n  }\n\n","sourceOld":"  @Test\n  public void testPublishOlderRev() throws IOException {\n    replicator.publish(createRevision(1));\n    Revision old = new IndexRevision(sourceWriter);\n    replicator.publish(createRevision(2));\n    try {\n      replicator.publish(old);\n      fail(\"should have failed to publish an older revision\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    assertEquals(1, DirectoryReader.listCommits(sourceDir).size());\n  }\n\n","bugFix":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"05fe562aa248790944d43cdd478f512572835ba0":["5a207d19eac354d649c3f0e2cce070017c78125e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"5a207d19eac354d649c3f0e2cce070017c78125e":["05fe562aa248790944d43cdd478f512572835ba0"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}