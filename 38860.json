{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Variable.Type]],List[String],Policy.Session,NodeStateProvider,SolrCloudManager).mjava","commits":[{"id":"7b0249ced9c25c3b173d20c3ca74160b9eade78c","date":1591787635,"type":0,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Variable.Type]],List[String],Policy.Session,NodeStateProvider,SolrCloudManager).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor that allows explicitly passing a {@link NodeStateProvider} and a {@link SolrCloudManager} in order not to\n   * use those obtained through the passed <code>session</code>.\n   * <p>Note the resulting row has a {@link Policy.Session} that may not be consistent with the rest of the Row's state. When rows are copied\n   * as part of a {@link Policy.Session} copy, the copied rows' sessions are eventually updated in\n   * {@link org.apache.solr.client.solrj.cloud.autoscaling.Policy.Session#Session(List, SolrCloudManager, List, Set, List, NodeStateProvider, Policy, Policy.Transaction)}\n   * once the new {@link Policy.Session} instance is available.</p>\n   */\n  Row(String node, List<Pair<String, Variable.Type>> params, List<String> perReplicaAttributes, Policy.Session session,\n      NodeStateProvider nsp, SolrCloudManager cloudManager) {\n    this.session = session;\n    collectionVsShardVsReplicas = nsp.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    List<String> paramNames = params.stream().map(Pair::first).collect(Collectors.toList());\n    Map<String, Object> vals = isLive ? nsp.getNodeValues(node, paramNames) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      Pair<String, Variable.Type> pair = params.get(i);\n      cells[i] = new Cell(i, pair.first(), Clause.validate(pair.first(), vals.get(pair.first()), false), null, pair.second(), this);\n      if (NODE.equals(pair.first())) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n    this.globalCache = new HashMap();\n    this.perCollCache = new HashMap();\n    isAlreadyCopied = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Variable.Type]],List[String],Policy.Session,NodeStateProvider,SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Variable.Type]],List[String],Policy.Session,NodeStateProvider,SolrCloudManager).mjava","sourceNew":"  /**\n   * Constructor that allows explicitly passing a {@link NodeStateProvider} and a {@link SolrCloudManager} in order not to\n   * use those obtained through the passed <code>session</code>.\n   * <p>Note the resulting row has a {@link Policy.Session} that may not be consistent with the rest of the Row's state. When rows are copied\n   * as part of a {@link Policy.Session} copy, the copied rows' sessions are eventually updated in\n   * {@link org.apache.solr.client.solrj.cloud.autoscaling.Policy.Session#Session(List, SolrCloudManager, List, Set, List, NodeStateProvider, Policy, Policy.Transaction)}\n   * once the new {@link Policy.Session} instance is available.</p>\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  Row(String node, List<Pair<String, Variable.Type>> params, List<String> perReplicaAttributes, Policy.Session session,\n      NodeStateProvider nsp, SolrCloudManager cloudManager) {\n    this.session = session;\n    collectionVsShardVsReplicas = nsp.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    List<String> paramNames = params.stream().map(Pair::first).collect(Collectors.toList());\n    Map<String, Object> vals = isLive ? nsp.getNodeValues(node, paramNames) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      Pair<String, Variable.Type> pair = params.get(i);\n      cells[i] = new Cell(i, pair.first(), Clause.validate(pair.first(), vals.get(pair.first()), false), null, pair.second(), this);\n      if (NODE.equals(pair.first())) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n    this.globalCache = new HashMap();\n    this.perCollCache = new HashMap();\n    isAlreadyCopied = true;\n  }\n\n","sourceOld":"  /**\n   * Constructor that allows explicitly passing a {@link NodeStateProvider} and a {@link SolrCloudManager} in order not to\n   * use those obtained through the passed <code>session</code>.\n   * <p>Note the resulting row has a {@link Policy.Session} that may not be consistent with the rest of the Row's state. When rows are copied\n   * as part of a {@link Policy.Session} copy, the copied rows' sessions are eventually updated in\n   * {@link org.apache.solr.client.solrj.cloud.autoscaling.Policy.Session#Session(List, SolrCloudManager, List, Set, List, NodeStateProvider, Policy, Policy.Transaction)}\n   * once the new {@link Policy.Session} instance is available.</p>\n   */\n  Row(String node, List<Pair<String, Variable.Type>> params, List<String> perReplicaAttributes, Policy.Session session,\n      NodeStateProvider nsp, SolrCloudManager cloudManager) {\n    this.session = session;\n    collectionVsShardVsReplicas = nsp.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    List<String> paramNames = params.stream().map(Pair::first).collect(Collectors.toList());\n    Map<String, Object> vals = isLive ? nsp.getNodeValues(node, paramNames) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      Pair<String, Variable.Type> pair = params.get(i);\n      cells[i] = new Cell(i, pair.first(), Clause.validate(pair.first(), vals.get(pair.first()), false), null, pair.second(), this);\n      if (NODE.equals(pair.first())) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n    this.globalCache = new HashMap();\n    this.perCollCache = new HashMap();\n    isAlreadyCopied = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Variable.Type]],List[String],Policy.Session,NodeStateProvider,SolrCloudManager).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructor that allows explicitly passing a {@link NodeStateProvider} and a {@link SolrCloudManager} in order not to\n   * use those obtained through the passed <code>session</code>.\n   * <p>Note the resulting row has a {@link Policy.Session} that may not be consistent with the rest of the Row's state. When rows are copied\n   * as part of a {@link Policy.Session} copy, the copied rows' sessions are eventually updated in\n   * {@link org.apache.solr.client.solrj.cloud.autoscaling.Policy.Session#Session(List, SolrCloudManager, List, Set, List, NodeStateProvider, Policy, Policy.Transaction)}\n   * once the new {@link Policy.Session} instance is available.</p>\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  Row(String node, List<Pair<String, Variable.Type>> params, List<String> perReplicaAttributes, Policy.Session session,\n      NodeStateProvider nsp, SolrCloudManager cloudManager) {\n    this.session = session;\n    collectionVsShardVsReplicas = nsp.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    List<String> paramNames = params.stream().map(Pair::first).collect(Collectors.toList());\n    Map<String, Object> vals = isLive ? nsp.getNodeValues(node, paramNames) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      Pair<String, Variable.Type> pair = params.get(i);\n      cells[i] = new Cell(i, pair.first(), Clause.validate(pair.first(), vals.get(pair.first()), false), null, pair.second(), this);\n      if (NODE.equals(pair.first())) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n    this.globalCache = new HashMap();\n    this.perCollCache = new HashMap();\n    isAlreadyCopied = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["7b0249ced9c25c3b173d20c3ca74160b9eade78c"],"7b0249ced9c25c3b173d20c3ca74160b9eade78c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b0249ced9c25c3b173d20c3ca74160b9eade78c"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"7b0249ced9c25c3b173d20c3ca74160b9eade78c":["527adea7ce767368d7317339023e18e39702132e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}