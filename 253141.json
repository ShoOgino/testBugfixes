{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        overseer.offerStateUpdate(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":["19498030e0adab22f604f935cae3c03dcf0952a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  @SuppressWarnings({\"unchecked\"})\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        overseer.offerStateUpdate(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        overseer.offerStateUpdate(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":4,"author":"murblanc","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  //TODO should we not remove in the next release ?\n  @SuppressWarnings({\"unchecked\"})\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        overseer.offerStateUpdate(Utils.toJSON(m));\n      }\n      timeout.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}