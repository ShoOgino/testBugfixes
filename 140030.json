{"path":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","sourceNew":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    AtomicBoolean failed = new AtomicBoolean();\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(random.nextLong()), failed);\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    AtomicBoolean failed = new AtomicBoolean();\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(random.nextLong()), failed);\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","sourceNew":null,"sourceOld":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    AtomicBoolean failed = new AtomicBoolean();\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(random.nextLong()), failed);\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06584e6e98d592b34e1329b384182f368d2025e8"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}