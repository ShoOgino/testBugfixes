{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = DirectoryReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    reader.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = DirectoryReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getTestName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = DirectoryReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    reader.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = DirectoryReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getTestName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = DirectoryReader.open(runData.getDirectory());\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    reader.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getTestName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = DirectoryReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getTestName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = DirectoryReader.open(runData.getDirectory());\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits.value);\n    reader.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getTestName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = DirectoryReader.open(runData.getDirectory());\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"ByteBuffersDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getTestName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = DirectoryReader.open(runData.getDirectory());\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits.value);\n    reader.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getTestName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = DirectoryReader.open(runData.getDirectory());\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits.value);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d77dafd89756a5161d244985903e3487ca109182"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}