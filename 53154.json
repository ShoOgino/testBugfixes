{"path":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveregex().mjava","commits":[{"id":"92cd1849f2fc9035639005768ae063a253af7aae","date":1413758731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveregex().mjava","pathOld":"/dev/null","sourceNew":" @Test\n  public void testRemoveregex() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"ccc\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"bbb\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"20\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"21\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"ddd\"});\n    assertU(adoc(doc));\n\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    List<String> removeList = new ArrayList<>();\n    removeList.add(\".b.\");\n    removeList.add(\"c+c\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"21\");\n    removeList = new ArrayList<>();\n    removeList.add(\"bb*\");\n    removeList.add(\"cc+\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", \"a.a\")); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6a25dacbb15b3a184ab77b437a6b4d54ff286b5d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveregex().mjava","pathOld":"/dev/null","sourceNew":" @Test\n  public void testRemoveregex() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"ccc\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"bbb\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"20\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"21\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"ddd\"});\n    assertU(adoc(doc));\n\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    List<String> removeList = new ArrayList<>();\n    removeList.add(\".b.\");\n    removeList.add(\"c+c\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"21\");\n    removeList = new ArrayList<>();\n    removeList.add(\"bb*\");\n    removeList.add(\"cc+\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", \"a.a\")); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a25dacbb15b3a184ab77b437a6b4d54ff286b5d","date":1570469935,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveregex().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveregex().mjava","sourceNew":"  @Test\n  public void testRemoveregex() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"ccc\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"bbb\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"20\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"21\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"ddd\"});\n    assertU(adoc(doc));\n\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    List<String> removeList = new ArrayList<>();\n    removeList.add(\".b.\");\n    removeList.add(\"c+c\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '2']\"); // removeregex does remove all occurrences\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"21\");\n    removeList = new ArrayList<>();\n    removeList.add(\"bb*\");\n    removeList.add(\"cc+\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", \"a.a\")); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":" @Test\n  public void testRemoveregex() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"ccc\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"bbb\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"20\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"21\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"ddd\"});\n    assertU(adoc(doc));\n\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    List<String> removeList = new ArrayList<>();\n    removeList.add(\".b.\");\n    removeList.add(\"c+c\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"21\");\n    removeList = new ArrayList<>();\n    removeList.add(\"bb*\");\n    removeList.add(\"cc+\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", \"a.a\")); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":["92cd1849f2fc9035639005768ae063a253af7aae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveregex().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveregex().mjava","sourceNew":"  @Test\n  public void testRemoveregex() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"ccc\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"bbb\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"20\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"21\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"ddd\"});\n    assertU(adoc(doc));\n\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    List<String> removeList = new ArrayList<>();\n    removeList.add(\".b.\");\n    removeList.add(\"c+c\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '2']\"); // removeregex does remove all occurrences\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"21\");\n    removeList = new ArrayList<>();\n    removeList.add(\"bb*\");\n    removeList.add(\"cc+\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", \"a.a\")); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":" @Test\n  public void testRemoveregex() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"ccc\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"bbb\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"20\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\", \"ddd\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"21\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"bbb\", \"ddd\"});\n    assertU(adoc(doc));\n\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    List<String> removeList = new ArrayList<>();\n    removeList.add(\".b.\");\n    removeList.add(\"c+c\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"21\");\n    removeList = new ArrayList<>();\n    removeList.add(\"bb*\");\n    removeList.add(\"cc+\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"cat\", ImmutableMap.of(\"removeregex\", \"a.a\")); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92cd1849f2fc9035639005768ae063a253af7aae"],"6a25dacbb15b3a184ab77b437a6b4d54ff286b5d":["92cd1849f2fc9035639005768ae063a253af7aae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92cd1849f2fc9035639005768ae063a253af7aae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a25dacbb15b3a184ab77b437a6b4d54ff286b5d"],"b0b597c65628ca9e73913a07e81691f8229bae35":["92cd1849f2fc9035639005768ae063a253af7aae","6a25dacbb15b3a184ab77b437a6b4d54ff286b5d"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","92cd1849f2fc9035639005768ae063a253af7aae"],"6a25dacbb15b3a184ab77b437a6b4d54ff286b5d":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"92cd1849f2fc9035639005768ae063a253af7aae":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","6a25dacbb15b3a184ab77b437a6b4d54ff286b5d","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}