{"path":"src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#resetPostingsData().mjava","sourceNew":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n    numBytesUsed = 0;\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void resetPostingsData() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    nextWriteDocID = 0;\n    files = null;\n    balanceRAM();\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++) {\n      threadStates[i].numThreads = 0;\n      threadStates[i].resetPostings();\n    }\n    numBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#doAfterFlush().mjava","sourceNew":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n    numBytesUsed = 0;\n  }\n\n","sourceOld":"  /** Reset after a flush */\n  private void doAfterFlush() throws IOException {\n    // All ThreadStates should be idle when we are called\n    assert allThreadsIdle();\n    threadBindings.clear();\n    waitQueue.reset();\n    segment = null;\n    numDocsInRAM = 0;\n    nextDocID = 0;\n    bufferIsFull = false;\n    flushPending = false;\n    for(int i=0;i<threadStates.length;i++)\n      threadStates[i].doAfterFlush();\n    numBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5350389bf83287111f7760b9e3db3af8e3648474"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}