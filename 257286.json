{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups).mjava","commits":[{"id":"307cff5af2b00f126fdf9d3435b75d5ed4d0f402","date":1305370109,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups).mjava","pathOld":"/dev/null","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    \n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      assertEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c12f3f9ad631aa7d2e93e90bf877662f0df0cdc4","date":1305515875,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups).mjava","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    \n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    \n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      assertEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5f61d6a2927b52517a31a8bf022549d33b1dfec","date":1305652854,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups).mjava","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    \n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups).mjava","pathOld":"/dev/null","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups).mjava","pathOld":"/dev/null","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ce36a160d1241ae9c70e109dc3fdfdfb009674a","date":1307033216,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups).mjava","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual, boolean verifyGroupValues) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d62f5453a200cec2cbb60148de159dbf55591e9d","date":1307049300,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups).mjava","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual, boolean verifyGroupValues) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups).mjava","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual, boolean verifyGroupValues) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5f61d6a2927b52517a31a8bf022549d33b1dfec":["c12f3f9ad631aa7d2e93e90bf877662f0df0cdc4"],"3ce36a160d1241ae9c70e109dc3fdfdfb009674a":["c5f61d6a2927b52517a31a8bf022549d33b1dfec"],"c12f3f9ad631aa7d2e93e90bf877662f0df0cdc4":["307cff5af2b00f126fdf9d3435b75d5ed4d0f402"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5f61d6a2927b52517a31a8bf022549d33b1dfec"],"307cff5af2b00f126fdf9d3435b75d5ed4d0f402":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5f61d6a2927b52517a31a8bf022549d33b1dfec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["c3a8a449466c1ff7ce2274fe73dab487256964b4","3ce36a160d1241ae9c70e109dc3fdfdfb009674a"],"d62f5453a200cec2cbb60148de159dbf55591e9d":["a3776dccca01c11e7046323cfad46a3b4a471233","3ce36a160d1241ae9c70e109dc3fdfdfb009674a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ce36a160d1241ae9c70e109dc3fdfdfb009674a"]},"commit2Childs":{"c5f61d6a2927b52517a31a8bf022549d33b1dfec":["3ce36a160d1241ae9c70e109dc3fdfdfb009674a","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"3ce36a160d1241ae9c70e109dc3fdfdfb009674a":["c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c12f3f9ad631aa7d2e93e90bf877662f0df0cdc4":["c5f61d6a2927b52517a31a8bf022549d33b1dfec"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c715a0f99152be7566591f323c6c5a25725a1bcb"],"307cff5af2b00f126fdf9d3435b75d5ed4d0f402":["c12f3f9ad631aa7d2e93e90bf877662f0df0cdc4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["d62f5453a200cec2cbb60148de159dbf55591e9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3a8a449466c1ff7ce2274fe73dab487256964b4","307cff5af2b00f126fdf9d3435b75d5ed4d0f402","a3776dccca01c11e7046323cfad46a3b4a471233"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"d62f5453a200cec2cbb60148de159dbf55591e9d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}