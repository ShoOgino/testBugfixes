{"path":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","commits":[{"id":"dded3df9e710f258905cff1def2f25eb51c62e0f","date":1475158173,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/SnitchContext#getZkJson(String).mjava","sourceNew":"  public  Map getZkJson(String path) {\n    if (coreContainer.isZooKeeperAware()) {\n      try {\n        byte[] data = coreContainer.getZkController().getZkClient().getData(path, null, new Stat(), true);\n        if (data == null) return null;\n        return (Map) Utils.fromJSON(data);\n      } catch (Exception e) {\n        log.warn(\"Unable to read from ZK path : \" + path, e);\n        return null;\n\n      }\n    } else {\n      return null;\n    }\n\n  }\n\n","sourceOld":"  public Map getZkJson(String path) {\n    if (snitchInfo.getCoreContainer().isZooKeeperAware()) {\n      try {\n        byte[] data = snitchInfo.getCoreContainer().getZkController().getZkClient().getData(path, null, new Stat(), true);\n        if (data == null) return null;\n        return (Map) Utils.fromJSON(data);\n      } catch (Exception e) {\n        log.warn(\"Unable to read from ZK path : \" + path, e);\n        return null;\n\n      }\n    } else {\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","pathOld":"/dev/null","sourceNew":"  public  Map getZkJson(String path) {\n    if (coreContainer.isZooKeeperAware()) {\n      try {\n        byte[] data = coreContainer.getZkController().getZkClient().getData(path, null, new Stat(), true);\n        if (data == null) return null;\n        return (Map) Utils.fromJSON(data);\n      } catch (Exception e) {\n        log.warn(\"Unable to read from ZK path : \" + path, e);\n        return null;\n\n      }\n    } else {\n      return null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","pathOld":"/dev/null","sourceNew":"  public  Map getZkJson(String path) {\n    if (coreContainer.isZooKeeperAware()) {\n      try {\n        byte[] data = coreContainer.getZkController().getZkClient().getData(path, null, new Stat(), true);\n        if (data == null) return null;\n        return (Map) Utils.fromJSON(data);\n      } catch (Exception e) {\n        log.warn(\"Unable to read from ZK path : \" + path, e);\n        return null;\n\n      }\n    } else {\n      return null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","sourceNew":"  public Map getZkJson(String path) throws KeeperException, InterruptedException {\n    if (coreContainer.isZooKeeperAware()) {\n      return Utils.getJson(coreContainer.getZkController().getZkClient(), path, true);\n    } else {\n      return Collections.emptyMap();\n    }\n  }\n\n","sourceOld":"  public  Map getZkJson(String path) {\n    if (coreContainer.isZooKeeperAware()) {\n      try {\n        byte[] data = coreContainer.getZkController().getZkClient().getData(path, null, new Stat(), true);\n        if (data == null) return null;\n        return (Map) Utils.fromJSON(data);\n      } catch (Exception e) {\n        log.warn(\"Unable to read from ZK path : \" + path, e);\n        return null;\n\n      }\n    } else {\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","sourceNew":"  public Map getZkJson(String path) throws KeeperException, InterruptedException {\n    if (coreContainer.isZooKeeperAware()) {\n      return Utils.getJson(coreContainer.getZkController().getZkClient(), path, true);\n    } else {\n      return Collections.emptyMap();\n    }\n  }\n\n","sourceOld":"  public  Map getZkJson(String path) {\n    if (coreContainer.isZooKeeperAware()) {\n      try {\n        byte[] data = coreContainer.getZkController().getZkClient().getData(path, null, new Stat(), true);\n        if (data == null) return null;\n        return (Map) Utils.fromJSON(data);\n      } catch (Exception e) {\n        log.warn(\"Unable to read from ZK path : \" + path, e);\n        return null;\n\n      }\n    } else {\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","sourceNew":"  public Map getZkJson(String path) throws KeeperException, InterruptedException {\n    if (coreContainer.isZooKeeperAware()) {\n      return Utils.getJson(coreContainer.getZkController().getZkClient(), path, true);\n    } else {\n      return Collections.emptyMap();\n    }\n  }\n\n","sourceOld":"  public  Map getZkJson(String path) {\n    if (coreContainer.isZooKeeperAware()) {\n      try {\n        byte[] data = coreContainer.getZkController().getZkClient().getData(path, null, new Stat(), true);\n        if (data == null) return null;\n        return (Map) Utils.fromJSON(data);\n      } catch (Exception e) {\n        log.warn(\"Unable to read from ZK path : \" + path, e);\n        return null;\n\n      }\n    } else {\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","sourceNew":"  public Map getZkJson(String path) throws KeeperException, InterruptedException {\n    if (coreContainer.isZooKeeperAware()) {\n      return Utils.getJson(coreContainer.getZkController().getZkClient(), path, true);\n    } else {\n      return Collections.emptyMap();\n    }\n  }\n\n","sourceOld":"  public  Map getZkJson(String path) {\n    if (coreContainer.isZooKeeperAware()) {\n      try {\n        byte[] data = coreContainer.getZkController().getZkClient().getData(path, null, new Stat(), true);\n        if (data == null) return null;\n        return (Map) Utils.fromJSON(data);\n      } catch (Exception e) {\n        log.warn(\"Unable to read from ZK path : \" + path, e);\n        return null;\n\n      }\n    } else {\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6397103f7076f0b5ee4edf5b3a63c750a072ff65","date":1510231708,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","sourceNew":"  public Map getZkJson(String path) throws KeeperException, InterruptedException {\n    try {\n      return Utils.getJson(cloudManager.getDistribStateManager(), path) ;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n  }\n\n","sourceOld":"  public Map getZkJson(String path) throws KeeperException, InterruptedException {\n    if (coreContainer.isZooKeeperAware()) {\n      return Utils.getJson(coreContainer.getZkController().getZkClient(), path, true);\n    } else {\n      return Collections.emptyMap();\n    }\n  }\n\n","bugFix":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd","dded3df9e710f258905cff1def2f25eb51c62e0f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#getZkJson(String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public Map getZkJson(String path) throws KeeperException, InterruptedException {\n    try {\n      return Utils.getJson(cloudManager.getDistribStateManager(), path) ;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n  }\n\n","sourceOld":"  public Map getZkJson(String path) throws KeeperException, InterruptedException {\n    try {\n      return Utils.getJson(cloudManager.getDistribStateManager(), path) ;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dded3df9e710f258905cff1def2f25eb51c62e0f"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","dded3df9e710f258905cff1def2f25eb51c62e0f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}