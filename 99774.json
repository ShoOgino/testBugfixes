{"path":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testCopyOfSubArray().mjava","commits":[{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":0,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testCopyOfSubArray().mjava","pathOld":"/dev/null","sourceNew":"  public void testCopyOfSubArray() {\n    short[] shortArray = {1, 2, 3};\n    assertArrayEquals(new short[]{1}, copyOfSubArray(shortArray, 0, 1));\n    assertArrayEquals(new short[]{1, 2, 3}, copyOfSubArray(shortArray, 0, 3));\n    assertEquals(0, copyOfSubArray(shortArray, 0, 0).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(shortArray, 0, 4 + random().nextInt(10)));\n\n    int[] intArray = {1, 2, 3};\n    assertArrayEquals(new int[]{1, 2}, copyOfSubArray(intArray, 0, 2));\n    assertArrayEquals(new int[]{1, 2, 3}, copyOfSubArray(intArray, 0, 3));\n    assertEquals(0, copyOfSubArray(intArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(intArray, 1, 4 + random().nextInt(10)));\n\n    long[] longArray = {1, 2, 3};\n    assertArrayEquals(new long[]{2}, copyOfSubArray(longArray, 1, 2));\n    assertArrayEquals(new long[]{1, 2, 3}, copyOfSubArray(longArray, 0, 3));\n    assertEquals(0, copyOfSubArray(longArray, 2, 2).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(longArray, 2, 4 + random().nextInt(10)));\n\n    float[] floatArray = {0.1f, 0.2f, 0.3f};\n    assertArrayEquals(new float[]{0.2f, 0.3f}, copyOfSubArray(floatArray, 1, 3), 0.001f);\n    assertArrayEquals(new float[]{0.1f, 0.2f, 0.3f}, copyOfSubArray(floatArray, 0, 3), 0.001f);\n    assertEquals(0, copyOfSubArray(floatArray, 0, 0).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(floatArray, 3, 4 + random().nextInt(10)));\n\n    double[] doubleArray = {0.1, 0.2, 0.3};\n    assertArrayEquals(new double[]{0.3}, copyOfSubArray(doubleArray, 2, 3), 0.001);\n    assertArrayEquals(new double[]{0.1, 0.2, 0.3}, copyOfSubArray(doubleArray, 0, 3), 0.001);\n    assertEquals(0, copyOfSubArray(doubleArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(doubleArray, 0, 4 + random().nextInt(10)));\n\n    byte[] byteArray = {1, 2, 3};\n    assertArrayEquals(new byte[]{1}, copyOfSubArray(byteArray, 0, 1));\n    assertArrayEquals(new byte[]{1, 2, 3}, copyOfSubArray(byteArray, 0, 3));\n    assertEquals(0, copyOfSubArray(byteArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(byteArray, 1, 4 + random().nextInt(10)));\n\n    char[] charArray = {'a', 'b', 'c'};\n    assertArrayEquals(new char[]{'a', 'b'}, copyOfSubArray(charArray, 0, 2));\n    assertArrayEquals(new char[]{'a', 'b', 'c'}, copyOfSubArray(charArray, 0, 3));\n    assertEquals(0, copyOfSubArray(charArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(charArray, 3, 4));\n\n    String[] objectArray = {\"a1\", \"b2\", \"c3\"};\n    assertArrayEquals(new String[]{\"a1\"}, copyOfSubArray(objectArray, 0, 1));\n    assertArrayEquals(new String[]{\"a1\", \"b2\", \"c3\"}, copyOfSubArray(objectArray, 0, 3));\n    assertEquals(0, copyOfSubArray(objectArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(objectArray, 2, 5));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testCopyOfSubArray().mjava","pathOld":"/dev/null","sourceNew":"  public void testCopyOfSubArray() {\n    short[] shortArray = {1, 2, 3};\n    assertArrayEquals(new short[]{1}, copyOfSubArray(shortArray, 0, 1));\n    assertArrayEquals(new short[]{1, 2, 3}, copyOfSubArray(shortArray, 0, 3));\n    assertEquals(0, copyOfSubArray(shortArray, 0, 0).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(shortArray, 0, 4 + random().nextInt(10)));\n\n    int[] intArray = {1, 2, 3};\n    assertArrayEquals(new int[]{1, 2}, copyOfSubArray(intArray, 0, 2));\n    assertArrayEquals(new int[]{1, 2, 3}, copyOfSubArray(intArray, 0, 3));\n    assertEquals(0, copyOfSubArray(intArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(intArray, 1, 4 + random().nextInt(10)));\n\n    long[] longArray = {1, 2, 3};\n    assertArrayEquals(new long[]{2}, copyOfSubArray(longArray, 1, 2));\n    assertArrayEquals(new long[]{1, 2, 3}, copyOfSubArray(longArray, 0, 3));\n    assertEquals(0, copyOfSubArray(longArray, 2, 2).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(longArray, 2, 4 + random().nextInt(10)));\n\n    float[] floatArray = {0.1f, 0.2f, 0.3f};\n    assertArrayEquals(new float[]{0.2f, 0.3f}, copyOfSubArray(floatArray, 1, 3), 0.001f);\n    assertArrayEquals(new float[]{0.1f, 0.2f, 0.3f}, copyOfSubArray(floatArray, 0, 3), 0.001f);\n    assertEquals(0, copyOfSubArray(floatArray, 0, 0).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(floatArray, 3, 4 + random().nextInt(10)));\n\n    double[] doubleArray = {0.1, 0.2, 0.3};\n    assertArrayEquals(new double[]{0.3}, copyOfSubArray(doubleArray, 2, 3), 0.001);\n    assertArrayEquals(new double[]{0.1, 0.2, 0.3}, copyOfSubArray(doubleArray, 0, 3), 0.001);\n    assertEquals(0, copyOfSubArray(doubleArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(doubleArray, 0, 4 + random().nextInt(10)));\n\n    byte[] byteArray = {1, 2, 3};\n    assertArrayEquals(new byte[]{1}, copyOfSubArray(byteArray, 0, 1));\n    assertArrayEquals(new byte[]{1, 2, 3}, copyOfSubArray(byteArray, 0, 3));\n    assertEquals(0, copyOfSubArray(byteArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(byteArray, 1, 4 + random().nextInt(10)));\n\n    char[] charArray = {'a', 'b', 'c'};\n    assertArrayEquals(new char[]{'a', 'b'}, copyOfSubArray(charArray, 0, 2));\n    assertArrayEquals(new char[]{'a', 'b', 'c'}, copyOfSubArray(charArray, 0, 3));\n    assertEquals(0, copyOfSubArray(charArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(charArray, 3, 4));\n\n    String[] objectArray = {\"a1\", \"b2\", \"c3\"};\n    assertArrayEquals(new String[]{\"a1\"}, copyOfSubArray(objectArray, 0, 1));\n    assertArrayEquals(new String[]{\"a1\", \"b2\", \"c3\"}, copyOfSubArray(objectArray, 0, 3));\n    assertEquals(0, copyOfSubArray(objectArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(objectArray, 2, 5));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testCopyOfSubArray().mjava","pathOld":"/dev/null","sourceNew":"  public void testCopyOfSubArray() {\n    short[] shortArray = {1, 2, 3};\n    assertArrayEquals(new short[]{1}, copyOfSubArray(shortArray, 0, 1));\n    assertArrayEquals(new short[]{1, 2, 3}, copyOfSubArray(shortArray, 0, 3));\n    assertEquals(0, copyOfSubArray(shortArray, 0, 0).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(shortArray, 0, 4 + random().nextInt(10)));\n\n    int[] intArray = {1, 2, 3};\n    assertArrayEquals(new int[]{1, 2}, copyOfSubArray(intArray, 0, 2));\n    assertArrayEquals(new int[]{1, 2, 3}, copyOfSubArray(intArray, 0, 3));\n    assertEquals(0, copyOfSubArray(intArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(intArray, 1, 4 + random().nextInt(10)));\n\n    long[] longArray = {1, 2, 3};\n    assertArrayEquals(new long[]{2}, copyOfSubArray(longArray, 1, 2));\n    assertArrayEquals(new long[]{1, 2, 3}, copyOfSubArray(longArray, 0, 3));\n    assertEquals(0, copyOfSubArray(longArray, 2, 2).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(longArray, 2, 4 + random().nextInt(10)));\n\n    float[] floatArray = {0.1f, 0.2f, 0.3f};\n    assertArrayEquals(new float[]{0.2f, 0.3f}, copyOfSubArray(floatArray, 1, 3), 0.001f);\n    assertArrayEquals(new float[]{0.1f, 0.2f, 0.3f}, copyOfSubArray(floatArray, 0, 3), 0.001f);\n    assertEquals(0, copyOfSubArray(floatArray, 0, 0).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(floatArray, 3, 4 + random().nextInt(10)));\n\n    double[] doubleArray = {0.1, 0.2, 0.3};\n    assertArrayEquals(new double[]{0.3}, copyOfSubArray(doubleArray, 2, 3), 0.001);\n    assertArrayEquals(new double[]{0.1, 0.2, 0.3}, copyOfSubArray(doubleArray, 0, 3), 0.001);\n    assertEquals(0, copyOfSubArray(doubleArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(doubleArray, 0, 4 + random().nextInt(10)));\n\n    byte[] byteArray = {1, 2, 3};\n    assertArrayEquals(new byte[]{1}, copyOfSubArray(byteArray, 0, 1));\n    assertArrayEquals(new byte[]{1, 2, 3}, copyOfSubArray(byteArray, 0, 3));\n    assertEquals(0, copyOfSubArray(byteArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(byteArray, 1, 4 + random().nextInt(10)));\n\n    char[] charArray = {'a', 'b', 'c'};\n    assertArrayEquals(new char[]{'a', 'b'}, copyOfSubArray(charArray, 0, 2));\n    assertArrayEquals(new char[]{'a', 'b', 'c'}, copyOfSubArray(charArray, 0, 3));\n    assertEquals(0, copyOfSubArray(charArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(charArray, 3, 4));\n\n    String[] objectArray = {\"a1\", \"b2\", \"c3\"};\n    assertArrayEquals(new String[]{\"a1\"}, copyOfSubArray(objectArray, 0, 1));\n    assertArrayEquals(new String[]{\"a1\", \"b2\", \"c3\"}, copyOfSubArray(objectArray, 0, 3));\n    assertEquals(0, copyOfSubArray(objectArray, 1, 1).length);\n    expectThrows(IndexOutOfBoundsException.class, () -> copyOfSubArray(objectArray, 2, 5));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}