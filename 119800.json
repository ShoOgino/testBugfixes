{"path":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#docSpansOrdered(Spans,Spans).mjava","commits":[{"id":"98bc22650ab0fe51f9c00513397bfa42a64fc663","date":1161986633,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#docSpansOrdered(Spans,Spans).mjava","pathOld":"/dev/null","sourceNew":"  /** Check whether two Spans in the same document are ordered.\n   * @param spans1 \n   * @param spans2 \n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean docSpansOrdered(Spans spans1, Spans spans2) {\n    assert spans1.doc() == spans2.doc() : \"doc1 \" + spans1.doc() + \" != doc2 \" + spans2.doc();\n    int start1 = spans1.start();\n    int start2 = spans2.start();\n    /* Do not call docSpansOrdered(int,int,int,int) to avoid invoking .end() : */\n    return (start1 == start2) ? (spans1.end() < spans2.end()) : (start1 < start2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#docSpansOrdered(Spans,Spans).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#docSpansOrdered(Spans,Spans).mjava","sourceNew":"  /** Check whether two Spans in the same document are ordered.\n   * @param spans1 \n   * @param spans2 \n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean docSpansOrdered(Spans spans1, Spans spans2) {\n    assert spans1.doc() == spans2.doc() : \"doc1 \" + spans1.doc() + \" != doc2 \" + spans2.doc();\n    int start1 = spans1.start();\n    int start2 = spans2.start();\n    /* Do not call docSpansOrdered(int,int,int,int) to avoid invoking .end() : */\n    return (start1 == start2) ? (spans1.end() < spans2.end()) : (start1 < start2);\n  }\n\n","sourceOld":"  /** Check whether two Spans in the same document are ordered.\n   * @param spans1 \n   * @param spans2 \n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean docSpansOrdered(Spans spans1, Spans spans2) {\n    assert spans1.doc() == spans2.doc() : \"doc1 \" + spans1.doc() + \" != doc2 \" + spans2.doc();\n    int start1 = spans1.start();\n    int start2 = spans2.start();\n    /* Do not call docSpansOrdered(int,int,int,int) to avoid invoking .end() : */\n    return (start1 == start2) ? (spans1.end() < spans2.end()) : (start1 < start2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["98bc22650ab0fe51f9c00513397bfa42a64fc663"]},"commit2Childs":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}