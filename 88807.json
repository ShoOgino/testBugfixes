{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss(long).mjava","sourceNew":"  private long testConcurrentIndexing(long docId) throws Exception {\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2);\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try {\n      concurrentClient.setConnectionTimeout(120000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    } finally {\n      concurrentClient.shutdown();\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long testIndexingWithSuss(long docId) throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 10, 2);\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try {\n      suss.setConnectionTimeout(120000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(suss, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      suss.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    } finally {\n      suss.shutdown();\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","sourceNew":"  private long testConcurrentIndexing(long docId) throws Exception {\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2)) {\n      concurrentClient.setConnectionTimeout(120000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long testConcurrentIndexing(long docId) throws Exception {\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2);\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try {\n      concurrentClient.setConnectionTimeout(120000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    } finally {\n      concurrentClient.shutdown();\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","sourceNew":"  private long testConcurrentIndexing(long docId) throws Exception {\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try (ConcurrentUpdateSolrClient concurrentClient = getConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2)) {\n      concurrentClient.setConnectionTimeout(120000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long testConcurrentIndexing(long docId) throws Exception {\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2)) {\n      concurrentClient.setConnectionTimeout(120000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","sourceNew":"  private long testConcurrentIndexing(long docId) throws Exception {\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try (ConcurrentUpdateSolrClient concurrentClient = getConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2)) {\n      concurrentClient.setConnectionTimeout(120000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long testConcurrentIndexing(long docId) throws Exception {\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2)) {\n      concurrentClient.setConnectionTimeout(120000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","sourceNew":"  private long testConcurrentIndexing(long docId) throws Exception {\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try (ConcurrentUpdateSolrClient concurrentClient = getConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2, 120000)) {\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long testConcurrentIndexing(long docId) throws Exception {\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try (ConcurrentUpdateSolrClient concurrentClient = getConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2)) {\n      concurrentClient.setConnectionTimeout(120000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","sourceNew":"  private long testConcurrentIndexing(long docId) throws Exception {\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try (ConcurrentUpdateSolrClient concurrentClient = getConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2, 120000)) {\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long testConcurrentIndexing(long docId) throws Exception {\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try (ConcurrentUpdateSolrClient concurrentClient = getConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2)) {\n      concurrentClient.setConnectionTimeout(120000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b","date":1576537086,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","sourceNew":null,"sourceOld":"  private long testConcurrentIndexing(long docId) throws Exception {\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try (ConcurrentUpdateSolrClient concurrentClient = getConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2, 120000)) {\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","sourceNew":null,"sourceOld":"  private long testConcurrentIndexing(long docId) throws Exception {\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try (ConcurrentUpdateSolrClient concurrentClient = getConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2, 120000)) {\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43d1e498704edd2bba13548a189eed4dfccff11b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","43d1e498704edd2bba13548a189eed4dfccff11b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b945b8f5bba0303382bc69d60c0c287714f23328":["43d1e498704edd2bba13548a189eed4dfccff11b","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["43d1e498704edd2bba13548a189eed4dfccff11b"]},"commit2Childs":{"43d1e498704edd2bba13548a189eed4dfccff11b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","b945b8f5bba0303382bc69d60c0c287714f23328","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}