{"path":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#measureObjectSize(Object,Set[Object]).mjava","commits":[{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#measureObjectSize(Object,Set[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Recursive descend into an object.\n   */\n  private static long measureObjectSize(Object obj, Set<Object> seen) {\n    if (obj == null) {\n      return 0;\n    }\n\n    // skip if we have seen before\n    if (seen.contains(obj)) {\n      return 0;\n    }\n\n    // add to seen\n    seen.add(obj);\n\n    Class<?> clazz = obj.getClass();\n    if (clazz.isArray()) {\n      return measureArraySize(obj, seen);\n    }\n\n    long size = NUM_BYTES_OBJECT_HEADER;\n    long innerSize = 0L;\n\n    // walk type hierarchy\n    while (clazz != null) {\n      final Field[] fields = clazz.getDeclaredFields();\n      for (final Field f : fields) {\n        if (Modifier.isStatic(f.getModifiers())) {\n          continue;\n        }\n\n        size = reflectFieldSize(size, f);\n        \n        if (!f.getType().isPrimitive()) {\n          try {\n            f.setAccessible(true);\n            innerSize += measureObjectSize(f.get(obj), seen);\n          } catch (IllegalAccessException ex) {\n            // this should never happen as we enable setAccessible()!\n            throw new RuntimeException(\"Cannot reflect instance field: \" +\n              f.getDeclaringClass().getName() + \"#\" + f.getName(), ex);\n          }\n        }\n      }\n      clazz = clazz.getSuperclass();\n    }\n    return alignObjectSize(size) + innerSize;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10cd47aac3c4e8c583740a750335f8aab14555b3","date":1332522358,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#measureObjectSize(Object,Set[Object]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Recursive descend into an object.\n   */\n  private static long measureObjectSize(Object obj, Set<Object> seen) {\n    if (obj == null) {\n      return 0;\n    }\n\n    // skip if we have seen before\n    if (seen.contains(obj)) {\n      return 0;\n    }\n\n    // add to seen\n    seen.add(obj);\n\n    Class<?> clazz = obj.getClass();\n    if (clazz.isArray()) {\n      return measureArraySize(obj, seen);\n    }\n\n    long size = NUM_BYTES_OBJECT_HEADER;\n    long innerSize = 0L;\n\n    // walk type hierarchy\n    while (clazz != null) {\n      final Field[] fields = clazz.getDeclaredFields();\n      for (final Field f : fields) {\n        if (Modifier.isStatic(f.getModifiers())) {\n          continue;\n        }\n\n        size = reflectFieldSize(size, f);\n        \n        if (!f.getType().isPrimitive()) {\n          try {\n            f.setAccessible(true);\n            innerSize += measureObjectSize(f.get(obj), seen);\n          } catch (IllegalAccessException ex) {\n            // this should never happen as we enable setAccessible()!\n            throw new RuntimeException(\"Cannot reflect instance field: \" +\n              f.getDeclaringClass().getName() + \"#\" + f.getName(), ex);\n          }\n        }\n      }\n      clazz = clazz.getSuperclass();\n    }\n    return alignObjectSize(size) + innerSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["dd6c9e9b1251473f465b0443b56046b2658402da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["10cd47aac3c4e8c583740a750335f8aab14555b3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6c9e9b1251473f465b0443b56046b2658402da"],"dd6c9e9b1251473f465b0443b56046b2658402da":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}