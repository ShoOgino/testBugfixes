{"path":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","commits":[{"id":"868e0ed16bb29556f95c00e989da33ab5c9dfe56","date":1228568666,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"/dev/null","sourceNew":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"327ca1ed45a74ae6b4a4c009f83ea0a25a6b76d2","date":1240576942,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n  }\n\n","sourceOld":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afb50671502fba492d01bf5bb44caf67c5b7576e","date":1249695556,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testExtractOnly().mjava","sourceNew":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","sourceOld":"  public void testExtractOnly() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\");\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n\n    String extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n\n    NamedList nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    Object title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n    assertTrue(extraction.indexOf(\"<?xml\") != -1);\n\n    rsp = loadLocal(\"solr-word.pdf\", ExtractingParams.EXTRACT_ONLY, \"true\",\n            ExtractingParams.EXTRACT_FORMAT, ExtractingDocumentLoader.TEXT_FORMAT);\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    list = rsp.getValues();\n\n    extraction = (String) list.get(\"solr-word.pdf\");\n    assertTrue(\"extraction is null and it shouldn't be\", extraction != null);\n    assertTrue(extraction + \" does not contain \" + \"solr-word\", extraction.indexOf(\"solr-word\") != -1);\n    assertTrue(extraction.indexOf(\"<?xml\") == -1);\n\n    nl = (NamedList) list.get(\"solr-word.pdf_metadata\");\n    assertTrue(\"nl is null and it shouldn't be\", nl != null);\n    title = nl.get(\"title\");\n    assertTrue(\"title is null and it shouldn't be\", title != null);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"327ca1ed45a74ae6b4a4c009f83ea0a25a6b76d2":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"868e0ed16bb29556f95c00e989da33ab5c9dfe56":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["afb50671502fba492d01bf5bb44caf67c5b7576e"],"afb50671502fba492d01bf5bb44caf67c5b7576e":["327ca1ed45a74ae6b4a4c009f83ea0a25a6b76d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"327ca1ed45a74ae6b4a4c009f83ea0a25a6b76d2":["afb50671502fba492d01bf5bb44caf67c5b7576e"],"868e0ed16bb29556f95c00e989da33ab5c9dfe56":["327ca1ed45a74ae6b4a4c009f83ea0a25a6b76d2"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"afb50671502fba492d01bf5bb44caf67c5b7576e":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}