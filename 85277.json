{"path":"lucene/core/src/java/org/apache/lucene/document/XYPointDistanceComparator#setBottom(int).mjava","commits":[{"id":"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04","date":1582280790,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/XYPointDistanceComparator#setBottom(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n\n      // pre-encode our box to our integer encoding, so we don't have to decode\n      // to double values for uncompetitive hits. This has some cost!\n      this.minX = XYEncodingUtils.encode((float) Math.max(-Float.MAX_VALUE, x - bottom));\n      this.maxX = XYEncodingUtils.encode((float) Math.min(Float.MAX_VALUE, x + bottom));\n      this.minY = XYEncodingUtils.encode((float) Math.max(-Float.MAX_VALUE, y - bottom));\n      this.maxY = XYEncodingUtils.encode((float) Math.min(Float.MAX_VALUE, y + bottom));\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["78d804863b9cfcd3de609cab59d55462314626aa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78d804863b9cfcd3de609cab59d55462314626aa","date":1583128589,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/XYPointDistanceComparator#setBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/XYPointDistanceComparator#setBottom(int).mjava","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (bottom < Float.MAX_VALUE && (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F)) {\n\n      XYRectangle rectangle = XYRectangle.fromPointDistance((float) x, (float) y, (float) bottom);\n      // pre-encode our box to our integer encoding, so we don't have to decode\n      // to double values for uncompetitive hits. This has some cost!\n      this.minX = XYEncodingUtils.encode(rectangle.minX);\n      this.maxX = XYEncodingUtils.encode(rectangle.maxX);\n      this.minY = XYEncodingUtils.encode(rectangle.minY);\n      this.maxY = XYEncodingUtils.encode(rectangle.maxY);\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n\n      // pre-encode our box to our integer encoding, so we don't have to decode\n      // to double values for uncompetitive hits. This has some cost!\n      this.minX = XYEncodingUtils.encode((float) Math.max(-Float.MAX_VALUE, x - bottom));\n      this.maxX = XYEncodingUtils.encode((float) Math.min(Float.MAX_VALUE, x + bottom));\n      this.minY = XYEncodingUtils.encode((float) Math.max(-Float.MAX_VALUE, y - bottom));\n      this.maxY = XYEncodingUtils.encode((float) Math.min(Float.MAX_VALUE, y + bottom));\n    }\n    setBottomCounter++;\n  }\n\n","bugFix":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78d804863b9cfcd3de609cab59d55462314626aa":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78d804863b9cfcd3de609cab59d55462314626aa"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"],"78d804863b9cfcd3de609cab59d55462314626aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["78d804863b9cfcd3de609cab59d55462314626aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}