{"path":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory().mjava","commits":[{"id":"cb28d79732042ac28cd68a04bcb1b6584c18d8c9","date":1462314713,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on this SSLConfig instance, \n   * or null if SSL should not be used.\n   *\n   * The default implementation generates a simple factory according to the keystore, truststore, \n   * and clientAuth properties of this object.\n   *\n   * @see #getKeyStore\n   * @see #getKeyStorePassword\n   * @see #isClientAuthMode\n   * @see #getTrustStore\n   * @see #getTrustStorePassword\n   */\n  public SslContextFactory createContextFactory() {\n\n    if (! isSSLMode()) {\n      return null;\n    }\n    // else...\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    if (getKeyStore() != null)\n      factory.setKeyStorePath(getKeyStore());\n    if (getKeyStorePassword() != null)\n      factory.setKeyStorePassword(getKeyStorePassword());\n    \n    factory.setNeedClientAuth(isClientAuthMode());\n    \n    if (isClientAuthMode()) {\n      if (getTrustStore() != null)\n        factory.setTrustStorePath(getTrustStore());\n      if (getTrustStorePassword() != null)\n        factory.setTrustStorePassword(getTrustStorePassword());\n    }\n    return factory;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ea0f43f20834b3c8930e074b144aba27a935fee8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on this SSLConfig instance, \n   * or null if SSL should not be used.\n   *\n   * The default implementation generates a simple factory according to the keystore, truststore, \n   * and clientAuth properties of this object.\n   *\n   * @see #getKeyStore\n   * @see #getKeyStorePassword\n   * @see #isClientAuthMode\n   * @see #getTrustStore\n   * @see #getTrustStorePassword\n   */\n  public SslContextFactory createContextFactory() {\n\n    if (! isSSLMode()) {\n      return null;\n    }\n    // else...\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    if (getKeyStore() != null)\n      factory.setKeyStorePath(getKeyStore());\n    if (getKeyStorePassword() != null)\n      factory.setKeyStorePassword(getKeyStorePassword());\n    \n    factory.setNeedClientAuth(isClientAuthMode());\n    \n    if (isClientAuthMode()) {\n      if (getTrustStore() != null)\n        factory.setTrustStorePath(getTrustStore());\n      if (getTrustStorePassword() != null)\n        factory.setTrustStorePassword(getTrustStorePassword());\n    }\n    return factory;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on this SSLConfig instance, \n   * or null if SSL should not be used.\n   *\n   * The default implementation generates a simple factory according to the keystore, truststore, \n   * and clientAuth properties of this object.\n   *\n   * @see #getKeyStore\n   * @see #getKeyStorePassword\n   * @see #isClientAuthMode\n   * @see #getTrustStore\n   * @see #getTrustStorePassword\n   */\n  public SslContextFactory createContextFactory() {\n\n    if (! isSSLMode()) {\n      return null;\n    }\n    // else...\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    if (getKeyStore() != null)\n      factory.setKeyStorePath(getKeyStore());\n    if (getKeyStorePassword() != null)\n      factory.setKeyStorePassword(getKeyStorePassword());\n    \n    factory.setNeedClientAuth(isClientAuthMode());\n    \n    if (isClientAuthMode()) {\n      if (getTrustStore() != null)\n        factory.setTrustStorePath(getTrustStore());\n      if (getTrustStorePassword() != null)\n        factory.setTrustStorePassword(getTrustStorePassword());\n    }\n    return factory;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory().mjava","sourceNew":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on this SSLConfig instance, \n   * or null if SSL should not be used.\n   *\n   * The default implementation generates a simple factory according to the keystore, truststore, \n   * and clientAuth properties of this object.\n   *\n   * @see #getKeyStore\n   * @see #getKeyStorePassword\n   * @see #isClientAuthMode\n   * @see #getTrustStore\n   * @see #getTrustStorePassword\n   */\n  public SslContextFactory createContextFactory() {\n\n    if (! isSSLMode()) {\n      return null;\n    }\n    // else...\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    if (getKeyStore() != null)\n      factory.setKeyStorePath(getKeyStore());\n    if (getKeyStorePassword() != null)\n      factory.setKeyStorePassword(getKeyStorePassword());\n    \n    factory.setNeedClientAuth(isClientAuthMode());\n    \n    if (isClientAuthMode()) {\n      if (getTrustStore() != null)\n        factory.setTrustStorePath(getTrustStore());\n      if (getTrustStorePassword() != null)\n        factory.setTrustStorePassword(getTrustStorePassword());\n    }\n    return factory;\n\n  }\n\n","sourceOld":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on this SSLConfig instance, \n   * or null if SSL should not be used.\n   *\n   * The default implementation generates a simple factory according to the keystore, truststore, \n   * and clientAuth properties of this object.\n   *\n   * @see #getKeyStore\n   * @see #getKeyStorePassword\n   * @see #isClientAuthMode\n   * @see #getTrustStore\n   * @see #getTrustStorePassword\n   */\n  public SslContextFactory createContextFactory() {\n\n    if (! isSSLMode()) {\n      return null;\n    }\n    // else...\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    if (getKeyStore() != null)\n      factory.setKeyStorePath(getKeyStore());\n    if (getKeyStorePassword() != null)\n      factory.setKeyStorePassword(getKeyStorePassword());\n    \n    factory.setNeedClientAuth(isClientAuthMode());\n    \n    if (isClientAuthMode()) {\n      if (getTrustStore() != null)\n        factory.setTrustStorePath(getTrustStore());\n      if (getTrustStorePassword() != null)\n        factory.setTrustStorePassword(getTrustStorePassword());\n    }\n    return factory;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["73450c0955930295d34703e7ddbfc6973b7a121a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cb28d79732042ac28cd68a04bcb1b6584c18d8c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb28d79732042ac28cd68a04bcb1b6584c18d8c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cb28d79732042ac28cd68a04bcb1b6584c18d8c9"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73450c0955930295d34703e7ddbfc6973b7a121a":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73450c0955930295d34703e7ddbfc6973b7a121a","cb28d79732042ac28cd68a04bcb1b6584c18d8c9","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cb28d79732042ac28cd68a04bcb1b6584c18d8c9":["73450c0955930295d34703e7ddbfc6973b7a121a","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}