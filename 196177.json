{"path":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","commits":[{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\ndata_driven_schema_configs\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = new CloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","sourceNew":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\ndata_driven_schema_configs\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","sourceOld":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\ndata_driven_schema_configs\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = new CloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","sourceNew":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\ndata_driven_schema_configs\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","sourceOld":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\ndata_driven_schema_configs\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = new CloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dac22e2c68188d3e5c96ca60febedc05a96f44f","date":1498433282,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","sourceNew":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","sourceOld":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\ndata_driven_schema_configs\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","sourceNew":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","sourceOld":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\ndata_driven_schema_configs\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","sourceNew":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","sourceOld":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\ndata_driven_schema_configs\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0ee0c7f6bcf49646748d46aee9383b68eb55c80","date":1502884592,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","sourceNew":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath() + \" not found! run cloud example failed; tool output: \" + toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[]{\"-name\", collectionName, \"-solrUrl\", solrUrl};\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n  }\n\n","sourceOld":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","bugFix":["4ca20be81c9284c840498143264e583ccbb8525a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExample().mjava","sourceNew":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath() + \" not found! run cloud example failed; tool output: \" + toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[]{\"-name\", collectionName, \"-solrUrl\", solrUrl};\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n  }\n\n","sourceOld":"  /**\n   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over\n   * the port and can only test with one node since the test relies on setting the host and jetty.port system\n   * properties, i.e. there is no test coverage for the -noprompt option.\n   */\n  @Test\n  public void testInteractiveSolrCloudExample() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[] {\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt\";\n\n    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\"+bindPort+\"\\n\"+collectionName+\"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\"+bindPort+\"/solr\";\n    String collectionListUrl = solrUrl+\"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\"+collectionName+\n          \"' not found in Solr at: \"+solrUrl+\"; tool output: \"+toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      cloudClient.connect();\n      cloudClient.setDefaultCollection(collectionName);\n\n      int numDocs = 10;\n      for (int d=0; d < numDocs; d++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"doc\"+d);\n        doc.setField(\"str_s\", \"a\");\n        cloudClient.add(doc);\n      }\n      cloudClient.commit();\n\n      QueryResponse qr = cloudClient.query(new SolrQuery(\"str_s:a\"));\n      if (qr.getResults().getNumFound() != numDocs) {\n        fail(\"Expected \"+numDocs+\" to be found in the \"+collectionName+\n            \" collection but only found \"+qr.getResults().getNumFound());\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore){}\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["4ca20be81c9284c840498143264e583ccbb8525a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","6dac22e2c68188d3e5c96ca60febedc05a96f44f"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4ca20be81c9284c840498143264e583ccbb8525a","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"6dac22e2c68188d3e5c96ca60febedc05a96f44f":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"28288370235ed02234a64753cdbf0c6ec096304a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","6dac22e2c68188d3e5c96ca60febedc05a96f44f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"c0ee0c7f6bcf49646748d46aee9383b68eb55c80":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca20be81c9284c840498143264e583ccbb8525a"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","6dac22e2c68188d3e5c96ca60febedc05a96f44f","28288370235ed02234a64753cdbf0c6ec096304a"],"6dac22e2c68188d3e5c96ca60febedc05a96f44f":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"c0ee0c7f6bcf49646748d46aee9383b68eb55c80":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}