{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private final void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n\n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n\n    ChecksumIndexOutput segnOutput = new ChecksumIndexOutput(directory.createOutput(segmentFileName));\n\n    boolean success = false;\n\n    try {\n      segnOutput.writeInt(CURRENT_FORMAT); // write FORMAT\n      segnOutput.writeLong(++version); // every write changes\n                                   // the index\n      segnOutput.writeInt(counter); // write counter\n      segnOutput.writeInt(size()); // write infos\n      for (int i = 0; i < size(); i++) {\n        info(i).write(segnOutput);\n      }\n      segnOutput.writeStringStringMap(userData);\n      segnOutput.prepareCommit();\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private final void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n\n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n\n    ChecksumIndexOutput segnOutput = new ChecksumIndexOutput(directory.createOutput(segmentFileName));\n\n    boolean success = false;\n\n    try {\n      segnOutput.writeInt(CURRENT_FORMAT); // write FORMAT\n      segnOutput.writeLong(++version); // every write changes\n                                   // the index\n      segnOutput.writeInt(counter); // write counter\n      segnOutput.writeInt(size()); // write infos\n      for (int i = 0; i < size(); i++) {\n        info(i).write(segnOutput);\n      }\n      segnOutput.writeStringStringMap(userData);\n      segnOutput.prepareCommit();\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n\n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n\n    ChecksumIndexOutput segnOutput = new ChecksumIndexOutput(directory.createOutput(segmentFileName));\n\n    boolean success = false;\n\n    try {\n      segnOutput.writeInt(CURRENT_FORMAT); // write FORMAT\n      segnOutput.writeLong(++version); // every write changes\n                                   // the index\n      segnOutput.writeInt(counter); // write counter\n      segnOutput.writeInt(size()); // write infos\n      for (SegmentInfo si : this) {\n        si.write(segnOutput);\n      }\n      segnOutput.writeStringStringMap(userData);\n      segnOutput.prepareCommit();\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private final void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n\n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n\n    ChecksumIndexOutput segnOutput = new ChecksumIndexOutput(directory.createOutput(segmentFileName));\n\n    boolean success = false;\n\n    try {\n      segnOutput.writeInt(CURRENT_FORMAT); // write FORMAT\n      segnOutput.writeLong(++version); // every write changes\n                                   // the index\n      segnOutput.writeInt(counter); // write counter\n      segnOutput.writeInt(size()); // write infos\n      for (int i = 0; i < size(); i++) {\n        info(i).write(segnOutput);\n      }\n      segnOutput.writeStringStringMap(userData);\n      segnOutput.prepareCommit();\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6066dbe072ec5334ff5824f474e9d3abd1620fb7","date":1278709584,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n\n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n\n    IndexOutput segnOutput = null;\n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n\n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n\n    ChecksumIndexOutput segnOutput = new ChecksumIndexOutput(directory.createOutput(segmentFileName));\n\n    boolean success = false;\n\n    try {\n      segnOutput.writeInt(CURRENT_FORMAT); // write FORMAT\n      segnOutput.writeLong(++version); // every write changes\n                                   // the index\n      segnOutput.writeInt(counter); // write counter\n      segnOutput.writeInt(size()); // write infos\n      for (SegmentInfo si : this) {\n        si.write(segnOutput);\n      }\n      segnOutput.writeStringStringMap(userData);\n      segnOutput.prepareCommit();\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n\n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n\n    IndexOutput segnOutput = null;\n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n\n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n\n    ChecksumIndexOutput segnOutput = new ChecksumIndexOutput(directory.createOutput(segmentFileName));\n\n    boolean success = false;\n\n    try {\n      segnOutput.writeInt(CURRENT_FORMAT); // write FORMAT\n      segnOutput.writeLong(++version); // every write changes\n                                   // the index\n      segnOutput.writeInt(counter); // write counter\n      segnOutput.writeInt(size()); // write infos\n      for (SegmentInfo si : this) {\n        si.write(segnOutput);\n      }\n      segnOutput.writeStringStringMap(userData);\n      segnOutput.prepareCommit();\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n\n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n\n    IndexOutput segnOutput = null;\n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n\n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n\n    IndexOutput segnOutput = null;\n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n\n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n\n    IndexOutput segnOutput = null;\n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeSafely(true, segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeSafely(true, segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeSafely(true, segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      success = true;\n      pendingSegnOutput = segnOutput;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        try {\n          segnOutput.close();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this, IOContext.DEFAULT);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeSafely(true, segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeSafely(true, segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this, IOContext.DEFAULT);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeSafely(true, segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeSafely(true, segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this, IOContext.DEFAULT);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeSafely(true, segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeSafely(true, segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this, IOContext.DEFAULT);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeWhileHandlingException(segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this, IOContext.DEFAULT);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeSafely(true, segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory,Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory, Codec codec) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, codec.getName(), this, IOContext.DEFAULT);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeWhileHandlingException(segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this, IOContext.DEFAULT);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeWhileHandlingException(segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"efb7a19703a037c29e30440260d393500febc1f4":["1224a4027481acce15495b03bce9b48b93b42722"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["efb7a19703a037c29e30440260d393500febc1f4"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"7b91922b55d15444d554721b352861d028eb8278":["24230fe54121f9be9d85f2c2067536296785e421"],"6267e1ce56c2eec111425690cd04e251b6f14952":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["6267e1ce56c2eec111425690cd04e251b6f14952"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["5f4e87790277826a2aea119328600dfb07761f32","1224a4027481acce15495b03bce9b48b93b42722"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["1224a4027481acce15495b03bce9b48b93b42722","efb7a19703a037c29e30440260d393500febc1f4"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["6066dbe072ec5334ff5824f474e9d3abd1620fb7","1224a4027481acce15495b03bce9b48b93b42722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["efb7a19703a037c29e30440260d393500febc1f4","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"1224a4027481acce15495b03bce9b48b93b42722":["6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["7b91922b55d15444d554721b352861d028eb8278"],"efb7a19703a037c29e30440260d393500febc1f4":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5f4e87790277826a2aea119328600dfb07761f32":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"6267e1ce56c2eec111425690cd04e251b6f14952":["5f4e87790277826a2aea119328600dfb07761f32","6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["5f4e87790277826a2aea119328600dfb07761f32","d619839baa8ce5503e496b94a9e42ad6f079293f","1224a4027481acce15495b03bce9b48b93b42722"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["24230fe54121f9be9d85f2c2067536296785e421","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"1224a4027481acce15495b03bce9b48b93b42722":["efb7a19703a037c29e30440260d393500febc1f4","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d619839baa8ce5503e496b94a9e42ad6f079293f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}