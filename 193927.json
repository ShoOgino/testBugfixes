{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#testWrongZkChrootTest().mjava","sourceNew":"  public void testWrongZkChrootTest() throws MalformedURLException {\n    CloudSolrClient client = null;\n    try {\n      client = new CloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\");\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    } catch(SolrException e) {\n      assertTrue(e.getCause() instanceof KeeperException);\n    } finally {\n      client.shutdown();\n    }\n    // see SOLR-6146 - this test will fail by virtue of the zkClient tracking performed\n    // in the afterClass method of the base class\n  }\n\n","sourceOld":"  public void testWrongZkChrootTest() throws MalformedURLException {\n    CloudSolrServer server = null;\n    try {\n      server = new CloudSolrServer(zkServer.getZkAddress() + \"/xyz/foo\");\n      server.setDefaultCollection(DEFAULT_COLLECTION);\n      server.setZkClientTimeout(1000*60);\n      server.connect();\n      fail(\"Expected exception\");\n    } catch(SolrException e) {\n      assertTrue(e.getCause() instanceof KeeperException);\n    } finally {\n      server.shutdown();\n    }\n    // see SOLR-6146 - this test will fail by virtue of the zkClient tracking performed\n    // in the afterClass method of the base class\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  public void testWrongZkChrootTest() throws IOException {\n    try (CloudSolrClient client = new CloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\")) {\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    } catch(SolrException e) {\n      assertTrue(e.getCause() instanceof KeeperException);\n    }\n    // see SOLR-6146 - this test will fail by virtue of the zkClient tracking performed\n    // in the afterClass method of the base class\n  }\n\n","sourceOld":"  public void testWrongZkChrootTest() throws MalformedURLException {\n    CloudSolrClient client = null;\n    try {\n      client = new CloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\");\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    } catch(SolrException e) {\n      assertTrue(e.getCause() instanceof KeeperException);\n    } finally {\n      client.shutdown();\n    }\n    // see SOLR-6146 - this test will fail by virtue of the zkClient tracking performed\n    // in the afterClass method of the base class\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = new CloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\")) {\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","sourceOld":"  public void testWrongZkChrootTest() throws IOException {\n    try (CloudSolrClient client = new CloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\")) {\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    } catch(SolrException e) {\n      assertTrue(e.getCause() instanceof KeeperException);\n    }\n    // see SOLR-6146 - this test will fail by virtue of the zkClient tracking performed\n    // in the afterClass method of the base class\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = new CloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\")) {\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","sourceOld":"  public void testWrongZkChrootTest() throws IOException {\n    try (CloudSolrClient client = new CloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\")) {\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    } catch(SolrException e) {\n      assertTrue(e.getCause() instanceof KeeperException);\n    }\n    // see SOLR-6146 - this test will fail by virtue of the zkClient tracking performed\n    // in the afterClass method of the base class\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = getCloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\")) {\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","sourceOld":"  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = new CloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\")) {\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = getCloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\")) {\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","sourceOld":"  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = new CloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\")) {\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  @Test\n  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","sourceOld":"  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = getCloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\")) {\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  @Test\n  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","sourceOld":"  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = getCloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\")) {\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  @Test\n  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","sourceOld":"  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = getCloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\")) {\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  @Test\n  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","sourceOld":"  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = getCloudSolrClient(zkServer.getZkAddress() + \"/xyz/foo\")) {\n      client.setDefaultCollection(DEFAULT_COLLECTION);\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  @Test\n  public void testWrongZkChrootTest() throws IOException {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      SolrException ex = expectThrows(SolrException.class, client::connect);\n      assertTrue(ex.getMessage().contains(\"cluster not found/not ready\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  @Test\n  public void testWrongZkChrootTest() throws IOException {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      SolrException ex = expectThrows(SolrException.class, client::connect);\n      assertTrue(ex.getMessage().contains(\"cluster not found/not ready\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  @Test\n  public void testWrongZkChrootTest() throws IOException {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      SolrException ex = expectThrows(SolrException.class, client::connect);\n      assertTrue(ex.getMessage().contains(\"cluster not found/not ready\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWrongZkChrootTest() throws IOException {\n\n    exception.expect(SolrException.class);\n    exception.expectMessage(\"cluster not found/not ready\");\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      client.connect();\n      fail(\"Expected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1c83d9065111bd0c52230300b020dcd37184fb0","date":1591758044,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12823\")\n  public void testWrongZkChrootTest() throws IOException {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      SolrException ex = expectThrows(SolrException.class, client::connect);\n      assertTrue(ex.getMessage().contains(\"cluster not found/not ready\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWrongZkChrootTest() throws IOException {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      SolrException ex = expectThrows(SolrException.class, client::connect);\n      assertTrue(ex.getMessage().contains(\"cluster not found/not ready\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"463917d1b14d6e950fa80db37a0e798f5326f105","date":1591890616,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testWrongZkChrootTest().mjava","sourceNew":"  @Test\n  public void testWrongZkChrootTest() throws IOException {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      SolrException ex = expectThrows(SolrException.class, client::connect);\n      assertTrue(ex.getMessage().contains(\"cluster not found/not ready\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12823\")\n  public void testWrongZkChrootTest() throws IOException {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress() + \"/xyz/foo\")) {\n      client.setZkClientTimeout(1000 * 60);\n      SolrException ex = expectThrows(SolrException.class, client::connect);\n      assertTrue(ex.getMessage().contains(\"cluster not found/not ready\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73450c0955930295d34703e7ddbfc6973b7a121a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","b940572a59da1b42b6c20ab5278155b12816807a"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1c83d9065111bd0c52230300b020dcd37184fb0":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"b940572a59da1b42b6c20ab5278155b12816807a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"f8061ddd97f3352007d927dae445884a6f3d857b":["73450c0955930295d34703e7ddbfc6973b7a121a","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"463917d1b14d6e950fa80db37a0e798f5326f105":["c1c83d9065111bd0c52230300b020dcd37184fb0"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","b940572a59da1b42b6c20ab5278155b12816807a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["cc3b13b430571c2e169f98fe38e1e7666f88522d","7875fce026a0a335830cfc75abc3eb009eff9a73"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["7875fce026a0a335830cfc75abc3eb009eff9a73","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["73450c0955930295d34703e7ddbfc6973b7a121a"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["73450c0955930295d34703e7ddbfc6973b7a121a","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["463917d1b14d6e950fa80db37a0e798f5326f105"]},"commit2Childs":{"73450c0955930295d34703e7ddbfc6973b7a121a":["f8061ddd97f3352007d927dae445884a6f3d857b","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"c1c83d9065111bd0c52230300b020dcd37184fb0":["463917d1b14d6e950fa80db37a0e798f5326f105"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"463917d1b14d6e950fa80db37a0e798f5326f105":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["c1c83d9065111bd0c52230300b020dcd37184fb0","f8061ddd97f3352007d927dae445884a6f3d857b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}