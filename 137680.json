{"path":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","date":1336412267,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs =  (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":["131942378c467969bf066f9d52165fe81746a280"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53593928dcee87ffa1a23af298d80b3014275483","date":1360338561,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n\n    // Workaround for SOLR-4418 (this test fails with \"No\n    // mbean found for SolrIndexSearcher\" on IBM J9 6.0 and 7.0):\n    Assume.assumeTrue(!\"IBM Corporation\".equals(Constants.JVM_VENDOR));\n\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs =  (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs =  (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":["c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1d6d844f3b4061aedc283b5e71ff1d19aeae291","date":1375221534,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs =  (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n\n    // Workaround for SOLR-4418 (this test fails with \"No\n    // mbean found for SolrIndexSearcher\" on IBM J9 6.0 and 7.0):\n    Assume.assumeTrue(!\"IBM Corporation\".equals(Constants.JVM_VENDOR));\n\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs =  (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":["53593928dcee87ffa1a23af298d80b3014275483","6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b","9ce83f0d72db4660fd277a9d357698004d8f4336","131942378c467969bf066f9d52165fe81746a280"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs =  (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n\n    // Workaround for SOLR-4418 (this test fails with \"No\n    // mbean found for SolrIndexSearcher\" on IBM J9 6.0 and 7.0):\n    Assume.assumeTrue(!\"IBM Corporation\".equals(Constants.JVM_VENDOR));\n\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxUpdate: \" + servers);\n    log.info(h.getCore().getInfoRegistry().toString());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n    MBeanServer mbeanServer = servers.get(0);\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs =  (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n\n    SolrInfoBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = nameFactory.createName(\"gauge\", registryName, \"SEARCHER.searcher.*\");\n\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(searcher, null);\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    ObjectName name = nameFactory.createName(\"gauge\", registryName, \"SEARCHER.searcher.numDocs\");\n    int oldNumDocs =  (Integer)mbeanServer.getAttribute(name, \"Value\");\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = (Integer)mbeanServer.getAttribute(name, \"Value\");\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n        numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs =  (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n\n    SolrInfoBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = nameFactory.createName(\"gauge\", registryName, \"SEARCHER.searcher.*\");\n\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(searcher, null);\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    ObjectName name = nameFactory.createName(\"gauge\", registryName, \"SEARCHER.searcher.numDocs\");\n    int oldNumDocs =  (Integer)mbeanServer.getAttribute(name, \"Value\");\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = (Integer)mbeanServer.getAttribute(name, \"Value\");\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n        numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs =  (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = (Integer)mbeanServer.getAttribute(searcher, \"numDocs\");\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n\n    SolrInfoBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = nameFactory.createName(\"gauge\", registryName, \"SEARCHER.searcher.*\");\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Mbeans in server: {}\", mbeanServer.queryNames(null, null));\n    }\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(searcher, null);\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    ObjectName name = nameFactory.createName(\"gauge\", registryName, \"SEARCHER.searcher.numDocs\");\n    int oldNumDocs =  (Integer)mbeanServer.getAttribute(name, \"Value\");\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = (Integer)mbeanServer.getAttribute(name, \"Value\");\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n        numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n\n    SolrInfoBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = nameFactory.createName(\"gauge\", registryName, \"SEARCHER.searcher.*\");\n\n    log.info(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(searcher, null);\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    ObjectName name = nameFactory.createName(\"gauge\", registryName, \"SEARCHER.searcher.numDocs\");\n    int oldNumDocs =  (Integer)mbeanServer.getAttribute(name, \"Value\");\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = (Integer)mbeanServer.getAttribute(name, \"Value\");\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n        numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["53593928dcee87ffa1a23af298d80b3014275483","c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"c1d6d844f3b4061aedc283b5e71ff1d19aeae291":["53593928dcee87ffa1a23af298d80b3014275483"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"53593928dcee87ffa1a23af298d80b3014275483":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c1d6d844f3b4061aedc283b5e71ff1d19aeae291":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","816521ebaad5add9cb96bb88c577394e2938c40b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"53593928dcee87ffa1a23af298d80b3014275483":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5":["53593928dcee87ffa1a23af298d80b3014275483"],"c26f00b574427b55127e869b935845554afde1fa":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}