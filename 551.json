{"path":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","commits":[{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6bd4a7478aca8c3880512b730b28bf3239340635"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bd4a7478aca8c3880512b730b28bf3239340635"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}