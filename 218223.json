{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNextTransition(Transition).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNextTransition(Transition).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#getNextTransition(Transition).mjava","sourceNew":"  /** Iterate to the next transition after the provided one */\n  public void getNextTransition(Transition t) {\n    // Make sure there is still a transition left:\n    assert (t.transitionUpto+3 - states[2*t.source]) <= 3*states[2*t.source+1];\n    t.dest = transitions[t.transitionUpto++];\n    t.min = transitions[t.transitionUpto++];\n    t.max = transitions[t.transitionUpto++];\n  }\n\n","sourceOld":"  /** Iterate to the next transition after the provided one */\n  public void getNextTransition(Transition t) {\n    // Make sure there is still a transition left:\n    assert (t.transitionUpto+3 - states[2*t.source]) <= 3*states[2*t.source+1];\n    t.dest = transitions[t.transitionUpto++];\n    t.min = transitions[t.transitionUpto++];\n    t.max = transitions[t.transitionUpto++];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNextTransition(Transition).mjava","pathOld":"/dev/null","sourceNew":"  /** Iterate to the next transition after the provided one */\n  public void getNextTransition(Transition t) {\n    // Make sure there is still a transition left:\n    assert (t.transitionUpto+3 - states[2*t.source]) <= 3*states[2*t.source+1];\n    t.dest = transitions[t.transitionUpto++];\n    t.min = transitions[t.transitionUpto++];\n    t.max = transitions[t.transitionUpto++];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNextTransition(Transition).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNextTransition(Transition).mjava","sourceNew":"  /** Iterate to the next transition after the provided one */\n  public void getNextTransition(Transition t) {\n    // Make sure there is still a transition left:\n    assert (t.transitionUpto+3 - states[2*t.source]) <= 3*states[2*t.source+1];\n\n    // Make sure transitions are in fact sorted:\n    assert transitionSorted(t);\n\n    t.dest = transitions[t.transitionUpto++];\n    t.min = transitions[t.transitionUpto++];\n    t.max = transitions[t.transitionUpto++];\n  }\n\n","sourceOld":"  /** Iterate to the next transition after the provided one */\n  public void getNextTransition(Transition t) {\n    // Make sure there is still a transition left:\n    assert (t.transitionUpto+3 - states[2*t.source]) <= 3*states[2*t.source+1];\n    t.dest = transitions[t.transitionUpto++];\n    t.min = transitions[t.transitionUpto++];\n    t.max = transitions[t.transitionUpto++];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNextTransition(Transition).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNextTransition(Transition).mjava","sourceNew":"  /** Iterate to the next transition after the provided one */\n  public void getNextTransition(Transition t) {\n    // Make sure there is still a transition left:\n    assert (t.transitionUpto+3 - states[2*t.source]) <= 3*states[2*t.source+1];\n\n    // Make sure transitions are in fact sorted:\n    assert transitionSorted(t);\n\n    t.dest = transitions[t.transitionUpto++];\n    t.min = transitions[t.transitionUpto++];\n    t.max = transitions[t.transitionUpto++];\n  }\n\n","sourceOld":"  /** Iterate to the next transition after the provided one */\n  public void getNextTransition(Transition t) {\n    // Make sure there is still a transition left:\n    assert (t.transitionUpto+3 - states[2*t.source]) <= 3*states[2*t.source+1];\n    t.dest = transitions[t.transitionUpto++];\n    t.min = transitions[t.transitionUpto++];\n    t.max = transitions[t.transitionUpto++];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2638f781be724518ff6c2263d14a48cf6e68017":["5c84485629d80d203608e8975a1139de9933cc38","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"5c84485629d80d203608e8975a1139de9933cc38":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}