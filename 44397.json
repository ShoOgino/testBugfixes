{"path":"lucene/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","commits":[{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","pathOld":"/dev/null","sourceNew":"  public void doTestLongPostingsNoPositions(IndexOptions options) throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        f.setIndexOptions(options);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsEnum postings = MultiFields.getTermDocsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fdbabcdfbf0ec1640188c28570cd54fd30440942"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","sourceNew":"  public void doTestLongPostingsNoPositions(IndexOptions options) throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        f.setIndexOptions(options);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1 + \" term=\" + term);\n      }\n        \n      final DocsEnum postings = MultiFields.getTermDocsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(\"got invalid freq=\" + freq, freq >=1 && freq <= 4);\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void doTestLongPostingsNoPositions(IndexOptions options) throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        f.setIndexOptions(options);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsEnum postings = MultiFields.getTermDocsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","sourceNew":"  public void doTestLongPostingsNoPositions(IndexOptions options) throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setIndexOptions(options);\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, ft);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1 + \" term=\" + term);\n      }\n        \n      final DocsEnum postings = MultiFields.getTermDocsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(\"got invalid freq=\" + freq, freq >=1 && freq <= 4);\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void doTestLongPostingsNoPositions(IndexOptions options) throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        f.setIndexOptions(options);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1 + \" term=\" + term);\n      }\n        \n      final DocsEnum postings = MultiFields.getTermDocsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(\"got invalid freq=\" + freq, freq >=1 && freq <= 4);\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fdbabcdfbf0ec1640188c28570cd54fd30440942","date":1317820582,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","sourceNew":"  public void doTestLongPostingsNoPositions(IndexOptions options) throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setIndexOptions(options);\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, ft);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1 + \" term=\" + term);\n      }\n        \n      final DocsEnum postings = MultiFields.getTermDocsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(\"got invalid freq=\" + freq, freq >=1 && freq <= 4);\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void doTestLongPostingsNoPositions(IndexOptions options) throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setIndexOptions(options);\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, ft);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1 + \" term=\" + term);\n      }\n        \n      final DocsEnum postings = MultiFields.getTermDocsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(\"got invalid freq=\" + freq, freq >=1 && freq <= 4);\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","sourceNew":"  public void doTestLongPostingsNoPositions(IndexOptions options) throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setIndexOptions(options);\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, ft);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1 + \" term=\" + term);\n      }\n        \n      final DocsEnum docs;\n      final DocsEnum postings;\n\n      if (options == IndexOptions.DOCS_ONLY) {\n        docs = _TestUtil.docs(random, r, \"field\", new BytesRef(term), null, null, false);\n        postings = null;\n      } else {\n        docs = postings = _TestUtil.docs(random, r, \"field\", new BytesRef(term), null, null, true);\n        assert postings != null;\n      }\n      assert docs != null;\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = docs.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3 && postings != null) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = docs.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3 && postings != null) {\n            final int freq = postings.freq();\n            assertTrue(\"got invalid freq=\" + freq, freq >=1 && freq <= 4);\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void doTestLongPostingsNoPositions(IndexOptions options) throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setIndexOptions(options);\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, ft);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1 + \" term=\" + term);\n      }\n        \n      final DocsEnum postings = MultiFields.getTermDocsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(\"got invalid freq=\" + freq, freq >=1 && freq <= 4);\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","sourceNew":"  public void doTestLongPostingsNoPositions(IndexOptions options) throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setIndexOptions(options);\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, ft);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1 + \" term=\" + term);\n      }\n        \n      final DocsEnum docs;\n      final DocsEnum postings;\n\n      if (options == IndexOptions.DOCS_ONLY) {\n        docs = _TestUtil.docs(random, r, \"field\", new BytesRef(term), null, null, false);\n        postings = null;\n      } else {\n        docs = postings = _TestUtil.docs(random, r, \"field\", new BytesRef(term), null, null, true);\n        assert postings != null;\n      }\n      assert docs != null;\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = docs.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3 && postings != null) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = docs.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3 && postings != null) {\n            final int freq = postings.freq();\n            assertTrue(\"got invalid freq=\" + freq, freq >=1 && freq <= 4);\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void doTestLongPostingsNoPositions(IndexOptions options) throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setIndexOptions(options);\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, ft);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1 + \" term=\" + term);\n      }\n        \n      final DocsEnum postings = MultiFields.getTermDocsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(\"got invalid freq=\" + freq, freq >=1 && freq <= 4);\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#doTestLongPostingsNoPositions(IndexOptions).mjava","sourceNew":"  public void doTestLongPostingsNoPositions(IndexOptions options) throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setIndexOptions(options);\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, ft);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1 + \" term=\" + term);\n      }\n        \n      final DocsEnum docs;\n      final DocsEnum postings;\n\n      if (options == IndexOptions.DOCS_ONLY) {\n        docs = _TestUtil.docs(random, r, \"field\", new BytesRef(term), null, null, false);\n        postings = null;\n      } else {\n        docs = postings = _TestUtil.docs(random, r, \"field\", new BytesRef(term), null, null, true);\n        assert postings != null;\n      }\n      assert docs != null;\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = docs.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3 && postings != null) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = docs.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3 && postings != null) {\n            final int freq = postings.freq();\n            assertTrue(\"got invalid freq=\" + freq, freq >=1 && freq <= 4);\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void doTestLongPostingsNoPositions(IndexOptions options) throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setIndexOptions(options);\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, ft);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1 + \" term=\" + term);\n      }\n        \n      final DocsEnum docs;\n      final DocsEnum postings;\n\n      if (options == IndexOptions.DOCS_ONLY) {\n        docs = _TestUtil.docs(random, r, \"field\", new BytesRef(term), null, null, false);\n        postings = null;\n      } else {\n        docs = postings = _TestUtil.docs(random, r, \"field\", new BytesRef(term), null, null, true);\n        assert postings != null;\n      }\n      assert docs != null;\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = docs.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3 && postings != null) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = docs.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3 && postings != null) {\n            final int freq = postings.freq();\n            assertTrue(\"got invalid freq=\" + freq, freq >=1 && freq <= 4);\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["fdbabcdfbf0ec1640188c28570cd54fd30440942","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["fdbabcdfbf0ec1640188c28570cd54fd30440942"],"fdbabcdfbf0ec1640188c28570cd54fd30440942":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"fdbabcdfbf0ec1640188c28570cd54fd30440942":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["fdbabcdfbf0ec1640188c28570cd54fd30440942"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}