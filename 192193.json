{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#sendRequest(ModifiableSolrParams).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#sendRequest(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI#sendRequest(ModifiableSolrParams).mjava","sourceNew":"  protected NamedList sendRequest(ModifiableSolrParams params) throws SolrServerException, IOException {\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.getSolrClient()).getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 15000)) {\n      return baseServer.request(request);\n    }\n\n  }\n\n","sourceOld":"  protected NamedList sendRequest(ModifiableSolrParams params) throws SolrServerException, IOException {\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient).getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 15000)) {\n      return baseServer.request(request);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#sendRequest(ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  protected NamedList sendRequest(ModifiableSolrParams params) throws SolrServerException, IOException {\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.getSolrClient()).getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 15000)) {\n      return baseServer.request(request);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#sendRequest(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#sendRequest(ModifiableSolrParams).mjava","sourceNew":"  protected NamedList<Object> sendRequest(ModifiableSolrParams params) throws SolrServerException, IOException {\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.getSolrClient()).getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 15000)) {\n      return baseServer.request(request);\n    }\n\n  }\n\n","sourceOld":"  protected NamedList sendRequest(ModifiableSolrParams params) throws SolrServerException, IOException {\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.getSolrClient()).getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 15000)) {\n      return baseServer.request(request);\n    }\n\n  }\n\n","bugFix":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"69e6520a21709190413a63084ed135271aab1a7c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69e6520a21709190413a63084ed135271aab1a7c"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["69e6520a21709190413a63084ed135271aab1a7c"],"69e6520a21709190413a63084ed135271aab1a7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}