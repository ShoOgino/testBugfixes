{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPhraseQuery(String).mjava","commits":[{"id":"fdc91c6aee685b616507b9e44fcc69315b8a9e6c","date":1384275771,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPhraseQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Factory method to generate a phrase query.\n   */\n  protected Query newPhraseQuery(String text) {\n    BooleanQuery bq = new BooleanQuery(true);\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      Query q = createPhraseQuery(entry.getKey(), text);\n      if (q != null) {\n        q.setBoost(entry.getValue());\n        bq.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return simplify(bq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bae2070aa7aaff000145c4978276eb085e2ff279","date":1391309822,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPhraseQuery(String,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPhraseQuery(String).mjava","sourceNew":"  /**\n   * Factory method to generate a phrase query with slop.\n   */\n  protected Query newPhraseQuery(String text, int slop) {\n    BooleanQuery bq = new BooleanQuery(true);\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      Query q = createPhraseQuery(entry.getKey(), text, slop);\n      if (q != null) {\n        q.setBoost(entry.getValue());\n        bq.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return simplify(bq);\n  }\n\n","sourceOld":"  /**\n   * Factory method to generate a phrase query.\n   */\n  protected Query newPhraseQuery(String text) {\n    BooleanQuery bq = new BooleanQuery(true);\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      Query q = createPhraseQuery(entry.getKey(), text);\n      if (q != null) {\n        q.setBoost(entry.getValue());\n        bq.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return simplify(bq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bae2070aa7aaff000145c4978276eb085e2ff279":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bae2070aa7aaff000145c4978276eb085e2ff279"]},"commit2Childs":{"bae2070aa7aaff000145c4978276eb085e2ff279":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["bae2070aa7aaff000145c4978276eb085e2ff279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}