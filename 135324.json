{"path":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","commits":[{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320eec6599df6f97f2461a5d1ad49cd93b324a14","date":1503502574,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182384b20c064aa16998ddebe9f36e649279c5a6","date":1503596494,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","182384b20c064aa16998ddebe9f36e649279c5a6"],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"182384b20c064aa16998ddebe9f36e649279c5a6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","320eec6599df6f97f2461a5d1ad49cd93b324a14"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["182384b20c064aa16998ddebe9f36e649279c5a6"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["182384b20c064aa16998ddebe9f36e649279c5a6"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","320eec6599df6f97f2461a5d1ad49cd93b324a14","182384b20c064aa16998ddebe9f36e649279c5a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"182384b20c064aa16998ddebe9f36e649279c5a6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}