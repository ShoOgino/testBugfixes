{"path":"src/test/org/apache/lucene/index/TestTermVectorsWriter#checkTermVector(TermVectorsReader,int,String).mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsWriter#checkTermVector(TermVectorsReader,int,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkTermVector(TermVectorsReader reader, int docNum, String field) throws IOException {\n    TermFreqVector vector = reader.get(docNum, field);\n    assertTrue(vector != null);\n    String[] terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      assertTrue(term.equals(testTerms[i]));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c202ad97014eb11083810f1cd3117eaa2dd5bd3f","date":1093435379,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsWriter#checkTermVector(TermVectorsReader,int,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsWriter#checkTermVector(TermVectorsReader,int,String).mjava","sourceNew":"  private void checkTermVector(TermVectorsReader reader, int docNum, String field) {\n    TermFreqVector vector = reader.get(docNum, field);\n    assertTrue(vector != null);\n    String[] terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      assertTrue(term.equals(testTerms[i]));\n    }\n  }\n\n","sourceOld":"  private void checkTermVector(TermVectorsReader reader, int docNum, String field) throws IOException {\n    TermFreqVector vector = reader.get(docNum, field);\n    assertTrue(vector != null);\n    String[] terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      assertTrue(term.equals(testTerms[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsWriter#checkTermVector(TermVectorsReader,int,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsWriter#checkTermVector(TermVectorsReader,int,String).mjava","sourceNew":"  private void checkTermVector(TermVectorsReader reader, int docNum, String field) throws IOException {\n    TermFreqVector vector = reader.get(docNum, field);\n    assertTrue(vector != null);\n    String[] terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      assertTrue(term.equals(testTerms[i]));\n    }\n  }\n\n","sourceOld":"  private void checkTermVector(TermVectorsReader reader, int docNum, String field) {\n    TermFreqVector vector = reader.get(docNum, field);\n    assertTrue(vector != null);\n    String[] terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      assertTrue(term.equals(testTerms[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11764865fb318bf86302eab36bdf9cd00c50c110","date":1190109214,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsWriter#checkTermVector(TermVectorsReader,int,String).mjava","sourceNew":null,"sourceOld":"  private void checkTermVector(TermVectorsReader reader, int docNum, String field) throws IOException {\n    TermFreqVector vector = reader.get(docNum, field);\n    assertTrue(vector != null);\n    String[] terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      assertTrue(term.equals(testTerms[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c202ad97014eb11083810f1cd3117eaa2dd5bd3f":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"11764865fb318bf86302eab36bdf9cd00c50c110":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["c202ad97014eb11083810f1cd3117eaa2dd5bd3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11764865fb318bf86302eab36bdf9cd00c50c110"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["c202ad97014eb11083810f1cd3117eaa2dd5bd3f"],"c202ad97014eb11083810f1cd3117eaa2dd5bd3f":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"11764865fb318bf86302eab36bdf9cd00c50c110":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["11764865fb318bf86302eab36bdf9cd00c50c110"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}