{"path":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","commits":[{"id":"01ff1eeea394f76a66d8998b861d33d8546b8ca4","date":1422517232,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,String,List[String]).mjava","sourceNew":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(result)),\n        Objects.equals(expected, ConfigOverlay.getObjectByPath(result, false, jsonPath)));\n  }\n\n","sourceOld":"  public static void compareValues(Map result, String expected, List<String> jsonPath) {\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(result)),\n        Objects.equals(expected, ConfigOverlay.getObjectByPath(result, false, jsonPath)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bdb19206b4aeab66b9fb393c53969f44bdd48be","date":1426629125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","sourceNew":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    assertTrue(StrUtils.formatString(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(result)),\n        Objects.equals(expected, ConfigOverlay.getObjectByPath(result, false, jsonPath)));\n  }\n\n","sourceOld":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(result)),\n        Objects.equals(expected, ConfigOverlay.getObjectByPath(result, false, jsonPath)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","sourceNew":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    assertTrue(StrUtils.formatString(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(result)),\n        Objects.equals(expected, ConfigOverlay.getObjectByPath(result, false, jsonPath)));\n  }\n\n","sourceOld":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(result)),\n        Objects.equals(expected, ConfigOverlay.getObjectByPath(result, false, jsonPath)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","sourceNew":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    assertTrue(StrUtils.formatString(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(result)),\n        Objects.equals(expected, Utils.getObjectByPath(result, false, jsonPath)));\n  }\n\n","sourceOld":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    assertTrue(StrUtils.formatString(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(result)),\n        Objects.equals(expected, ConfigOverlay.getObjectByPath(result, false, jsonPath)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","sourceNew":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    Object val = Utils.getObjectByPath(result, false, jsonPath);\n    assertTrue(StrUtils.formatString(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(result)),\n        expected instanceof Predicate ?\n            ((Predicate)expected ).test(val) :\n            Objects.equals(expected, val)\n        );\n  }\n\n","sourceOld":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    assertTrue(StrUtils.formatString(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(result)),\n        Objects.equals(expected, Utils.getObjectByPath(result, false, jsonPath)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","sourceNew":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    Object val = Utils.getObjectByPath(result, false, jsonPath);\n    assertTrue(StrUtils.formatString(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(result)),\n        expected instanceof Predicate ?\n            ((Predicate)expected ).test(val) :\n            Objects.equals(expected, val)\n        );\n  }\n\n","sourceOld":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    assertTrue(StrUtils.formatString(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(result)),\n        Objects.equals(expected, Utils.getObjectByPath(result, false, jsonPath)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","sourceNew":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    Object val = Utils.getObjectByPath(result, false, jsonPath);\n    assertTrue(StrUtils.formatString(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, result.toString()),\n        expected instanceof Predicate ?\n            ((Predicate)expected ).test(val) :\n            Objects.equals(expected, val)\n        );\n  }\n\n","sourceOld":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    Object val = Utils.getObjectByPath(result, false, jsonPath);\n    assertTrue(StrUtils.formatString(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(result)),\n        expected instanceof Predicate ?\n            ((Predicate)expected ).test(val) :\n            Objects.equals(expected, val)\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#compareValues(Map,Object,List[String]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static void compareValues(@SuppressWarnings({\"rawtypes\"})Map result, Object expected, List<String> jsonPath) {\n    Object val = Utils.getObjectByPath(result, false, jsonPath);\n    assertTrue(StrUtils.formatString(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, result.toString()),\n        expected instanceof Predicate ?\n            ((Predicate)expected ).test(val) :\n            Objects.equals(expected, val)\n        );\n  }\n\n","sourceOld":"  public static void compareValues(Map result, Object expected, List<String> jsonPath) {\n    Object val = Utils.getObjectByPath(result, false, jsonPath);\n    assertTrue(StrUtils.formatString(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, result.toString()),\n        expected instanceof Predicate ?\n            ((Predicate)expected ).test(val) :\n            Objects.equals(expected, val)\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["01ff1eeea394f76a66d8998b861d33d8546b8ca4","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"01ff1eeea394f76a66d8998b861d33d8546b8ca4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"a5296efc4b319f5647b606629c093a94b23692c6":["b693a83132c9e45afcd564fd65a25b60ed80388b","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["01ff1eeea394f76a66d8998b861d33d8546b8ca4"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01ff1eeea394f76a66d8998b861d33d8546b8ca4"],"01ff1eeea394f76a66d8998b861d33d8546b8ca4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a5296efc4b319f5647b606629c093a94b23692c6","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b693a83132c9e45afcd564fd65a25b60ed80388b"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["a5296efc4b319f5647b606629c093a94b23692c6","9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}