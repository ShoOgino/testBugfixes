{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanComplex1().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanComplex1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanComplex1().mjava","sourceNew":"  @Test\n  public void testSpanComplex1() throws Exception {\n      \n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\",\"six\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\",\"hundred\"));\n    SpanNearQuery tt1 = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0,true);\n\n    SpanTermQuery t3 = new SpanTermQuery(new Term(\"field\",\"seven\"));\n    SpanTermQuery t4 = new SpanTermQuery(new Term(\"field\",\"hundred\"));\n    SpanNearQuery tt2 = new SpanNearQuery(new SpanQuery[] {t3, t4}, 0,true);\n    \n    SpanTermQuery t5 = new SpanTermQuery(new Term(\"field\",\"seven\"));\n    SpanTermQuery t6 = new SpanTermQuery(new Term(\"field\",\"six\"));\n\n    SpanOrQuery to1 = new SpanOrQuery(tt1, tt2);\n    SpanOrQuery to2 = new SpanOrQuery(t5, t6);\n    \n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {to1, to2},\n                                            100, true);\n    \n    checkHits(query, new int[]\n      {606, 607, 626, 627, 636, 637, 646, 647, 656, 657, 666, 667, 676, 677, 686, 687, 696,\n              697, 706, 707, 726, 727, 736, 737, 746, 747, 756, 757,\n              766, 767, 776, 777, 786, 787, 796, 797, 1606, 1607, 1626, 1627, 1636, 1637, 1646,\n              1647, 1656, 1657,\n              1666, 1667, 1676, 1677, 1686, 1687, 1696, 1697, 1706, 1707, 1726, 1727, 1736, 1737,\n              1746, 1747, 1756, 1757, 1766, 1767, 1776, 1777, 1786, 1787, 1796, 1797});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanComplex1() throws Exception {\n      \n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\",\"six\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\",\"hundred\"));\n    SpanNearQuery tt1 = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0,true);\n\n    SpanTermQuery t3 = new SpanTermQuery(new Term(\"field\",\"seven\"));\n    SpanTermQuery t4 = new SpanTermQuery(new Term(\"field\",\"hundred\"));\n    SpanNearQuery tt2 = new SpanNearQuery(new SpanQuery[] {t3, t4}, 0,true);\n    \n    SpanTermQuery t5 = new SpanTermQuery(new Term(\"field\",\"seven\"));\n    SpanTermQuery t6 = new SpanTermQuery(new Term(\"field\",\"six\"));\n\n    SpanOrQuery to1 = new SpanOrQuery(tt1, tt2);\n    SpanOrQuery to2 = new SpanOrQuery(t5, t6);\n    \n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {to1, to2},\n                                            100, true);\n    \n    checkHits(query, new int[]\n      {606, 607, 626, 627, 636, 637, 646, 647, 656, 657, 666, 667, 676, 677, 686, 687, 696,\n              697, 706, 707, 726, 727, 736, 737, 746, 747, 756, 757,\n              766, 767, 776, 777, 786, 787, 796, 797, 1606, 1607, 1626, 1627, 1636, 1637, 1646,\n              1647, 1656, 1657,\n              1666, 1667, 1676, 1677, 1686, 1687, 1696, 1697, 1706, 1707, 1726, 1727, 1736, 1737,\n              1746, 1747, 1756, 1757, 1766, 1767, 1776, 1777, 1786, 1787, 1796, 1797});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanComplex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanComplex1().mjava","sourceNew":"  public void testSpanComplex1() throws Exception {\n    SpanQuery tt1 = spanNearOrderedQuery(\"field\", 0, \"six\", \"hundred\");\n    SpanQuery tt2 = spanNearOrderedQuery(\"field\", 0, \"seven\", \"hundred\");\n\n    SpanQuery to1 = spanOrQuery(tt1, tt2);\n    SpanQuery to2 = spanOrQuery(\"field\", \"seven\", \"six\");\n    SpanQuery query = spanNearOrderedQuery(100, to1, to2);\n    \n    checkHits(query, new int[]\n      {606, 607, 626, 627, 636, 637, 646, 647, 656, 657, 666, 667, 676, 677, 686, 687, 696,\n              697, 706, 707, 726, 727, 736, 737, 746, 747, 756, 757,\n              766, 767, 776, 777, 786, 787, 796, 797, 1606, 1607, 1626, 1627, 1636, 1637, 1646,\n              1647, 1656, 1657,\n              1666, 1667, 1676, 1677, 1686, 1687, 1696, 1697, 1706, 1707, 1726, 1727, 1736, 1737,\n              1746, 1747, 1756, 1757, 1766, 1767, 1776, 1777, 1786, 1787, 1796, 1797});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanComplex1() throws Exception {\n      \n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\",\"six\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\",\"hundred\"));\n    SpanNearQuery tt1 = new SpanNearQuery(new SpanQuery[] {t1, t2}, 0,true);\n\n    SpanTermQuery t3 = new SpanTermQuery(new Term(\"field\",\"seven\"));\n    SpanTermQuery t4 = new SpanTermQuery(new Term(\"field\",\"hundred\"));\n    SpanNearQuery tt2 = new SpanNearQuery(new SpanQuery[] {t3, t4}, 0,true);\n    \n    SpanTermQuery t5 = new SpanTermQuery(new Term(\"field\",\"seven\"));\n    SpanTermQuery t6 = new SpanTermQuery(new Term(\"field\",\"six\"));\n\n    SpanOrQuery to1 = new SpanOrQuery(tt1, tt2);\n    SpanOrQuery to2 = new SpanOrQuery(t5, t6);\n    \n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {to1, to2},\n                                            100, true);\n    \n    checkHits(query, new int[]\n      {606, 607, 626, 627, 636, 637, 646, 647, 656, 657, 666, 667, 676, 677, 686, 687, 696,\n              697, 706, 707, 726, 727, 736, 737, 746, 747, 756, 757,\n              766, 767, 776, 777, 786, 787, 796, 797, 1606, 1607, 1626, 1627, 1636, 1637, 1646,\n              1647, 1656, 1657,\n              1666, 1667, 1676, 1677, 1686, 1687, 1696, 1697, 1706, 1707, 1726, 1727, 1736, 1737,\n              1746, 1747, 1756, 1757, 1766, 1767, 1776, 1777, 1786, 1787, 1796, 1797});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}