{"path":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#testCoverage().mjava","commits":[{"id":"fbfb6ddad2ec9fa9128265741535450c3cbc4344","date":1470329280,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#testCoverage().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Tests thta all TransformerFactories that are implicitly provided by Solr are tested in this class\n   *\n   * @see FlValidator#getDefaultTransformerFactoryName\n   * @see #FL_VALIDATORS\n   * @see TransformerFactory#defaultFactories\n   */\n  public void testCoverage() throws Exception {\n    final Set<String> implicit = new LinkedHashSet<>();\n    for (String t :  TransformerFactory.defaultFactories.keySet()) {\n      implicit.add(t);\n    }\n    \n    final Set<String> covered = new LinkedHashSet<>();\n    for (FlValidator v : FL_VALIDATORS) {\n      String t = v.getDefaultTransformerFactoryName();\n      if (null != t) {\n        covered.add(t);\n      }\n    }\n\n    // items should only be added to this list if it's known that they do not work with RTG\n    // and a specific Jira for fixing this is listed as a comment\n    final List<String> knownBugs = Arrays.asList\n      ( SubQueryValidator.NAME, // SOLR-9377\n        \"xml\",\"json\", // SOLR-9376\n        \"child\" // way to complicatd to vet with this test, see SOLR-9379 instead\n      );\n\n    for (String buggy : knownBugs) {\n      assertFalse(buggy + \" is listed as a being a known bug, \" +\n                  \"but it exists in the set of 'covered' TransformerFactories\",\n                  covered.contains(buggy));\n      assertTrue(buggy + \" is listed as a known bug, \" +\n                 \"but it does not even exist in the set of 'implicit' TransformerFactories\",\n                  implicit.remove(buggy));\n    }\n    \n    implicit.removeAll(covered);\n    assertEquals(\"Some implicit TransformerFactories are not yet tested by this class: \" + implicit,\n                 0, implicit.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3237bc9583fd899fcf68bae4cc834095f5c911bf","date":1470710919,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#testCoverage().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#testCoverage().mjava","sourceNew":"  /** \n   * Tests thta all TransformerFactories that are implicitly provided by Solr are tested in this class\n   *\n   * @see FlValidator#getDefaultTransformerFactoryName\n   * @see #FL_VALIDATORS\n   * @see TransformerFactory#defaultFactories\n   */\n  public void testCoverage() throws Exception {\n    final Set<String> implicit = new LinkedHashSet<>();\n    for (String t :  TransformerFactory.defaultFactories.keySet()) {\n      implicit.add(t);\n    }\n    \n    final Set<String> covered = new LinkedHashSet<>();\n    for (FlValidator v : FL_VALIDATORS) {\n      String t = v.getDefaultTransformerFactoryName();\n      if (null != t) {\n        covered.add(t);\n      }\n    }\n\n    // items should only be added to this list if it's known that they do not work with RTG\n    // and a specific Jira for fixing this is listed as a comment\n    final List<String> knownBugs = Arrays.asList\n      ( \"xml\",\"json\", // SOLR-9376\n        \"child\" // way to complicatd to vet with this test, see SOLR-9379 instead\n      );\n\n    for (String buggy : knownBugs) {\n      assertFalse(buggy + \" is listed as a being a known bug, \" +\n                  \"but it exists in the set of 'covered' TransformerFactories\",\n                  covered.contains(buggy));\n      assertTrue(buggy + \" is listed as a known bug, \" +\n                 \"but it does not even exist in the set of 'implicit' TransformerFactories\",\n                  implicit.remove(buggy));\n    }\n    \n    implicit.removeAll(covered);\n    assertEquals(\"Some implicit TransformerFactories are not yet tested by this class: \" + implicit,\n                 0, implicit.size());\n  }\n\n","sourceOld":"  /** \n   * Tests thta all TransformerFactories that are implicitly provided by Solr are tested in this class\n   *\n   * @see FlValidator#getDefaultTransformerFactoryName\n   * @see #FL_VALIDATORS\n   * @see TransformerFactory#defaultFactories\n   */\n  public void testCoverage() throws Exception {\n    final Set<String> implicit = new LinkedHashSet<>();\n    for (String t :  TransformerFactory.defaultFactories.keySet()) {\n      implicit.add(t);\n    }\n    \n    final Set<String> covered = new LinkedHashSet<>();\n    for (FlValidator v : FL_VALIDATORS) {\n      String t = v.getDefaultTransformerFactoryName();\n      if (null != t) {\n        covered.add(t);\n      }\n    }\n\n    // items should only be added to this list if it's known that they do not work with RTG\n    // and a specific Jira for fixing this is listed as a comment\n    final List<String> knownBugs = Arrays.asList\n      ( SubQueryValidator.NAME, // SOLR-9377\n        \"xml\",\"json\", // SOLR-9376\n        \"child\" // way to complicatd to vet with this test, see SOLR-9379 instead\n      );\n\n    for (String buggy : knownBugs) {\n      assertFalse(buggy + \" is listed as a being a known bug, \" +\n                  \"but it exists in the set of 'covered' TransformerFactories\",\n                  covered.contains(buggy));\n      assertTrue(buggy + \" is listed as a known bug, \" +\n                 \"but it does not even exist in the set of 'implicit' TransformerFactories\",\n                  implicit.remove(buggy));\n    }\n    \n    implicit.removeAll(covered);\n    assertEquals(\"Some implicit TransformerFactories are not yet tested by this class: \" + implicit,\n                 0, implicit.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#testCoverage().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#testCoverage().mjava","sourceNew":"  /** \n   * Tests thta all TransformerFactories that are implicitly provided by Solr are tested in this class\n   *\n   * @see FlValidator#getDefaultTransformerFactoryName\n   * @see #FL_VALIDATORS\n   * @see TransformerFactory#defaultFactories\n   */\n  public void testCoverage() throws Exception {\n    final Set<String> implicit = new LinkedHashSet<>();\n    for (String t :  TransformerFactory.defaultFactories.keySet()) {\n      implicit.add(t);\n    }\n    \n    final Set<String> covered = new LinkedHashSet<>();\n    for (FlValidator v : FL_VALIDATORS) {\n      String t = v.getDefaultTransformerFactoryName();\n      if (null != t) {\n        covered.add(t);\n      }\n    }\n\n    // items should only be added to this list if it's known that they do not work with RTG\n    // and a specific Jira for fixing this is listed as a comment\n    final List<String> knownBugs = Arrays.asList\n      ( \"xml\",\"json\", // SOLR-9376\n        \"child\" // way to complicatd to vet with this test, see SOLR-9379 instead\n      );\n\n    for (String buggy : knownBugs) {\n      assertFalse(buggy + \" is listed as a being a known bug, \" +\n                  \"but it exists in the set of 'covered' TransformerFactories\",\n                  covered.contains(buggy));\n      assertTrue(buggy + \" is listed as a known bug, \" +\n                 \"but it does not even exist in the set of 'implicit' TransformerFactories\",\n                  implicit.remove(buggy));\n    }\n    \n    implicit.removeAll(covered);\n    assertEquals(\"Some implicit TransformerFactories are not yet tested by this class: \" + implicit,\n                 0, implicit.size());\n  }\n\n","sourceOld":"  /** \n   * Tests thta all TransformerFactories that are implicitly provided by Solr are tested in this class\n   *\n   * @see FlValidator#getDefaultTransformerFactoryName\n   * @see #FL_VALIDATORS\n   * @see TransformerFactory#defaultFactories\n   */\n  public void testCoverage() throws Exception {\n    final Set<String> implicit = new LinkedHashSet<>();\n    for (String t :  TransformerFactory.defaultFactories.keySet()) {\n      implicit.add(t);\n    }\n    \n    final Set<String> covered = new LinkedHashSet<>();\n    for (FlValidator v : FL_VALIDATORS) {\n      String t = v.getDefaultTransformerFactoryName();\n      if (null != t) {\n        covered.add(t);\n      }\n    }\n\n    // items should only be added to this list if it's known that they do not work with RTG\n    // and a specific Jira for fixing this is listed as a comment\n    final List<String> knownBugs = Arrays.asList\n      ( SubQueryValidator.NAME, // SOLR-9377\n        \"xml\",\"json\", // SOLR-9376\n        \"child\" // way to complicatd to vet with this test, see SOLR-9379 instead\n      );\n\n    for (String buggy : knownBugs) {\n      assertFalse(buggy + \" is listed as a being a known bug, \" +\n                  \"but it exists in the set of 'covered' TransformerFactories\",\n                  covered.contains(buggy));\n      assertTrue(buggy + \" is listed as a known bug, \" +\n                 \"but it does not even exist in the set of 'implicit' TransformerFactories\",\n                  implicit.remove(buggy));\n    }\n    \n    implicit.removeAll(covered);\n    assertEquals(\"Some implicit TransformerFactories are not yet tested by this class: \" + implicit,\n                 0, implicit.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#testCoverage().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Tests thta all TransformerFactories that are implicitly provided by Solr are tested in this class\n   *\n   * @see FlValidator#getDefaultTransformerFactoryName\n   * @see #FL_VALIDATORS\n   * @see TransformerFactory#defaultFactories\n   */\n  public void testCoverage() throws Exception {\n    final Set<String> implicit = new LinkedHashSet<>();\n    for (String t :  TransformerFactory.defaultFactories.keySet()) {\n      implicit.add(t);\n    }\n    \n    final Set<String> covered = new LinkedHashSet<>();\n    for (FlValidator v : FL_VALIDATORS) {\n      String t = v.getDefaultTransformerFactoryName();\n      if (null != t) {\n        covered.add(t);\n      }\n    }\n\n    // items should only be added to this list if it's known that they do not work with RTG\n    // and a specific Jira for fixing this is listed as a comment\n    final List<String> knownBugs = Arrays.asList\n      ( \"xml\",\"json\", // SOLR-9376\n        \"child\" // way to complicatd to vet with this test, see SOLR-9379 instead\n      );\n\n    for (String buggy : knownBugs) {\n      assertFalse(buggy + \" is listed as a being a known bug, \" +\n                  \"but it exists in the set of 'covered' TransformerFactories\",\n                  covered.contains(buggy));\n      assertTrue(buggy + \" is listed as a known bug, \" +\n                 \"but it does not even exist in the set of 'implicit' TransformerFactories\",\n                  implicit.remove(buggy));\n    }\n    \n    implicit.removeAll(covered);\n    assertEquals(\"Some implicit TransformerFactories are not yet tested by this class: \" + implicit,\n                 0, implicit.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#testCoverage().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Tests thta all TransformerFactories that are implicitly provided by Solr are tested in this class\n   *\n   * @see FlValidator#getDefaultTransformerFactoryName\n   * @see #FL_VALIDATORS\n   * @see TransformerFactory#defaultFactories\n   */\n  public void testCoverage() throws Exception {\n    final Set<String> implicit = new LinkedHashSet<>();\n    for (String t :  TransformerFactory.defaultFactories.keySet()) {\n      implicit.add(t);\n    }\n    \n    final Set<String> covered = new LinkedHashSet<>();\n    for (FlValidator v : FL_VALIDATORS) {\n      String t = v.getDefaultTransformerFactoryName();\n      if (null != t) {\n        covered.add(t);\n      }\n    }\n\n    // items should only be added to this list if it's known that they do not work with RTG\n    // and a specific Jira for fixing this is listed as a comment\n    final List<String> knownBugs = Arrays.asList\n      ( \"xml\",\"json\", // SOLR-9376\n        \"child\" // way to complicatd to vet with this test, see SOLR-9379 instead\n      );\n\n    for (String buggy : knownBugs) {\n      assertFalse(buggy + \" is listed as a being a known bug, \" +\n                  \"but it exists in the set of 'covered' TransformerFactories\",\n                  covered.contains(buggy));\n      assertTrue(buggy + \" is listed as a known bug, \" +\n                 \"but it does not even exist in the set of 'implicit' TransformerFactories\",\n                  implicit.remove(buggy));\n    }\n    \n    implicit.removeAll(covered);\n    assertEquals(\"Some implicit TransformerFactories are not yet tested by this class: \" + implicit,\n                 0, implicit.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12f7f335611574989edc8f87d25d91e89aa385b6","date":1489690739,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#testCoverage().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#testCoverage().mjava","sourceNew":"  /** \n   * Tests that all TransformerFactories that are implicitly provided by Solr are tested in this class\n   *\n   * @see FlValidator#getDefaultTransformerFactoryName\n   * @see #FL_VALIDATORS\n   * @see TransformerFactory#defaultFactories\n   */\n  public void testCoverage() throws Exception {\n    final Set<String> implicit = new LinkedHashSet<>();\n    for (String t :  TransformerFactory.defaultFactories.keySet()) {\n      implicit.add(t);\n    }\n    \n    final Set<String> covered = new LinkedHashSet<>();\n    for (FlValidator v : FL_VALIDATORS) {\n      String t = v.getDefaultTransformerFactoryName();\n      if (null != t) {\n        covered.add(t);\n      }\n    }\n\n    // items should only be added to this list if it's known that they do not work with RTG\n    // and a specific Jira for fixing this is listed as a comment\n    final List<String> knownBugs = Arrays.asList\n      ( \"xml\",\"json\", // SOLR-9376\n        \"child\" // way to complicatd to vet with this test, see SOLR-9379 instead\n      );\n\n    for (String buggy : knownBugs) {\n      assertFalse(buggy + \" is listed as a being a known bug, \" +\n                  \"but it exists in the set of 'covered' TransformerFactories\",\n                  covered.contains(buggy));\n      assertTrue(buggy + \" is listed as a known bug, \" +\n                 \"but it does not even exist in the set of 'implicit' TransformerFactories\",\n                  implicit.remove(buggy));\n    }\n    \n    implicit.removeAll(covered);\n    assertEquals(\"Some implicit TransformerFactories are not yet tested by this class: \" + implicit,\n                 0, implicit.size());\n  }\n\n","sourceOld":"  /** \n   * Tests thta all TransformerFactories that are implicitly provided by Solr are tested in this class\n   *\n   * @see FlValidator#getDefaultTransformerFactoryName\n   * @see #FL_VALIDATORS\n   * @see TransformerFactory#defaultFactories\n   */\n  public void testCoverage() throws Exception {\n    final Set<String> implicit = new LinkedHashSet<>();\n    for (String t :  TransformerFactory.defaultFactories.keySet()) {\n      implicit.add(t);\n    }\n    \n    final Set<String> covered = new LinkedHashSet<>();\n    for (FlValidator v : FL_VALIDATORS) {\n      String t = v.getDefaultTransformerFactoryName();\n      if (null != t) {\n        covered.add(t);\n      }\n    }\n\n    // items should only be added to this list if it's known that they do not work with RTG\n    // and a specific Jira for fixing this is listed as a comment\n    final List<String> knownBugs = Arrays.asList\n      ( \"xml\",\"json\", // SOLR-9376\n        \"child\" // way to complicatd to vet with this test, see SOLR-9379 instead\n      );\n\n    for (String buggy : knownBugs) {\n      assertFalse(buggy + \" is listed as a being a known bug, \" +\n                  \"but it exists in the set of 'covered' TransformerFactories\",\n                  covered.contains(buggy));\n      assertTrue(buggy + \" is listed as a known bug, \" +\n                 \"but it does not even exist in the set of 'implicit' TransformerFactories\",\n                  implicit.remove(buggy));\n    }\n    \n    implicit.removeAll(covered);\n    assertEquals(\"Some implicit TransformerFactories are not yet tested by this class: \" + implicit,\n                 0, implicit.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b4eb0a25318cc756077fbde9bd3052690aed03d","date":1490280009,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#testCoverage().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#testCoverage().mjava","sourceNew":"  /** \n   * Tests that all TransformerFactories that are implicitly provided by Solr are tested in this class\n   *\n   * @see FlValidator#getDefaultTransformerFactoryName\n   * @see #FL_VALIDATORS\n   * @see TransformerFactory#defaultFactories\n   */\n  public void testCoverage() throws Exception {\n    final Set<String> implicit = new LinkedHashSet<>();\n    for (String t :  TransformerFactory.defaultFactories.keySet()) {\n      implicit.add(t);\n    }\n    \n    final Set<String> covered = new LinkedHashSet<>();\n    for (FlValidator v : FL_VALIDATORS) {\n      String t = v.getDefaultTransformerFactoryName();\n      if (null != t) {\n        covered.add(t);\n      }\n    }\n\n    // items should only be added to this list if it's known that they do not work with RTG\n    // and a specific Jira for fixing this is listed as a comment\n    final List<String> knownBugs = Arrays.asList\n      ( \"xml\",\"json\", // SOLR-9376\n        \"child\" // way to complicatd to vet with this test, see SOLR-9379 instead\n      );\n\n    for (String buggy : knownBugs) {\n      assertFalse(buggy + \" is listed as a being a known bug, \" +\n                  \"but it exists in the set of 'covered' TransformerFactories\",\n                  covered.contains(buggy));\n      assertTrue(buggy + \" is listed as a known bug, \" +\n                 \"but it does not even exist in the set of 'implicit' TransformerFactories\",\n                  implicit.remove(buggy));\n    }\n    \n    implicit.removeAll(covered);\n    assertEquals(\"Some implicit TransformerFactories are not yet tested by this class: \" + implicit,\n                 0, implicit.size());\n  }\n\n","sourceOld":"  /** \n   * Tests thta all TransformerFactories that are implicitly provided by Solr are tested in this class\n   *\n   * @see FlValidator#getDefaultTransformerFactoryName\n   * @see #FL_VALIDATORS\n   * @see TransformerFactory#defaultFactories\n   */\n  public void testCoverage() throws Exception {\n    final Set<String> implicit = new LinkedHashSet<>();\n    for (String t :  TransformerFactory.defaultFactories.keySet()) {\n      implicit.add(t);\n    }\n    \n    final Set<String> covered = new LinkedHashSet<>();\n    for (FlValidator v : FL_VALIDATORS) {\n      String t = v.getDefaultTransformerFactoryName();\n      if (null != t) {\n        covered.add(t);\n      }\n    }\n\n    // items should only be added to this list if it's known that they do not work with RTG\n    // and a specific Jira for fixing this is listed as a comment\n    final List<String> knownBugs = Arrays.asList\n      ( \"xml\",\"json\", // SOLR-9376\n        \"child\" // way to complicatd to vet with this test, see SOLR-9379 instead\n      );\n\n    for (String buggy : knownBugs) {\n      assertFalse(buggy + \" is listed as a being a known bug, \" +\n                  \"but it exists in the set of 'covered' TransformerFactories\",\n                  covered.contains(buggy));\n      assertTrue(buggy + \" is listed as a known bug, \" +\n                 \"but it does not even exist in the set of 'implicit' TransformerFactories\",\n                  implicit.remove(buggy));\n    }\n    \n    implicit.removeAll(covered);\n    assertEquals(\"Some implicit TransformerFactories are not yet tested by this class: \" + implicit,\n                 0, implicit.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["fbfb6ddad2ec9fa9128265741535450c3cbc4344","3237bc9583fd899fcf68bae4cc834095f5c911bf"],"fbfb6ddad2ec9fa9128265741535450c3cbc4344":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b4eb0a25318cc756077fbde9bd3052690aed03d":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"12f7f335611574989edc8f87d25d91e89aa385b6":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12f7f335611574989edc8f87d25d91e89aa385b6"],"3237bc9583fd899fcf68bae4cc834095f5c911bf":["fbfb6ddad2ec9fa9128265741535450c3cbc4344"]},"commit2Childs":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["7b4eb0a25318cc756077fbde9bd3052690aed03d","12f7f335611574989edc8f87d25d91e89aa385b6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"fbfb6ddad2ec9fa9128265741535450c3cbc4344":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","3237bc9583fd899fcf68bae4cc834095f5c911bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fbfb6ddad2ec9fa9128265741535450c3cbc4344","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"7b4eb0a25318cc756077fbde9bd3052690aed03d":[],"12f7f335611574989edc8f87d25d91e89aa385b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"3237bc9583fd899fcf68bae4cc834095f5c911bf":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7b4eb0a25318cc756077fbde9bd3052690aed03d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}