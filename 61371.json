{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicIndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicIndexReader sub0 = (AtomicIndexReader) r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = (AtomicReader) r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicIndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicIndexReader sub0 = (AtomicIndexReader) r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = (AtomicReader) r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3","date":1328092914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = (AtomicReader) r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\", false);\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    AtomicReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\", false);\n    r2.close();\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["382fe3a6ca9745891afebda9b9a57cc158305545","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"efb7a19703a037c29e30440260d393500febc1f4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["382fe3a6ca9745891afebda9b9a57cc158305545"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"382fe3a6ca9745891afebda9b9a57cc158305545":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["efb7a19703a037c29e30440260d393500febc1f4"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","efb7a19703a037c29e30440260d393500febc1f4"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","da6d5ac19a80d65b1e864251f155d30960353b7e"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["382fe3a6ca9745891afebda9b9a57cc158305545","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"efb7a19703a037c29e30440260d393500febc1f4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1509f151d7692d84fae414b2b799ac06ba60fcb4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"382fe3a6ca9745891afebda9b9a57cc158305545":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["382fe3a6ca9745891afebda9b9a57cc158305545"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["efb7a19703a037c29e30440260d393500febc1f4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}