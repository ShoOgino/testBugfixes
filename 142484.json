{"path":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","sourceNew":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    // Force a prefix null check first\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be 3\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    File result;\n    do {\n      result = genTempFile(prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","sourceOld":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    // Force a prefix null check first\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be 3\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    File result;\n    do {\n      result = genTempFile(prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1b1e202e0a963a0094d637c018a8595f9bd245f","date":1342033808,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","sourceNew":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    // Force a prefix null check first\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be 3\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    File result;\n    // just pull one long always: we don't want to rely upon what may or may not\n    // already exist. otherwise tests might not reproduce, depending on when you last\n    // ran 'ant clean'\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","sourceOld":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    // Force a prefix null check first\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be 3\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    File result;\n    do {\n      result = genTempFile(prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","sourceNew":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    // Force a prefix null check first\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be 3\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    File result;\n    // just pull one long always: we don't want to rely upon what may or may not\n    // already exist. otherwise tests might not reproduce, depending on when you last\n    // ran 'ant clean'\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","sourceOld":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    // Force a prefix null check first\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be 3\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    File result;\n    do {\n      result = genTempFile(prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","sourceNew":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    // Force a prefix null check first\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be 3\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    File result;\n    // just pull one long always: we don't want to rely upon what may or may not\n    // already exist. otherwise tests might not reproduce, depending on when you last\n    // ran 'ant clean'\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","sourceOld":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    // Force a prefix null check first\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be 3\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    File result;\n    do {\n      result = genTempFile(prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0","date":1356250502,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","sourceNew":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be at least 3 characters\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    File result;\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","sourceOld":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    // Force a prefix null check first\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be 3\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    File result;\n    // just pull one long always: we don't want to rely upon what may or may not\n    // already exist. otherwise tests might not reproduce, depending on when you last\n    // ran 'ant clean'\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","bugFix":["1e538cbd7f572f646f36c73053aea561d95c2cb2","e1b1e202e0a963a0094d637c018a8595f9bd245f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","sourceNew":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be at least 3 characters\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    File result;\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","sourceOld":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    // Force a prefix null check first\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be 3\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    File result;\n    // just pull one long always: we don't want to rely upon what may or may not\n    // already exist. otherwise tests might not reproduce, depending on when you last\n    // ran 'ant clean'\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":5,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#createTempFile(String,String,File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#createTempFile(String,String,File).mjava","sourceNew":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be at least 3 characters\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    File result;\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","sourceOld":"  /** \n   * insecure, fast version of File.createTempFile\n   * uses Random instead of SecureRandom.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be at least 3 characters\");\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix;\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    File result;\n    do {\n      result = genTempFile(random, prefix, newSuffix, directory);\n    } while (!result.createNewFile());\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["e1b1e202e0a963a0094d637c018a8595f9bd245f","ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0"],"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","e1b1e202e0a963a0094d637c018a8595f9bd245f"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","e1b1e202e0a963a0094d637c018a8595f9bd245f"],"ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0":["e1b1e202e0a963a0094d637c018a8595f9bd245f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1b1e202e0a963a0094d637c018a8595f9bd245f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","e1b1e202e0a963a0094d637c018a8595f9bd245f"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e1b1e202e0a963a0094d637c018a8595f9bd245f":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}