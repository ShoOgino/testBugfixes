{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testGetRandomAcceptedString().mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      //System.out.println(\"TEST i=\" + i + \" re=\" + re);\n      final Automaton a = Operations.determinize(re.toAutomaton());\n      assertFalse(Operations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        //System.out.println(\"TEST: j=\" + j);\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          //a.writeDot(\"adot\");\n          assertTrue(Operations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      //System.out.println(\"TEST i=\" + i + \" re=\" + re);\n      final LightAutomaton a = BasicOperations.determinize(re.toLightAutomaton());\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        //System.out.println(\"TEST: j=\" + j);\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          //a.writeDot(\"adot\");\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      //System.out.println(\"TEST i=\" + i + \" re=\" + re);\n      final Automaton a = Operations.determinize(re.toAutomaton());\n      assertFalse(Operations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        //System.out.println(\"TEST: j=\" + j);\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          //a.writeDot(\"adot\");\n          assertTrue(Operations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      //System.out.println(\"TEST i=\" + i + \" re=\" + re);\n      final Automaton a = Operations.determinize(re.toAutomaton(), DEFAULT_MAX_DETERMINIZED_STATES);\n      assertFalse(Operations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        //System.out.println(\"TEST: j=\" + j);\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          //a.writeDot(\"adot\");\n          assertTrue(Operations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      //System.out.println(\"TEST i=\" + i + \" re=\" + re);\n      final Automaton a = Operations.determinize(re.toAutomaton());\n      assertFalse(Operations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        //System.out.println(\"TEST: j=\" + j);\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          //a.writeDot(\"adot\");\n          assertTrue(Operations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}