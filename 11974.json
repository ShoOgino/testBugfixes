{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#incrementRange(Heatmap,int,int,int,int,int).mjava","commits":[{"id":"d19946da5b8a6505034a72adcb5bae87dd043ddd","date":1423451445,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#incrementRange(Heatmap,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private static void incrementRange(Heatmap heatmap, int startColumn, int endColumn, int startRow, int endRow,\n                                     int count) {\n    //startColumn & startRow are not necessarily within the heatmap range; likewise numRows/columns may overlap.\n    if (startColumn < 0) {\n      endColumn += startColumn;\n      startColumn = 0;\n    }\n    endColumn = Math.min(heatmap.columns-1, endColumn);\n\n    if (startRow < 0) {\n      endRow += startRow;\n      startRow = 0;\n    }\n    endRow = Math.min(heatmap.rows-1, endRow);\n\n    if (startRow > endRow) {\n      return;//short-circuit\n    }\n    for (int c = startColumn; c <= endColumn; c++) {\n      int cBase = c * heatmap.rows;\n      for (int r = startRow; r <= endRow; r++) {\n        heatmap.counts[cBase + r] += count;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#incrementRange(Heatmap,int,int,int,int,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#incrementRange(Heatmap,int,int,int,int,int).mjava","sourceNew":"  private static void incrementRange(Heatmap heatmap, int startColumn, int endColumn, int startRow, int endRow,\n                                     int count) {\n    //startColumn & startRow are not necessarily within the heatmap range; likewise numRows/columns may overlap.\n    if (startColumn < 0) {\n      endColumn += startColumn;\n      startColumn = 0;\n    }\n    endColumn = Math.min(heatmap.columns-1, endColumn);\n\n    if (startRow < 0) {\n      endRow += startRow;\n      startRow = 0;\n    }\n    endRow = Math.min(heatmap.rows-1, endRow);\n\n    if (startRow > endRow) {\n      return;//short-circuit\n    }\n    for (int c = startColumn; c <= endColumn; c++) {\n      int cBase = c * heatmap.rows;\n      for (int r = startRow; r <= endRow; r++) {\n        heatmap.counts[cBase + r] += count;\n      }\n    }\n  }\n\n","sourceOld":"  private static void incrementRange(Heatmap heatmap, int startColumn, int endColumn, int startRow, int endRow,\n                                     int count) {\n    //startColumn & startRow are not necessarily within the heatmap range; likewise numRows/columns may overlap.\n    if (startColumn < 0) {\n      endColumn += startColumn;\n      startColumn = 0;\n    }\n    endColumn = Math.min(heatmap.columns-1, endColumn);\n\n    if (startRow < 0) {\n      endRow += startRow;\n      startRow = 0;\n    }\n    endRow = Math.min(heatmap.rows-1, endRow);\n\n    if (startRow > endRow) {\n      return;//short-circuit\n    }\n    for (int c = startColumn; c <= endColumn; c++) {\n      int cBase = c * heatmap.rows;\n      for (int r = startRow; r <= endRow; r++) {\n        heatmap.counts[cBase + r] += count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#incrementRange(Heatmap,int,int,int,int,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#incrementRange(Heatmap,int,int,int,int,int).mjava","sourceNew":"  private static void incrementRange(Heatmap heatmap, int startColumn, int endColumn, int startRow, int endRow,\n                                     int count) {\n    //startColumn & startRow are not necessarily within the heatmap range; likewise numRows/columns may overlap.\n    if (startColumn < 0) {\n      endColumn += startColumn;\n      startColumn = 0;\n    }\n    endColumn = Math.min(heatmap.columns-1, endColumn);\n\n    if (startRow < 0) {\n      endRow += startRow;\n      startRow = 0;\n    }\n    endRow = Math.min(heatmap.rows-1, endRow);\n\n    if (startRow > endRow) {\n      return;//short-circuit\n    }\n    for (int c = startColumn; c <= endColumn; c++) {\n      int cBase = c * heatmap.rows;\n      for (int r = startRow; r <= endRow; r++) {\n        heatmap.counts[cBase + r] += count;\n      }\n    }\n  }\n\n","sourceOld":"  private static void incrementRange(Heatmap heatmap, int startColumn, int endColumn, int startRow, int endRow,\n                                     int count) {\n    //startColumn & startRow are not necessarily within the heatmap range; likewise numRows/columns may overlap.\n    if (startColumn < 0) {\n      endColumn += startColumn;\n      startColumn = 0;\n    }\n    endColumn = Math.min(heatmap.columns-1, endColumn);\n\n    if (startRow < 0) {\n      endRow += startRow;\n      startRow = 0;\n    }\n    endRow = Math.min(heatmap.rows-1, endRow);\n\n    if (startRow > endRow) {\n      return;//short-circuit\n    }\n    for (int c = startColumn; c <= endColumn; c++) {\n      int cBase = c * heatmap.rows;\n      for (int r = startRow; r <= endRow; r++) {\n        heatmap.counts[cBase + r] += count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["d19946da5b8a6505034a72adcb5bae87dd043ddd","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}