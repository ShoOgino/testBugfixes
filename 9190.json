{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          FileWriter writer = new FileWriter(outFile);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          FileWriter writer = new FileWriter(outFile);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2","date":1341667852,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(sgmFile), IOUtils.CHARSET_UTF_8));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(outFile), IOUtils.CHARSET_UTF_8);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          FileWriter writer = new FileWriter(outFile);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(sgmFile), IOUtils.CHARSET_UTF_8));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(outFile), IOUtils.CHARSET_UTF_8);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          FileWriter writer = new FileWriter(outFile);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(sgmFile), IOUtils.CHARSET_UTF_8));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(outFile), IOUtils.CHARSET_UTF_8);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          FileWriter writer = new FileWriter(outFile);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(sgmFile), IOUtils.CHARSET_UTF_8));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(outFile), IOUtils.CHARSET_UTF_8);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          FileWriter writer = new FileWriter(outFile);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(sgmFile), IOUtils.CHARSET_UTF_8));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(outFile), IOUtils.CHARSET_UTF_8);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(sgmFile), IOUtils.CHARSET_UTF_8));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(outFile), IOUtils.CHARSET_UTF_8);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(sgmFile), StandardCharsets.UTF_8));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(outFile), StandardCharsets.UTF_8);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Override if you wish to change what is extracted\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(sgmFile), IOUtils.CHARSET_UTF_8));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(outFile), IOUtils.CHARSET_UTF_8);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(sgmFile), StandardCharsets.UTF_8));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(outFile), StandardCharsets.UTF_8);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Override if you wish to change what is extracted\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(sgmFile), IOUtils.CHARSET_UTF_8));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(outFile), IOUtils.CHARSET_UTF_8);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(Path).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   */\n  protected void extractFile(Path sgmFile) {\n    try (BufferedReader reader = Files.newBufferedReader(sgmFile, StandardCharsets.UTF_8)) {\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(System.lineSeparator()).append(System.lineSeparator());\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          Path outFile = outputDir.resolve(sgmFile.getFileName() + \"-\" + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          try (BufferedWriter writer = Files.newBufferedWriter(outFile, StandardCharsets.UTF_8)) {\n            writer.write(out);\n          }\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Override if you wish to change what is extracted\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(sgmFile), StandardCharsets.UTF_8));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(outFile), StandardCharsets.UTF_8);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["2acf500f78aa12b92e371fd89c719291986b6b90"],"5eb2511ababf862ea11e10761c70ee560cd84510":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","1e2d1edb0d4b63db0ffa514a529fb559609dbcd2"],"f4abec28b874149a7223e32cc7a01704c27790de":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1e2d1edb0d4b63db0ffa514a529fb559609dbcd2","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}