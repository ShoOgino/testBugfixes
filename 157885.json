{"path":"src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","commits":[{"id":"758a0ba5e213f4d1fc89087ae6e4678f7879e450","date":1224361193,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"/dev/null","sourceNew":"  public NamedList getStatsFields() {\n    NamedList<NamedList<Number>> res = new SimpleOrderedMap<NamedList<Number>>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams( f, StatsParams.STATS_FACET );\n        if( facets == null ) {\n          facets = new String[0]; // make sure it is something...\n        }\n        res.add(f, getFieldCacheStats(f, facets));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"861fa37cce2d9d3f8978bbb767e87a91d41ed4a8","date":1252682465,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList getStatsFields() throws IOException {\n    NamedList<NamedList<Number>> res = new SimpleOrderedMap<NamedList<Number>>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        if (ft.isTokenized() || sf.multiValued()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          StatsValues allstats = uif.getStats(searcher, docs, facets);\n          if (allstats != null) {\n            res.add(f, (NamedList) allstats.getStatsValues());\n          } else {\n            res.add(f, null);\n          }\n        } else {\n          res.add(f, getFieldCacheStats(f, facets));\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList getStatsFields() {\n    NamedList<NamedList<Number>> res = new SimpleOrderedMap<NamedList<Number>>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams( f, StatsParams.STATS_FACET );\n        if( facets == null ) {\n          facets = new String[0]; // make sure it is something...\n        }\n        res.add(f, getFieldCacheStats(f, facets));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["5e62bfc99fea332bfdcdca0f73a821428d533279"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1c2dfb6aa7b4d342a493c0982be96b76f595add","date":1252705594,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList getStatsFields() throws IOException {\n    NamedList<NamedList<Number>> res = new SimpleOrderedMap<NamedList<Number>>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList stv;\n        if (ft.isTokenized() || sf.multiValued()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList getStatsFields() throws IOException {\n    NamedList<NamedList<Number>> res = new SimpleOrderedMap<NamedList<Number>>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        if (ft.isTokenized() || sf.multiValued()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          StatsValues allstats = uif.getStats(searcher, docs, facets);\n          if (allstats != null) {\n            res.add(f, (NamedList) allstats.getStatsValues());\n          } else {\n            res.add(f, null);\n          }\n        } else {\n          res.add(f, getFieldCacheStats(f, facets));\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e62bfc99fea332bfdcdca0f73a821428d533279","date":1254838400,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList getStatsFields() throws IOException {\n    NamedList<NamedList<Number>> res = new SimpleOrderedMap<NamedList<Number>>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList stv;\n\n        // Currently, only UnInvertedField can deal with multi-part trie fields\n        String prefix = TrieField.getMainValuePrefix(ft);\n\n        if (sf.multiValued() || ft.multiValuedFieldCache() || prefix!=null) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList getStatsFields() throws IOException {\n    NamedList<NamedList<Number>> res = new SimpleOrderedMap<NamedList<Number>>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList stv;\n        if (ft.isTokenized() || sf.multiValued()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":["861fa37cce2d9d3f8978bbb767e87a91d41ed4a8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList getStatsFields() throws IOException {\n    NamedList<NamedList<Number>> res = new SimpleOrderedMap<NamedList<Number>>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList stv;\n\n        // Currently, only UnInvertedField can deal with multi-part trie fields\n        String prefix = TrieField.getMainValuePrefix(ft);\n\n        if (sf.multiValued() || ft.multiValuedFieldCache() || prefix!=null) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList getStatsFields() throws IOException {\n    NamedList<NamedList<Number>> res = new SimpleOrderedMap<NamedList<Number>>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList stv;\n\n        // Currently, only UnInvertedField can deal with multi-part trie fields\n        String prefix = TrieField.getMainValuePrefix(ft);\n\n        if (sf.multiValued() || ft.multiValuedFieldCache() || prefix!=null) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1c2dfb6aa7b4d342a493c0982be96b76f595add":["861fa37cce2d9d3f8978bbb767e87a91d41ed4a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5e62bfc99fea332bfdcdca0f73a821428d533279":["c1c2dfb6aa7b4d342a493c0982be96b76f595add"],"758a0ba5e213f4d1fc89087ae6e4678f7879e450":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["5e62bfc99fea332bfdcdca0f73a821428d533279"],"861fa37cce2d9d3f8978bbb767e87a91d41ed4a8":["758a0ba5e213f4d1fc89087ae6e4678f7879e450"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c1c2dfb6aa7b4d342a493c0982be96b76f595add":["5e62bfc99fea332bfdcdca0f73a821428d533279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["758a0ba5e213f4d1fc89087ae6e4678f7879e450"],"5e62bfc99fea332bfdcdca0f73a821428d533279":["ad94625fb8d088209f46650c8097196fec67f00c"],"758a0ba5e213f4d1fc89087ae6e4678f7879e450":["861fa37cce2d9d3f8978bbb767e87a91d41ed4a8"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"861fa37cce2d9d3f8978bbb767e87a91d41ed4a8":["c1c2dfb6aa7b4d342a493c0982be96b76f595add"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}