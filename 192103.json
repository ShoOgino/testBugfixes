{"path":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e470e29caa5c5200b096b6e282e9e657bc591bfb","date":1269888021,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52570d56717df77189407cb86a0ac4ea79455bb5","date":1270069390,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore,null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore,null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore,null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31c92b5d86c8bada7f558f974c8bf43e304bea3e","date":1308398364,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) {\n        return new CustomScoreProvider(context) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore,null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore,null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) {\n        return new CustomScoreProvider(context) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore,null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore,null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) {\n        return new CustomScoreProvider(context) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore,null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) {\n        return new CustomScoreProvider(context) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore,null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) {\n        return new CustomScoreProvider(context) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore,null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    IndexReader reader = IndexReader.open(directory);\n    searcher = new IndexSearcher(reader);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n    reader.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    IndexReader reader = IndexReader.open(directory);\n    searcher = new IndexSearcher(reader);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    IndexReader reader = IndexReader.open(directory);\n    searcher = new IndexSearcher(reader);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    IndexReader reader = IndexReader.open(directory);\n    searcher = new IndexSearcher(reader);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    IndexReader reader = IndexReader.open(directory);\n    searcher = new IndexSearcher(reader);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    IndexReader reader = IndexReader.open(directory);\n    searcher = new IndexSearcher(reader);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = d.getField(latField).numericValue().doubleValue();\n      double rsLng = d.getField(lngField).numericValue().doubleValue();\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    IndexReader reader = IndexReader.open(directory);\n    searcher = new IndexSearcher(reader);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = Double.parseDouble(d.get(latField));\n      double rsLng = Double.parseDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    reader.close();\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":null,"sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    IndexReader reader = IndexReader.open(directory);\n    searcher = new IndexSearcher(reader);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = d.getField(latField).numericValue().doubleValue();\n      double rsLng = d.getField(lngField).numericValue().doubleValue();\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":null,"sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    IndexReader reader = IndexReader.open(directory);\n    searcher = new IndexSearcher(reader);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    //Hawaii to Midway is 911 miles\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = d.getField(latField).numericValue().doubleValue();\n      double rsLng = d.getField(lngField).numericValue().doubleValue();\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"31c92b5d86c8bada7f558f974c8bf43e304bea3e":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["31c92b5d86c8bada7f558f974c8bf43e304bea3e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"e470e29caa5c5200b096b6e282e9e657bc591bfb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["52570d56717df77189407cb86a0ac4ea79455bb5"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["31c92b5d86c8bada7f558f974c8bf43e304bea3e","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"52570d56717df77189407cb86a0ac4ea79455bb5":["e470e29caa5c5200b096b6e282e9e657bc591bfb"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["fa0f44f887719e97183771e977cfc4bfb485b766"],"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7","31c92b5d86c8bada7f558f974c8bf43e304bea3e"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"e47768b261c28e7e6032060e8331475c81057953":["fa0f44f887719e97183771e977cfc4bfb485b766","2fb7e38713d15939e085d376c6391e6e6262a81f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"31c92b5d86c8bada7f558f974c8bf43e304bea3e":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["70ad682703b8585f5d0a637efec044d57ec05efb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"e470e29caa5c5200b096b6e282e9e657bc591bfb":["52570d56717df77189407cb86a0ac4ea79455bb5"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5f4e87790277826a2aea119328600dfb07761f32","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"52570d56717df77189407cb86a0ac4ea79455bb5":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","5f4e87790277826a2aea119328600dfb07761f32"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","31c92b5d86c8bada7f558f974c8bf43e304bea3e","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","868da859b43505d9d2a023bfeae6dd0c795f5295"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","fa0f44f887719e97183771e977cfc4bfb485b766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"fa0f44f887719e97183771e977cfc4bfb485b766":["2fb7e38713d15939e085d376c6391e6e6262a81f","e47768b261c28e7e6032060e8331475c81057953"],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e470e29caa5c5200b096b6e282e9e657bc591bfb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}