{"path":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fill(BytesRef,long,int).mjava","commits":[{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fill(BytesRef,long,int).mjava","pathOld":"/dev/null","sourceNew":"    /** Get a slice out of the byte array. */\n    public BytesRef fill(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        byte[] buffer = threadBuffers.get();\n        if (buffer == null) {\n          buffer = new byte[length];\n          threadBuffers.set(buffer);\n        } else if (buffer.length < length) {\n          buffer = ArrayUtil.grow(buffer, length);\n          threadBuffers.set(buffer);\n        }\n        b.bytes = buffer;\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, buffer, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, buffer, blockSize-offset, length-(blockSize-offset));\n      }\n      return b;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"224555f245128127dc8d161673eb9e867d67857c","date":1290782170,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fill(BytesRef,long,int).mjava","sourceNew":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than one block are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public BytesRef fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        byte[] buffer = threadBuffers.get();\n        if (buffer == null) {\n          buffer = new byte[length];\n          threadBuffers.set(buffer);\n        } else if (buffer.length < length) {\n          buffer = ArrayUtil.grow(buffer, length);\n          threadBuffers.set(buffer);\n        }\n        b.bytes = buffer;\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, buffer, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, buffer, blockSize-offset, length-(blockSize-offset));\n      }\n      return b;\n    }\n\n","sourceOld":"    /** Get a slice out of the byte array. */\n    public BytesRef fill(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        byte[] buffer = threadBuffers.get();\n        if (buffer == null) {\n          buffer = new byte[length];\n          threadBuffers.set(buffer);\n        } else if (buffer.length < length) {\n          buffer = ArrayUtil.grow(buffer, length);\n          threadBuffers.set(buffer);\n        }\n        b.bytes = buffer;\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, buffer, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, buffer, blockSize-offset, length-(blockSize-offset));\n      }\n      return b;\n    }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","c024a3e8fec0a081cbf9539845db12f0dc84d029"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fill(BytesRef,long,int).mjava","sourceNew":null,"sourceOld":"    /** Get a slice out of the byte array. */\n    public BytesRef fill(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        byte[] buffer = threadBuffers.get();\n        if (buffer == null) {\n          buffer = new byte[length];\n          threadBuffers.set(buffer);\n        } else if (buffer.length < length) {\n          buffer = ArrayUtil.grow(buffer, length);\n          threadBuffers.set(buffer);\n        }\n        b.bytes = buffer;\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, buffer, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, buffer, blockSize-offset, length-(blockSize-offset));\n      }\n      return b;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fill(BytesRef,long,int).mjava","sourceNew":null,"sourceOld":"    /** Get a slice out of the byte array. */\n    public BytesRef fill(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        byte[] buffer = threadBuffers.get();\n        if (buffer == null) {\n          buffer = new byte[length];\n          threadBuffers.set(buffer);\n        } else if (buffer.length < length) {\n          buffer = ArrayUtil.grow(buffer, length);\n          threadBuffers.set(buffer);\n        }\n        b.bytes = buffer;\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, buffer, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, buffer, blockSize-offset, length-(blockSize-offset));\n      }\n      return b;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","224555f245128127dc8d161673eb9e867d67857c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","224555f245128127dc8d161673eb9e867d67857c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["224555f245128127dc8d161673eb9e867d67857c"],"224555f245128127dc8d161673eb9e867d67857c":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","224555f245128127dc8d161673eb9e867d67857c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"224555f245128127dc8d161673eb9e867d67857c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}