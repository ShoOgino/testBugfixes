{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Lowest#copy(int,int).mjava","commits":[{"id":"e27b99259bc542853bfc42f809014f56aad988fb","date":1366018447,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Lowest#copy(int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void copy(int slot, int parentDoc) throws IOException {\n      if (parentDoc == 0 || parentDocuments == null || childDocuments == null) {\n        return;\n      }\n\n      // We need to copy the lowest value from all child docs into slot.\n      int prevParentDoc = parentDocuments.prevSetBit(parentDoc - 1);\n      int childDoc = childDocuments.nextSetBit(prevParentDoc + 1);\n      if (childDoc >= parentDoc || childDoc == -1) {\n        return;\n      }\n      wrappedComparator.copy(spareSlot, childDoc);\n      wrappedComparator.copy(slot, childDoc);\n\n      while (true) {\n        childDoc = childDocuments.nextSetBit(childDoc + 1);\n        if (childDoc >= parentDoc || childDoc == -1) {\n          return;\n        }\n        wrappedComparator.copy(spareSlot, childDoc);\n        if (wrappedComparator.compare(spareSlot, slot) < 0) {\n          wrappedComparator.copy(slot, childDoc);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Lowest#copy(int,int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Lowest#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int parentDoc) throws IOException {\n      if (parentDoc == 0 || parentDocuments == null || childDocuments == null) {\n        return;\n      }\n\n      // We need to copy the lowest value from all child docs into slot.\n      int prevParentDoc = parentDocuments.prevSetBit(parentDoc - 1);\n      int childDoc = childDocuments.nextSetBit(prevParentDoc + 1);\n      if (childDoc >= parentDoc || childDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      wrappedComparator.copy(spareSlot, childDoc);\n      wrappedComparator.copy(slot, childDoc);\n\n      while (true) {\n        childDoc = childDocuments.nextSetBit(childDoc + 1);\n        if (childDoc >= parentDoc || childDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          return;\n        }\n        wrappedComparator.copy(spareSlot, childDoc);\n        if (wrappedComparator.compare(spareSlot, slot) < 0) {\n          wrappedComparator.copy(slot, childDoc);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int parentDoc) throws IOException {\n      if (parentDoc == 0 || parentDocuments == null || childDocuments == null) {\n        return;\n      }\n\n      // We need to copy the lowest value from all child docs into slot.\n      int prevParentDoc = parentDocuments.prevSetBit(parentDoc - 1);\n      int childDoc = childDocuments.nextSetBit(prevParentDoc + 1);\n      if (childDoc >= parentDoc || childDoc == -1) {\n        return;\n      }\n      wrappedComparator.copy(spareSlot, childDoc);\n      wrappedComparator.copy(slot, childDoc);\n\n      while (true) {\n        childDoc = childDocuments.nextSetBit(childDoc + 1);\n        if (childDoc >= parentDoc || childDoc == -1) {\n          return;\n        }\n        wrappedComparator.copy(spareSlot, childDoc);\n        if (wrappedComparator.compare(spareSlot, slot) < 0) {\n          wrappedComparator.copy(slot, childDoc);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Lowest#copy(int,int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Lowest#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int parentDoc) throws IOException {\n      if (parentDoc == 0 || parentDocuments == null || childDocuments == null) {\n        return;\n      }\n\n      // We need to copy the lowest value from all child docs into slot.\n      int prevParentDoc = parentDocuments.prevSetBit(parentDoc - 1);\n      int childDoc = childDocuments.nextSetBit(prevParentDoc + 1);\n      if (childDoc >= parentDoc || childDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      wrappedLeafComparator.copy(spareSlot, childDoc);\n      wrappedLeafComparator.copy(slot, childDoc);\n\n      while (true) {\n        childDoc = childDocuments.nextSetBit(childDoc + 1);\n        if (childDoc >= parentDoc || childDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          return;\n        }\n        wrappedLeafComparator.copy(spareSlot, childDoc);\n        if (wrappedComparator.compare(spareSlot, slot) < 0) {\n          wrappedLeafComparator.copy(slot, childDoc);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int parentDoc) throws IOException {\n      if (parentDoc == 0 || parentDocuments == null || childDocuments == null) {\n        return;\n      }\n\n      // We need to copy the lowest value from all child docs into slot.\n      int prevParentDoc = parentDocuments.prevSetBit(parentDoc - 1);\n      int childDoc = childDocuments.nextSetBit(prevParentDoc + 1);\n      if (childDoc >= parentDoc || childDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      wrappedComparator.copy(spareSlot, childDoc);\n      wrappedComparator.copy(slot, childDoc);\n\n      while (true) {\n        childDoc = childDocuments.nextSetBit(childDoc + 1);\n        if (childDoc >= parentDoc || childDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          return;\n        }\n        wrappedComparator.copy(spareSlot, childDoc);\n        if (wrappedComparator.compare(spareSlot, slot) < 0) {\n          wrappedComparator.copy(slot, childDoc);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db447c88c3c3367999a54f10d9a207f3e63db201","date":1435740861,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Lowest#copy(int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void copy(int slot, int parentDoc) throws IOException {\n      if (parentDoc == 0 || parentDocuments == null || childDocuments == null) {\n        return;\n      }\n\n      // We need to copy the lowest value from all child docs into slot.\n      int prevParentDoc = parentDocuments.prevSetBit(parentDoc - 1);\n      int childDoc = childDocuments.nextSetBit(prevParentDoc + 1);\n      if (childDoc >= parentDoc || childDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      wrappedLeafComparator.copy(spareSlot, childDoc);\n      wrappedLeafComparator.copy(slot, childDoc);\n\n      while (true) {\n        childDoc = childDocuments.nextSetBit(childDoc + 1);\n        if (childDoc >= parentDoc || childDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          return;\n        }\n        wrappedLeafComparator.copy(spareSlot, childDoc);\n        if (wrappedComparator.compare(spareSlot, slot) < 0) {\n          wrappedLeafComparator.copy(slot, childDoc);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db447c88c3c3367999a54f10d9a207f3e63db201":["901e951cec2e6af4e503209a6721c8834db23279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["e27b99259bc542853bfc42f809014f56aad988fb"],"e27b99259bc542853bfc42f809014f56aad988fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db447c88c3c3367999a54f10d9a207f3e63db201"]},"commit2Childs":{"db447c88c3c3367999a54f10d9a207f3e63db201":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e27b99259bc542853bfc42f809014f56aad988fb"],"901e951cec2e6af4e503209a6721c8834db23279":["db447c88c3c3367999a54f10d9a207f3e63db201"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["901e951cec2e6af4e503209a6721c8834db23279"],"e27b99259bc542853bfc42f809014f56aad988fb":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}