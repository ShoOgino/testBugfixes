{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/BaseGroupSelectorTestCase#testSortGroups().mjava","commits":[{"id":"fdedc06ffe6518d5666d12901a738624563d147d","date":1588593300,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/BaseGroupSelectorTestCase#testSortGroups().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortGroups() throws IOException {\n\n    Shard shard = new Shard();\n    indexRandomDocs(shard.writer);\n    IndexSearcher searcher = shard.getIndexSearcher();\n\n    String[] query = new String[]{ \"foo\", \"bar\", \"baz\" };\n    Query topLevel = new TermQuery(new Term(\"text\", query[random().nextInt(query.length)]));\n\n    GroupingSearch grouper = new GroupingSearch(getGroupSelector());\n    grouper.setGroupDocsLimit(10);\n    Sort sort = new Sort(new SortField(\"sort1\", SortField.Type.STRING), new SortField(\"sort2\", SortField.Type.LONG));\n    grouper.setGroupSort(sort);\n    TopGroups<T> topGroups = grouper.search(searcher, topLevel, 0, 5);\n    TopDocs topDoc = searcher.search(topLevel, 1, sort);\n    for (int i = 0; i < topGroups.groups.length; i++) {\n      // We're sorting the groups by a defined Sort, but each group itself should be ordered\n      // by doc relevance, and should be equal to the results of a top-level query filtered\n      // by the group value\n      Query filtered = new BooleanQuery.Builder()\n          .add(topLevel, BooleanClause.Occur.MUST)\n          .add(filterQuery(topGroups.groups[i].groupValue), BooleanClause.Occur.FILTER)\n          .build();\n      TopDocs td = searcher.search(filtered, 10);\n      assertScoreDocsEquals(topGroups.groups[i].scoreDocs, td.scoreDocs);\n      // The top group should have sort values equal to the sort values of the top doc of\n      // a top-level search sorted by the same Sort; subsequent groups should have sort values\n      // that compare lower than their predecessor.\n      if (i > 0) {\n        assertSortsBefore(topGroups.groups[i - 1], topGroups.groups[i]);\n      } else {\n        assertArrayEquals(((FieldDoc)topDoc.scoreDocs[0]).fields, topGroups.groups[0].groupSortValues);\n      }\n    }\n\n    shard.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdedc06ffe6518d5666d12901a738624563d147d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fdedc06ffe6518d5666d12901a738624563d147d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdedc06ffe6518d5666d12901a738624563d147d"],"fdedc06ffe6518d5666d12901a738624563d147d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}