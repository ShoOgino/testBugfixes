{"path":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#getSortField(SchemaField,boolean).mjava","commits":[{"id":"54ad8c9e9210e008dc7b8ad5a037ff20879150ea","date":1501889566,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#getSortField(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#getSortField(SchemaField,boolean).mjava","sourceNew":"  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    field.checkSortability();\n    final Object missingValue = Integer.MIN_VALUE;\n    SortField sf = new SortField(field.getName(), SortField.Type.INT, top);\n    sf.setMissingValue(missingValue);\n    return sf;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    field.checkSortability();\n    final Object missingValue = Integer.MIN_VALUE;\n    SortField sf = new SortField(field.getName(), SortField.Type.INT, top);\n    sf.setMissingValue(missingValue);\n    return sf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#getSortField(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#getSortField(SchemaField,boolean).mjava","sourceNew":"  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    field.checkSortability();\n    final Object missingValue = Integer.MIN_VALUE;\n    SortField sf = new SortField(field.getName(), SortField.Type.INT, top);\n    sf.setMissingValue(missingValue);\n    return sf;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    field.checkSortability();\n    final Object missingValue = Integer.MIN_VALUE;\n    SortField sf = new SortField(field.getName(), SortField.Type.INT, top);\n    sf.setMissingValue(missingValue);\n    return sf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70052d44b40be0028db94b4cffeb9aaa5468055e","date":1505151510,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#getSortField(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#getSortField(SchemaField,boolean).mjava","sourceNew":"  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    SortField result = getSortField(field, SortField.Type.INT, top, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    if (null == result.getMissingValue()) {\n      // special case default behavior: assume missing values are \"below\" all enum values\n      result.setMissingValue(Integer.MIN_VALUE);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    field.checkSortability();\n    final Object missingValue = Integer.MIN_VALUE;\n    SortField sf = new SortField(field.getName(), SortField.Type.INT, top);\n    sf.setMissingValue(missingValue);\n    return sf;\n  }\n\n","bugFix":["7615b855702e008d91a95a2578bf05d27372f599","567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffb85feece8645a035c02443a625f5af15e1106b","date":1505219692,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#getSortField(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#getSortField(SchemaField,boolean).mjava","sourceNew":"  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    SortField result = getSortField(field, SortField.Type.INT, top, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    if (null == result.getMissingValue()) {\n      // special case default behavior: assume missing values are \"below\" all enum values\n      result.setMissingValue(Integer.MIN_VALUE);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    field.checkSortability();\n    final Object missingValue = Integer.MIN_VALUE;\n    SortField sf = new SortField(field.getName(), SortField.Type.INT, top);\n    sf.setMissingValue(missingValue);\n    return sf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#getSortField(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#getSortField(SchemaField,boolean).mjava","sourceNew":"  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    SortField result = getSortField(field, SortField.Type.INT, top, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    if (null == result.getMissingValue()) {\n      // special case default behavior: assume missing values are \"below\" all enum values\n      result.setMissingValue(Integer.MIN_VALUE);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    field.checkSortability();\n    final Object missingValue = Integer.MIN_VALUE;\n    SortField sf = new SortField(field.getName(), SortField.Type.INT, top);\n    sf.setMissingValue(missingValue);\n    return sf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf2282b6a7c3f113e7a233b785b80527c03d590","date":1516129064,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#getSortField(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#getSortField(SchemaField,boolean).mjava","sourceNew":"  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    if (field.multiValued()) {\n      MultiValueSelector selector = field.type.getDefaultMultiValueSelectorForSort(field, top);\n      if (null != selector) {\n        final SortField result = getSortedSetSortField(field, selector.getSortedSetSelectorType(),\n                                                       // yes: Strings, it's how SortedSetSortField works\n                                                       top, SortField.STRING_FIRST, SortField.STRING_LAST);\n        if (null == result.getMissingValue()) {\n          // special case 'enum' default behavior: assume missing values are \"below\" all enum values\n          result.setMissingValue(SortField.STRING_FIRST);\n        }\n        return result;\n      }\n    }\n    \n    // else...\n    // either single valued, or don't support implicit multi selector\n    // (in which case let getSortField() give the error)\n    final SortField result = getSortField(field, SortField.Type.INT, top, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    \n    if (null == result.getMissingValue()) {\n      // special case 'enum' default behavior: assume missing values are \"below\" all enum values\n      result.setMissingValue(Integer.MIN_VALUE);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    SortField result = getSortField(field, SortField.Type.INT, top, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    if (null == result.getMissingValue()) {\n      // special case default behavior: assume missing values are \"below\" all enum values\n      result.setMissingValue(Integer.MIN_VALUE);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#getSortField(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#getSortField(SchemaField,boolean).mjava","sourceNew":"  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    if (field.multiValued()) {\n      MultiValueSelector selector = field.type.getDefaultMultiValueSelectorForSort(field, top);\n      if (null != selector) {\n        final SortField result = getSortedSetSortField(field, selector.getSortedSetSelectorType(),\n                                                       // yes: Strings, it's how SortedSetSortField works\n                                                       top, SortField.STRING_FIRST, SortField.STRING_LAST);\n        if (null == result.getMissingValue()) {\n          // special case 'enum' default behavior: assume missing values are \"below\" all enum values\n          result.setMissingValue(SortField.STRING_FIRST);\n        }\n        return result;\n      }\n    }\n    \n    // else...\n    // either single valued, or don't support implicit multi selector\n    // (in which case let getSortField() give the error)\n    final SortField result = getSortField(field, SortField.Type.INT, top, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    \n    if (null == result.getMissingValue()) {\n      // special case 'enum' default behavior: assume missing values are \"below\" all enum values\n      result.setMissingValue(Integer.MIN_VALUE);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    SortField result = getSortField(field, SortField.Type.INT, top, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    if (null == result.getMissingValue()) {\n      // special case default behavior: assume missing values are \"below\" all enum values\n      result.setMissingValue(Integer.MIN_VALUE);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["ffb85feece8645a035c02443a625f5af15e1106b","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","ffb85feece8645a035c02443a625f5af15e1106b"],"ffb85feece8645a035c02443a625f5af15e1106b":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea","70052d44b40be0028db94b4cffeb9aaa5468055e"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["ffb85feece8645a035c02443a625f5af15e1106b"],"70052d44b40be0028db94b4cffeb9aaa5468055e":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"ffb85feece8645a035c02443a625f5af15e1106b":["b94236357aaa22b76c10629851fe4e376e0cea82","685bd38810c206c93e9058f3c2cfa9827c086c27","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["b94236357aaa22b76c10629851fe4e376e0cea82"],"70052d44b40be0028db94b4cffeb9aaa5468055e":["ffb85feece8645a035c02443a625f5af15e1106b"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["ffb85feece8645a035c02443a625f5af15e1106b","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","70052d44b40be0028db94b4cffeb9aaa5468055e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}