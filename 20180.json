{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","sourceNew":"  private SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader) throws IOException,\n      ParserConfigurationException, SAXException, KeeperException,\n      InterruptedException {\n    byte[] config = zkController.getConfigFileData(zkConfigName, solrConfigFileName);\n    InputSource is = new InputSource(new ByteArrayInputStream(config));\n    is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(solrConfigFileName));\n    SolrConfig cfg = solrConfigFileName == null ? new SolrConfig(\n        resourceLoader, SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(\n        resourceLoader, solrConfigFileName, is);\n\n    return cfg;\n  }\n\n","sourceOld":"  private SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader) throws IOException,\n      ParserConfigurationException, SAXException, KeeperException,\n      InterruptedException {\n    byte[] config = zkController.getConfigFileData(zkConfigName, solrConfigFileName);\n    InputSource is = new InputSource(new ByteArrayInputStream(config));\n    is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(solrConfigFileName));\n    SolrConfig cfg = solrConfigFileName == null ? new SolrConfig(\n        resourceLoader, SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(\n        resourceLoader, solrConfigFileName, is);\n\n    return cfg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","sourceNew":"  private SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader) throws IOException,\n      ParserConfigurationException, SAXException, KeeperException,\n      InterruptedException {\n    byte[] config = zkController.getConfigFileData(zkConfigName, solrConfigFileName);\n    InputSource is = new InputSource(new ByteArrayInputStream(config));\n    is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(solrConfigFileName));\n    SolrConfig cfg = solrConfigFileName == null ? new SolrConfig(\n        resourceLoader, SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(\n        resourceLoader, solrConfigFileName, is);\n\n    return cfg;\n  }\n\n","sourceOld":"  private SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader) throws IOException,\n      ParserConfigurationException, SAXException, KeeperException,\n      InterruptedException {\n    byte[] config = zkController.getConfigFileData(zkConfigName, solrConfigFileName);\n    InputSource is = new InputSource(new ByteArrayInputStream(config));\n    is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(solrConfigFileName));\n    SolrConfig cfg = solrConfigFileName == null ? new SolrConfig(\n        resourceLoader, SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(\n        resourceLoader, solrConfigFileName, is);\n\n    return cfg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","sourceNew":"  private SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader) throws IOException,\n      ParserConfigurationException, SAXException, KeeperException,\n      InterruptedException {\n    byte[] config = zkController.getConfigFileData(zkConfigName, solrConfigFileName);\n    InputSource is = new InputSource(new ByteArrayInputStream(config));\n    is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(solrConfigFileName));\n    SolrConfig cfg = solrConfigFileName == null ? new SolrConfig(\n        resourceLoader, SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(\n        resourceLoader, solrConfigFileName, is);\n\n    return cfg;\n  }\n\n","sourceOld":"  private SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader) throws IOException,\n      ParserConfigurationException, SAXException, KeeperException,\n      InterruptedException {\n    byte[] config = zkController.getConfigFileData(zkConfigName, solrConfigFileName);\n    InputSource is = new InputSource(new ByteArrayInputStream(config));\n    is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(solrConfigFileName));\n    SolrConfig cfg = solrConfigFileName == null ? new SolrConfig(\n        resourceLoader, SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(\n        resourceLoader, solrConfigFileName, is);\n\n    return cfg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","sourceNew":"  private SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader)\n  {\n    SolrConfig cfg = null;\n    try {\n      byte[] config = zkController.getConfigFileData(zkConfigName, solrConfigFileName);\n      InputSource is = new InputSource(new ByteArrayInputStream(config));\n      is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(solrConfigFileName));\n      cfg = solrConfigFileName == null ? new SolrConfig(\n          resourceLoader, SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(\n          resourceLoader, solrConfigFileName, is);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"getSolrConfigFromZK failed for \" + zkConfigName + \" \" + solrConfigFileName, e);\n    }\n\n    return cfg;\n  }\n\n","sourceOld":"  private SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader) throws IOException,\n      ParserConfigurationException, SAXException, KeeperException,\n      InterruptedException {\n    byte[] config = zkController.getConfigFileData(zkConfigName, solrConfigFileName);\n    InputSource is = new InputSource(new ByteArrayInputStream(config));\n    is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(solrConfigFileName));\n    SolrConfig cfg = solrConfigFileName == null ? new SolrConfig(\n        resourceLoader, SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(\n        resourceLoader, solrConfigFileName, is);\n\n    return cfg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","sourceNew":"  private SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader)\n  {\n    return cfg.getSolrConfigFromZk(zkController, zkConfigName, solrConfigFileName, resourceLoader);\n  }\n\n","sourceOld":"  private SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader)\n  {\n    SolrConfig cfg = null;\n    try {\n      byte[] config = zkController.getConfigFileData(zkConfigName, solrConfigFileName);\n      InputSource is = new InputSource(new ByteArrayInputStream(config));\n      is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(solrConfigFileName));\n      cfg = solrConfigFileName == null ? new SolrConfig(\n          resourceLoader, SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(\n          resourceLoader, solrConfigFileName, is);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"getSolrConfigFromZK failed for \" + zkConfigName + \" \" + solrConfigFileName, e);\n    }\n\n    return cfg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","sourceNew":"  public SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader) {\n    SolrConfig cfg = null;\n    try {\n      byte[] config = zkController.getConfigFileData(zkConfigName,\n          solrConfigFileName);\n      InputSource is = new InputSource(new ByteArrayInputStream(config));\n      is.setSystemId(SystemIdResolver\n          .createSystemIdFromResourceName(solrConfigFileName));\n      cfg = solrConfigFileName == null ? new SolrConfig(resourceLoader,\n          SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(resourceLoader,\n          solrConfigFileName, is);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"getSolrConfigFromZK failed for \" + zkConfigName + \" \"\n              + solrConfigFileName, e);\n    }\n    return cfg;\n  }\n\n","sourceOld":"  private SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader)\n  {\n    return cfg.getSolrConfigFromZk(zkController, zkConfigName, solrConfigFileName, resourceLoader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getSolrConfigFromZk(String,String,SolrResourceLoader).mjava","sourceNew":"  public SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader) {\n    SolrConfig cfg = null;\n    try {\n      byte[] config = zkController.getConfigFileData(zkConfigName,\n          solrConfigFileName);\n      InputSource is = new InputSource(new ByteArrayInputStream(config));\n      is.setSystemId(SystemIdResolver\n          .createSystemIdFromResourceName(solrConfigFileName));\n      cfg = solrConfigFileName == null ? new SolrConfig(resourceLoader,\n          SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(resourceLoader,\n          solrConfigFileName, is);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"getSolrConfigFromZK failed for \" + zkConfigName + \" \"\n              + solrConfigFileName, e);\n    }\n    return cfg;\n  }\n\n","sourceOld":"  public SolrConfig getSolrConfigFromZk(String zkConfigName, String solrConfigFileName,\n      SolrResourceLoader resourceLoader) {\n    SolrConfig cfg = null;\n    try {\n      byte[] config = zkController.getConfigFileData(zkConfigName,\n          solrConfigFileName);\n      InputSource is = new InputSource(new ByteArrayInputStream(config));\n      is.setSystemId(SystemIdResolver\n          .createSystemIdFromResourceName(solrConfigFileName));\n      cfg = solrConfigFileName == null ? new SolrConfig(resourceLoader,\n          SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(resourceLoader,\n          solrConfigFileName, is);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"getSolrConfigFromZK failed for \" + zkConfigName + \" \"\n              + solrConfigFileName, e);\n    }\n    return cfg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b29abed5661c7911e4b45d5a3d79a186268e28c4":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b374d78db8148ec6796fdf37148b33897ab40a8c":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b29abed5661c7911e4b45d5a3d79a186268e28c4"]},"commit2Childs":{"b29abed5661c7911e4b45d5a3d79a186268e28c4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["a837c064b67fa63a9394136e31218b908cdcf783"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"a837c064b67fa63a9394136e31218b908cdcf783":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}