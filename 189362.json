{"path":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    MockRAMDirectory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    MockRAMDirectory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Random random = newRandom();\n    Directory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Random random = newRandom();\n    Directory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    Searcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.MUST_NOT);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.MUST_NOT);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.MUST_NOT);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", TextField.TYPE_STORED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.MUST_NOT);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.MUST_NOT);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", TextField.TYPE_STORED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.MUST_NOT);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", TextField.TYPE_STORED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.MUST_NOT);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", TextField.TYPE_STORED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.MUST_NOT);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", TextField.TYPE_STORED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.MUST_NOT);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", TextField.TYPE_STORED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.MUST_NOT);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Document d1 = new Document();\n    d1.add(newField(\"field\", \"a b\", TextField.TYPE_STORED));\n\n    writer.addDocument(d1);\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.MUST_NOT);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    writer.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["1509f151d7692d84fae414b2b799ac06ba60fcb4","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70ad682703b8585f5d0a637efec044d57ec05efb":["132903c28af3aa6f67284b78de91c0f0a99488c2","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","790e1fde4caa765b3faaad3fbcd25c6973450336","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}