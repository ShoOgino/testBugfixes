{"path":"lucene/src/java/org/apache/lucene/index/values/Writer#create(Type,String,Directory,Comparator[BytesRef],AtomicLong).mjava","commits":[{"id":"aa2fc2eb37a1f19e90850f787d9e085950ebfa04","date":1291597075,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#create(Type,String,Directory,Comparator[BytesRef],AtomicLong).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#create(Values,String,Directory,Comparator[BytesRef],AtomicLong).mjava","sourceNew":"  public static Writer create(Type v, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed) throws IOException {\n    switch (v) {\n    case PACKED_INTS:\n      return Ints.getWriter(directory, id, true, bytesUsed);\n    case SIMPLE_FLOAT_4BYTE:\n      return Floats.getWriter(directory, id, 4, bytesUsed);\n    case SIMPLE_FLOAT_8BYTE:\n      return Floats.getWriter(directory, id, 8, bytesUsed);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true, bytesUsed);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true, bytesUsed);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true, bytesUsed);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false, bytesUsed);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false, bytesUsed);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false, bytesUsed);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + v);\n    }\n  }\n\n","sourceOld":"  public static Writer create(Values v, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed) throws IOException {\n    switch (v) {\n    case PACKED_INTS:\n      return Ints.getWriter(directory, id, true, bytesUsed);\n    case SIMPLE_FLOAT_4BYTE:\n      return Floats.getWriter(directory, id, 4, bytesUsed);\n    case SIMPLE_FLOAT_8BYTE:\n      return Floats.getWriter(directory, id, 8, bytesUsed);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true, bytesUsed);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true, bytesUsed);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true, bytesUsed);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false, bytesUsed);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false, bytesUsed);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false, bytesUsed);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + v);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16dc5aef9648bb8fedce2ef55874f52e62c2766d","date":1293994163,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#create(Type,String,Directory,Comparator[BytesRef],AtomicLong).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#create(Type,String,Directory,Comparator[BytesRef],AtomicLong).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @throws IOException\n   */\n  public static Writer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case PACKED_INTS:\n      return Ints.getWriter(directory, id, true, bytesUsed);\n    case SIMPLE_FLOAT_4BYTE:\n      return Floats.getWriter(directory, id, 4, bytesUsed);\n    case SIMPLE_FLOAT_8BYTE:\n      return Floats.getWriter(directory, id, 8, bytesUsed);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  public static Writer create(Type v, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed) throws IOException {\n    switch (v) {\n    case PACKED_INTS:\n      return Ints.getWriter(directory, id, true, bytesUsed);\n    case SIMPLE_FLOAT_4BYTE:\n      return Floats.getWriter(directory, id, 4, bytesUsed);\n    case SIMPLE_FLOAT_8BYTE:\n      return Floats.getWriter(directory, id, 8, bytesUsed);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true, bytesUsed);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true, bytesUsed);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true, bytesUsed);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false, bytesUsed);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false, bytesUsed);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false, bytesUsed);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + v);\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85130289d2ed101fcc2d8798511c7c5b020ffab4","date":1297239859,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#create(Type,String,Directory,Comparator[BytesRef],AtomicLong).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#create(Type,String,Directory,Comparator[BytesRef],AtomicLong).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @throws IOException\n   */\n  public static Writer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case INTS:\n      return Ints.getWriter(directory, id, true, bytesUsed);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @throws IOException\n   */\n  public static Writer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case PACKED_INTS:\n      return Ints.getWriter(directory, id, true, bytesUsed);\n    case SIMPLE_FLOAT_4BYTE:\n      return Floats.getWriter(directory, id, 4, bytesUsed);\n    case SIMPLE_FLOAT_8BYTE:\n      return Floats.getWriter(directory, id, 8, bytesUsed);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39d51e9acac1e629cffe47855e85dc6dedc4754d","date":1305711497,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#create(ValueType,String,Directory,Comparator[BytesRef],AtomicLong).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#create(Type,String,Directory,Comparator[BytesRef],AtomicLong).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link ValueType} enumeration.\n   * \n   * @param type\n   *          the {@link ValueType} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link ValueType}\n   * @throws IOException\n   */\n  public static Writer create(ValueType type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case INTS:\n      return Ints.getWriter(directory, id, true, bytesUsed);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param comp\n   *          a {@link BytesRef} comparator used for {@link Bytes} variants. If\n   *          <code>null</code>\n   *          {@link BytesRef#getUTF8SortedAsUnicodeComparator()} is used as the\n   *          default.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @throws IOException\n   */\n  public static Writer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, AtomicLong bytesUsed) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case INTS:\n      return Ints.getWriter(directory, id, true, bytesUsed);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, 4, bytesUsed);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, 8, bytesUsed);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, true,\n          bytesUsed);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, true,\n          bytesUsed);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, comp, false,\n          bytesUsed);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, comp, false,\n          bytesUsed);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, comp, false,\n          bytesUsed);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"39d51e9acac1e629cffe47855e85dc6dedc4754d":["85130289d2ed101fcc2d8798511c7c5b020ffab4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16dc5aef9648bb8fedce2ef55874f52e62c2766d":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["16dc5aef9648bb8fedce2ef55874f52e62c2766d"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"39d51e9acac1e629cffe47855e85dc6dedc4754d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"16dc5aef9648bb8fedce2ef55874f52e62c2766d":["85130289d2ed101fcc2d8798511c7c5b020ffab4"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["39d51e9acac1e629cffe47855e85dc6dedc4754d"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["16dc5aef9648bb8fedce2ef55874f52e62c2766d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["39d51e9acac1e629cffe47855e85dc6dedc4754d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}