{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeQuery#LongTrieRangeQuery(String,int,Long,Long,boolean,boolean).mjava","commits":[{"id":"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc","date":1239886708,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeQuery#LongTrieRangeQuery(String,int,Long,Long,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A trie query for matching trie coded values using the given field name and\n   * the default helper field.\n   * <code>precisionStep</code> must me equal or a multiple of the <code>precisionStep</code>\n   * used for indexing the values.\n   * You can leave the bounds open, by supplying <code>null</code> for <code>min</code> and/or\n   * <code>max</code>. Inclusive/exclusive bounds can also be supplied.\n   * To query double values use the converter {@link TrieUtils#doubleToSortableLong}.\n   */\n  public LongTrieRangeQuery(final String field, final int precisionStep,\n    final Long min, final Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field,precisionStep,min,max,minInclusive,maxInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeQuery#LongTrieRangeQuery(String,int,Long,Long,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * A trie query for matching trie coded values using the given field name and\n   * the default helper field.\n   * <code>precisionStep</code> must me equal or a multiple of the <code>precisionStep</code>\n   * used for indexing the values.\n   * You can leave the bounds open, by supplying <code>null</code> for <code>min</code> and/or\n   * <code>max</code>. Inclusive/exclusive bounds can also be supplied.\n   * To query double values use the converter {@link TrieUtils#doubleToSortableLong}.\n   */\n  public LongTrieRangeQuery(final String field, final int precisionStep,\n    final Long min, final Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field,precisionStep,min,max,minInclusive,maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}