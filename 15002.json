{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTests#testArbitraryJsonIndexing().mjava","commits":[{"id":"157e4b32a06b293d6b72d6493eedc6e54e921954","date":1409099868,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTests#testArbitraryJsonIndexing().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrServer server = (HttpSolrServer) getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = server.getHttpClient();\n    HttpPost post = new HttpPost(server.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    server.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab6ebe0fdf300ab34ce5ac60fae28ce2e063df2e","date":1410548439,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTests#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrServer server = (HttpSolrServer) getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = server.getHttpClient();\n    HttpPost post = new HttpPost(server.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    server.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrServer server = (HttpSolrServer) getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = server.getHttpClient();\n    HttpPost post = new HttpPost(server.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    server.commit();\n    assertNumFound(\"*:*\", 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"157e4b32a06b293d6b72d6493eedc6e54e921954":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab6ebe0fdf300ab34ce5ac60fae28ce2e063df2e":["157e4b32a06b293d6b72d6493eedc6e54e921954"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ab6ebe0fdf300ab34ce5ac60fae28ce2e063df2e"]},"commit2Childs":{"157e4b32a06b293d6b72d6493eedc6e54e921954":["ab6ebe0fdf300ab34ce5ac60fae28ce2e063df2e"],"ab6ebe0fdf300ab34ce5ac60fae28ce2e063df2e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["157e4b32a06b293d6b72d6493eedc6e54e921954"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}