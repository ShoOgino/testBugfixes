{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase#multiTransformer().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase#multiTransformer().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void multiTransformer() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    Map<String, String> entity = new HashMap<String, String>();\n    entity.put(\"transformer\", T1.class.getName() + \",\" + T2.class.getName()\n            + \",\" + T3.class.getName());\n    fields.add(TestRegexTransformer.getField(\"A\", null, null, null, null));\n    fields.add(TestRegexTransformer.getField(\"B\", null, null, null, null));\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, null,\n            null, 0, fields, entity);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"A\", \"NA\");\n    src.put(\"B\", \"NA\");\n    SqlEntityProcessor sep = new SqlEntityProcessor();\n    sep.init(context);\n    Map<String, Object> res = sep.applyTransformer(src);\n    Assert.assertNotNull(res.get(\"T1\"));\n    Assert.assertNotNull(res.get(\"T2\"));\n    Assert.assertNotNull(res.get(\"T3\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["33c5df47ecbf734182bdfec8f59154a8dbecc2e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33c5df47ecbf734182bdfec8f59154a8dbecc2e3","date":1226037101,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase#multiTransformer().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase#multiTransformer().mjava","sourceNew":"  @Test\n  public void multiTransformer() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    Map<String, String> entity = new HashMap<String, String>();\n    entity.put(\"transformer\", T1.class.getName() + \",\" + T2.class.getName()\n            + \",\" + T3.class.getName());\n    fields.add(TestRegexTransformer.getField(\"A\", null, null, null, null));\n    fields.add(TestRegexTransformer.getField(\"B\", null, null, null, null));\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, new MockDataSource(), 0, fields, entity);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"A\", \"NA\");\n    src.put(\"B\", \"NA\");\n    SqlEntityProcessor sep = new SqlEntityProcessor();\n    sep.init(context);\n    Map<String, Object> res = sep.applyTransformer(src);\n    Assert.assertNotNull(res.get(\"T1\"));\n    Assert.assertNotNull(res.get(\"T2\"));\n    Assert.assertNotNull(res.get(\"T3\"));\n  }\n\n","sourceOld":"  @Test\n  public void multiTransformer() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    Map<String, String> entity = new HashMap<String, String>();\n    entity.put(\"transformer\", T1.class.getName() + \",\" + T2.class.getName()\n            + \",\" + T3.class.getName());\n    fields.add(TestRegexTransformer.getField(\"A\", null, null, null, null));\n    fields.add(TestRegexTransformer.getField(\"B\", null, null, null, null));\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, null,\n            null, 0, fields, entity);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"A\", \"NA\");\n    src.put(\"B\", \"NA\");\n    SqlEntityProcessor sep = new SqlEntityProcessor();\n    sep.init(context);\n    Map<String, Object> res = sep.applyTransformer(src);\n    Assert.assertNotNull(res.get(\"T1\"));\n    Assert.assertNotNull(res.get(\"T2\"));\n    Assert.assertNotNull(res.get(\"T3\"));\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase#multiTransformer().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase#multiTransformer().mjava","sourceNew":"  @Test\n  public void multiTransformer() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    Map<String, String> entity = new HashMap<String, String>();\n    entity.put(\"transformer\", T1.class.getName() + \",\" + T2.class.getName()\n            + \",\" + T3.class.getName());\n    fields.add(TestRegexTransformer.getField(\"A\", null, null, null, null));\n    fields.add(TestRegexTransformer.getField(\"B\", null, null, null, null));\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, new MockDataSource(), Context.FULL_DUMP,\n            fields, entity);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"A\", \"NA\");\n    src.put(\"B\", \"NA\");\n    SqlEntityProcessor sep = new SqlEntityProcessor();\n    sep.init(context);\n    Map<String, Object> res = sep.applyTransformer(src);\n    Assert.assertNotNull(res.get(\"T1\"));\n    Assert.assertNotNull(res.get(\"T2\"));\n    Assert.assertNotNull(res.get(\"T3\"));\n  }\n\n","sourceOld":"  @Test\n  public void multiTransformer() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    Map<String, String> entity = new HashMap<String, String>();\n    entity.put(\"transformer\", T1.class.getName() + \",\" + T2.class.getName()\n            + \",\" + T3.class.getName());\n    fields.add(TestRegexTransformer.getField(\"A\", null, null, null, null));\n    fields.add(TestRegexTransformer.getField(\"B\", null, null, null, null));\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, new MockDataSource(), 0, fields, entity);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"A\", \"NA\");\n    src.put(\"B\", \"NA\");\n    SqlEntityProcessor sep = new SqlEntityProcessor();\n    sep.init(context);\n    Map<String, Object> res = sep.applyTransformer(src);\n    Assert.assertNotNull(res.get(\"T1\"));\n    Assert.assertNotNull(res.get(\"T2\"));\n    Assert.assertNotNull(res.get(\"T3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"758fdd153bb361b47f22db79ace6af6f6b7b9330","date":1240213015,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase#multiTransformer().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase#multiTransformer().mjava","sourceNew":"  @Test\n  public void multiTransformer() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    Map<String, String> entity = new HashMap<String, String>();\n    entity.put(\"transformer\", T1.class.getName() + \",\" + T2.class.getName()\n            + \",\" + T3.class.getName());\n    fields.add(TestRegexTransformer.getField(\"A\", null, null, null, null));\n    fields.add(TestRegexTransformer.getField(\"B\", null, null, null, null));\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, new MockDataSource(), Context.FULL_DUMP,\n            fields, entity);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"A\", \"NA\");\n    src.put(\"B\", \"NA\");\n    EntityProcessorWrapper sep = new EntityProcessorWrapper(new SqlEntityProcessor(), null);\n    sep.init(context);\n    Map<String, Object> res = sep.applyTransformer(src);\n    Assert.assertNotNull(res.get(\"T1\"));\n    Assert.assertNotNull(res.get(\"T2\"));\n    Assert.assertNotNull(res.get(\"T3\"));\n  }\n\n","sourceOld":"  @Test\n  public void multiTransformer() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    Map<String, String> entity = new HashMap<String, String>();\n    entity.put(\"transformer\", T1.class.getName() + \",\" + T2.class.getName()\n            + \",\" + T3.class.getName());\n    fields.add(TestRegexTransformer.getField(\"A\", null, null, null, null));\n    fields.add(TestRegexTransformer.getField(\"B\", null, null, null, null));\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, new MockDataSource(), Context.FULL_DUMP,\n            fields, entity);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"A\", \"NA\");\n    src.put(\"B\", \"NA\");\n    SqlEntityProcessor sep = new SqlEntityProcessor();\n    sep.init(context);\n    Map<String, Object> res = sep.applyTransformer(src);\n    Assert.assertNotNull(res.get(\"T1\"));\n    Assert.assertNotNull(res.get(\"T2\"));\n    Assert.assertNotNull(res.get(\"T3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase#multiTransformer().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase#multiTransformer().mjava","sourceNew":"  @Test\n  public void multiTransformer() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    Map<String, String> entity = new HashMap<String, String>();\n    entity.put(\"transformer\", T1.class.getName() + \",\" + T2.class.getName()\n            + \",\" + T3.class.getName());\n    fields.add(TestRegexTransformer.getField(\"A\", null, null, null, null));\n    fields.add(TestRegexTransformer.getField(\"B\", null, null, null, null));\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, new MockDataSource(), Context.FULL_DUMP,\n            fields, entity);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"A\", \"NA\");\n    src.put(\"B\", \"NA\");\n    EntityProcessorWrapper sep = new EntityProcessorWrapper(new SqlEntityProcessor(), null);\n    sep.init(context);\n    Map<String, Object> res = sep.applyTransformer(src);\n    Assert.assertNotNull(res.get(\"T1\"));\n    Assert.assertNotNull(res.get(\"T2\"));\n    Assert.assertNotNull(res.get(\"T3\"));\n  }\n\n","sourceOld":"  @Test\n  public void multiTransformer() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    Map<String, String> entity = new HashMap<String, String>();\n    entity.put(\"transformer\", T1.class.getName() + \",\" + T2.class.getName()\n            + \",\" + T3.class.getName());\n    fields.add(TestRegexTransformer.getField(\"A\", null, null, null, null));\n    fields.add(TestRegexTransformer.getField(\"B\", null, null, null, null));\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, null, new MockDataSource(), Context.FULL_DUMP,\n            fields, entity);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"A\", \"NA\");\n    src.put(\"B\", \"NA\");\n    EntityProcessorWrapper sep = new EntityProcessorWrapper(new SqlEntityProcessor(), null);\n    sep.init(context);\n    Map<String, Object> res = sep.applyTransformer(src);\n    Assert.assertNotNull(res.get(\"T1\"));\n    Assert.assertNotNull(res.get(\"T2\"));\n    Assert.assertNotNull(res.get(\"T3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"33c5df47ecbf734182bdfec8f59154a8dbecc2e3":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"ad94625fb8d088209f46650c8097196fec67f00c":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["33c5df47ecbf734182bdfec8f59154a8dbecc2e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["33c5df47ecbf734182bdfec8f59154a8dbecc2e3"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33c5df47ecbf734182bdfec8f59154a8dbecc2e3":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}