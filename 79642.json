{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DistanceEvaluator#distance(DistanceMeasure,Matrix).mjava","commits":[{"id":"2f033e640613edeb07d8952279368806db4ab299","date":1511393468,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DistanceEvaluator#distance(DistanceMeasure,Matrix).mjava","pathOld":"/dev/null","sourceNew":"  private Matrix distance(DistanceMeasure distanceMeasure, Matrix matrix) {\n    double[][] data = matrix.getData();\n    RealMatrix realMatrix = new Array2DRowRealMatrix(data);\n    realMatrix = realMatrix.transpose();\n    data = realMatrix.getData();\n    double[][] distanceMatrix = new double[data.length][data.length];\n    for(int i=0; i<data.length; i++) {\n      double[] row = data[i];\n      for(int j=0; j<data.length; j++) {\n        double[] row2 = data[j];\n        double dist = distanceMeasure.compute(row, row2);\n        distanceMatrix[i][j] = dist;\n      }\n    }\n    return new Matrix(distanceMatrix);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac","date":1523323495,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DistanceEvaluator#distance(DistanceMeasure,Matrix).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DistanceEvaluator#distance(DistanceMeasure,Matrix).mjava","sourceNew":"  private Matrix distance(DistanceMeasure distanceMeasure, Matrix matrix) {\n    double[][] data = matrix.getData();\n    Array2DRowRealMatrix realMatrix = new Array2DRowRealMatrix(data, false);\n    realMatrix = (Array2DRowRealMatrix)realMatrix.transpose();\n    data = realMatrix.getDataRef();\n    double[][] distanceMatrix = new double[data.length][data.length];\n    for(int i=0; i<data.length; i++) {\n      double[] row = data[i];\n      for(int j=0; j<data.length; j++) {\n        double[] row2 = data[j];\n        double dist = distanceMeasure.compute(row, row2);\n        distanceMatrix[i][j] = dist;\n      }\n    }\n    return new Matrix(distanceMatrix);\n  }\n\n","sourceOld":"  private Matrix distance(DistanceMeasure distanceMeasure, Matrix matrix) {\n    double[][] data = matrix.getData();\n    RealMatrix realMatrix = new Array2DRowRealMatrix(data);\n    realMatrix = realMatrix.transpose();\n    data = realMatrix.getData();\n    double[][] distanceMatrix = new double[data.length][data.length];\n    for(int i=0; i<data.length; i++) {\n      double[] row = data[i];\n      for(int j=0; j<data.length; j++) {\n        double[] row2 = data[j];\n        double dist = distanceMeasure.compute(row, row2);\n        distanceMatrix[i][j] = dist;\n      }\n    }\n    return new Matrix(distanceMatrix);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"431c2627ab600554864fa78f5e76abef81faa42d","date":1523357854,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DistanceEvaluator#distance(DistanceMeasure,Matrix).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DistanceEvaluator#distance(DistanceMeasure,Matrix).mjava","sourceNew":"  private Matrix distance(DistanceMeasure distanceMeasure, Matrix matrix) {\n    double[][] data = matrix.getData();\n    Array2DRowRealMatrix realMatrix = new Array2DRowRealMatrix(data, false);\n    realMatrix = (Array2DRowRealMatrix)realMatrix.transpose();\n    data = realMatrix.getDataRef();\n    double[][] distanceMatrix = new double[data.length][data.length];\n    for(int i=0; i<data.length; i++) {\n      double[] row = data[i];\n      for(int j=0; j<data.length; j++) {\n        double[] row2 = data[j];\n        double dist = distanceMeasure.compute(row, row2);\n        distanceMatrix[i][j] = dist;\n      }\n    }\n    return new Matrix(distanceMatrix);\n  }\n\n","sourceOld":"  private Matrix distance(DistanceMeasure distanceMeasure, Matrix matrix) {\n    double[][] data = matrix.getData();\n    RealMatrix realMatrix = new Array2DRowRealMatrix(data);\n    realMatrix = realMatrix.transpose();\n    data = realMatrix.getData();\n    double[][] distanceMatrix = new double[data.length][data.length];\n    for(int i=0; i<data.length; i++) {\n      double[] row = data[i];\n      for(int j=0; j<data.length; j++) {\n        double[] row2 = data[j];\n        double dist = distanceMeasure.compute(row, row2);\n        distanceMatrix[i][j] = dist;\n      }\n    }\n    return new Matrix(distanceMatrix);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c469fe67f2da2a654eb8d709dfd239236f23a9a2","date":1570414680,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DistanceEvaluator#distance(DistanceMeasure,Matrix).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DistanceEvaluator#distance(DistanceMeasure,Matrix).mjava","sourceNew":"  private Matrix distance(DistanceMeasure distanceMeasure, Matrix matrix) {\n    double[][] data = matrix.getData();\n    Array2DRowRealMatrix realMatrix = new Array2DRowRealMatrix(data, false);\n    realMatrix = (Array2DRowRealMatrix)realMatrix.transpose();\n    data = realMatrix.getDataRef();\n    double[][] distanceMatrix = new double[data.length][data.length];\n    for(int i=0; i<data.length; i++) {\n      double[] row = data[i];\n      for(int j=0; j<data.length; j++) {\n        double[] row2 = data[j];\n        double dist = distanceMeasure.compute(row, row2);\n        distanceMatrix[i][j] = dist;\n      }\n    }\n    Matrix m = new Matrix(distanceMatrix);\n    List<String> labels = CorrelationEvaluator.getColumnLabels(matrix.getColumnLabels(), data.length);\n    m.setColumnLabels(labels);\n    m.setRowLabels(labels);\n    return m;\n  }\n\n","sourceOld":"  private Matrix distance(DistanceMeasure distanceMeasure, Matrix matrix) {\n    double[][] data = matrix.getData();\n    Array2DRowRealMatrix realMatrix = new Array2DRowRealMatrix(data, false);\n    realMatrix = (Array2DRowRealMatrix)realMatrix.transpose();\n    data = realMatrix.getDataRef();\n    double[][] distanceMatrix = new double[data.length][data.length];\n    for(int i=0; i<data.length; i++) {\n      double[] row = data[i];\n      for(int j=0; j<data.length; j++) {\n        double[] row2 = data[j];\n        double dist = distanceMeasure.compute(row, row2);\n        distanceMatrix[i][j] = dist;\n      }\n    }\n    return new Matrix(distanceMatrix);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DistanceEvaluator#distance(DistanceMeasure,Matrix).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DistanceEvaluator#distance(DistanceMeasure,Matrix).mjava","sourceNew":"  private Matrix distance(DistanceMeasure distanceMeasure, Matrix matrix) {\n    double[][] data = matrix.getData();\n    Array2DRowRealMatrix realMatrix = new Array2DRowRealMatrix(data, false);\n    realMatrix = (Array2DRowRealMatrix)realMatrix.transpose();\n    data = realMatrix.getDataRef();\n    double[][] distanceMatrix = new double[data.length][data.length];\n    for(int i=0; i<data.length; i++) {\n      double[] row = data[i];\n      for(int j=0; j<data.length; j++) {\n        double[] row2 = data[j];\n        double dist = distanceMeasure.compute(row, row2);\n        distanceMatrix[i][j] = dist;\n      }\n    }\n    Matrix m = new Matrix(distanceMatrix);\n    List<String> labels = CorrelationEvaluator.getColumnLabels(matrix.getColumnLabels(), data.length);\n    m.setColumnLabels(labels);\n    m.setRowLabels(labels);\n    return m;\n  }\n\n","sourceOld":"  private Matrix distance(DistanceMeasure distanceMeasure, Matrix matrix) {\n    double[][] data = matrix.getData();\n    Array2DRowRealMatrix realMatrix = new Array2DRowRealMatrix(data, false);\n    realMatrix = (Array2DRowRealMatrix)realMatrix.transpose();\n    data = realMatrix.getDataRef();\n    double[][] distanceMatrix = new double[data.length][data.length];\n    for(int i=0; i<data.length; i++) {\n      double[] row = data[i];\n      for(int j=0; j<data.length; j++) {\n        double[] row2 = data[j];\n        double dist = distanceMeasure.compute(row, row2);\n        distanceMatrix[i][j] = dist;\n      }\n    }\n    return new Matrix(distanceMatrix);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f033e640613edeb07d8952279368806db4ab299":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c469fe67f2da2a654eb8d709dfd239236f23a9a2":["431c2627ab600554864fa78f5e76abef81faa42d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"431c2627ab600554864fa78f5e76abef81faa42d":["2f033e640613edeb07d8952279368806db4ab299","c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c469fe67f2da2a654eb8d709dfd239236f23a9a2"],"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac":["2f033e640613edeb07d8952279368806db4ab299"],"b0b597c65628ca9e73913a07e81691f8229bae35":["431c2627ab600554864fa78f5e76abef81faa42d","c469fe67f2da2a654eb8d709dfd239236f23a9a2"]},"commit2Childs":{"2f033e640613edeb07d8952279368806db4ab299":["431c2627ab600554864fa78f5e76abef81faa42d","c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac"],"c469fe67f2da2a654eb8d709dfd239236f23a9a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f033e640613edeb07d8952279368806db4ab299"],"431c2627ab600554864fa78f5e76abef81faa42d":["c469fe67f2da2a654eb8d709dfd239236f23a9a2","b0b597c65628ca9e73913a07e81691f8229bae35"],"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac":["431c2627ab600554864fa78f5e76abef81faa42d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}