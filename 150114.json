{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a detailed message for the Error when it is thrown by the\n   * token manager to indicate a lexical error.\n   * Parameters :\n   *    EOFSeen     : indicates if EOF caused the lexical error\n   *    curLexState : lexical state in which this error occurred\n   *    errorLine   : line number when the error occurred\n   *    errorColumn : column number when the error occurred\n   *    errorAfter  : prefix that was seen before this error occurred\n   *    curchar     : the offending character\n   * Note: You can customize the lexical error message by modifying this method.\n   */\n  protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return(\"Lexical error at line \" +\n          errorLine + \", column \" +\n          errorColumn + \".  Encountered: \" +\n          (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n          \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"  /**\n   * Returns a detailed message for the Error when it is thrown by the\n   * token manager to indicate a lexical error.\n   * Parameters :\n   *    EOFSeen     : indicates if EOF caused the lexical error\n   *    curLexState : lexical state in which this error occurred\n   *    errorLine   : line number when the error occurred\n   *    errorColumn : column number when the error occurred\n   *    errorAfter  : prefix that was seen before this error occurred\n   *    curchar     : the offending character\n   * Note: You can customize the lexical error message by modifying this method.\n   */\n  protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return(\"Lexical error at line \" +\n          errorLine + \", column \" +\n          errorColumn + \".  Encountered: \" +\n          (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n          \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n  }\n\n","sourceOld":"  /**\n   * Returns a detailed message for the Error when it is thrown by the\n   * token manager to indicate a lexical error.\n   * Parameters :\n   *    EOFSeen     : indicates if EOF caused the lexical error\n   *    curLexState : lexical state in which this error occurred\n   *    errorLine   : line number when the error occurred\n   *    errorColumn : column number when the error occurred\n   *    errorAfter  : prefix that was seen before this error occurred\n   *    curchar     : the offending character\n   * Note: You can customize the lexical error message by modifying this method.\n   */\n  protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return(\"Lexical error at line \" +\n          errorLine + \", column \" +\n          errorColumn + \".  Encountered: \" +\n          (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n          \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}