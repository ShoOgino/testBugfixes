{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","commits":[{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES && !stateWasStale && !requestedCollections.isEmpty() && wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getZkStateReader().getCollection(ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      requestedCollections.clear(); // done with this\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES && !stateWasStale && !requestedCollections.isEmpty() && wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getZkStateReader().getCollection(ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      requestedCollections.clear(); // done with this\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES && !stateWasStale && !requestedCollections.isEmpty() && wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      requestedCollections.clear(); // done with this\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4c2f5223cebd58879933670af3e599b10d7e8f1a","e78c35bca3e32dfc7a695136fa2b5de1ae135c22","015571db92de1e6f75d89f34faeb520f99f07b97","5ad9c35f926b4bf8da0336d1300efc709c8d5a56","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403b6d8b3e6cec80048e9cfc481bbffdd57517bb","date":1410598299,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES && !stateWasStale && !requestedCollections.isEmpty() && wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      requestedCollections.clear(); // done with this\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES && !stateWasStale && !requestedCollections.isEmpty() && wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      requestedCollections.clear(); // done with this\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea6f5a84ade972f34e24ef64328a57b161b20a2c","date":1411282883,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      requestedCollections.clear(); // done with this\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES && !stateWasStale && !requestedCollections.isEmpty() && wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      requestedCollections.clear(); // done with this\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5252c80ebc28609a7a1510aac444a88802c317ac","date":1411315320,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      requestedCollections.clear(); // done with this\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"403b6d8b3e6cec80048e9cfc481bbffdd57517bb":["9279b175e5e66258442d2123a50f052219a9cc1b"],"5252c80ebc28609a7a1510aac444a88802c317ac":["ea6f5a84ade972f34e24ef64328a57b161b20a2c"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["5252c80ebc28609a7a1510aac444a88802c317ac"],"ea6f5a84ade972f34e24ef64328a57b161b20a2c":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"403b6d8b3e6cec80048e9cfc481bbffdd57517bb":["ea6f5a84ade972f34e24ef64328a57b161b20a2c"],"5252c80ebc28609a7a1510aac444a88802c317ac":["bafca15d8e408346a67f4282ad1143b88023893b"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea6f5a84ade972f34e24ef64328a57b161b20a2c":["5252c80ebc28609a7a1510aac444a88802c317ac"],"9279b175e5e66258442d2123a50f052219a9cc1b":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}