{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistributedQueueFactory.SimDistributedQueue#getStats().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistributedQueueFactory.SimDistributedQueue#getStats().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Map<String, Object> getStats() {\n      if (stats == null) {\n        return Collections.emptyMap();\n      }\n      Map<String, Object> res = new HashMap<>();\n      res.put(\"queueLength\", stats.getQueueLength());\n      final Map<String, Object> statsMap = new HashMap<>();\n      res.put(\"stats\", statsMap);\n      stats.getStats().forEach((op, stat) -> {\n        final Map<String, Object> statMap = new HashMap<>();\n        statMap.put(\"success\", stat.success.get());\n        statMap.put(\"errors\", stat.errors.get());\n        final List<Map<String, Object>> failed = new ArrayList<>(stat.failureDetails.size());\n        statMap.put(\"failureDetails\", failed);\n        stat.failureDetails.forEach(failedOp -> {\n          Map<String, Object> fo = new HashMap<>();\n          fo.put(\"req\", failedOp.req);\n          fo.put(\"resp\", failedOp.resp);\n        });\n        statsMap.put(op, statMap);\n      });\n      return res;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistributedQueueFactory.SimDistributedQueue#getStats().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistributedQueueFactory.SimDistributedQueue#getStats().mjava","sourceNew":"    @Override\n    public Map<String, Object> getStats() {\n      if (stats == null) {\n        return Collections.emptyMap();\n      }\n      Map<String, Object> res = new HashMap<>();\n      res.put(\"queueLength\", stats.getQueueLength());\n      final Map<String, Object> statsMap = new HashMap<>();\n      res.put(\"stats\", statsMap);\n      stats.getStats().forEach((op, stat) -> {\n        final Map<String, Object> statMap = new HashMap<>();\n        statMap.put(\"success\", stat.success.get());\n        statMap.put(\"errors\", stat.errors.get());\n        final List<Map<String, Object>> failed = new ArrayList<>(stat.failureDetails.size());\n        statMap.put(\"failureDetails\", failed);\n        stat.failureDetails.forEach(failedOp -> {\n          Map<String, Object> fo = new HashMap<>();\n          fo.put(\"req\", failedOp.req);\n          fo.put(\"resp\", failedOp.resp);\n        });\n        statsMap.put(op, statMap);\n      });\n      return res;\n    }\n\n","sourceOld":"    @Override\n    public Map<String, Object> getStats() {\n      if (stats == null) {\n        return Collections.emptyMap();\n      }\n      Map<String, Object> res = new HashMap<>();\n      res.put(\"queueLength\", stats.getQueueLength());\n      final Map<String, Object> statsMap = new HashMap<>();\n      res.put(\"stats\", statsMap);\n      stats.getStats().forEach((op, stat) -> {\n        final Map<String, Object> statMap = new HashMap<>();\n        statMap.put(\"success\", stat.success.get());\n        statMap.put(\"errors\", stat.errors.get());\n        final List<Map<String, Object>> failed = new ArrayList<>(stat.failureDetails.size());\n        statMap.put(\"failureDetails\", failed);\n        stat.failureDetails.forEach(failedOp -> {\n          Map<String, Object> fo = new HashMap<>();\n          fo.put(\"req\", failedOp.req);\n          fo.put(\"resp\", failedOp.resp);\n        });\n        statsMap.put(op, statMap);\n      });\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}