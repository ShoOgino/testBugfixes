{"path":"src/java/org/apache/lucene/index/TermInfosWriter#add(int,char[],int,int,TermInfo).mjava","commits":[{"id":"7c1f822dcb4624ad203d96e63bcb23b498e1bd0a","date":1199647785,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosWriter#add(int,char[],int,int,TermInfo).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds a new <<fieldNumber, termText>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  void add(int fieldNumber, char[] termText, int termTextStart, int termTextLength, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, termText, termTextStart, termTextLength) < 0 || (isIndex && termTextLength == 0 && lastTermTextLength == 0);\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTermText, 0, lastTermTextLength, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, termText, termTextStart, termTextLength);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    if (lastTermText.length < termTextLength)\n      lastTermText = new char[(int) (termTextLength*1.25)];\n    System.arraycopy(termText, termTextStart, lastTermText, 0, termTextLength);\n    lastTermTextLength = termTextLength;\n    lastFieldNumber = fieldNumber;\n\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ac54d8ed1ace4c678c49dca5c830f7aed4d13e2a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac54d8ed1ace4c678c49dca5c830f7aed4d13e2a","date":1203092611,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosWriter#add(int,char[],int,int,TermInfo).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosWriter#add(int,char[],int,int,TermInfo).mjava","sourceNew":"  /** Adds a new <<fieldNumber, termText>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  void add(int fieldNumber, char[] termText, int termTextStart, int termTextLength, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, termText, termTextStart, termTextLength) < 0 ||\n      (isIndex && termTextLength == 0 && lastTermTextLength == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n      \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n      \" text=\" + new String(termText, termTextStart, termTextLength) + \" lastText=\" + new String(lastTermText, 0, lastTermTextLength);\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTermText, 0, lastTermTextLength, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, termText, termTextStart, termTextLength);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    if (lastTermText.length < termTextLength)\n      lastTermText = new char[(int) (termTextLength*1.25)];\n    System.arraycopy(termText, termTextStart, lastTermText, 0, termTextLength);\n    lastTermTextLength = termTextLength;\n    lastFieldNumber = fieldNumber;\n\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":"  /** Adds a new <<fieldNumber, termText>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  void add(int fieldNumber, char[] termText, int termTextStart, int termTextLength, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, termText, termTextStart, termTextLength) < 0 || (isIndex && termTextLength == 0 && lastTermTextLength == 0);\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTermText, 0, lastTermTextLength, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, termText, termTextStart, termTextLength);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    if (lastTermText.length < termTextLength)\n      lastTermText = new char[(int) (termTextLength*1.25)];\n    System.arraycopy(termText, termTextStart, lastTermText, 0, termTextLength);\n    lastTermTextLength = termTextLength;\n    lastFieldNumber = fieldNumber;\n\n    lastTi.set(ti);\n    size++;\n  }\n\n","bugFix":["7c1f822dcb4624ad203d96e63bcb23b498e1bd0a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosWriter#add(int,byte[],int,TermInfo).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosWriter#add(int,char[],int,int,TermInfo).mjava","sourceNew":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  void add(int fieldNumber, byte[] termBytes, int termBytesLength, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, termBytes, termBytesLength) < 0 ||\n      (isIndex && termBytesLength == 0 && lastTermBytesLength == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + new String(termBytes, 0, termBytesLength, \"UTF-8\") + \" lastText=\" + new String(lastTermBytes, 0, lastTermBytesLength, \"UTF-8\");\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTermBytes, lastTermBytesLength, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, termBytes, termBytesLength);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":"  /** Adds a new <<fieldNumber, termText>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  void add(int fieldNumber, char[] termText, int termTextStart, int termTextLength, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, termText, termTextStart, termTextLength) < 0 ||\n      (isIndex && termTextLength == 0 && lastTermTextLength == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n      \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n      \" text=\" + new String(termText, termTextStart, termTextLength) + \" lastText=\" + new String(lastTermText, 0, lastTermTextLength);\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTermText, 0, lastTermTextLength, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, termText, termTextStart, termTextLength);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    if (lastTermText.length < termTextLength)\n      lastTermText = new char[(int) (termTextLength*1.25)];\n    System.arraycopy(termText, termTextStart, lastTermText, 0, termTextLength);\n    lastTermTextLength = termTextLength;\n    lastFieldNumber = fieldNumber;\n\n    lastTi.set(ti);\n    size++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c1f822dcb4624ad203d96e63bcb23b498e1bd0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["ac54d8ed1ace4c678c49dca5c830f7aed4d13e2a"],"ac54d8ed1ace4c678c49dca5c830f7aed4d13e2a":["7c1f822dcb4624ad203d96e63bcb23b498e1bd0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"]},"commit2Childs":{"7c1f822dcb4624ad203d96e63bcb23b498e1bd0a":["ac54d8ed1ace4c678c49dca5c830f7aed4d13e2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c1f822dcb4624ad203d96e63bcb23b498e1bd0a"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac54d8ed1ace4c678c49dca5c830f7aed4d13e2a":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}