{"path":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","commits":[{"id":"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","date":1321493601,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","pathOld":"/dev/null","sourceNew":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<OldBackupDirectory>();\n    for(File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    Collections.sort(dirs);\n    int i=1;\n    for(OldBackupDirectory dir : dirs) {\n      if( i > numberToKeep-1 ) {\n        SnapPuller.delTree(dir.dir);\n      }\n    }   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6ef21795de4f5aa0eb96f49c098e91f6c84d8e3","date":1330444393,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","sourceNew":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<OldBackupDirectory>();\n    for(File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    Collections.sort(dirs);\n    int i=1;\n    for(OldBackupDirectory dir : dirs) {\n      if( i++ > numberToKeep-1 ) {\n        SnapPuller.delTree(dir.dir);\n      }\n    }   \n  }\n\n","sourceOld":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<OldBackupDirectory>();\n    for(File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    Collections.sort(dirs);\n    int i=1;\n    for(OldBackupDirectory dir : dirs) {\n      if( i > numberToKeep-1 ) {\n        SnapPuller.delTree(dir.dir);\n      }\n    }   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","sourceNew":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<OldBackupDirectory>();\n    for(File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    Collections.sort(dirs);\n    int i=1;\n    for(OldBackupDirectory dir : dirs) {\n      if( i++ > numberToKeep-1 ) {\n        SnapPuller.delTree(dir.dir);\n      }\n    }   \n  }\n\n","sourceOld":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<OldBackupDirectory>();\n    for(File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    Collections.sort(dirs);\n    int i=1;\n    for(OldBackupDirectory dir : dirs) {\n      if( i > numberToKeep-1 ) {\n        SnapPuller.delTree(dir.dir);\n      }\n    }   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","sourceNew":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<>();\n    for(File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    Collections.sort(dirs);\n    int i=1;\n    for(OldBackupDirectory dir : dirs) {\n      if( i++ > numberToKeep-1 ) {\n        SnapPuller.delTree(dir.dir);\n      }\n    }   \n  }\n\n","sourceOld":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<OldBackupDirectory>();\n    for(File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    Collections.sort(dirs);\n    int i=1;\n    for(OldBackupDirectory dir : dirs) {\n      if( i++ > numberToKeep-1 ) {\n        SnapPuller.delTree(dir.dir);\n      }\n    }   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c","date":1399457549,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","sourceNew":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<>();\n    for(File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    if(numberToKeep > dirs.size()) {\n      return;\n    }\n\n    Collections.sort(dirs);\n    int i=1;\n    for(OldBackupDirectory dir : dirs) {\n      if( i++ > numberToKeep-1 ) {\n        SnapPuller.delTree(dir.dir);\n      }\n    }   \n  }\n\n","sourceOld":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<>();\n    for(File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    Collections.sort(dirs);\n    int i=1;\n    for(OldBackupDirectory dir : dirs) {\n      if( i++ > numberToKeep-1 ) {\n        SnapPuller.delTree(dir.dir);\n      }\n    }   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d430d59b42be8455e21334e887dea80642775691","date":1423733834,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","sourceNew":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<>();\n    for (File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    if (numberToKeep > dirs.size() -1) {\n      return;\n    }\n\n    Collections.sort(dirs);\n    int i=1;\n    for (OldBackupDirectory dir : dirs) {\n      if (i++ > numberToKeep) {\n        SnapPuller.delTree(dir.dir);\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<>();\n    for(File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    if(numberToKeep > dirs.size()) {\n      return;\n    }\n\n    Collections.sort(dirs);\n    int i=1;\n    for(OldBackupDirectory dir : dirs) {\n      if( i++ > numberToKeep-1 ) {\n        SnapPuller.delTree(dir.dir);\n      }\n    }   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","sourceNew":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<>();\n    for (File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    if (numberToKeep > dirs.size() -1) {\n      return;\n    }\n\n    Collections.sort(dirs);\n    int i=1;\n    for (OldBackupDirectory dir : dirs) {\n      if (i++ > numberToKeep) {\n        IndexFetcher.delTree(dir.dir);\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<>();\n    for (File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    if (numberToKeep > dirs.size() -1) {\n      return;\n    }\n\n    Collections.sort(dirs);\n    int i=1;\n    for (OldBackupDirectory dir : dirs) {\n      if (i++ > numberToKeep) {\n        SnapPuller.delTree(dir.dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","sourceNew":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<>();\n    for (File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    if (numberToKeep > dirs.size() -1) {\n      return;\n    }\n\n    Collections.sort(dirs);\n    int i=1;\n    for (OldBackupDirectory dir : dirs) {\n      if (i++ > numberToKeep) {\n        IndexFetcher.delTree(dir.dir);\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<>();\n    for (File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    if (numberToKeep > dirs.size() -1) {\n      return;\n    }\n\n    Collections.sort(dirs);\n    int i=1;\n    for (OldBackupDirectory dir : dirs) {\n      if (i++ > numberToKeep) {\n        SnapPuller.delTree(dir.dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","sourceNew":"  private void deleteOldBackups(int numberToKeep) throws IOException {\n    String[] paths = backupRepo.listAll(baseSnapDirPath);\n    List<OldBackupDirectory> dirs = new ArrayList<>();\n    for (String f : paths) {\n      if (backupRepo.getPathType(baseSnapDirPath.resolve(f)) == PathType.DIRECTORY) {\n        OldBackupDirectory obd = new OldBackupDirectory(baseSnapDirPath, f);\n        if (obd.getTimestamp().isPresent()) {\n          dirs.add(obd);\n        }\n      }\n    }\n    if (numberToKeep > dirs.size() -1) {\n      return;\n    }\n    Collections.sort(dirs);\n    int i=1;\n    for (OldBackupDirectory dir : dirs) {\n      if (i++ > numberToKeep) {\n        backupRepo.deleteDirectory(dir.getPath());\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<>();\n    for (File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    if (numberToKeep > dirs.size() -1) {\n      return;\n    }\n\n    Collections.sort(dirs);\n    int i=1;\n    for (OldBackupDirectory dir : dirs) {\n      if (i++ > numberToKeep) {\n        IndexFetcher.delTree(dir.dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#deleteOldBackups(int).mjava","sourceNew":"  private void deleteOldBackups(int numberToKeep) throws IOException {\n    String[] paths = backupRepo.listAll(baseSnapDirPath);\n    List<OldBackupDirectory> dirs = new ArrayList<>();\n    for (String f : paths) {\n      if (backupRepo.getPathType(baseSnapDirPath.resolve(f)) == PathType.DIRECTORY) {\n        OldBackupDirectory obd = new OldBackupDirectory(baseSnapDirPath, f);\n        if (obd.getTimestamp().isPresent()) {\n          dirs.add(obd);\n        }\n      }\n    }\n    if (numberToKeep > dirs.size() -1) {\n      return;\n    }\n    Collections.sort(dirs);\n    int i=1;\n    for (OldBackupDirectory dir : dirs) {\n      if (i++ > numberToKeep) {\n        backupRepo.deleteDirectory(dir.getPath());\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteOldBackups(int numberToKeep) {\n    File[] files = new File(snapDir).listFiles();\n    List<OldBackupDirectory> dirs = new ArrayList<>();\n    for (File f : files) {\n      OldBackupDirectory obd = new OldBackupDirectory(f);\n      if(obd.dir != null) {\n        dirs.add(obd);\n      }\n    }\n    if (numberToKeep > dirs.size() -1) {\n      return;\n    }\n\n    Collections.sort(dirs);\n    int i=1;\n    for (OldBackupDirectory dir : dirs) {\n      if (i++ > numberToKeep) {\n        IndexFetcher.delTree(dir.dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b6ef21795de4f5aa0eb96f49c098e91f6c84d8e3"],"b6ef21795de4f5aa0eb96f49c098e91f6c84d8e3":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d430d59b42be8455e21334e887dea80642775691","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["d430d59b42be8455e21334e887dea80642775691"],"d430d59b42be8455e21334e887dea80642775691":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","b6ef21795de4f5aa0eb96f49c098e91f6c84d8e3"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["20f6b7cff3771384f27af0f059795d7e64aff6b9","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c"],"b6ef21795de4f5aa0eb96f49c098e91f6c84d8e3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d430d59b42be8455e21334e887dea80642775691":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["b6ef21795de4f5aa0eb96f49c098e91f6c84d8e3","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c":["d430d59b42be8455e21334e887dea80642775691"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}