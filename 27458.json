{"path":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#refreshPackageConf().mjava","commits":[{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#refreshPackageConf().mjava","pathOld":"/dev/null","sourceNew":"  public void refreshPackageConf() {\n    log.info(\"{} updated to version {}\", ZkStateReader.SOLR_PKGS_PATH, packageAPI.pkgs.znodeVersion);\n\n    List<Package> updated = new ArrayList<>();\n    Map<String, List<PackageAPI.PkgVersion>> modified = getModified(myCopy, packageAPI.pkgs);\n\n    for (Map.Entry<String, List<PackageAPI.PkgVersion>> e : modified.entrySet()) {\n      if (e.getValue() != null) {\n        Package p = packageClassLoaders.get(e.getKey());\n        if (e.getValue() != null && p == null) {\n          packageClassLoaders.put(e.getKey(), p = new Package(e.getKey()));\n        }\n        p.updateVersions(e.getValue());\n        updated.add(p);\n      } else {\n        Package p = packageClassLoaders.remove(e.getKey());\n        if (p != null) {\n          //other classes are holding to a reference to this objecec\n          // they should know that this is removed\n          p.markDeleted();\n        }\n      }\n    }\n    for (SolrCore core : coreContainer.getCores()) {\n      core.getPackageListeners().packagesUpdated(updated);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ad6d9d5ecce39e4f05f22760789982a48da89fa","date":1572289972,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#refreshPackageConf().mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#refreshPackageConf().mjava","sourceNew":"  public void refreshPackageConf() {\n    log.info(\"{} updated to version {}\", ZkStateReader.SOLR_PKGS_PATH, packageAPI.pkgs.znodeVersion);\n\n    List<Package> updated = new ArrayList<>();\n    Map<String, List<PackageAPI.PkgVersion>> modified = getModified(myCopy, packageAPI.pkgs);\n\n    for (Map.Entry<String, List<PackageAPI.PkgVersion>> e : modified.entrySet()) {\n      if (e.getValue() != null) {\n        Package p = packageClassLoaders.get(e.getKey());\n        if (e.getValue() != null && p == null) {\n          packageClassLoaders.put(e.getKey(), p = new Package(e.getKey()));\n        }\n        p.updateVersions(e.getValue());\n        updated.add(p);\n      } else {\n        Package p = packageClassLoaders.remove(e.getKey());\n        if (p != null) {\n          //other classes are holding to a reference to this objecec\n          // they should know that this is removed\n          p.markDeleted();\n          IOUtils.closeQuietly((Closeable) p);\n        }\n      }\n    }\n    for (SolrCore core : coreContainer.getCores()) {\n      core.getPackageListeners().packagesUpdated(updated);\n    }\n  }\n\n","sourceOld":"  public void refreshPackageConf() {\n    log.info(\"{} updated to version {}\", ZkStateReader.SOLR_PKGS_PATH, packageAPI.pkgs.znodeVersion);\n\n    List<Package> updated = new ArrayList<>();\n    Map<String, List<PackageAPI.PkgVersion>> modified = getModified(myCopy, packageAPI.pkgs);\n\n    for (Map.Entry<String, List<PackageAPI.PkgVersion>> e : modified.entrySet()) {\n      if (e.getValue() != null) {\n        Package p = packageClassLoaders.get(e.getKey());\n        if (e.getValue() != null && p == null) {\n          packageClassLoaders.put(e.getKey(), p = new Package(e.getKey()));\n        }\n        p.updateVersions(e.getValue());\n        updated.add(p);\n      } else {\n        Package p = packageClassLoaders.remove(e.getKey());\n        if (p != null) {\n          //other classes are holding to a reference to this objecec\n          // they should know that this is removed\n          p.markDeleted();\n        }\n      }\n    }\n    for (SolrCore core : coreContainer.getCores()) {\n      core.getPackageListeners().packagesUpdated(updated);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18e0d88ac18697f82cf4faddd993f4a76ff22722","date":1572586400,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#refreshPackageConf().mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#refreshPackageConf().mjava","sourceNew":"  public void refreshPackageConf() {\n    log.info(\"{} updated to version {}\", ZkStateReader.SOLR_PKGS_PATH, packageAPI.pkgs.znodeVersion);\n\n    List<Package> updated = new ArrayList<>();\n    Map<String, List<PackageAPI.PkgVersion>> modified = getModified(myCopy, packageAPI.pkgs);\n\n    for (Map.Entry<String, List<PackageAPI.PkgVersion>> e : modified.entrySet()) {\n      if (e.getValue() != null) {\n        Package p = packageClassLoaders.get(e.getKey());\n        if (e.getValue() != null && p == null) {\n          packageClassLoaders.put(e.getKey(), p = new Package(e.getKey()));\n        }\n        p.updateVersions(e.getValue());\n        updated.add(p);\n      } else {\n        Package p = packageClassLoaders.remove(e.getKey());\n        if (p != null) {\n          //other classes are holding to a reference to this objecec\n          // they should know that this is removed\n          p.markDeleted();\n          closeWhileHandlingException(p);\n        }\n      }\n    }\n    for (SolrCore core : coreContainer.getCores()) {\n      core.getPackageListeners().packagesUpdated(updated);\n    }\n  }\n\n","sourceOld":"  public void refreshPackageConf() {\n    log.info(\"{} updated to version {}\", ZkStateReader.SOLR_PKGS_PATH, packageAPI.pkgs.znodeVersion);\n\n    List<Package> updated = new ArrayList<>();\n    Map<String, List<PackageAPI.PkgVersion>> modified = getModified(myCopy, packageAPI.pkgs);\n\n    for (Map.Entry<String, List<PackageAPI.PkgVersion>> e : modified.entrySet()) {\n      if (e.getValue() != null) {\n        Package p = packageClassLoaders.get(e.getKey());\n        if (e.getValue() != null && p == null) {\n          packageClassLoaders.put(e.getKey(), p = new Package(e.getKey()));\n        }\n        p.updateVersions(e.getValue());\n        updated.add(p);\n      } else {\n        Package p = packageClassLoaders.remove(e.getKey());\n        if (p != null) {\n          //other classes are holding to a reference to this objecec\n          // they should know that this is removed\n          p.markDeleted();\n          IOUtils.closeQuietly((Closeable) p);\n        }\n      }\n    }\n    for (SolrCore core : coreContainer.getCores()) {\n      core.getPackageListeners().packagesUpdated(updated);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a6448412ce640b28861f4c00f899484a9adac1","date":1573627357,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#refreshPackageConf().mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#refreshPackageConf().mjava","sourceNew":"  public void refreshPackageConf() {\n    log.info(\"{} updated to version {}\", ZkStateReader.SOLR_PKGS_PATH, packageAPI.pkgs.znodeVersion);\n\n    List<Package> updated = new ArrayList<>();\n    Map<String, List<PackageAPI.PkgVersion>> modified = getModified(myCopy, packageAPI.pkgs);\n\n    for (Map.Entry<String, List<PackageAPI.PkgVersion>> e : modified.entrySet()) {\n      if (e.getValue() != null) {\n        Package p = packageClassLoaders.get(e.getKey());\n        if (e.getValue() != null && p == null) {\n          packageClassLoaders.put(e.getKey(), p = new Package(e.getKey()));\n        }\n        p.updateVersions(e.getValue());\n        updated.add(p);\n      } else {\n        Package p = packageClassLoaders.remove(e.getKey());\n        if (p != null) {\n          //other classes are holding to a reference to this objecec\n          // they should know that this is removed\n          p.markDeleted();\n          closeWhileHandlingException(p);\n        }\n      }\n    }\n    for (SolrCore core : coreContainer.getCores()) {\n      core.getPackageListeners().packagesUpdated(updated);\n    }\n    myCopy = packageAPI.pkgs;\n  }\n\n","sourceOld":"  public void refreshPackageConf() {\n    log.info(\"{} updated to version {}\", ZkStateReader.SOLR_PKGS_PATH, packageAPI.pkgs.znodeVersion);\n\n    List<Package> updated = new ArrayList<>();\n    Map<String, List<PackageAPI.PkgVersion>> modified = getModified(myCopy, packageAPI.pkgs);\n\n    for (Map.Entry<String, List<PackageAPI.PkgVersion>> e : modified.entrySet()) {\n      if (e.getValue() != null) {\n        Package p = packageClassLoaders.get(e.getKey());\n        if (e.getValue() != null && p == null) {\n          packageClassLoaders.put(e.getKey(), p = new Package(e.getKey()));\n        }\n        p.updateVersions(e.getValue());\n        updated.add(p);\n      } else {\n        Package p = packageClassLoaders.remove(e.getKey());\n        if (p != null) {\n          //other classes are holding to a reference to this objecec\n          // they should know that this is removed\n          p.markDeleted();\n          closeWhileHandlingException(p);\n        }\n      }\n    }\n    for (SolrCore core : coreContainer.getCores()) {\n      core.getPackageListeners().packagesUpdated(updated);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34ccc070314404a909b9af301ea9e64b211f0646","date":1573631914,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#refreshPackageConf().mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#refreshPackageConf().mjava","sourceNew":"  public void refreshPackageConf() {\n    log.info(\"{} updated to version {}\", ZkStateReader.SOLR_PKGS_PATH, packageAPI.pkgs.znodeVersion);\n\n    List<Package> updated = new ArrayList<>();\n    Map<String, List<PackageAPI.PkgVersion>> modified = getModified(myCopy, packageAPI.pkgs);\n\n    for (Map.Entry<String, List<PackageAPI.PkgVersion>> e : modified.entrySet()) {\n      if (e.getValue() != null) {\n        Package p = packageClassLoaders.get(e.getKey());\n        if (e.getValue() != null && p == null) {\n          packageClassLoaders.put(e.getKey(), p = new Package(e.getKey()));\n        }\n        p.updateVersions(e.getValue());\n        updated.add(p);\n      } else {\n        Package p = packageClassLoaders.remove(e.getKey());\n        if (p != null) {\n          //other classes are holding to a reference to this object\n          // they should know that this is removed\n          p.markDeleted();\n          closeWhileHandlingException(p);\n        }\n      }\n    }\n    for (SolrCore core : coreContainer.getCores()) {\n      core.getPackageListeners().packagesUpdated(updated);\n    }\n    myCopy = packageAPI.pkgs;\n  }\n\n","sourceOld":"  public void refreshPackageConf() {\n    log.info(\"{} updated to version {}\", ZkStateReader.SOLR_PKGS_PATH, packageAPI.pkgs.znodeVersion);\n\n    List<Package> updated = new ArrayList<>();\n    Map<String, List<PackageAPI.PkgVersion>> modified = getModified(myCopy, packageAPI.pkgs);\n\n    for (Map.Entry<String, List<PackageAPI.PkgVersion>> e : modified.entrySet()) {\n      if (e.getValue() != null) {\n        Package p = packageClassLoaders.get(e.getKey());\n        if (e.getValue() != null && p == null) {\n          packageClassLoaders.put(e.getKey(), p = new Package(e.getKey()));\n        }\n        p.updateVersions(e.getValue());\n        updated.add(p);\n      } else {\n        Package p = packageClassLoaders.remove(e.getKey());\n        if (p != null) {\n          //other classes are holding to a reference to this objecec\n          // they should know that this is removed\n          p.markDeleted();\n          closeWhileHandlingException(p);\n        }\n      }\n    }\n    for (SolrCore core : coreContainer.getCores()) {\n      core.getPackageListeners().packagesUpdated(updated);\n    }\n    myCopy = packageAPI.pkgs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"954ae83b7dfacaa33d48ea056448ae11f7745a93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"18e0d88ac18697f82cf4faddd993f4a76ff22722":["7ad6d9d5ecce39e4f05f22760789982a48da89fa"],"7ad6d9d5ecce39e4f05f22760789982a48da89fa":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"34ccc070314404a909b9af301ea9e64b211f0646":["d1a6448412ce640b28861f4c00f899484a9adac1"],"d1a6448412ce640b28861f4c00f899484a9adac1":["18e0d88ac18697f82cf4faddd993f4a76ff22722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34ccc070314404a909b9af301ea9e64b211f0646"]},"commit2Childs":{"954ae83b7dfacaa33d48ea056448ae11f7745a93":["7ad6d9d5ecce39e4f05f22760789982a48da89fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"18e0d88ac18697f82cf4faddd993f4a76ff22722":["d1a6448412ce640b28861f4c00f899484a9adac1"],"7ad6d9d5ecce39e4f05f22760789982a48da89fa":["18e0d88ac18697f82cf4faddd993f4a76ff22722"],"34ccc070314404a909b9af301ea9e64b211f0646":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1a6448412ce640b28861f4c00f899484a9adac1":["34ccc070314404a909b9af301ea9e64b211f0646"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}