{"path":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(ReaderContext,boolean,boolean).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(ReaderContext,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(ReaderContext context, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue());\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.quickSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue());\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.quickSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n                                                    reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n                                 reader.norms(field));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(ReaderContext,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue());\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.quickSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(ReaderContext context, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue());\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.quickSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"]},"commit2Childs":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}