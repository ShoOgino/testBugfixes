{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(LightAutomaton,LightAutomaton).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(LightAutomaton,LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. Both automata must be determinized.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(LightAutomaton a1, LightAutomaton a2) {\n    assert isDeterministic(a1);\n    assert isDeterministic(a2);\n    // TODO: cutover to iterators instead\n    LightAutomaton.Transition[][] transitions1 = a1.getSortedTransitions();\n    LightAutomaton.Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<LightStatePair> worklist = new LinkedList<>();\n    HashSet<LightStatePair> visited = new HashSet<>();\n    LightStatePair p = new LightStatePair(0, 0);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (a1.isAccept(p.s1) && a2.isAccept(p.s2) == false) {\n        return false;\n      }\n      LightAutomaton.Transition[] t1 = transitions1[p.s1];\n      LightAutomaton.Transition[] t2 = transitions2[p.s2];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min) {\n          b2++;\n        }\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) {\n            min1 = t2[n2].max + 1;\n          } else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          LightStatePair q = new LightStatePair(t1[n1].dest, t2[n2].dest);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(LightAutomaton,LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(LightAutomaton,LightAutomaton).mjava","sourceNew":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. Both automata must be determinized.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(LightAutomaton a1, LightAutomaton a2) {\n    assert isDeterministic(a1);\n    assert isDeterministic(a2);\n    // TODO: cutover to iterators instead\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<LightStatePair> worklist = new LinkedList<>();\n    HashSet<LightStatePair> visited = new HashSet<>();\n    LightStatePair p = new LightStatePair(0, 0);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (a1.isAccept(p.s1) && a2.isAccept(p.s2) == false) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1];\n      Transition[] t2 = transitions2[p.s2];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min) {\n          b2++;\n        }\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) {\n            min1 = t2[n2].max + 1;\n          } else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          LightStatePair q = new LightStatePair(t1[n1].dest, t2[n2].dest);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. Both automata must be determinized.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(LightAutomaton a1, LightAutomaton a2) {\n    assert isDeterministic(a1);\n    assert isDeterministic(a2);\n    // TODO: cutover to iterators instead\n    LightAutomaton.Transition[][] transitions1 = a1.getSortedTransitions();\n    LightAutomaton.Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<LightStatePair> worklist = new LinkedList<>();\n    HashSet<LightStatePair> visited = new HashSet<>();\n    LightStatePair p = new LightStatePair(0, 0);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (a1.isAccept(p.s1) && a2.isAccept(p.s2) == false) {\n        return false;\n      }\n      LightAutomaton.Transition[] t1 = transitions1[p.s1];\n      LightAutomaton.Transition[] t2 = transitions2[p.s2];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min) {\n          b2++;\n        }\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) {\n            min1 = t2[n2].max + 1;\n          } else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          LightStatePair q = new LightStatePair(t1[n1].dest, t2[n2].dest);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(LightAutomaton,LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(LightAutomaton,LightAutomaton).mjava","sourceNew":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. Both automata must be determinized.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(LightAutomaton a1, LightAutomaton a2) {\n    if (a1.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"a1 must be deterministic\");\n    }\n    if (a2.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"a2 must be deterministic\");\n    }\n    // TODO: cutover to iterators instead\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<LightStatePair> worklist = new LinkedList<>();\n    HashSet<LightStatePair> visited = new HashSet<>();\n    LightStatePair p = new LightStatePair(0, 0);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (a1.isAccept(p.s1) && a2.isAccept(p.s2) == false) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1];\n      Transition[] t2 = transitions2[p.s2];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min) {\n          b2++;\n        }\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) {\n            min1 = t2[n2].max + 1;\n          } else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          LightStatePair q = new LightStatePair(t1[n1].dest, t2[n2].dest);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. Both automata must be determinized.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(LightAutomaton a1, LightAutomaton a2) {\n    assert isDeterministic(a1);\n    assert isDeterministic(a2);\n    // TODO: cutover to iterators instead\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<LightStatePair> worklist = new LinkedList<>();\n    HashSet<LightStatePair> visited = new HashSet<>();\n    LightStatePair p = new LightStatePair(0, 0);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (a1.isAccept(p.s1) && a2.isAccept(p.s2) == false) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1];\n      Transition[] t2 = transitions2[p.s2];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min) {\n          b2++;\n        }\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) {\n            min1 = t2[n2].max + 1;\n          } else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          LightStatePair q = new LightStatePair(t1[n1].dest, t2[n2].dest);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(LightAutomaton,LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(LightAutomaton,LightAutomaton).mjava","sourceNew":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. Both automata must be determinized and must have no dead\n   * states.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(LightAutomaton a1, LightAutomaton a2) {\n    if (a1.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"a1 must be deterministic\");\n    }\n    if (a2.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"a2 must be deterministic\");\n    }\n    assert hasDeadStatesFromInitial(a1) == false;\n    assert hasDeadStatesFromInitial(a2) == false;\n    if (a1.getNumStates() == 0) {\n      // Empty language is alwyas a subset of any other language\n      return true;\n    } else if (a2.getNumStates() == 0) {\n      return isEmpty(a1);\n    }\n\n    // TODO: cutover to iterators instead\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<LightStatePair> worklist = new LinkedList<>();\n    HashSet<LightStatePair> visited = new HashSet<>();\n    LightStatePair p = new LightStatePair(0, 0);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (a1.isAccept(p.s1) && a2.isAccept(p.s2) == false) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1];\n      Transition[] t2 = transitions2[p.s2];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min) {\n          b2++;\n        }\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) {\n            min1 = t2[n2].max + 1;\n          } else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          LightStatePair q = new LightStatePair(t1[n1].dest, t2[n2].dest);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. Both automata must be determinized.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(LightAutomaton a1, LightAutomaton a2) {\n    if (a1.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"a1 must be deterministic\");\n    }\n    if (a2.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"a2 must be deterministic\");\n    }\n    // TODO: cutover to iterators instead\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<LightStatePair> worklist = new LinkedList<>();\n    HashSet<LightStatePair> visited = new HashSet<>();\n    LightStatePair p = new LightStatePair(0, 0);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (a1.isAccept(p.s1) && a2.isAccept(p.s2) == false) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1];\n      Transition[] t2 = transitions2[p.s2];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min) {\n          b2++;\n        }\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) {\n            min1 = t2[n2].max + 1;\n          } else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          LightStatePair q = new LightStatePair(t1[n1].dest, t2[n2].dest);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#subsetOf(Automaton,Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(LightAutomaton,LightAutomaton).mjava","sourceNew":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. Both automata must be determinized and must have no dead\n   * states.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(Automaton a1, Automaton a2) {\n    if (a1.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"a1 must be deterministic\");\n    }\n    if (a2.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"a2 must be deterministic\");\n    }\n    assert hasDeadStatesFromInitial(a1) == false;\n    assert hasDeadStatesFromInitial(a2) == false;\n    if (a1.getNumStates() == 0) {\n      // Empty language is alwyas a subset of any other language\n      return true;\n    } else if (a2.getNumStates() == 0) {\n      return isEmpty(a1);\n    }\n\n    // TODO: cutover to iterators instead\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<StatePair> worklist = new LinkedList<>();\n    HashSet<StatePair> visited = new HashSet<>();\n    StatePair p = new StatePair(0, 0);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (a1.isAccept(p.s1) && a2.isAccept(p.s2) == false) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1];\n      Transition[] t2 = transitions2[p.s2];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min) {\n          b2++;\n        }\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) {\n            min1 = t2[n2].max + 1;\n          } else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          StatePair q = new StatePair(t1[n1].dest, t2[n2].dest);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. Both automata must be determinized and must have no dead\n   * states.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(LightAutomaton a1, LightAutomaton a2) {\n    if (a1.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"a1 must be deterministic\");\n    }\n    if (a2.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"a2 must be deterministic\");\n    }\n    assert hasDeadStatesFromInitial(a1) == false;\n    assert hasDeadStatesFromInitial(a2) == false;\n    if (a1.getNumStates() == 0) {\n      // Empty language is alwyas a subset of any other language\n      return true;\n    } else if (a2.getNumStates() == 0) {\n      return isEmpty(a1);\n    }\n\n    // TODO: cutover to iterators instead\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<LightStatePair> worklist = new LinkedList<>();\n    HashSet<LightStatePair> visited = new HashSet<>();\n    LightStatePair p = new LightStatePair(0, 0);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (a1.isAccept(p.s1) && a2.isAccept(p.s2) == false) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1];\n      Transition[] t2 = transitions2[p.s2];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min) {\n          b2++;\n        }\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) {\n            min1 = t2[n2].max + 1;\n          } else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          LightStatePair q = new LightStatePair(t1[n1].dest, t2[n2].dest);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}