{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#getDefaultConfigDirPath().mjava","commits":[{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getDefaultConfigDirPath().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the absolute filesystem path of the _default configset to bootstrap from.\n   * First tries the sysprop \"solr.default.confdir\". If not found, tries to find\n   * the _default dir relative to the sysprop \"solr.install.dir\".\n   * If that fails as well, tries to get the _default from the\n   * classpath. Returns null if not found anywhere.\n   */\n  private static String getDefaultConfigDirPath() {\n    String configDirPath = null;\n    String serverSubPath = \"solr\" + File.separator +\n        \"configsets\" + File.separator + \"_default\" +\n        File.separator + \"conf\";\n    String subPath = File.separator + \"server\" + File.separator + serverSubPath;\n    if (System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE) != null && new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).getAbsolutePath();\n    } else if (System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) != null &&\n        new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).getAbsolutePath();\n    } else { // find \"_default\" in the classpath. This one is used for tests\n      URL classpathUrl = Thread.currentThread().getContextClassLoader().getResource(serverSubPath);\n      try {\n        if (classpathUrl != null && new File(classpathUrl.toURI()).exists()) {\n          configDirPath = new File(classpathUrl.toURI()).getAbsolutePath();\n        }\n      } catch (URISyntaxException ex) {}\n    }\n    return configDirPath;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getDefaultConfigDirPath().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the absolute filesystem path of the _default configset to bootstrap from.\n   * First tries the sysprop \"solr.default.confdir\". If not found, tries to find\n   * the _default dir relative to the sysprop \"solr.install.dir\".\n   * If that fails as well, tries to get the _default from the\n   * classpath. Returns null if not found anywhere.\n   */\n  private static String getDefaultConfigDirPath() {\n    String configDirPath = null;\n    String serverSubPath = \"solr\" + File.separator +\n        \"configsets\" + File.separator + \"_default\" +\n        File.separator + \"conf\";\n    String subPath = File.separator + \"server\" + File.separator + serverSubPath;\n    if (System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE) != null && new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).getAbsolutePath();\n    } else if (System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) != null &&\n        new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).getAbsolutePath();\n    } else { // find \"_default\" in the classpath. This one is used for tests\n      URL classpathUrl = Thread.currentThread().getContextClassLoader().getResource(serverSubPath);\n      try {\n        if (classpathUrl != null && new File(classpathUrl.toURI()).exists()) {\n          configDirPath = new File(classpathUrl.toURI()).getAbsolutePath();\n        }\n      } catch (URISyntaxException ex) {}\n    }\n    return configDirPath;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9511f5bdd69ab6dff148948a9df39ba5301e842a","date":1498563061,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getDefaultConfigDirPath().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getDefaultConfigDirPath().mjava","sourceNew":"  /**\n   * Gets the absolute filesystem path of the _default configset to bootstrap from.\n   * First tries the sysprop \"solr.default.confdir\". If not found, tries to find\n   * the _default dir relative to the sysprop \"solr.install.dir\".\n   * If that fails as well (usually for unit tests), tries to get the _default from the\n   * classpath. Returns null if not found anywhere.\n   */\n  private static String getDefaultConfigDirPath() {\n    String configDirPath = null;\n    String serverSubPath = \"solr\" + File.separator +\n        \"configsets\" + File.separator + \"_default\" +\n        File.separator + \"conf\";\n    String subPath = File.separator + \"server\" + File.separator + serverSubPath;\n    if (System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE) != null && new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).getAbsolutePath();\n    } else if (System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) != null &&\n        new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).getAbsolutePath();\n    } else { // find \"_default\" in the classpath. This one is used for tests\n      configDirPath = getDefaultConfigDirFromClasspath(serverSubPath);\n    }\n    return configDirPath;\n  }\n\n","sourceOld":"  /**\n   * Gets the absolute filesystem path of the _default configset to bootstrap from.\n   * First tries the sysprop \"solr.default.confdir\". If not found, tries to find\n   * the _default dir relative to the sysprop \"solr.install.dir\".\n   * If that fails as well, tries to get the _default from the\n   * classpath. Returns null if not found anywhere.\n   */\n  private static String getDefaultConfigDirPath() {\n    String configDirPath = null;\n    String serverSubPath = \"solr\" + File.separator +\n        \"configsets\" + File.separator + \"_default\" +\n        File.separator + \"conf\";\n    String subPath = File.separator + \"server\" + File.separator + serverSubPath;\n    if (System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE) != null && new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).getAbsolutePath();\n    } else if (System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) != null &&\n        new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).getAbsolutePath();\n    } else { // find \"_default\" in the classpath. This one is used for tests\n      URL classpathUrl = Thread.currentThread().getContextClassLoader().getResource(serverSubPath);\n      try {\n        if (classpathUrl != null && new File(classpathUrl.toURI()).exists()) {\n          configDirPath = new File(classpathUrl.toURI()).getAbsolutePath();\n        }\n      } catch (URISyntaxException ex) {}\n    }\n    return configDirPath;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getDefaultConfigDirPath().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getDefaultConfigDirPath().mjava","sourceNew":"  /**\n   * Gets the absolute filesystem path of the _default configset to bootstrap from.\n   * First tries the sysprop \"solr.default.confdir\". If not found, tries to find\n   * the _default dir relative to the sysprop \"solr.install.dir\".\n   * If that fails as well (usually for unit tests), tries to get the _default from the\n   * classpath. Returns null if not found anywhere.\n   */\n  private static String getDefaultConfigDirPath() {\n    String configDirPath = null;\n    String serverSubPath = \"solr\" + File.separator +\n        \"configsets\" + File.separator + \"_default\" +\n        File.separator + \"conf\";\n    String subPath = File.separator + \"server\" + File.separator + serverSubPath;\n    if (System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE) != null && new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).getAbsolutePath();\n    } else if (System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) != null &&\n        new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).getAbsolutePath();\n    } else { // find \"_default\" in the classpath. This one is used for tests\n      configDirPath = getDefaultConfigDirFromClasspath(serverSubPath);\n    }\n    return configDirPath;\n  }\n\n","sourceOld":"  /**\n   * Gets the absolute filesystem path of the _default configset to bootstrap from.\n   * First tries the sysprop \"solr.default.confdir\". If not found, tries to find\n   * the _default dir relative to the sysprop \"solr.install.dir\".\n   * If that fails as well, tries to get the _default from the\n   * classpath. Returns null if not found anywhere.\n   */\n  private static String getDefaultConfigDirPath() {\n    String configDirPath = null;\n    String serverSubPath = \"solr\" + File.separator +\n        \"configsets\" + File.separator + \"_default\" +\n        File.separator + \"conf\";\n    String subPath = File.separator + \"server\" + File.separator + serverSubPath;\n    if (System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE) != null && new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).getAbsolutePath();\n    } else if (System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) != null &&\n        new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).getAbsolutePath();\n    } else { // find \"_default\" in the classpath. This one is used for tests\n      URL classpathUrl = Thread.currentThread().getContextClassLoader().getResource(serverSubPath);\n      try {\n        if (classpathUrl != null && new File(classpathUrl.toURI()).exists()) {\n          configDirPath = new File(classpathUrl.toURI()).getAbsolutePath();\n        }\n      } catch (URISyntaxException ex) {}\n    }\n    return configDirPath;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getDefaultConfigDirPath().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the absolute filesystem path of the _default configset to bootstrap from.\n   * First tries the sysprop \"solr.default.confdir\". If not found, tries to find\n   * the _default dir relative to the sysprop \"solr.install.dir\".\n   * If that fails as well (usually for unit tests), tries to get the _default from the\n   * classpath. Returns null if not found anywhere.\n   */\n  private static String getDefaultConfigDirPath() {\n    String configDirPath = null;\n    String serverSubPath = \"solr\" + File.separator +\n        \"configsets\" + File.separator + \"_default\" +\n        File.separator + \"conf\";\n    String subPath = File.separator + \"server\" + File.separator + serverSubPath;\n    if (System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE) != null && new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).getAbsolutePath();\n    } else if (System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) != null &&\n        new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).getAbsolutePath();\n    } else { // find \"_default\" in the classpath. This one is used for tests\n      configDirPath = getDefaultConfigDirFromClasspath(serverSubPath);\n    }\n    return configDirPath;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbb2d9cb96e731a93749beccbf9d0a5e4849cae2","date":1581705413,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getDefaultConfigDirPath().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getDefaultConfigDirPath().mjava","sourceNew":"  /**\n   * Gets the absolute filesystem path of the _default configset to bootstrap from.\n   * First tries the sysprop \"solr.default.confdir\". If not found, tries to find\n   * the _default dir relative to the sysprop \"solr.install.dir\".\n   * Returns null if not found anywhere.\n   *\n   * @lucene.internal\n   * @see SolrDispatchFilter#SOLR_DEFAULT_CONFDIR_ATTRIBUTE\n   */\n  public static String getDefaultConfigDirPath() {\n    String configDirPath = null;\n    String serverSubPath = \"solr\" + File.separator +\n        \"configsets\" + File.separator + \"_default\" +\n        File.separator + \"conf\";\n    String subPath = File.separator + \"server\" + File.separator + serverSubPath;\n    if (System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE) != null && new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).getAbsolutePath();\n    } else if (System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) != null &&\n        new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).getAbsolutePath();\n    }\n    return configDirPath;\n  }\n\n","sourceOld":"  /**\n   * Gets the absolute filesystem path of the _default configset to bootstrap from.\n   * First tries the sysprop \"solr.default.confdir\". If not found, tries to find\n   * the _default dir relative to the sysprop \"solr.install.dir\".\n   * If that fails as well (usually for unit tests), tries to get the _default from the\n   * classpath. Returns null if not found anywhere.\n   */\n  private static String getDefaultConfigDirPath() {\n    String configDirPath = null;\n    String serverSubPath = \"solr\" + File.separator +\n        \"configsets\" + File.separator + \"_default\" +\n        File.separator + \"conf\";\n    String subPath = File.separator + \"server\" + File.separator + serverSubPath;\n    if (System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE) != null && new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE)).getAbsolutePath();\n    } else if (System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) != null &&\n        new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).exists()) {\n      configDirPath = new File(System.getProperty(SolrDispatchFilter.SOLR_INSTALL_DIR_ATTRIBUTE) + subPath).getAbsolutePath();\n    } else { // find \"_default\" in the classpath. This one is used for tests\n      configDirPath = getDefaultConfigDirFromClasspath(serverSubPath);\n    }\n    return configDirPath;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9511f5bdd69ab6dff148948a9df39ba5301e842a":["197bbedf08450ade98a11f4a0001448059666bec"],"197bbedf08450ade98a11f4a0001448059666bec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cbb2d9cb96e731a93749beccbf9d0a5e4849cae2":["28288370235ed02234a64753cdbf0c6ec096304a"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","197bbedf08450ade98a11f4a0001448059666bec"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9511f5bdd69ab6dff148948a9df39ba5301e842a"],"98f11c416d30e556e0004a9a84960702d12d35b1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","9511f5bdd69ab6dff148948a9df39ba5301e842a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cbb2d9cb96e731a93749beccbf9d0a5e4849cae2"]},"commit2Childs":{"9511f5bdd69ab6dff148948a9df39ba5301e842a":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"197bbedf08450ade98a11f4a0001448059666bec":["9511f5bdd69ab6dff148948a9df39ba5301e842a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["197bbedf08450ade98a11f4a0001448059666bec","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"cbb2d9cb96e731a93749beccbf9d0a5e4849cae2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["98f11c416d30e556e0004a9a84960702d12d35b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["cbb2d9cb96e731a93749beccbf9d0a5e4849cae2"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}