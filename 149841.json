{"path":"src/java/org/apache/lucene/index/DirectoryIndexReader#open(Directory,boolean,IndexDeletionPolicy,IndexCommit,boolean).mjava","commits":[{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#open(Directory,boolean,IndexDeletionPolicy,IndexCommit,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#open(Directory,boolean,IndexDeletionPolicy,IndexCommit).mjava","sourceNew":"  static DirectoryIndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly) throws CorruptIndexException, IOException {\n\n    SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n\n        DirectoryIndexReader reader;\n\n        if (infos.size() == 1) {          // index is optimized\n          reader = SegmentReader.get(readOnly, infos, infos.info(0), closeDirectory);\n        } else if (readOnly) {\n          reader = new ReadOnlyMultiSegmentReader(directory, infos, closeDirectory);\n        } else {\n          reader = new MultiSegmentReader(directory, infos, closeDirectory, false);\n        }\n        reader.setDeletionPolicy(deletionPolicy);\n        return reader;\n      }\n    };\n\n    if (commit == null)\n      return (DirectoryIndexReader) finder.run();\n    else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      // This can & will directly throw IOException if the\n      // specified commit point has been deleted:\n      return (DirectoryIndexReader) finder.doBody(commit.getSegmentsFileName());\n    }\n  }\n\n","sourceOld":"  static DirectoryIndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit) throws CorruptIndexException, IOException {\n\n    SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n\n        DirectoryIndexReader reader;\n\n        if (infos.size() == 1) {          // index is optimized\n          reader = SegmentReader.get(infos, infos.info(0), closeDirectory);\n        } else {\n          reader = new MultiSegmentReader(directory, infos, closeDirectory);\n        }\n        reader.setDeletionPolicy(deletionPolicy);\n        return reader;\n      }\n    };\n\n    if (commit == null)\n      return (DirectoryIndexReader) finder.run();\n    else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      // This can & will directly throw IOException if the\n      // specified commit point has been deleted:\n      return (DirectoryIndexReader) finder.doBody(commit.getSegmentsFileName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ab6e144b62a8a94bec1f1f7e78795c7a1377aba","date":1225469352,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#open(Directory,boolean,IndexDeletionPolicy,IndexCommit,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#open(Directory,boolean,IndexDeletionPolicy,IndexCommit,boolean).mjava","sourceNew":"  static DirectoryIndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly) throws CorruptIndexException, IOException {\n\n    SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n\n        DirectoryIndexReader reader;\n\n        if (infos.size() == 1) {          // index is optimized\n          reader = SegmentReader.get(readOnly, infos, infos.info(0), false);\n        } else if (readOnly) {\n          reader = new ReadOnlyMultiSegmentReader(directory, infos, false);\n        } else {\n          reader = new MultiSegmentReader(directory, infos, false, false);\n        }\n        reader.setDeletionPolicy(deletionPolicy);\n        reader.closeDirectory = closeDirectory;\n        return reader;\n      }\n    };\n\n    DirectoryIndexReader reader = null;\n    try {\n      if (commit == null)\n        reader = (DirectoryIndexReader) finder.run();\n      else {\n        if (directory != commit.getDirectory())\n          throw new IOException(\"the specified commit does not match the specified Directory\");\n        // This can & will directly throw IOException if the\n        // specified commit point has been deleted:\n        reader = (DirectoryIndexReader) finder.doBody(commit.getSegmentsFileName());\n      }\n    } finally {\n      // We passed false above for closeDirectory so that\n      // the directory would not be closed before we were\n      // done retrying, so at this point if we truly failed\n      // to open a reader, which means an exception is being\n      // thrown, then close the directory now:\n      if (reader == null && closeDirectory) {\n        try {\n          directory.close();\n        } catch (IOException ioe) {\n          // suppress, so we keep throwing original failure\n          // from opening the reader\n        }\n      }\n    }\n\n    return reader;\n  }\n\n","sourceOld":"  static DirectoryIndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly) throws CorruptIndexException, IOException {\n\n    SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n\n        DirectoryIndexReader reader;\n\n        if (infos.size() == 1) {          // index is optimized\n          reader = SegmentReader.get(readOnly, infos, infos.info(0), closeDirectory);\n        } else if (readOnly) {\n          reader = new ReadOnlyMultiSegmentReader(directory, infos, closeDirectory);\n        } else {\n          reader = new MultiSegmentReader(directory, infos, closeDirectory, false);\n        }\n        reader.setDeletionPolicy(deletionPolicy);\n        return reader;\n      }\n    };\n\n    if (commit == null)\n      return (DirectoryIndexReader) finder.run();\n    else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      // This can & will directly throw IOException if the\n      // specified commit point has been deleted:\n      return (DirectoryIndexReader) finder.doBody(commit.getSegmentsFileName());\n    }\n  }\n\n","bugFix":["ac785906c92e4048ffc28f7c23a45541d3cca9bf","5712975970a595c28f1988efd007e1b8a617a92f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#open(Directory,boolean,IndexDeletionPolicy,IndexCommit,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#open(Directory,boolean,IndexDeletionPolicy,IndexCommit,boolean).mjava","sourceNew":"  static IndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly) throws CorruptIndexException, IOException {\n    SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n\n        if (readOnly)\n          return new ReadOnlyDirectoryReader(directory, infos, deletionPolicy, closeDirectory);\n        else\n          return new DirectoryReader(directory, infos, deletionPolicy, closeDirectory, false);\n      }\n    };\n\n    IndexReader reader = null;\n    try {\n      reader = (IndexReader) finder.run(commit);\n    } finally {\n      // We passed false above for closeDirectory so that\n      // the directory would not be closed before we were\n      // done retrying, so at this point if we truly failed\n      // to open a reader, which means an exception is being\n      // thrown, then close the directory now:\n      if (reader == null && closeDirectory) {\n        try {\n          directory.close();\n        } catch (IOException ioe) {\n          // suppress, so we keep throwing original failure\n          // from opening the reader\n        }\n      }\n    }\n\n    return reader;\n  }\n\n","sourceOld":"  static DirectoryIndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly) throws CorruptIndexException, IOException {\n\n    SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n\n        DirectoryIndexReader reader;\n\n        if (infos.size() == 1) {          // index is optimized\n          reader = SegmentReader.get(readOnly, infos, infos.info(0), false);\n        } else if (readOnly) {\n          reader = new ReadOnlyMultiSegmentReader(directory, infos, false);\n        } else {\n          reader = new MultiSegmentReader(directory, infos, false, false);\n        }\n        reader.setDeletionPolicy(deletionPolicy);\n        reader.closeDirectory = closeDirectory;\n        return reader;\n      }\n    };\n\n    DirectoryIndexReader reader = null;\n    try {\n      if (commit == null)\n        reader = (DirectoryIndexReader) finder.run();\n      else {\n        if (directory != commit.getDirectory())\n          throw new IOException(\"the specified commit does not match the specified Directory\");\n        // This can & will directly throw IOException if the\n        // specified commit point has been deleted:\n        reader = (DirectoryIndexReader) finder.doBody(commit.getSegmentsFileName());\n      }\n    } finally {\n      // We passed false above for closeDirectory so that\n      // the directory would not be closed before we were\n      // done retrying, so at this point if we truly failed\n      // to open a reader, which means an exception is being\n      // thrown, then close the directory now:\n      if (reader == null && closeDirectory) {\n        try {\n          directory.close();\n        } catch (IOException ioe) {\n          // suppress, so we keep throwing original failure\n          // from opening the reader\n        }\n      }\n    }\n\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["6ab6e144b62a8a94bec1f1f7e78795c7a1377aba"],"5712975970a595c28f1988efd007e1b8a617a92f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ab6e144b62a8a94bec1f1f7e78795c7a1377aba":["5712975970a595c28f1988efd007e1b8a617a92f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5712975970a595c28f1988efd007e1b8a617a92f":["6ab6e144b62a8a94bec1f1f7e78795c7a1377aba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5712975970a595c28f1988efd007e1b8a617a92f"],"6ab6e144b62a8a94bec1f1f7e78795c7a1377aba":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}