{"path":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","sourceNew":"  // TODO: Remove warning after API has been finalized\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    final BytesRef payload = postings.getPayload();\n    final byte[] bytes;\n    if (payload != null) {\n      bytes = new byte[payload.length];\n      System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    } else {\n      bytes = null;\n    }\n    return Collections.singletonList(bytes);\n  }\n\n","sourceOld":"  // TODO: Remove warning after API has been finalized\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    final BytesRef payload = postings.getPayload();\n    final byte[] bytes;\n    if (payload != null) {\n      bytes = new byte[payload.length];\n      System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    } else {\n      bytes = null;\n    }\n    return Collections.singletonList(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","date":1344797146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","sourceNew":"  // TODO: Remove warning after API has been finalized\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    final BytesRef payload = postings.getPayload();\n    readPayload = true;\n    final byte[] bytes;\n    if (payload != null) {\n      bytes = new byte[payload.length];\n      System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    } else {\n      bytes = null;\n    }\n    return Collections.singletonList(bytes);\n  }\n\n","sourceOld":"  // TODO: Remove warning after API has been finalized\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    final BytesRef payload = postings.getPayload();\n    final byte[] bytes;\n    if (payload != null) {\n      bytes = new byte[payload.length];\n      System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    } else {\n      bytes = null;\n    }\n    return Collections.singletonList(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","sourceNew":"  // TODO: Remove warning after API has been finalized\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    final BytesRef payload = postings.getPayload();\n    readPayload = true;\n    final byte[] bytes;\n    if (payload != null) {\n      bytes = new byte[payload.length];\n      System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    } else {\n      bytes = null;\n    }\n    return Collections.singletonList(bytes);\n  }\n\n","sourceOld":"  // TODO: Remove warning after API has been finalized\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    final BytesRef payload = postings.getPayload();\n    final byte[] bytes;\n    if (payload != null) {\n      bytes = new byte[payload.length];\n      System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    } else {\n      bytes = null;\n    }\n    return Collections.singletonList(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","sourceNew":"  // TODO: Remove warning after API has been finalized\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    final BytesRef payload = postings.getPayload();\n    readPayload = true;\n    final byte[] bytes;\n    if (payload != null) {\n      bytes = new byte[payload.length];\n      System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    } else {\n      bytes = null;\n    }\n    return Collections.singletonList(bytes);\n  }\n\n","sourceOld":"  // TODO: Remove warning after API has been finalized\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    final BytesRef payload = postings.getPayload();\n    final byte[] bytes;\n    if (payload != null) {\n      bytes = new byte[payload.length];\n      System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    } else {\n      bytes = null;\n    }\n    return Collections.singletonList(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","sourceNew":"  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    final BytesRef payload = postings.getPayload();\n    readPayload = true;\n    final byte[] bytes;\n    if (payload != null) {\n      bytes = new byte[payload.length];\n      System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    } else {\n      bytes = null;\n    }\n    return Collections.singletonList(bytes);\n  }\n\n","sourceOld":"  // TODO: Remove warning after API has been finalized\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    final BytesRef payload = postings.getPayload();\n    readPayload = true;\n    final byte[] bytes;\n    if (payload != null) {\n      bytes = new byte[payload.length];\n      System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    } else {\n      bytes = null;\n    }\n    return Collections.singletonList(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","sourceNew":"  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    final BytesRef payload = postings.getPayload();\n    readPayload = true;\n    final byte[] bytes;\n    if (payload != null) {\n      bytes = new byte[payload.length];\n      System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    } else {\n      bytes = null;\n    }\n    return Collections.singletonList(bytes);\n  }\n\n","sourceOld":"  // TODO: Remove warning after API has been finalized\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    final BytesRef payload = postings.getPayload();\n    readPayload = true;\n    final byte[] bytes;\n    if (payload != null) {\n      bytes = new byte[payload.length];\n      System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    } else {\n      bytes = null;\n    }\n    return Collections.singletonList(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/TermSpans#getPayload().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    final BytesRef payload = postings.getPayload();\n    readPayload = true;\n    final byte[] bytes;\n    if (payload != null) {\n      bytes = new byte[payload.length];\n      System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    } else {\n      bytes = null;\n    }\n    return Collections.singletonList(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"fab172655716b96f7e42376116235017a922de3a":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d530e71ed32ab23b34ca3fc72b080a554a40404"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["c7869f64c874ebf7f317d22c00baf2b6857797a6","30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["2d530e71ed32ab23b34ca3fc72b080a554a40404","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fab172655716b96f7e42376116235017a922de3a","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}