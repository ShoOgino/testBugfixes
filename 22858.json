{"path":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","commits":[{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ade882efb2f2235dafb176284c1e35dbdb1c126","date":1274043418,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false);\n  }\n\n","sourceOld":"  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"498e168d849b4dbc097ac7b31f6db170d6f55725","date":1286807836,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false);\n  }\n\n","bugFix":null,"bugIntro":["7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7740a3e0858e88aaf6b09efe52e35c04a0d717f7","date":1286877329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, true);\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, false);\n  }\n\n","bugFix":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, true);\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, true);\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, true);\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, true);\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, true);\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer, with no filtering.\n   * \n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   */\n  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {\n    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["2ade882efb2f2235dafb176284c1e35dbdb1c126","7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["498e168d849b4dbc097ac7b31f6db170d6f55725","7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"7740a3e0858e88aaf6b09efe52e35c04a0d717f7":["498e168d849b4dbc097ac7b31f6db170d6f55725"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d572389229127c297dd1fa5ce4758e1cec41e799"],"d572389229127c297dd1fa5ce4758e1cec41e799":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","498e168d849b4dbc097ac7b31f6db170d6f55725"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7740a3e0858e88aaf6b09efe52e35c04a0d717f7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}