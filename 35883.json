{"path":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfa31dc111e7187af45764aea5c8f9ab89275e8a","date":1332442245,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n      SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n      \n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<String>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n      \n      SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n        \n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n        \n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","bugFix":["afabe5bcb5f6e1f562673b9cdd9f5d550ad095e8","057119d0666f2a2674ad4bba71baca71cb200801","ca0759b72726fa1c9e01f190aca788835d3fde80","528227c934991a1449fd96c61cd28e91200b0f72"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n      SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n      \n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n      \n      SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n        \n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n        \n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n      SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n      \n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<String>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n      \n      SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n        \n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n        \n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      QueryResult qr = new QueryResult();\n      QueryCommand cmd = new QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n      \n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n      \n      SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n        \n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n        \n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n      SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n      \n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n      \n      SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n        \n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n        \n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testDocListConversion().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  // tests ClusteringComponent.docListToSolrDocumentList\n  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      QueryResult qr = new QueryResult();\n      QueryCommand cmd = new QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n\n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n\n      SolrDocumentList list = ClusteringComponent.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n\n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n\n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      QueryResult qr = new QueryResult();\n      QueryCommand cmd = new QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n      \n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n      \n      SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n        \n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n        \n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testDocListConversion().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  // tests ClusteringComponent.docListToSolrDocumentList\n  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      QueryResult qr = new QueryResult();\n      QueryCommand cmd = new QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n\n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n\n      SolrDocumentList list = ClusteringComponent.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n\n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n\n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      QueryResult qr = new QueryResult();\n      QueryCommand cmd = new QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n      \n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n      \n      SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n        \n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n        \n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfa31dc111e7187af45764aea5c8f9ab89275e8a":["c26f00b574427b55127e869b935845554afde1fa"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cfa31dc111e7187af45764aea5c8f9ab89275e8a"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"]},"commit2Childs":{"cfa31dc111e7187af45764aea5c8f9ab89275e8a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"de548de3ce5405595899f548152d4b93ac9eb9cc":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cfa31dc111e7187af45764aea5c8f9ab89275e8a"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de548de3ce5405595899f548152d4b93ac9eb9cc","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}