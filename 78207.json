{"path":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      perFields[0].fieldInfo.commitVectors();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n        // commit the termVectors once successful success - FI will otherwise reset them\n        perFields[i].fieldInfo.commitVectors();\n      }\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}