{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ProtectedTermFilterFactory#handleWrappedFilterArgs(Map[String,String]).mjava","commits":[{"id":"9809bf55e3bf03659b8b93fd16170aaa7eb92012","date":1526860327,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ProtectedTermFilterFactory#handleWrappedFilterArgs(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void handleWrappedFilterArgs(Map<String, String> args) {\n    LinkedHashMap<String, Map<String, String>> wrappedFilterArgs = new LinkedHashMap<>();\n    splitAt(',', wrappedFilters).forEach(filterName -> {          // Format: SPIname[-id]\n      filterName = filterName.trim().toLowerCase(Locale.ROOT);             // Treat case-insensitively\n      if (wrappedFilterArgs.containsKey(filterName)) {\n        throw new IllegalArgumentException(\"wrappedFilters contains duplicate '\"\n            + filterName + \"'. Add unique '-id' suffixes (stripped prior to SPI lookup).\");\n      }\n      wrappedFilterArgs.put(filterName, new HashMap<>());\n    });\n    for (Iterator<Map.Entry<String, String>> iterator = args.entrySet().iterator(); iterator.hasNext(); ) {\n      Map.Entry<String, String> entry = iterator.next();\n      String filterArgKey = entry.getKey();\n      String argValue = entry.getValue();\n      List<String> splitKey = splitAt(FILTER_ARG_SEPARATOR, filterArgKey); // Format: filterName.argKey\n      if (splitKey.size() == 2) {                                          // Skip if no slash\n        String filterName = splitKey.get(0).toLowerCase(Locale.ROOT);\n        if (wrappedFilterArgs.containsKey(filterName)) {                   // Skip if not in \"wrappedFilter\" arg\n          Map<String, String> filterArgs = wrappedFilterArgs.computeIfAbsent(filterName, k -> new HashMap<>());\n          String argKey = splitKey.get(1);\n          filterArgs.put(argKey, argValue); // argKey is guaranteed unique, don't need to check for duplicates\n          iterator.remove();\n        }\n      }\n    }\n    if (args.isEmpty()) {\n      populateInnerFilters(wrappedFilterArgs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9809bf55e3bf03659b8b93fd16170aaa7eb92012":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9809bf55e3bf03659b8b93fd16170aaa7eb92012"]},"commit2Childs":{"9809bf55e3bf03659b8b93fd16170aaa7eb92012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9809bf55e3bf03659b8b93fd16170aaa7eb92012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}