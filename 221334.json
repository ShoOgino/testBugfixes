{"path":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStringsRecursive(Automaton,int).mjava","commits":[{"id":"61ac0dce4a88019c61f1217b42753d505b9d9c84","date":1399218479,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStringsRecursive(Automaton,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple, original implementation of getFiniteStrings.\n   *\n   * <p>Returns the set of accepted strings, assuming that at most\n   * <code>limit</code> strings are accepted. If more than <code>limit</code> \n   * strings are accepted, the first limit strings found are returned. If <code>limit</code>&lt;0, then \n   * the limit is infinite.\n   *\n   * <p>This implementation is recursive: it uses one stack\n   * frame for each digit in the returned strings (ie, max\n   * is the max length returned string).\n   */\n  public static Set<IntsRef> getFiniteStringsRecursive(Automaton a, int limit) {\n    HashSet<IntsRef> strings = new HashSet<>();\n    if (a.isSingleton()) {\n      if (limit > 0) {\n        strings.add(Util.toUTF32(a.singleton, new IntsRef()));\n      }\n    } else if (!getFiniteStrings(a.initial, new HashSet<State>(), strings, new IntsRef(), limit)) {\n      return strings;\n    }\n    return strings;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStringsRecursive(Automaton,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Simple, original implementation of getFiniteStrings.\n   *\n   * <p>Returns the set of accepted strings, assuming that at most\n   * <code>limit</code> strings are accepted. If more than <code>limit</code> \n   * strings are accepted, the first limit strings found are returned. If <code>limit</code>&lt;0, then \n   * the limit is infinite.\n   *\n   * <p>This implementation is recursive: it uses one stack\n   * frame for each digit in the returned strings (ie, max\n   * is the max length returned string).\n   */\n  public static Set<IntsRef> getFiniteStringsRecursive(Automaton a, int limit) {\n    HashSet<IntsRef> strings = new HashSet<>();\n    if (a.isSingleton()) {\n      if (limit > 0) {\n        strings.add(Util.toUTF32(a.singleton, new IntsRef()));\n      }\n    } else if (!getFiniteStrings(a.initial, new HashSet<State>(), strings, new IntsRef(), limit)) {\n      return strings;\n    }\n    return strings;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStringsRecursive(Automaton,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStringsRecursiveLight(LightAutomaton,int).mjava","sourceNew":"  /**\n   * Simple, original implementation of getFiniteStrings.\n   *\n   * <p>Returns the set of accepted strings, assuming that at most\n   * <code>limit</code> strings are accepted. If more than <code>limit</code> \n   * strings are accepted, the first limit strings found are returned. If <code>limit</code>&lt;0, then \n   * the limit is infinite.\n   *\n   * <p>This implementation is recursive: it uses one stack\n   * frame for each digit in the returned strings (ie, max\n   * is the max length returned string).\n   */\n  public static Set<IntsRef> getFiniteStringsRecursive(Automaton a, int limit) {\n    HashSet<IntsRef> strings = new HashSet<>();\n    if (!getFiniteStrings(a, 0, new HashSet<Integer>(), strings, new IntsRef(), limit)) {\n      return strings;\n    }\n    return strings;\n  }\n\n","sourceOld":"  /**\n   * Simple, original implementation of getFiniteStrings.\n   *\n   * <p>Returns the set of accepted strings, assuming that at most\n   * <code>limit</code> strings are accepted. If more than <code>limit</code> \n   * strings are accepted, the first limit strings found are returned. If <code>limit</code>&lt;0, then \n   * the limit is infinite.\n   *\n   * <p>This implementation is recursive: it uses one stack\n   * frame for each digit in the returned strings (ie, max\n   * is the max length returned string).\n   */\n  public static Set<IntsRef> getFiniteStringsRecursiveLight(LightAutomaton a, int limit) {\n    HashSet<IntsRef> strings = new HashSet<>();\n    if (!getFiniteStringsLight(a, 0, new HashSet<Integer>(), strings, new IntsRef(), limit)) {\n      return strings;\n    }\n    return strings;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStringsRecursive(Automaton,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStringsRecursive(Automaton,int).mjava","sourceNew":"  /**\n   * Simple, original implementation of getFiniteStrings.\n   *\n   * <p>Returns the set of accepted strings, assuming that at most\n   * <code>limit</code> strings are accepted. If more than <code>limit</code> \n   * strings are accepted, the first limit strings found are returned. If <code>limit</code>&lt;0, then \n   * the limit is infinite.\n   *\n   * <p>This implementation is recursive: it uses one stack\n   * frame for each digit in the returned strings (ie, max\n   * is the max length returned string).\n   */\n  public static Set<IntsRef> getFiniteStringsRecursive(Automaton a, int limit) {\n    HashSet<IntsRef> strings = new HashSet<>();\n    if (!getFiniteStrings(a, 0, new HashSet<Integer>(), strings, new IntsRef(), limit)) {\n      return strings;\n    }\n    return strings;\n  }\n\n","sourceOld":"  /**\n   * Simple, original implementation of getFiniteStrings.\n   *\n   * <p>Returns the set of accepted strings, assuming that at most\n   * <code>limit</code> strings are accepted. If more than <code>limit</code> \n   * strings are accepted, the first limit strings found are returned. If <code>limit</code>&lt;0, then \n   * the limit is infinite.\n   *\n   * <p>This implementation is recursive: it uses one stack\n   * frame for each digit in the returned strings (ie, max\n   * is the max length returned string).\n   */\n  public static Set<IntsRef> getFiniteStringsRecursive(Automaton a, int limit) {\n    HashSet<IntsRef> strings = new HashSet<>();\n    if (a.isSingleton()) {\n      if (limit > 0) {\n        strings.add(Util.toUTF32(a.singleton, new IntsRef()));\n      }\n    } else if (!getFiniteStrings(a.initial, new HashSet<State>(), strings, new IntsRef(), limit)) {\n      return strings;\n    }\n    return strings;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStringsRecursive(Automaton,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStringsRecursive(Automaton,int).mjava","sourceNew":"  /**\n   * Simple, original implementation of getFiniteStrings.\n   *\n   * <p>Returns the set of accepted strings, assuming that at most\n   * <code>limit</code> strings are accepted. If more than <code>limit</code> \n   * strings are accepted, the first limit strings found are returned. If <code>limit</code>&lt;0, then \n   * the limit is infinite.\n   *\n   * <p>This implementation is recursive: it uses one stack\n   * frame for each digit in the returned strings (ie, max\n   * is the max length returned string).\n   */\n  public static Set<IntsRef> getFiniteStringsRecursive(Automaton a, int limit) {\n    HashSet<IntsRef> strings = new HashSet<>();\n    if (!getFiniteStrings(a, 0, new HashSet<Integer>(), strings, new IntsRefBuilder(), limit)) {\n      return strings;\n    }\n    return strings;\n  }\n\n","sourceOld":"  /**\n   * Simple, original implementation of getFiniteStrings.\n   *\n   * <p>Returns the set of accepted strings, assuming that at most\n   * <code>limit</code> strings are accepted. If more than <code>limit</code> \n   * strings are accepted, the first limit strings found are returned. If <code>limit</code>&lt;0, then \n   * the limit is infinite.\n   *\n   * <p>This implementation is recursive: it uses one stack\n   * frame for each digit in the returned strings (ie, max\n   * is the max length returned string).\n   */\n  public static Set<IntsRef> getFiniteStringsRecursive(Automaton a, int limit) {\n    HashSet<IntsRef> strings = new HashSet<>();\n    if (!getFiniteStrings(a, 0, new HashSet<Integer>(), strings, new IntsRef(), limit)) {\n      return strings;\n    }\n    return strings;\n  }\n\n","bugFix":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61ac0dce4a88019c61f1217b42753d505b9d9c84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["61ac0dce4a88019c61f1217b42753d505b9d9c84"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["61ac0dce4a88019c61f1217b42753d505b9d9c84","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"61ac0dce4a88019c61f1217b42753d505b9d9c84":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61ac0dce4a88019c61f1217b42753d505b9d9c84"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}