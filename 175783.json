{"path":"solr/core/src/java/org/apache/solr/internal/csv/CSVParser#getAllValues().mjava","commits":[{"id":"80931fa1f3b04650bde7b20e61b02063a7093ced","date":1333130683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/CSVParser#getAllValues().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses the CSV according to the given strategy\n   * and returns the content as an array of records\n   * (whereas records are arrays of single values).\n   * <p>\n   * The returned content starts at the current parse-position in\n   * the stream.\n   * \n   * @return matrix of records x values ('null' when end of file)\n   * @throws IOException on parse error or input read-failure\n   */\n  public String[][] getAllValues() throws IOException {\n    ArrayList records = new ArrayList();\n    String[] values;\n    String[][] ret = null;\n    while ((values = getLine()) != null)  {\n      records.add(values);\n    }\n    if (records.size() > 0) {\n      ret = new String[records.size()][];\n      records.toArray(ret);\n    }\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/CSVParser#getAllValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/CSVParser#getAllValues().mjava","sourceNew":"  /**\n   * Parses the CSV according to the given strategy\n   * and returns the content as an array of records\n   * (whereas records are arrays of single values).\n   * <p>\n   * The returned content starts at the current parse-position in\n   * the stream.\n   * \n   * @return matrix of records x values ('null' when end of file)\n   * @throws IOException on parse error or input read-failure\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public String[][] getAllValues() throws IOException {\n    @SuppressWarnings({\"rawtypes\"})\n    ArrayList records = new ArrayList();\n    String[] values;\n    String[][] ret = null;\n    while ((values = getLine()) != null)  {\n      records.add(values);\n    }\n    if (records.size() > 0) {\n      ret = new String[records.size()][];\n      records.toArray(ret);\n    }\n    return ret;\n  }\n\n","sourceOld":"  /**\n   * Parses the CSV according to the given strategy\n   * and returns the content as an array of records\n   * (whereas records are arrays of single values).\n   * <p>\n   * The returned content starts at the current parse-position in\n   * the stream.\n   * \n   * @return matrix of records x values ('null' when end of file)\n   * @throws IOException on parse error or input read-failure\n   */\n  public String[][] getAllValues() throws IOException {\n    ArrayList records = new ArrayList();\n    String[] values;\n    String[][] ret = null;\n    while ((values = getLine()) != null)  {\n      records.add(values);\n    }\n    if (records.size() > 0) {\n      ret = new String[records.size()][];\n      records.toArray(ret);\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80931fa1f3b04650bde7b20e61b02063a7093ced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"80931fa1f3b04650bde7b20e61b02063a7093ced":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}