{"path":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","commits":[{"id":"7ad1376d356a33e10b3b9b95708ddc83252499a6","date":1353008654,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","pathOld":"/dev/null","sourceNew":"  private void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    // check size\n    if (values.length == valuesOff) {\n      final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n      minValues = Arrays.copyOf(minValues, newLength);\n      values = Arrays.copyOf(values, newLength);\n    }\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    // build a new packed reader\n    final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] -= minValue;\n    }\n    final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n    for (int i = 0; i < pendingOff; ) {\n      i += mutable.set(i, pending, i, pendingOff - i);\n    }\n\n    // store it\n    minValues[valuesOff] = minValue;\n    values[valuesOff] = mutable;\n    ++valuesOff;\n\n    // reset pending buffer\n    pendingOff = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a8b3f4209c6b8919a25d2a047a3d9f5172b715c","date":1353076805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","sourceNew":"  private void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    // check size\n    if (values.length == valuesOff) {\n      final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n      minValues = Arrays.copyOf(minValues, newLength);\n      values = Arrays.copyOf(values, newLength);\n    }\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta != 0) {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n    ++valuesOff;\n\n    // reset pending buffer\n    pendingOff = 0;\n  }\n\n","sourceOld":"  private void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    // check size\n    if (values.length == valuesOff) {\n      final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n      minValues = Arrays.copyOf(minValues, newLength);\n      values = Arrays.copyOf(values, newLength);\n    }\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    // build a new packed reader\n    final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n    for (int i = 0; i < pendingOff; ++i) {\n      pending[i] -= minValue;\n    }\n    final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n    for (int i = 0; i < pendingOff; ) {\n      i += mutable.set(i, pending, i, pendingOff - i);\n    }\n\n    // store it\n    minValues[valuesOff] = minValue;\n    values[valuesOff] = mutable;\n    ++valuesOff;\n\n    // reset pending buffer\n    pendingOff = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7571dd1e018a14f1536c64e4f6d17a3f0bb30fa7","date":1359470824,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","sourceNew":"  private void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    // check size\n    if (values.length == valuesOff) {\n      final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n      minValues = Arrays.copyOf(minValues, newLength);\n      values = Arrays.copyOf(values, newLength);\n    }\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta != 0) {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n      valuesBytes += mutable.ramBytesUsed();\n    }\n    ++valuesOff;\n\n    // reset pending buffer\n    pendingOff = 0;\n  }\n\n","sourceOld":"  private void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    // check size\n    if (values.length == valuesOff) {\n      final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n      minValues = Arrays.copyOf(minValues, newLength);\n      values = Arrays.copyOf(values, newLength);\n    }\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta != 0) {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n    ++valuesOff;\n\n    // reset pending buffer\n    pendingOff = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","pathOld":"/dev/null","sourceNew":"  private void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    // check size\n    if (values.length == valuesOff) {\n      final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n      minValues = Arrays.copyOf(minValues, newLength);\n      values = Arrays.copyOf(values, newLength);\n    }\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta != 0) {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n      valuesBytes += mutable.ramBytesUsed();\n    }\n    ++valuesOff;\n\n    // reset pending buffer\n    pendingOff = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae3be3418aea9954be27a83315087f67c0c2201e","date":1361023362,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","sourceNew":"  void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta != 0) {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  private void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    // check size\n    if (values.length == valuesOff) {\n      final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n      minValues = Arrays.copyOf(minValues, newLength);\n      values = Arrays.copyOf(values, newLength);\n    }\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta != 0) {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n      valuesBytes += mutable.ramBytesUsed();\n    }\n    ++valuesOff;\n\n    // reset pending buffer\n    pendingOff = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","sourceNew":"  void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta != 0) {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  private void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    // check size\n    if (values.length == valuesOff) {\n      final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);\n      minValues = Arrays.copyOf(minValues, newLength);\n      values = Arrays.copyOf(values, newLength);\n    }\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta != 0) {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n      valuesBytes += mutable.ramBytesUsed();\n    }\n    ++valuesOff;\n\n    // reset pending buffer\n    pendingOff = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22344cc5c695683a5a6cecff291f840d71c20d25","date":1370561415,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    assert pendingOff == pending.length;\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta != 0) {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  void packPendingValues() {\n    assert pendingOff == MAX_PENDING_COUNT;\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta != 0) {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","date":1373959221,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      deltas[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    assert pendingOff == pending.length;\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta != 0) {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      deltas[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    assert pendingOff == pending.length;\n\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta != 0) {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb240aebd5a347d79f642127ad9255dd9a979f06","date":1375188159,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      deltas[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      deltas[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["22344cc5c695683a5a6cecff291f840d71c20d25"],"7ad1376d356a33e10b3b9b95708ddc83252499a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["22344cc5c695683a5a6cecff291f840d71c20d25","3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"],"22344cc5c695683a5a6cecff291f840d71c20d25":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","ae3be3418aea9954be27a83315087f67c0c2201e"],"7571dd1e018a14f1536c64e4f6d17a3f0bb30fa7":["9a8b3f4209c6b8919a25d2a047a3d9f5172b715c"],"9a8b3f4209c6b8919a25d2a047a3d9f5172b715c":["7ad1376d356a33e10b3b9b95708ddc83252499a6"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7571dd1e018a14f1536c64e4f6d17a3f0bb30fa7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"ae3be3418aea9954be27a83315087f67c0c2201e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb240aebd5a347d79f642127ad9255dd9a979f06"]},"commit2Childs":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cb240aebd5a347d79f642127ad9255dd9a979f06"],"7ad1376d356a33e10b3b9b95708ddc83252499a6":["9a8b3f4209c6b8919a25d2a047a3d9f5172b715c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"22344cc5c695683a5a6cecff291f840d71c20d25":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["22344cc5c695683a5a6cecff291f840d71c20d25"],"7571dd1e018a14f1536c64e4f6d17a3f0bb30fa7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9a8b3f4209c6b8919a25d2a047a3d9f5172b715c":["7571dd1e018a14f1536c64e4f6d17a3f0bb30fa7"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","ae3be3418aea9954be27a83315087f67c0c2201e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7ad1376d356a33e10b3b9b95708ddc83252499a6","d4d69c535930b5cce125cff868d40f6373dc27d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae3be3418aea9954be27a83315087f67c0c2201e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}