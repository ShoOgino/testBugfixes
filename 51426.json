{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","commits":[{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory(random);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory(random);\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory(random);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory(random);\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType2));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType2));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType2));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType2));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType2));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType2));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType2));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType2));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = newDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType2));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType2));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType2));\n    doc2.add(newField(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", customType2));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = newDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(dir);\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","b21422ff1d1d56499dec481f193b402e5e8def5b"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}