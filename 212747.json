{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#LatLonPointInPolygonQuery(String,double[],double[]).mjava","commits":[{"id":"94ee361295fb38310ac4d53cb4773d1622423d68","date":1456833885,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#LatLonPointInPolygonQuery(String,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery#PointInPolygonQuery(String,double[],double[]).mjava","sourceNew":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public LatLonPointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (field == null) {\n      throw new IllegalArgumentException(\"field cannot be null\");\n    }\n    if (polyLats == null) {\n      throw new IllegalArgumentException(\"polyLats cannot be null\");\n    }\n    if (polyLons == null) {\n      throw new IllegalArgumentException(\"polyLons cannot be null\");\n    }\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","sourceOld":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public PointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#LatLonPointInPolygonQuery(String,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery#PointInPolygonQuery(String,double[],double[]).mjava","sourceNew":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public LatLonPointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (field == null) {\n      throw new IllegalArgumentException(\"field cannot be null\");\n    }\n    if (polyLats == null) {\n      throw new IllegalArgumentException(\"polyLats cannot be null\");\n    }\n    if (polyLons == null) {\n      throw new IllegalArgumentException(\"polyLons cannot be null\");\n    }\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","sourceOld":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public PointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0da288484d638cec72e8fc33363e4c0532d35ff0","date":1459115234,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#LatLonPointInPolygonQuery(String,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#LatLonPointInPolygonQuery(String,double[],double[]).mjava","sourceNew":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public LatLonPointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (field == null) {\n      throw new IllegalArgumentException(\"field cannot be null\");\n    }\n    if (polyLats == null) {\n      throw new IllegalArgumentException(\"polyLats cannot be null\");\n    }\n    if (polyLons == null) {\n      throw new IllegalArgumentException(\"polyLons cannot be null\");\n    }\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      GeoUtils.checkLatitude(lat);\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      GeoUtils.checkLongitude(lon);\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","sourceOld":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public LatLonPointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (field == null) {\n      throw new IllegalArgumentException(\"field cannot be null\");\n    }\n    if (polyLats == null) {\n      throw new IllegalArgumentException(\"polyLats cannot be null\");\n    }\n    if (polyLons == null) {\n      throw new IllegalArgumentException(\"polyLons cannot be null\");\n    }\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#LatLonPointInPolygonQuery(String,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#LatLonPointInPolygonQuery(String,double[],double[]).mjava","sourceNew":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public LatLonPointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    GeoUtils.checkPolygon(polyLats,  polyLons);\n    this.field = field;\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n    GeoRect box = GeoUtils.polyToBBox(polyLats, polyLons);\n    this.minLon = box.minLon;\n    this.maxLon = box.maxLon;\n    this.minLat = box.minLat;\n    this.maxLat = box.maxLat;\n  }\n\n","sourceOld":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public LatLonPointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (field == null) {\n      throw new IllegalArgumentException(\"field cannot be null\");\n    }\n    if (polyLats == null) {\n      throw new IllegalArgumentException(\"polyLats cannot be null\");\n    }\n    if (polyLons == null) {\n      throw new IllegalArgumentException(\"polyLons cannot be null\");\n    }\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      GeoUtils.checkLatitude(lat);\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      GeoUtils.checkLongitude(lon);\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","bugFix":["1904709ea0185dc04e3d77ea01c79e909caf2796","94ee361295fb38310ac4d53cb4773d1622423d68","0da288484d638cec72e8fc33363e4c0532d35ff0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ddcac9ac08381985af6eac8f8b77ba881d4ad8","date":1459477726,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#LatLonPointInPolygonQuery(String,Polygon[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#LatLonPointInPolygonQuery(String,double[],double[]).mjava","sourceNew":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public LatLonPointInPolygonQuery(String field, Polygon[] polygons) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (polygons == null) {\n      throw new IllegalArgumentException(\"polygons must not be null\");\n    }\n    if (polygons.length == 0) {\n      throw new IllegalArgumentException(\"polygons must not be empty\");\n    }\n    for (int i = 0; i < polygons.length; i++) {\n      if (polygons[i] == null) {\n        throw new IllegalArgumentException(\"polygon[\" + i + \"] must not be null\");\n      }\n    }\n    this.field = field;\n    this.polygons = polygons.clone();\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n  }\n\n","sourceOld":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public LatLonPointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    GeoUtils.checkPolygon(polyLats,  polyLons);\n    this.field = field;\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n    GeoRect box = GeoUtils.polyToBBox(polyLats, polyLons);\n    this.minLon = box.minLon;\n    this.maxLon = box.maxLon;\n    this.minLat = box.minLat;\n    this.maxLat = box.maxLat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"0da288484d638cec72e8fc33363e4c0532d35ff0":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ee361295fb38310ac4d53cb4773d1622423d68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["0da288484d638cec72e8fc33363e4c0532d35ff0"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","94ee361295fb38310ac4d53cb4773d1622423d68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"]},"commit2Childs":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0da288484d638cec72e8fc33363e4c0532d35ff0":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94ee361295fb38310ac4d53cb4773d1622423d68","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"94ee361295fb38310ac4d53cb4773d1622423d68":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["0da288484d638cec72e8fc33363e4c0532d35ff0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}