{"path":"lucene/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"), BasicOperations\n        .concatenate(BasicAutomata.makeString(\"foo\"), BasicAutomata\n            .makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"), BasicAutomata\n        .makeString(\"foobar\"));\n    \n    assertEquals(a1, a2);\n    assertEquals(a1.hashCode(), a2.hashCode());\n    \n    assertEquals(a1, a3);\n    assertEquals(a1.hashCode(), a3.hashCode());\n    \n    assertEquals(a1.toString(), a3.toString());\n    \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","sourceNew":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"), BasicOperations\n        .concatenate(BasicAutomata.makeString(\"foo\"), BasicAutomata\n            .makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"), BasicAutomata\n        .makeString(\"foobar\"));\n    \n    assertEquals(a1, a2);\n    \n    assertEquals(a1, a3);\n    \n    assertEquals(a1.toString(), a3.toString());\n    \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","sourceOld":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"), BasicOperations\n        .concatenate(BasicAutomata.makeString(\"foo\"), BasicAutomata\n            .makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"), BasicAutomata\n        .makeString(\"foobar\"));\n    \n    assertEquals(a1, a2);\n    assertEquals(a1.hashCode(), a2.hashCode());\n    \n    assertEquals(a1, a3);\n    assertEquals(a1.hashCode(), a3.hashCode());\n    \n    assertEquals(a1.toString(), a3.toString());\n    \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","sourceNew":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"), BasicOperations\n        .concatenate(BasicAutomata.makeString(\"foo\"), BasicAutomata\n            .makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"), BasicAutomata\n        .makeString(\"foobar\"));\n    \n    assertEquals(a1, a2);\n    \n    assertEquals(a1, a3);\n  \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","sourceOld":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"), BasicOperations\n        .concatenate(BasicAutomata.makeString(\"foo\"), BasicAutomata\n            .makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"), BasicAutomata\n        .makeString(\"foobar\"));\n    \n    assertEquals(a1, a2);\n    \n    assertEquals(a1, a3);\n    \n    assertEquals(a1.toString(), a3.toString());\n    \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","sourceNew":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"), BasicOperations\n        .concatenate(BasicAutomata.makeString(\"foo\"), BasicAutomata\n            .makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"), BasicAutomata\n        .makeString(\"foobar\"));\n    \n    assertEquals(a1, a2);\n    \n    assertEquals(a1, a3);\n  \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","sourceOld":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"), BasicOperations\n        .concatenate(BasicAutomata.makeString(\"foo\"), BasicAutomata\n            .makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"), BasicAutomata\n        .makeString(\"foobar\"));\n    \n    assertEquals(a1, a2);\n    \n    assertEquals(a1, a3);\n  \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}