{"path":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#deleteAllDocuments(HttpSolrClient,Queries).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#deleteAllDocuments(HttpSolrClient,Queries).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#deleteAllDocuments(HttpSolrServer,Queries).mjava","sourceNew":"  void deleteAllDocuments(HttpSolrClient client, Queries queries) {\n    log.info(\"Deleting data from last cycle, this may take a few minutes.\");\n\n    for (String core : coreNames) {\n      try {\n        client.setBaseURL(url + core);\n        client.deleteByQuery(\"*:*\");\n        client.optimize(true, true); // should be close to a no-op.\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    // We're testing, after all. Let's be really sure things are as we expect.\n    log.info(\"Insuring all cores empty\");\n    long foundDocs = 0;\n    for (String core : coreNames) {\n      try {\n        long found = queries.getCount(client, core);\n        assertEquals(\"Cores should be empty\", found, 0L);\n        foundDocs += found;\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    if (foundDocs > 0) {\n      log.warn(\"Found docs after purging done, this is bad.\");\n    }\n    // Reset counters for another go-round\n    coreCounts.clear();\n    for (String core : coreNames) {\n      coreCounts.put(core, 0L);\n    }\n  }\n\n","sourceOld":"  void deleteAllDocuments(HttpSolrServer server, Queries queries) {\n    log.info(\"Deleting data from last cycle, this may take a few minutes.\");\n\n    for (String core : coreNames) {\n      try {\n        server.setBaseURL(url + core);\n        server.deleteByQuery(\"*:*\");\n        server.optimize(true, true); // should be close to a no-op.\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    // We're testing, after all. Let's be really sure things are as we expect.\n    log.info(\"Insuring all cores empty\");\n    long foundDocs = 0;\n    for (String core : coreNames) {\n      try {\n        long found = queries.getCount(server, core);\n        assertEquals(\"Cores should be empty\", found, 0L);\n        foundDocs += found;\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    if (foundDocs > 0) {\n      log.warn(\"Found docs after purging done, this is bad.\");\n    }\n    // Reset counters for another go-round\n    coreCounts.clear();\n    for (String core : coreNames) {\n      coreCounts.put(core, 0L);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6ad96fd05c63ec22c1203121a27e0a1adce4025","date":1552081953,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#deleteAllDocuments(HttpSolrClient,Queries).mjava","sourceNew":null,"sourceOld":"  void deleteAllDocuments(HttpSolrClient client, Queries queries) {\n    log.info(\"Deleting data from last cycle, this may take a few minutes.\");\n\n    for (String core : coreNames) {\n      try {\n        client.setBaseURL(url + core);\n        client.deleteByQuery(\"*:*\");\n        client.optimize(true, true); // should be close to a no-op.\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    // We're testing, after all. Let's be really sure things are as we expect.\n    log.info(\"Insuring all cores empty\");\n    long foundDocs = 0;\n    for (String core : coreNames) {\n      try {\n        long found = queries.getCount(client, core);\n        assertEquals(\"Cores should be empty\", found, 0L);\n        foundDocs += found;\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    if (foundDocs > 0) {\n      log.warn(\"Found docs after purging done, this is bad.\");\n    }\n    // Reset counters for another go-round\n    coreCounts.clear();\n    for (String core : coreNames) {\n      coreCounts.put(core, 0L);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6ad96fd05c63ec22c1203121a27e0a1adce4025":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6ad96fd05c63ec22c1203121a27e0a1adce4025"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["e6ad96fd05c63ec22c1203121a27e0a1adce4025"],"e6ad96fd05c63ec22c1203121a27e0a1adce4025":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}