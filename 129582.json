{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymGraphFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","commits":[{"id":"24a98f5fdd23e04f85819dbc63b47a12f7c44311","date":1482439157,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymGraphFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  protected SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    List<String> files = splitFileNames(synonyms);\n    for (String file : files) {\n      decoder.reset();\n      parser.parse(new InputStreamReader(loader.openResource(file), decoder));\n    }\n    return parser.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymGraphFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  protected SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    List<String> files = splitFileNames(synonyms);\n    for (String file : files) {\n      decoder.reset();\n      parser.parse(new InputStreamReader(loader.openResource(file), decoder));\n    }\n    return parser.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24a98f5fdd23e04f85819dbc63b47a12f7c44311"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a98f5fdd23e04f85819dbc63b47a12f7c44311","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}