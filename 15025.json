{"path":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,IOContext).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","sourceNew":"  public CompoundFileReader(Directory dir, String name, IOContext context) throws IOException {\n    assert !(dir instanceof CompoundFileReader) : \"compound file inside of compound file: \" + name;\n    directory = dir;\n    fileName = name;\n    \n    boolean success = false;\n    \n    try {\n      stream = dir.openInput(name, context);\n      \n      // read the first VInt. If it is negative, it's the version number\n      // otherwise it's the count (pre-3.1 indexes)\n      int firstInt = stream.readVInt();\n      \n      final int count;\n      final boolean stripSegmentName;\n      if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n        if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n          throw new CorruptIndexException(\"Incompatible format version: \"\n              + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n        }\n        // It's a post-3.1 index, read the count.\n        count = stream.readVInt();\n        stripSegmentName = false;\n      } else {\n        count = firstInt;\n        stripSegmentName = true;\n      }\n      \n      // read the directory and init files\n      FileEntry entry = null;\n      for (int i=0; i<count; i++) {\n        long offset = stream.readLong();\n        String id = stream.readString();\n        \n        if (stripSegmentName) {\n          // Fix the id to not include the segment names. This is relevant for\n          // pre-3.1 indexes.\n          id = IndexFileNames.stripSegmentName(id);\n        }\n        \n        if (entry != null) {\n          // set length of the previous entry\n          entry.length = offset - entry.offset;\n        }\n        \n        entry = new FileEntry();\n        entry.offset = offset;\n        entries.put(id, entry);\n      }\n      \n      // set the length of the final entry\n      if (entry != null) {\n        entry.length = stream.length() - entry.offset;\n      }\n      \n      success = true;\n      \n    } finally {\n      if (!success && (stream != null)) {\n        try {\n          stream.close();\n        } catch (IOException e) { }\n      }\n    }\n  }\n\n","sourceOld":"  public CompoundFileReader(Directory dir, String name, int readBufferSize) throws IOException {\n    assert !(dir instanceof CompoundFileReader) : \"compound file inside of compound file: \" + name;\n    directory = dir;\n    fileName = name;\n    this.readBufferSize = readBufferSize;\n    \n    boolean success = false;\n    \n    try {\n      stream = dir.openInput(name, readBufferSize);\n      \n      // read the first VInt. If it is negative, it's the version number\n      // otherwise it's the count (pre-3.1 indexes)\n      int firstInt = stream.readVInt();\n      \n      final int count;\n      final boolean stripSegmentName;\n      if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n        if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n          throw new CorruptIndexException(\"Incompatible format version: \"\n              + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n        }\n        // It's a post-3.1 index, read the count.\n        count = stream.readVInt();\n        stripSegmentName = false;\n      } else {\n        count = firstInt;\n        stripSegmentName = true;\n      }\n      \n      // read the directory and init files\n      FileEntry entry = null;\n      for (int i=0; i<count; i++) {\n        long offset = stream.readLong();\n        String id = stream.readString();\n        \n        if (stripSegmentName) {\n          // Fix the id to not include the segment names. This is relevant for\n          // pre-3.1 indexes.\n          id = IndexFileNames.stripSegmentName(id);\n        }\n        \n        if (entry != null) {\n          // set length of the previous entry\n          entry.length = offset - entry.offset;\n        }\n        \n        entry = new FileEntry();\n        entry.offset = offset;\n        entries.put(id, entry);\n      }\n      \n      // set the length of the final entry\n      if (entry != null) {\n        entry.length = stream.length() - entry.offset;\n      }\n      \n      success = true;\n      \n    } finally {\n      if (!success && (stream != null)) {\n        try {\n          stream.close();\n        } catch (IOException e) { }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,IOContext).mjava","sourceNew":null,"sourceOld":"  public CompoundFileReader(Directory dir, String name, IOContext context) throws IOException {\n    assert !(dir instanceof CompoundFileReader) : \"compound file inside of compound file: \" + name;\n    directory = dir;\n    fileName = name;\n    \n    boolean success = false;\n    \n    try {\n      stream = dir.openInput(name, context);\n      \n      // read the first VInt. If it is negative, it's the version number\n      // otherwise it's the count (pre-3.1 indexes)\n      int firstInt = stream.readVInt();\n      \n      final int count;\n      final boolean stripSegmentName;\n      if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n        if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n          throw new CorruptIndexException(\"Incompatible format version: \"\n              + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n        }\n        // It's a post-3.1 index, read the count.\n        count = stream.readVInt();\n        stripSegmentName = false;\n      } else {\n        count = firstInt;\n        stripSegmentName = true;\n      }\n      \n      // read the directory and init files\n      FileEntry entry = null;\n      for (int i=0; i<count; i++) {\n        long offset = stream.readLong();\n        String id = stream.readString();\n        \n        if (stripSegmentName) {\n          // Fix the id to not include the segment names. This is relevant for\n          // pre-3.1 indexes.\n          id = IndexFileNames.stripSegmentName(id);\n        }\n        \n        if (entry != null) {\n          // set length of the previous entry\n          entry.length = offset - entry.offset;\n        }\n        \n        entry = new FileEntry();\n        entry.offset = offset;\n        entries.put(id, entry);\n      }\n      \n      // set the length of the final entry\n      if (entry != null) {\n        entry.length = stream.length() - entry.offset;\n      }\n      \n      success = true;\n      \n    } finally {\n      if (!success && (stream != null)) {\n        try {\n          stream.close();\n        } catch (IOException e) { }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}