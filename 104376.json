{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","sourceNew":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (endOff - startOff != CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","sourceOld":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (endOff - startOff != CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1497255a2ce11dc672a80859c79fabe7efa51d2e","date":1369725708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","sourceNew":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (matchVersion.onOrAfter(Version.LUCENE_44) ||\n          endOff - startOff != CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","sourceOld":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (endOff - startOff != CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","bugFix":["ad9b045ba726c4e5cd4a99bac259518a632bc901"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","sourceNew":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (matchVersion.onOrAfter(Version.LUCENE_4_4) ||\n          endOff - startOff != CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","sourceOld":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (matchVersion.onOrAfter(Version.LUCENE_44) ||\n          endOff - startOff != CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","sourceNew":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      this.startOffset = CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      this.endOffset = CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n    }\n\n","sourceOld":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (matchVersion.onOrAfter(Version.LUCENE_4_4) ||\n          endOff - startOff != CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1497255a2ce11dc672a80859c79fabe7efa51d2e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["1497255a2ce11dc672a80859c79fabe7efa51d2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"1497255a2ce11dc672a80859c79fabe7efa51d2e":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1497255a2ce11dc672a80859c79fabe7efa51d2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}