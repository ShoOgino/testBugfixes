{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Violation#collectViolatingReplicas(Ctx,Row).mjava","commits":[{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Violation#collectViolatingReplicas(Ctx,Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","sourceNew":"  static void collectViolatingReplicas(Ctx ctx, Row row) {\n    if (ctx.clause.tag.varType.meta.isNodeSpecificVal()) {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.collection.isPass(replica.getCollection()) && ctx.clause.getShard().isPass(replica.getShard())) {\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica)\n              .withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        }\n      });\n    } else {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n        if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n        if(!ctx.currentViolation.getClause().matchShard(replica.getShard(), ctx.currentViolation.shard)) return;\n        if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n          return;\n        ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n      });\n\n    }\n\n\n  }\n\n","sourceOld":"  private static void collectViolatingReplicas(ViolationCtx ctx, Row row) {\n    if (ctx.clause.tag.varType.meta.isNodeSpecificVal()) {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.collection.isPass(replica.getCollection()) && ctx.clause.getShard().isPass(replica.getShard())) {\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica)\n              .withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        }\n      });\n    } else {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n        if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n        if(!ctx.currentViolation.getClause().matchShard(replica.getShard(), ctx.currentViolation.shard)) return;\n        if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n          return;\n        ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n      });\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Violation#collectViolatingReplicas(Ctx,Row).mjava","sourceNew":null,"sourceOld":"  static void collectViolatingReplicas(Ctx ctx, Row row) {\n    if (ctx.clause.tag.varType.meta.isNodeSpecificVal()) {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.collection.isPass(replica.getCollection()) && ctx.clause.getShard().isPass(replica.getShard())) {\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica)\n              .withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        }\n      });\n    } else {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n        if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n        if(!ctx.currentViolation.getClause().matchShard(replica.getShard(), ctx.currentViolation.shard)) return;\n        if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n          return;\n        ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n      });\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"427edb17549d4bb82462a16eec4ee0533d12d5b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee5183ac042828ef74f90f0874eaba7daeb409bd"]},"commit2Childs":{"427edb17549d4bb82462a16eec4ee0533d12d5b7":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}