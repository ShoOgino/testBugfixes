{"path":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"/dev/null","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      directories.add(new File(resources.nextElement().getPath()));\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":null,"sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      directories.add(new File(resources.nextElement().getPath()));\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      directories.add(new File(resources.nextElement().getPath()));\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      directories.add(new File(resources.nextElement().getPath()));\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"/dev/null","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      directories.add(new File(resources.nextElement().getPath()));\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add2cfbd155a2ffe6ab59916d5df9a359071e676","date":1270226944,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      directories.add(new File(resources.nextElement().toURI()));\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      directories.add(new File(resources.nextElement().getPath()));\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37bfbc0550327eab60562b953a566a9bf6214380","date":1283794490,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      directories.add(new File(resources.nextElement().toURI()));\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n            // FIXME: Find the static/sysprop/file leakage here.\n            // If we call Class.forName(ReplicationHandler) here, its test will later fail\n            // when run inside the same JVM (-Dtests.threadspercpu=0), so something is wrong.\n            if (file.contains(\"ReplicationHandler\"))\n              continue;\n            \n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      directories.add(new File(resources.nextElement().toURI()));\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36a5c49d9ce09dbf7596ad148562dcd104649f0a","date":1287415606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests\n      if (!f.toString().contains(\"build\" + File.separator + \"solr\"))\n        continue;\n      // extra security :-)\n      if (f.toString().contains(\"tests\"))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      directories.add(new File(resources.nextElement().toURI()));\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n            // FIXME: Find the static/sysprop/file leakage here.\n            // If we call Class.forName(ReplicationHandler) here, its test will later fail\n            // when run inside the same JVM (-Dtests.threadspercpu=0), so something is wrong.\n            if (file.contains(\"ReplicationHandler\"))\n              continue;\n            \n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64bb4f7f339c29ca39755140d51a497ee2120f61","date":1287417341,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests (must be in dir \"/build/solr/org\"\n      if (!f.toString().contains(FOLDER))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests\n      if (!f.toString().contains(\"build\" + File.separator + \"solr\"))\n        continue;\n      // extra security :-)\n      if (f.toString().contains(\"tests\"))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057119d0666f2a2674ad4bba71baca71cb200801","date":1287510147,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":null,"sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests (must be in dir \"/build/solr/org\"\n      if (!f.toString().contains(FOLDER))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9077e792550279352dfaab22b394064dc6c62fc","date":1287510928,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"/dev/null","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests (must be in dir \"/build/solr/org\"\n      if (!f.toString().contains(FOLDER))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests (must be in dir \"/build/solr/org\"\n      if (!f.toString().contains(FOLDER))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      directories.add(new File(resources.nextElement().toURI()));\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n            // FIXME: Find the static/sysprop/file leakage here.\n            // If we call Class.forName(ReplicationHandler) here, its test will later fail\n            // when run inside the same JVM (-Dtests.threadspercpu=0), so something is wrong.\n            if (file.contains(\"ReplicationHandler\"))\n              continue;\n            \n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59be7bdd5d4dd3fd914e6c540dc98ea79cafa3b9","date":1287941310,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests (must be in dir \"/build/solr/org\"\n      if (!f.toString().contains(FOLDER))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests (must be in dir \"/build/solr/org\"\n      if (!f.toString().contains(FOLDER))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests (must be in dir \"/build/solr/org\"\n      if (!f.toString().contains(FOLDER))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests (must be in dir \"/build/solr/org\"\n      if (!f.toString().contains(FOLDER))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests (must be in dir \"/build/solr/org\"\n      if (!f.toString().contains(FOLDER))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      directories.add(new File(resources.nextElement().toURI()));\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6da674254994fc11839b3f6ad511ef8871a94f7","date":1293591321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests (must be in dir \"/build/solr/org\"\n      if (!f.toString().contains(FOLDER))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests (must be in dir \"/build/solr/org\"\n      if (!f.toString().contains(FOLDER))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      // only iterate classes from the core, not the tests (must be in dir \"/build/solr/org\"\n      if (!f.toString().contains(FOLDER))\n        continue;\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             classes.add(Class.forName(pckgname + '.' + file.substring(0, file.length() - 6)));\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6da674254994fc11839b3f6ad511ef8871a94f7":["59be7bdd5d4dd3fd914e6c540dc98ea79cafa3b9"],"add2cfbd155a2ffe6ab59916d5df9a359071e676":["1da8d55113b689b06716246649de6f62430f15c0"],"70ad682703b8585f5d0a637efec044d57ec05efb":["b12d3e81e0f95a4527b5703953c503f71120ffcc","b6da674254994fc11839b3f6ad511ef8871a94f7"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["b6da674254994fc11839b3f6ad511ef8871a94f7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"37bfbc0550327eab60562b953a566a9bf6214380":["add2cfbd155a2ffe6ab59916d5df9a359071e676"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","59be7bdd5d4dd3fd914e6c540dc98ea79cafa3b9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["add2cfbd155a2ffe6ab59916d5df9a359071e676","59be7bdd5d4dd3fd914e6c540dc98ea79cafa3b9"],"64bb4f7f339c29ca39755140d51a497ee2120f61":["36a5c49d9ce09dbf7596ad148562dcd104649f0a"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b6da674254994fc11839b3f6ad511ef8871a94f7"],"36a5c49d9ce09dbf7596ad148562dcd104649f0a":["37bfbc0550327eab60562b953a566a9bf6214380"],"a9077e792550279352dfaab22b394064dc6c62fc":["057119d0666f2a2674ad4bba71baca71cb200801"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b6da674254994fc11839b3f6ad511ef8871a94f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"057119d0666f2a2674ad4bba71baca71cb200801":["64bb4f7f339c29ca39755140d51a497ee2120f61"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b6da674254994fc11839b3f6ad511ef8871a94f7"],"59be7bdd5d4dd3fd914e6c540dc98ea79cafa3b9":["a9077e792550279352dfaab22b394064dc6c62fc"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["37bfbc0550327eab60562b953a566a9bf6214380","a9077e792550279352dfaab22b394064dc6c62fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"b6da674254994fc11839b3f6ad511ef8871a94f7":["70ad682703b8585f5d0a637efec044d57ec05efb","c26f00b574427b55127e869b935845554afde1fa","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"add2cfbd155a2ffe6ab59916d5df9a359071e676":["37bfbc0550327eab60562b953a566a9bf6214380","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"37bfbc0550327eab60562b953a566a9bf6214380":["36a5c49d9ce09dbf7596ad148562dcd104649f0a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"64bb4f7f339c29ca39755140d51a497ee2120f61":["057119d0666f2a2674ad4bba71baca71cb200801"],"1da8d55113b689b06716246649de6f62430f15c0":["add2cfbd155a2ffe6ab59916d5df9a359071e676"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"36a5c49d9ce09dbf7596ad148562dcd104649f0a":["64bb4f7f339c29ca39755140d51a497ee2120f61"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a9077e792550279352dfaab22b394064dc6c62fc":["59be7bdd5d4dd3fd914e6c540dc98ea79cafa3b9","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"057119d0666f2a2674ad4bba71baca71cb200801":["a9077e792550279352dfaab22b394064dc6c62fc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"59be7bdd5d4dd3fd914e6c540dc98ea79cafa3b9":["b6da674254994fc11839b3f6ad511ef8871a94f7","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["b12d3e81e0f95a4527b5703953c503f71120ffcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}