{"path":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","commits":[{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"    public void clearIndex () throws IOException {\n        IndexReader.unlock(spellindex);\n        IndexWriter writer=new IndexWriter(spellindex, null, true);\n        writer.close();\n    }\n\n","sourceOld":"    public void clearIndex () throws IOException {\n        IndexReader.unlock(spellindex);\n        IndexWriter writer=new IndexWriter(spellindex, null, true);\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515","date":1153458899,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  public void clearIndex() throws IOException {\n    IndexReader.unlock(spellindex);\n    IndexWriter writer = new IndexWriter(spellindex, null, true);\n    writer.close();\n  }\n\n","sourceOld":"    public void clearIndex () throws IOException {\n        IndexReader.unlock(spellindex);\n        IndexWriter writer=new IndexWriter(spellindex, null, true);\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c292217d2a7f861d59267155332967568e371fc1","date":1161990036,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  public void clearIndex() throws IOException {\n    IndexReader.unlock(spellIndex);\n    IndexWriter writer = new IndexWriter(spellIndex, null, true);\n    writer.close();\n  }\n\n","sourceOld":"  public void clearIndex() throws IOException {\n    IndexReader.unlock(spellindex);\n    IndexWriter writer = new IndexWriter(spellindex, null, true);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["ede03d537cd6c85c921eb49cdd7fbc49daa602d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96308b901685e8ec12a3856f788a7d9d98c22e50","date":1180177598,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   */\n  public void clearIndex() throws IOException {\n    IndexReader.unlock(spellIndex);\n    IndexWriter writer = new IndexWriter(spellIndex, null, true);\n    writer.close();\n  }\n\n","sourceOld":"  public void clearIndex() throws IOException {\n    IndexReader.unlock(spellIndex);\n    IndexWriter writer = new IndexWriter(spellIndex, null, true);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ede03d537cd6c85c921eb49cdd7fbc49daa602d0","date":1200589243,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   */\n  public void clearIndex() throws IOException {\n    if (IndexReader.isLocked(spellIndex)){\n      IndexReader.unlock(spellIndex);\n    }\n    IndexWriter writer = new IndexWriter(spellIndex, null, true);\n    writer.close();\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   */\n  public void clearIndex() throws IOException {\n    IndexReader.unlock(spellIndex);\n    IndexWriter writer = new IndexWriter(spellIndex, null, true);\n    writer.close();\n  }\n\n","bugFix":["c292217d2a7f861d59267155332967568e371fc1"],"bugIntro":["bc4f7f30315d5744c6daa02827f50fc21065ff0b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc4f7f30315d5744c6daa02827f50fc21065ff0b","date":1211437277,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   */\n  public void clearIndex() throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, null, true);\n    writer.close();\n    \n    //close the old searcher\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   */\n  public void clearIndex() throws IOException {\n    if (IndexReader.isLocked(spellIndex)){\n      IndexReader.unlock(spellIndex);\n    }\n    IndexWriter writer = new IndexWriter(spellIndex, null, true);\n    writer.close();\n  }\n\n","bugFix":["ede03d537cd6c85c921eb49cdd7fbc49daa602d0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   */\n  public void clearIndex() throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, null, true);\n    writer.close();\n    \n    //close the old searcher\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   */\n  public void clearIndex() throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, null, true);\n    writer.close();\n    \n    //close the old searcher\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   */\n  public void clearIndex() throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, null, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.close();\n    \n    //close the old searcher\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   */\n  public void clearIndex() throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, null, true);\n    writer.close();\n    \n    //close the old searcher\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edfb471a48a4bd226eefc6d6fd96195d9ce1db73","date":1260015437,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, null, true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   */\n  public void clearIndex() throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, null, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.close();\n    \n    //close the old searcher\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT).setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, null, true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, null, true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT).setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          new WhitespaceAnalyzer(Version.LUCENE_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, null, true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          new WhitespaceAnalyzer(Version.LUCENE_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          new WhitespaceAnalyzer(Version.LUCENE_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"bc4f7f30315d5744c6daa02827f50fc21065ff0b":["ede03d537cd6c85c921eb49cdd7fbc49daa602d0"],"96308b901685e8ec12a3856f788a7d9d98c22e50":["c292217d2a7f861d59267155332967568e371fc1"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["87c966e9308847938a7c905c2e46a56d8df788b8"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4256bc1b3c94786287ccdfc751230374521843cf":["bc4f7f30315d5744c6daa02827f50fc21065ff0b"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"c292217d2a7f861d59267155332967568e371fc1":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ede03d537cd6c85c921eb49cdd7fbc49daa602d0":["96308b901685e8ec12a3856f788a7d9d98c22e50"],"87c966e9308847938a7c905c2e46a56d8df788b8":["4256bc1b3c94786287ccdfc751230374521843cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["c292217d2a7f861d59267155332967568e371fc1"],"bc4f7f30315d5744c6daa02827f50fc21065ff0b":["4256bc1b3c94786287ccdfc751230374521843cf"],"96308b901685e8ec12a3856f788a7d9d98c22e50":["ede03d537cd6c85c921eb49cdd7fbc49daa602d0"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4256bc1b3c94786287ccdfc751230374521843cf":["87c966e9308847938a7c905c2e46a56d8df788b8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c292217d2a7f861d59267155332967568e371fc1":["96308b901685e8ec12a3856f788a7d9d98c22e50"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"ede03d537cd6c85c921eb49cdd7fbc49daa602d0":["bc4f7f30315d5744c6daa02827f50fc21065ff0b"],"87c966e9308847938a7c905c2e46a56d8df788b8":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}