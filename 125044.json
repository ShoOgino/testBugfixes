{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#clearLog(SolrCore,PluginInfo).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#clearLog(SolrCore,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#clearLog(PluginInfo).mjava","sourceNew":"  /**\n   * Clears the logs on the file system. Only call before init.\n   * \n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    File tlogDir = new File(getTlogDir(core, ulogPluginInfo));\n    if (tlogDir.exists()) {\n      String[] files = getLogList(tlogDir);\n      for (String file : files) {\n        File f = new File(tlogDir, file);\n        boolean s = f.delete();\n        if (!s) {\n          log.error(\"Could not remove tlog file:\" + f);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // not thread safe - for startup\n  private void clearLog(PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    File tlogDir = UpdateLog.getTlogDir(core, ulogPluginInfo);\n    log.info(\"Clearing tlog files, tlogDir=\" + tlogDir);\n    if (tlogDir.exists()) {\n      String[] files = UpdateLog.getLogList(tlogDir);\n      for (String file : files) {\n        File f = new File(tlogDir, file);\n        boolean s = f.delete();\n        if (!s) {\n          log.error(\"Could not remove tlog file:\" + f.getAbsolutePath());\n          //throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not remove tlog file:\" + f.getAbsolutePath());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#clearLog(SolrCore,PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Clears the logs on the file system. Only call before init.\n   * \n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    File tlogDir = new File(getTlogDir(core, ulogPluginInfo));\n    if (tlogDir.exists()) {\n      String[] files = getLogList(tlogDir);\n      for (String file : files) {\n        File f = new File(tlogDir, file);\n        boolean s = f.delete();\n        if (!s) {\n          log.error(\"Could not remove tlog file:\" + f);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#clearLog(SolrCore,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#clearLog(SolrCore,PluginInfo).mjava","sourceNew":"  /**\n   * Clears the logs on the file system. Only call before init.\n   * \n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    File tlogDir = new File(getTlogDir(core, ulogPluginInfo));\n    if (tlogDir.exists()) {\n      String[] files = getLogList(tlogDir);\n      for (String file : files) {\n        File f = new File(tlogDir, file);\n        try {\n          Files.delete(f.toPath());\n        } catch (IOException cause) {\n          // NOTE: still throws SecurityException as before.\n          log.error(\"Could not remove tlog file:\" + f, cause);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Clears the logs on the file system. Only call before init.\n   * \n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    File tlogDir = new File(getTlogDir(core, ulogPluginInfo));\n    if (tlogDir.exists()) {\n      String[] files = getLogList(tlogDir);\n      for (String file : files) {\n        File f = new File(tlogDir, file);\n        boolean s = f.delete();\n        if (!s) {\n          log.error(\"Could not remove tlog file:\" + f);\n        }\n      }\n    }\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#clearLog(SolrCore,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#clearLog(SolrCore,PluginInfo).mjava","sourceNew":"  /**\n   * Clears the logs on the file system. Only call before init.\n   *\n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    File tlogDir = new File(getTlogDir(core, ulogPluginInfo));\n    if (tlogDir.exists()) {\n      String[] files = getLogList(tlogDir);\n      for (String file : files) {\n        File f = new File(tlogDir, file);\n        try {\n          Files.delete(f.toPath());\n        } catch (IOException cause) {\n          // NOTE: still throws SecurityException as before.\n          log.error(\"Could not remove tlog file:\" + f, cause);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Clears the logs on the file system. Only call before init.\n   * \n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    File tlogDir = new File(getTlogDir(core, ulogPluginInfo));\n    if (tlogDir.exists()) {\n      String[] files = getLogList(tlogDir);\n      for (String file : files) {\n        File f = new File(tlogDir, file);\n        try {\n          Files.delete(f.toPath());\n        } catch (IOException cause) {\n          // NOTE: still throws SecurityException as before.\n          log.error(\"Could not remove tlog file:\" + f, cause);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#clearLog(SolrCore,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#clearLog(SolrCore,PluginInfo).mjava","sourceNew":"  /**\n   * Clears the logs on the file system. Only call before init.\n   *\n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    File tlogDir = new File(getTlogDir(core, ulogPluginInfo));\n    if (tlogDir.exists()) {\n      String[] files = getLogList(tlogDir);\n      for (String file : files) {\n        File f = new File(tlogDir, file);\n        try {\n          Files.delete(f.toPath());\n        } catch (IOException cause) {\n          // NOTE: still throws SecurityException as before.\n          log.error(\"Could not remove tlog file:{}\", f, cause);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Clears the logs on the file system. Only call before init.\n   *\n   * @param core the SolrCore\n   * @param ulogPluginInfo the init info for the UpdateHandler\n   */\n  public void clearLog(SolrCore core, PluginInfo ulogPluginInfo) {\n    if (ulogPluginInfo == null) return;\n    File tlogDir = new File(getTlogDir(core, ulogPluginInfo));\n    if (tlogDir.exists()) {\n      String[] files = getLogList(tlogDir);\n      for (String file : files) {\n        File f = new File(tlogDir, file);\n        try {\n          Files.delete(f.toPath());\n        } catch (IOException cause) {\n          // NOTE: still throws SecurityException as before.\n          log.error(\"Could not remove tlog file:\" + f, cause);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"740d649f013f07efbeb73ca854f106c60166e7c0":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["cbc3688252d4a8045d69a164236b2cf87b721f17","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["740d649f013f07efbeb73ca854f106c60166e7c0"],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}