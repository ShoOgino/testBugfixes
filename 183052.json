{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeDocCollectionWatcher(String,DocCollectionWatcher).mjava","commits":[{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeDocCollectionWatcher(String,DocCollectionWatcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove a watcher from a collection's watch list.\n   * <p>\n   * This allows Zookeeper watches to be removed if there is no interest in the\n   * collection.\n   * </p>\n   *\n   * @see #registerDocCollectionWatcher\n   * @param collection the collection\n   * @param watcher    the watcher\n   */\n  public void removeDocCollectionWatcher(String collection, DocCollectionWatcher watcher) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null)\n        return null;\n      v.stateWatchers.remove(watcher);\n      if (v.canBeRemoved()) {\n        watchedCollectionStates.remove(collection);\n        lazyCollectionStates.put(collection, new LazyCollectionRef(collection));\n        reconstructState.set(true);\n        return null;\n      }\n      return v;\n    });\n    if (reconstructState.get()) {\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeDocCollectionWatcher(String,DocCollectionWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeDocCollectionWatcher(String,DocCollectionWatcher).mjava","sourceNew":"  /**\n   * Remove a watcher from a collection's watch list.\n   * <p>\n   * This allows Zookeeper watches to be removed if there is no interest in the\n   * collection.\n   * </p>\n   *\n   * @param collection the collection\n   * @param watcher    the watcher\n   * @see #registerDocCollectionWatcher\n   */\n  public void removeDocCollectionWatcher(String collection, DocCollectionWatcher watcher) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null)\n        return null;\n      v.stateWatchers.remove(watcher);\n      if (v.canBeRemoved()) {\n        watchedCollectionStates.remove(collection);\n        lazyCollectionStates.put(collection, new LazyCollectionRef(collection));\n        reconstructState.set(true);\n        return null;\n      }\n      return v;\n    });\n    if (reconstructState.get()) {\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove a watcher from a collection's watch list.\n   * <p>\n   * This allows Zookeeper watches to be removed if there is no interest in the\n   * collection.\n   * </p>\n   *\n   * @see #registerDocCollectionWatcher\n   * @param collection the collection\n   * @param watcher    the watcher\n   */\n  public void removeDocCollectionWatcher(String collection, DocCollectionWatcher watcher) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null)\n        return null;\n      v.stateWatchers.remove(watcher);\n      if (v.canBeRemoved()) {\n        watchedCollectionStates.remove(collection);\n        lazyCollectionStates.put(collection, new LazyCollectionRef(collection));\n        reconstructState.set(true);\n        return null;\n      }\n      return v;\n    });\n    if (reconstructState.get()) {\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["7b366e7dd3172289251a86be96031af4002cd19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b366e7dd3172289251a86be96031af4002cd19c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b366e7dd3172289251a86be96031af4002cd19c"],"7b366e7dd3172289251a86be96031af4002cd19c":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}