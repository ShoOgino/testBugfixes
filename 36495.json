{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","commits":[{"id":"6e36353d7461af8d2329a78a71457cf8e3c1e88f","date":1411572107,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","pathOld":"/dev/null","sourceNew":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().updateClusterState(true);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = new HashMap<String,DocCollection>();\n      for (String coll : clusterState.getCollections())\n        map.put(coll, clusterState.getCollection(coll));\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98287baa2c8d136e801f366a73e27a23285b7b98","date":1427241813,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","sourceNew":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().updateClusterState(true);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = new HashMap<>();\n      for (String coll : clusterState.getCollections())\n        map.put(coll, clusterState.getCollection(coll));\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","sourceOld":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().updateClusterState(true);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = new HashMap<String,DocCollection>();\n      for (String coll : clusterState.getCollections())\n        map.put(coll, clusterState.getCollection(coll));\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","sourceNew":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().updateClusterState(true);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = new HashMap<>();\n      for (String coll : clusterState.getCollections())\n        map.put(coll, clusterState.getCollection(coll));\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","sourceOld":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().updateClusterState(true);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = new HashMap<String,DocCollection>();\n      for (String coll : clusterState.getCollections())\n        map.put(coll, clusterState.getCollection(coll));\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","sourceNew":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().updateClusterState();\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = new HashMap<>();\n      for (String coll : clusterState.getCollections())\n        map.put(coll, clusterState.getCollection(coll));\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","sourceOld":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().updateClusterState(true);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = new HashMap<>();\n      for (String coll : clusterState.getCollections())\n        map.put(coll, clusterState.getCollection(coll));\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","sourceNew":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = new HashMap<>();\n      for (String coll : clusterState.getCollections())\n        map.put(coll, clusterState.getCollection(coll));\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","sourceOld":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().updateClusterState();\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = new HashMap<>();\n      for (String coll : clusterState.getCollections())\n        map.put(coll, clusterState.getCollection(coll));\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","sourceNew":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = clusterState.getCollectionsMap();\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","sourceOld":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = new HashMap<>();\n      for (String coll : clusterState.getCollections())\n        map.put(coll, clusterState.getCollection(coll));\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","sourceNew":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = clusterState.getCollectionsMap();\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","sourceOld":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = new HashMap<>();\n      for (String coll : clusterState.getCollections())\n        map.put(coll, clusterState.getCollection(coll));\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","sourceNew":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = clusterState.getCollectionsMap();\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","sourceOld":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = new HashMap<>();\n      for (String coll : clusterState.getCollections())\n        map.put(coll, clusterState.getCollection(coll));\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#printClusterStateInfo(String).mjava","sourceNew":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = clusterState.getCollectionsMap();\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","sourceOld":"  protected String printClusterStateInfo(String collection) throws Exception {\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    String cs = null;\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (collection != null) {\n      cs = clusterState.getCollection(collection).toString();\n    } else {\n      Map<String,DocCollection> map = new HashMap<>();\n      for (String coll : clusterState.getCollections())\n        map.put(coll, clusterState.getCollection(coll));\n      CharArr out = new CharArr();\n      new JSONWriter(out, 2).write(map);\n      cs = out.toString();\n    }\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6e36353d7461af8d2329a78a71457cf8e3c1e88f","98287baa2c8d136e801f366a73e27a23285b7b98"],"73450c0955930295d34703e7ddbfc6973b7a121a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","73450c0955930295d34703e7ddbfc6973b7a121a"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["98287baa2c8d136e801f366a73e27a23285b7b98"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98287baa2c8d136e801f366a73e27a23285b7b98":["6e36353d7461af8d2329a78a71457cf8e3c1e88f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"6e36353d7461af8d2329a78a71457cf8e3c1e88f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73450c0955930295d34703e7ddbfc6973b7a121a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":[],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e36353d7461af8d2329a78a71457cf8e3c1e88f"],"98287baa2c8d136e801f366a73e27a23285b7b98":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","102da6baafc0f534a59f31729343dbab9d3b9e9a"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"6e36353d7461af8d2329a78a71457cf8e3c1e88f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","98287baa2c8d136e801f366a73e27a23285b7b98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}