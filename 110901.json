{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelListStream#openStreams().mjava","commits":[{"id":"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31","date":1540236013,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelListStream#openStreams().mjava","pathOld":"/dev/null","sourceNew":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"ParallelListStream\"));\n    try {\n      List<Future<StreamIndex>> futures = new ArrayList();\n      int i=0;\n      for (TupleStream tupleStream : streams) {\n        StreamOpener so = new StreamOpener(new StreamIndex(tupleStream, i++));\n        Future<StreamIndex> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<StreamIndex> f : futures) {\n          StreamIndex streamIndex = f.get();\n          this.streams[streamIndex.getIndex()] = streamIndex.getTupleStream();\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelListStream#openStreams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelListStream#openStreams().mjava","sourceNew":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"ParallelListStream\"));\n    try {\n      List<Future<StreamIndex>> futures = new ArrayList();\n      int i=0;\n      for (TupleStream tupleStream : streams) {\n        StreamOpener so = new StreamOpener(new StreamIndex(tupleStream, i++));\n        Future<StreamIndex> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<StreamIndex> f : futures) {\n          StreamIndex streamIndex = f.get();\n          this.streams[streamIndex.getIndex()] = streamIndex.getTupleStream();\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","sourceOld":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"ParallelListStream\"));\n    try {\n      List<Future<StreamIndex>> futures = new ArrayList();\n      int i=0;\n      for (TupleStream tupleStream : streams) {\n        StreamOpener so = new StreamOpener(new StreamIndex(tupleStream, i++));\n        Future<StreamIndex> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<StreamIndex> f : futures) {\n          StreamIndex streamIndex = f.get();\n          this.streams[streamIndex.getIndex()] = streamIndex.getTupleStream();\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelListStream#openStreams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelListStream#openStreams().mjava","sourceNew":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"ParallelListStream\"));\n    try {\n      List<Future<StreamIndex>> futures = new ArrayList<>();\n      int i=0;\n      for (TupleStream tupleStream : streams) {\n        StreamOpener so = new StreamOpener(new StreamIndex(tupleStream, i++));\n        Future<StreamIndex> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<StreamIndex> f : futures) {\n          StreamIndex streamIndex = f.get();\n          this.streams[streamIndex.getIndex()] = streamIndex.getTupleStream();\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","sourceOld":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"ParallelListStream\"));\n    try {\n      List<Future<StreamIndex>> futures = new ArrayList();\n      int i=0;\n      for (TupleStream tupleStream : streams) {\n        StreamOpener so = new StreamOpener(new StreamIndex(tupleStream, i++));\n        Future<StreamIndex> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<StreamIndex> f : futures) {\n          StreamIndex streamIndex = f.get();\n          this.streams[streamIndex.getIndex()] = streamIndex.getTupleStream();\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["16eed9af98b54bb6cee521e4828ab5c2b9cb0d31"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16eed9af98b54bb6cee521e4828ab5c2b9cb0d31"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}