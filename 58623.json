{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","commits":[{"id":"1e6d0f38037e0125421d8e737992d511b5567b26","date":1329215236,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    \n    savedUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n      public void uncaughtException(Thread t, Throwable e) {\n        // org.junit.internal.AssumptionViolatedException in older releases\n        // org.junit.Assume.AssumptionViolatedException in recent ones\n        if (e.getClass().getName().endsWith(\"AssumptionViolatedException\")) {\n          String where = \"<unknown>\";\n          for (StackTraceElement elem : e.getStackTrace()) {\n            if ( ! elem.getClassName().startsWith(\"org.junit\")) {\n              where = elem.toString();\n              break;\n            }\n          }\n          System.err.print(\"NOTE: Assume failed at \" + where + \" (ignored):\");\n          if (VERBOSE) {\n            System.err.println();\n            e.printStackTrace(System.err);\n          } else {\n            System.err.print(\" \");\n            System.err.println(e.getMessage());\n          }\n        } else {\n          testsFailed = true;\n          uncaughtExceptions.add(new UncaughtExceptionEntry(t, e));\n          if (savedUncaughtExceptionHandler != null)\n            savedUncaughtExceptionHandler.uncaughtException(t, e);\n        }\n      }\n    });\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94485df2fde30eb614716fc9ef3c5ed5ce0ed642","date":1330416282,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","sourceNew":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    \n    Thread.currentThread().setName(\"LTC-main#seed=\" + \n        new ThreeLongs(staticSeed, seed, LuceneTestCaseRunner.runnerSeed));\n\n    savedUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n      public void uncaughtException(Thread t, Throwable e) {\n        // org.junit.internal.AssumptionViolatedException in older releases\n        // org.junit.Assume.AssumptionViolatedException in recent ones\n        if (e.getClass().getName().endsWith(\"AssumptionViolatedException\")) {\n          String where = \"<unknown>\";\n          for (StackTraceElement elem : e.getStackTrace()) {\n            if ( ! elem.getClassName().startsWith(\"org.junit\")) {\n              where = elem.toString();\n              break;\n            }\n          }\n          System.err.print(\"NOTE: Assume failed at \" + where + \" (ignored):\");\n          if (VERBOSE) {\n            System.err.println();\n            e.printStackTrace(System.err);\n          } else {\n            System.err.print(\" \");\n            System.err.println(e.getMessage());\n          }\n        } else {\n          testsFailed = true;\n          uncaughtExceptions.add(new UncaughtExceptionEntry(t, e));\n          if (savedUncaughtExceptionHandler != null)\n            savedUncaughtExceptionHandler.uncaughtException(t, e);\n        }\n      }\n    });\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    \n    savedUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n      public void uncaughtException(Thread t, Throwable e) {\n        // org.junit.internal.AssumptionViolatedException in older releases\n        // org.junit.Assume.AssumptionViolatedException in recent ones\n        if (e.getClass().getName().endsWith(\"AssumptionViolatedException\")) {\n          String where = \"<unknown>\";\n          for (StackTraceElement elem : e.getStackTrace()) {\n            if ( ! elem.getClassName().startsWith(\"org.junit\")) {\n              where = elem.toString();\n              break;\n            }\n          }\n          System.err.print(\"NOTE: Assume failed at \" + where + \" (ignored):\");\n          if (VERBOSE) {\n            System.err.println();\n            e.printStackTrace(System.err);\n          } else {\n            System.err.print(\" \");\n            System.err.println(e.getMessage());\n          }\n        } else {\n          testsFailed = true;\n          uncaughtExceptions.add(new UncaughtExceptionEntry(t, e));\n          if (savedUncaughtExceptionHandler != null)\n            savedUncaughtExceptionHandler.uncaughtException(t, e);\n        }\n      }\n    });\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","sourceNew":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    \n    Thread.currentThread().setName(\"LTC-main#seed=\" + \n        new ThreeLongs(staticSeed, seed, LuceneTestCaseRunner.runnerSeed));\n\n    savedUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n      public void uncaughtException(Thread t, Throwable e) {\n        // org.junit.internal.AssumptionViolatedException in older releases\n        // org.junit.Assume.AssumptionViolatedException in recent ones\n        if (e.getClass().getName().endsWith(\"AssumptionViolatedException\")) {\n          String where = \"<unknown>\";\n          for (StackTraceElement elem : e.getStackTrace()) {\n            if ( ! elem.getClassName().startsWith(\"org.junit\")) {\n              where = elem.toString();\n              break;\n            }\n          }\n          System.err.print(\"NOTE: Assume failed at \" + where + \" (ignored):\");\n          if (VERBOSE) {\n            System.err.println();\n            e.printStackTrace(System.err);\n          } else {\n            System.err.print(\" \");\n            System.err.println(e.getMessage());\n          }\n        } else {\n          testsFailed = true;\n          uncaughtExceptions.add(new UncaughtExceptionEntry(t, e));\n          if (savedUncaughtExceptionHandler != null)\n            savedUncaughtExceptionHandler.uncaughtException(t, e);\n        }\n      }\n    });\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    \n    savedUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n      public void uncaughtException(Thread t, Throwable e) {\n        // org.junit.internal.AssumptionViolatedException in older releases\n        // org.junit.Assume.AssumptionViolatedException in recent ones\n        if (e.getClass().getName().endsWith(\"AssumptionViolatedException\")) {\n          String where = \"<unknown>\";\n          for (StackTraceElement elem : e.getStackTrace()) {\n            if ( ! elem.getClassName().startsWith(\"org.junit\")) {\n              where = elem.toString();\n              break;\n            }\n          }\n          System.err.print(\"NOTE: Assume failed at \" + where + \" (ignored):\");\n          if (VERBOSE) {\n            System.err.println();\n            e.printStackTrace(System.err);\n          } else {\n            System.err.print(\" \");\n            System.err.println(e.getMessage());\n          }\n        } else {\n          testsFailed = true;\n          uncaughtExceptions.add(new UncaughtExceptionEntry(t, e));\n          if (savedUncaughtExceptionHandler != null)\n            savedUncaughtExceptionHandler.uncaughtException(t, e);\n        }\n      }\n    });\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd","date":1331279405,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","sourceNew":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    \n    Thread.currentThread().setName(\"LTC-main#seed=\" + \n        new ThreeLongs(staticSeed, seed, LuceneTestCaseRunner.runnerSeed));\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    \n    Thread.currentThread().setName(\"LTC-main#seed=\" + \n        new ThreeLongs(staticSeed, seed, LuceneTestCaseRunner.runnerSeed));\n\n    savedUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n      public void uncaughtException(Thread t, Throwable e) {\n        // org.junit.internal.AssumptionViolatedException in older releases\n        // org.junit.Assume.AssumptionViolatedException in recent ones\n        if (e.getClass().getName().endsWith(\"AssumptionViolatedException\")) {\n          String where = \"<unknown>\";\n          for (StackTraceElement elem : e.getStackTrace()) {\n            if ( ! elem.getClassName().startsWith(\"org.junit\")) {\n              where = elem.toString();\n              break;\n            }\n          }\n          System.err.print(\"NOTE: Assume failed at \" + where + \" (ignored):\");\n          if (VERBOSE) {\n            System.err.println();\n            e.printStackTrace(System.err);\n          } else {\n            System.err.print(\" \");\n            System.err.println(e.getMessage());\n          }\n        } else {\n          testsFailed = true;\n          uncaughtExceptions.add(new UncaughtExceptionEntry(t, e));\n          if (savedUncaughtExceptionHandler != null)\n            savedUncaughtExceptionHandler.uncaughtException(t, e);\n        }\n      }\n    });\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","sourceNew":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    \n    Thread.currentThread().setName(\"LTC-main#seed=\" + \n        new ThreeLongs(staticSeed, seed, LuceneTestCaseRunner.runnerSeed));\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    \n    Thread.currentThread().setName(\"LTC-main#seed=\" + \n        new ThreeLongs(staticSeed, seed, LuceneTestCaseRunner.runnerSeed));\n\n    savedUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n      public void uncaughtException(Thread t, Throwable e) {\n        // org.junit.internal.AssumptionViolatedException in older releases\n        // org.junit.Assume.AssumptionViolatedException in recent ones\n        if (e.getClass().getName().endsWith(\"AssumptionViolatedException\")) {\n          String where = \"<unknown>\";\n          for (StackTraceElement elem : e.getStackTrace()) {\n            if ( ! elem.getClassName().startsWith(\"org.junit\")) {\n              where = elem.toString();\n              break;\n            }\n          }\n          System.err.print(\"NOTE: Assume failed at \" + where + \" (ignored):\");\n          if (VERBOSE) {\n            System.err.println();\n            e.printStackTrace(System.err);\n          } else {\n            System.err.print(\" \");\n            System.err.println(e.getMessage());\n          }\n        } else {\n          testsFailed = true;\n          uncaughtExceptions.add(new UncaughtExceptionEntry(t, e));\n          if (savedUncaughtExceptionHandler != null)\n            savedUncaughtExceptionHandler.uncaughtException(t, e);\n        }\n      }\n    });\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","sourceNew":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    Thread.currentThread().setName(\"LTC-main#seed=\" + \n        RandomizedContext.current().getRunnerSeedAsString());\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        assumeTrue(\"NOTE: A test method in \" + getClass().getSimpleName() \n            + \" was ignored, as it uses too much memory with \" + defFormat + \".\", false);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    \n    Thread.currentThread().setName(\"LTC-main#seed=\" + \n        new ThreeLongs(staticSeed, seed, LuceneTestCaseRunner.runnerSeed));\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75b4d037d2c8fd7d68c07be61d25c0260cf8091e","date":1336829560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","sourceNew":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    Thread.currentThread().setName(\"LTC-main#seed=\" + \n        RandomizedContext.current().getRunnerSeedAsString());\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (avoidCodecs != null) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      if (avoidCodecs.contains(defFormat)) {\n        assumeTrue(\"NOTE: A test method in \" + getClass().getSimpleName() \n            + \" was ignored, as it is not allowed to use \" + defFormat + \".\", false);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    Thread.currentThread().setName(\"LTC-main#seed=\" + \n        RandomizedContext.current().getRunnerSeedAsString());\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        assumeTrue(\"NOTE: A test method in \" + getClass().getSimpleName() \n            + \" was ignored, as it uses too much memory with \" + defFormat + \".\", false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUpInternal().mjava","sourceNew":null,"sourceOld":"  /**\n   * Setup before the tests.\n   */\n  private final void setUpInternal() throws Exception {\n    Thread.currentThread().setName(\"LTC-main#seed=\" + \n        RandomizedContext.current().getRunnerSeedAsString());\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (avoidCodecs != null) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      if (avoidCodecs.contains(defFormat)) {\n        assumeTrue(\"NOTE: A test method in \" + getClass().getSimpleName() \n            + \" was ignored, as it is not allowed to use \" + defFormat + \".\", false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"1e6d0f38037e0125421d8e737992d511b5567b26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["1e6d0f38037e0125421d8e737992d511b5567b26","94485df2fde30eb614716fc9ef3c5ed5ce0ed642"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"94485df2fde30eb614716fc9ef3c5ed5ce0ed642":["1e6d0f38037e0125421d8e737992d511b5567b26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["94485df2fde30eb614716fc9ef3c5ed5ce0ed642"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["38e3b736c7ca086d61b7dbb841c905ee115490da"],"1e6d0f38037e0125421d8e737992d511b5567b26":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","94485df2fde30eb614716fc9ef3c5ed5ce0ed642"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94485df2fde30eb614716fc9ef3c5ed5ce0ed642":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6d0f38037e0125421d8e737992d511b5567b26"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}