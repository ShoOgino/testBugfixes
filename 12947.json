{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,int).mjava","commits":[{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context\n      // differs!\n      termState = TermContext.build(context, term);\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n    \n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1) termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, postingsFlags, termState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context\n      // differs!\n      termState = TermContext.build(context, term);\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n    \n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1) termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, needsScores, termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,int).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context\n      // differs!\n      termState = TermContext.build(context, term);\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n    \n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1) termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, needsScores, termState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context\n      // differs!\n      termState = TermContext.build(context, term);\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n    \n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1) termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, postingsFlags, termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"954e59be3da8dc1b046646ad7af4b466852009d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a47d642ab24da1a811adce4bda9cc52c520ca13"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954e59be3da8dc1b046646ad7af4b466852009d3"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}