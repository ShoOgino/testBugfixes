{"path":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#assertAuditEvent(AuditEvent,EventType,String,RequestType,String,Integer,String...).mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#assertAuditEvent(AuditEvent,EventType,String,RequestType,String,Integer,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void assertAuditEvent(AuditEvent e, EventType type, String path, RequestType requestType, String username, Integer status, String... params) {\n    assertEquals(type, e.getEventType());\n    assertEquals(path, e.getResource());\n    if (requestType != null) {\n      assertEquals(requestType, e.getRequestType());\n    }\n    if (username != null) {\n      assertEquals(username, e.getUsername());\n    }\n    if (status != null) {\n      assertEquals(status.intValue(), e.getStatus());\n    }\n    if (params != null && params.length > 0) {\n      List<String> p = new LinkedList<>(Arrays.asList(params));\n      while (p.size() >= 2) {\n        String val = e.getSolrParamAsString(p.get(0));\n        assertEquals(p.get(1), val);\n        p.remove(0);\n        p.remove(0);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5482e225fe64e9f868c423923d1144adc88142","date":1571270194,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#assertAuditEvent(AuditEvent,EventType,String,RequestType,String,Integer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#assertAuditEvent(AuditEvent,EventType,String,RequestType,String,Integer,String...).mjava","sourceNew":"  private static void assertAuditEvent(AuditEvent e, EventType type, String path, RequestType requestType, String username, Integer status, String... params) {\n    try {\n      assertEquals(type, e.getEventType());\n      assertEquals(path, e.getResource());\n      if (requestType != null) {\n        assertEquals(requestType, e.getRequestType());\n      }\n      if (username != null) {\n        assertEquals(username, e.getUsername());\n      }\n      if (status != null) {\n        assertEquals(status.intValue(), e.getStatus());\n      }\n      if (params != null && params.length > 0) {\n        List<String> p = new LinkedList<>(Arrays.asList(params));\n        while (p.size() >= 2) {\n          String val = e.getSolrParamAsString(p.get(0));\n          assertEquals(p.get(1), val);\n          p.remove(0);\n          p.remove(0);\n        }\n      }\n    } catch (AssertionError ae) {\n      throw new AssertionError(formatter.formatEvent(e) + \" => \" + ae.getMessage(), ae);\n    }\n  }\n\n","sourceOld":"  private void assertAuditEvent(AuditEvent e, EventType type, String path, RequestType requestType, String username, Integer status, String... params) {\n    assertEquals(type, e.getEventType());\n    assertEquals(path, e.getResource());\n    if (requestType != null) {\n      assertEquals(requestType, e.getRequestType());\n    }\n    if (username != null) {\n      assertEquals(username, e.getUsername());\n    }\n    if (status != null) {\n      assertEquals(status.intValue(), e.getStatus());\n    }\n    if (params != null && params.length > 0) {\n      List<String> p = new LinkedList<>(Arrays.asList(params));\n      while (p.size() >= 2) {\n        String val = e.getSolrParamAsString(p.get(0));\n        assertEquals(p.get(1), val);\n        p.remove(0);\n        p.remove(0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d5482e225fe64e9f868c423923d1144adc88142":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d5482e225fe64e9f868c423923d1144adc88142"]},"commit2Childs":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["5d5482e225fe64e9f868c423923d1144adc88142"],"5d5482e225fe64e9f868c423923d1144adc88142":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}