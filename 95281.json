{"path":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handlePrepRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case DISTRIBURL: {\n          this.handleDistribUrlAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handlePrepRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case DISTRIBURL: {\n          this.handleDistribUrlAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handlePrepRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case DISTRIBURL: {\n          this.handleDistribUrlAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case DISTRIBURL: {\n          this.handleDistribUrlAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handlePrepRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case DISTRIBURL: {\n          this.handleDistribUrlAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb3b1637e55022f1864e609f7a7ac6d679d9bdb1","date":1333102889,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case DISTRIBURL: {\n          this.handleDistribUrlAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case ALIAS: {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'ALIAS' is not supported \" +\n            req.getParams().get(CoreAdminParams.ACTION));\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case DISTRIBURL: {\n          this.handleDistribUrlAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case DISTRIBURL: {\n          this.handleDistribUrlAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case DISTRIBURL: {\n          this.handleDistribUrlAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","date":1342989037,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e147cce225492338f15a94a427f51f867da574ee","date":1346365916,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          doPersist = this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          doPersist = this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          doPersist = this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        // todo : Can this be done by the regular RecoveryStrategy route?\n        case REQUESTAPPLYUPDATES: {\n          this.handleRequestApplyUpdatesAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          doPersist = this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        // todo : Can this be done by the regular RecoveryStrategy route?\n        case REQUESTAPPLYUPDATES: {\n          this.handleRequestApplyUpdatesAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          doPersist = this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        // todo : Can this be done by the regular RecoveryStrategy route?\n        case REQUESTAPPLYUPDATES: {\n          this.handleRequestApplyUpdatesAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        // todo : Can this be done by the regular RecoveryStrategy route?\n        case REQUESTAPPLYUPDATES: {\n          this.handleRequestApplyUpdatesAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        doPersist = this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          doPersist = this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          doPersist = this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          doPersist = this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          doPersist = this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          doPersist = this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          doPersist = this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          doPersist = this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          doPersist = this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          doPersist = this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        // todo : Can this be done by the regular RecoveryStrategy route?\n        case REQUESTAPPLYUPDATES: {\n          this.handleRequestApplyUpdatesAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          doPersist = this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    // Should we persist the changes?\n    if (doPersist) {\n      cores.persist();\n      rsp.add(\"saved\", cores.getConfigFile().getAbsolutePath());\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da888af1ab894358122a22229051215f58cf4d54","date":1384408702,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        // todo : Can this be done by the regular RecoveryStrategy route?\n        case REQUESTAPPLYUPDATES: {\n          this.handleRequestApplyUpdatesAction(req, rsp);\n          break;\n        }\n        case REQUESTBUFFERUPDATES:  {\n          this.handleRequestBufferUpdatesAction(req, rsp);\n          break;\n        }\n        default: {\n          this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        // todo : Can this be done by the regular RecoveryStrategy route?\n        case REQUESTAPPLYUPDATES: {\n          this.handleRequestApplyUpdatesAction(req, rsp);\n          break;\n        }\n        \n        default: {\n          this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44de42d869f7d8e5235d43c4ad9a99f520363a2f","date":1389871557,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        // todo : Can this be done by the regular RecoveryStrategy route?\n        case REQUESTAPPLYUPDATES: {\n          this.handleRequestApplyUpdatesAction(req, rsp);\n          break;\n        }\n        case REQUESTBUFFERUPDATES:  {\n          this.handleRequestBufferUpdatesAction(req, rsp);\n          break;\n        }\n        case REJOINOVERSEERELECTION:{\n          ZkController zkController = coreContainer.getZkController();\n          if(zkController != null){\n            zkController.rejoinOverseerElection();\n          }\n          break;\n        }\n        default: {\n          this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        // todo : Can this be done by the regular RecoveryStrategy route?\n        case REQUESTAPPLYUPDATES: {\n          this.handleRequestApplyUpdatesAction(req, rsp);\n          break;\n        }\n        case REQUESTBUFFERUPDATES:  {\n          this.handleRequestBufferUpdatesAction(req, rsp);\n          break;\n        }\n        default: {\n          this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"702f9eb5f4d8ac6dea3945928de043b9d25fa87d","date":1391001447,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        // todo : Can this be done by the regular RecoveryStrategy route?\n        case REQUESTAPPLYUPDATES: {\n          this.handleRequestApplyUpdatesAction(req, rsp);\n          break;\n        }\n        case REQUESTBUFFERUPDATES:  {\n          this.handleRequestBufferUpdatesAction(req, rsp);\n          break;\n        }\n        case OVERSEEROP:{\n          ZkController zkController = coreContainer.getZkController();\n          if(zkController != null){\n            String op = req.getParams().get(\"op\");\n            if(\"leader\".equals(op)){\n              zkController.forceOverSeer();\n            } else if (\"rejoin\".equals(op)) zkController.rejoinOverseerElection();\n          }\n          break;\n        }\n        default: {\n          this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        // todo : Can this be done by the regular RecoveryStrategy route?\n        case REQUESTAPPLYUPDATES: {\n          this.handleRequestApplyUpdatesAction(req, rsp);\n          break;\n        }\n        case REQUESTBUFFERUPDATES:  {\n          this.handleRequestBufferUpdatesAction(req, rsp);\n          break;\n        }\n        case REJOINOVERSEERELECTION:{\n          ZkController zkController = coreContainer.getZkController();\n          if(zkController != null){\n            zkController.rejoinOverseerElection();\n          }\n          break;\n        }\n        default: {\n          this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n    String taskId = req.getParams().get(\"async\");\n    TaskObject taskObject = new TaskObject(taskId);\n\n    if(taskId != null) {\n      // Put the tasks into the maps for tracking\n      if (getMap(RUNNING).containsKey(taskId) || getMap(COMPLETED).containsKey(taskId) || getMap(FAILED).containsKey(taskId)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Duplicate request with the same requestid found.\");\n      }\n\n      addTask(RUNNING, taskObject);\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n\n    if (taskId == null) {\n      handleRequestInternal(req, rsp, action);\n    } else {\n      ParallelCoreAdminHandlerThread parallelHandlerThread = new ParallelCoreAdminHandlerThread(req, rsp, action, taskObject);\n      if(parallelExecutor == null || parallelExecutor.isShutdown())\n        parallelExecutor = Executors.newFixedThreadPool(50,\n                  new DefaultSolrThreadFactory(\"parallelCoreAdminExecutor\"));\n        parallelExecutor.execute(parallelHandlerThread);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n    if (action != null) {\n      switch (action) {\n        case CREATE: {\n          this.handleCreateAction(req, rsp);\n          break;\n        }\n\n        case RENAME: {\n          this.handleRenameAction(req, rsp);\n          break;\n        }\n\n        case UNLOAD: {\n          this.handleUnloadAction(req, rsp);\n          break;\n        }\n\n        case STATUS: {\n          this.handleStatusAction(req, rsp);\n          break;\n\n        }\n\n        case PERSIST: {\n          this.handlePersistAction(req, rsp);\n          break;\n        }\n\n        case RELOAD: {\n          this.handleReloadAction(req, rsp);\n          break;\n        }\n\n        case SWAP: {\n          this.handleSwapAction(req, rsp);\n          break;\n        }\n\n        case MERGEINDEXES: {\n          this.handleMergeAction(req, rsp);\n          break;\n        }\n\n        case SPLIT: {\n          this.handleSplitAction(req, rsp);\n          break;\n        }\n\n        case PREPRECOVERY: {\n          this.handleWaitForStateAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTRECOVERY: {\n          this.handleRequestRecoveryAction(req, rsp);\n          break;\n        }\n        \n        case REQUESTSYNCSHARD: {\n          this.handleRequestSyncAction(req, rsp);\n          break;\n        }\n        \n        // todo : Can this be done by the regular RecoveryStrategy route?\n        case REQUESTAPPLYUPDATES: {\n          this.handleRequestApplyUpdatesAction(req, rsp);\n          break;\n        }\n        case REQUESTBUFFERUPDATES:  {\n          this.handleRequestBufferUpdatesAction(req, rsp);\n          break;\n        }\n        case OVERSEEROP:{\n          ZkController zkController = coreContainer.getZkController();\n          if(zkController != null){\n            String op = req.getParams().get(\"op\");\n            if(\"leader\".equals(op)){\n              zkController.forceOverSeer();\n            } else if (\"rejoin\".equals(op)) zkController.rejoinOverseerElection();\n          }\n          break;\n        }\n        default: {\n          this.handleCustomAction(req, rsp);\n          break;\n        }\n        case LOAD:\n          break;\n      }\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc7a519696e76e3fbabd587f12a70ff43583d363","date":1402098283,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n    String taskId = req.getParams().get(\"async\");\n    TaskObject taskObject = new TaskObject(taskId);\n\n    if(taskId != null) {\n      // Put the tasks into the maps for tracking\n      if (getMap(RUNNING).containsKey(taskId) || getMap(COMPLETED).containsKey(taskId) || getMap(FAILED).containsKey(taskId)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Duplicate request with the same requestid found.\");\n      }\n\n      addTask(RUNNING, taskObject);\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n\n    if (taskId == null) {\n      handleRequestInternal(req, rsp, action);\n    } else {\n      ParallelCoreAdminHandlerThread parallelHandlerThread = new ParallelCoreAdminHandlerThread(req, rsp, action, taskObject);\n      parallelExecutor.execute(parallelHandlerThread);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n    String taskId = req.getParams().get(\"async\");\n    TaskObject taskObject = new TaskObject(taskId);\n\n    if(taskId != null) {\n      // Put the tasks into the maps for tracking\n      if (getMap(RUNNING).containsKey(taskId) || getMap(COMPLETED).containsKey(taskId) || getMap(FAILED).containsKey(taskId)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Duplicate request with the same requestid found.\");\n      }\n\n      addTask(RUNNING, taskObject);\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n\n    if (taskId == null) {\n      handleRequestInternal(req, rsp, action);\n    } else {\n      ParallelCoreAdminHandlerThread parallelHandlerThread = new ParallelCoreAdminHandlerThread(req, rsp, action, taskObject);\n      if(parallelExecutor == null || parallelExecutor.isShutdown())\n        parallelExecutor = Executors.newFixedThreadPool(50,\n                  new DefaultSolrThreadFactory(\"parallelCoreAdminExecutor\"));\n        parallelExecutor.execute(parallelHandlerThread);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95","date":1429031018,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n    String taskId = req.getParams().get(\"async\");\n    TaskObject taskObject = new TaskObject(taskId);\n\n    if(taskId != null) {\n      // Put the tasks into the maps for tracking\n      if (getMap(RUNNING).containsKey(taskId) || getMap(COMPLETED).containsKey(taskId) || getMap(FAILED).containsKey(taskId)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Duplicate request with the same requestid found.\");\n      }\n\n      addTask(RUNNING, taskObject);\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n\n    if (taskId == null) {\n      handleRequestInternal(req, rsp, action);\n    } else {\n      ParallelCoreAdminHandlerThread parallelHandlerThread = new ParallelCoreAdminHandlerThread(req, rsp, action, taskObject);\n      try {\n        MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n        if (action != null) {\n          MDC.put(\"CoreAdminHandler.action\", action.name());\n        }\n        parallelExecutor.execute(parallelHandlerThread);\n      } finally {\n        MDC.remove(\"CoreAdminHandler.asyncId\");\n        MDC.remove(\"CoreAdminHandler.action\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n    String taskId = req.getParams().get(\"async\");\n    TaskObject taskObject = new TaskObject(taskId);\n\n    if(taskId != null) {\n      // Put the tasks into the maps for tracking\n      if (getMap(RUNNING).containsKey(taskId) || getMap(COMPLETED).containsKey(taskId) || getMap(FAILED).containsKey(taskId)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Duplicate request with the same requestid found.\");\n      }\n\n      addTask(RUNNING, taskObject);\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n\n    if (taskId == null) {\n      handleRequestInternal(req, rsp, action);\n    } else {\n      ParallelCoreAdminHandlerThread parallelHandlerThread = new ParallelCoreAdminHandlerThread(req, rsp, action, taskObject);\n      parallelExecutor.execute(parallelHandlerThread);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31","date":1435517625,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n    final String taskId = req.getParams().get(CommonAdminParams.ASYNC);\n    TaskObject taskObject = new TaskObject(taskId);\n\n    if(taskId != null) {\n      // Put the tasks into the maps for tracking\n      if (getMap(RUNNING).containsKey(taskId) || getMap(COMPLETED).containsKey(taskId) || getMap(FAILED).containsKey(taskId)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Duplicate request with the same requestid found.\");\n      }\n\n      addTask(RUNNING, taskObject);\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n\n    if (taskId == null) {\n      handleRequestInternal(req, rsp, action);\n    } else {\n      ParallelCoreAdminHandlerThread parallelHandlerThread = new ParallelCoreAdminHandlerThread(req, rsp, action, taskObject);\n      try {\n        MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n        if (action != null) {\n          MDC.put(\"CoreAdminHandler.action\", action.name());\n        }\n        parallelExecutor.execute(parallelHandlerThread);\n      } finally {\n        MDC.remove(\"CoreAdminHandler.asyncId\");\n        MDC.remove(\"CoreAdminHandler.action\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n    String taskId = req.getParams().get(\"async\");\n    TaskObject taskObject = new TaskObject(taskId);\n\n    if(taskId != null) {\n      // Put the tasks into the maps for tracking\n      if (getMap(RUNNING).containsKey(taskId) || getMap(COMPLETED).containsKey(taskId) || getMap(FAILED).containsKey(taskId)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Duplicate request with the same requestid found.\");\n      }\n\n      addTask(RUNNING, taskObject);\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n\n    if (taskId == null) {\n      handleRequestInternal(req, rsp, action);\n    } else {\n      ParallelCoreAdminHandlerThread parallelHandlerThread = new ParallelCoreAdminHandlerThread(req, rsp, action, taskObject);\n      try {\n        MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n        if (action != null) {\n          MDC.put(\"CoreAdminHandler.action\", action.name());\n        }\n        parallelExecutor.execute(parallelHandlerThread);\n      } finally {\n        MDC.remove(\"CoreAdminHandler.asyncId\");\n        MDC.remove(\"CoreAdminHandler.action\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0876236f0bd8be403747120d248bdd42b75a96","date":1451844229,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n    final String taskId = req.getParams().get(CommonAdminParams.ASYNC);\n    final TaskObject taskObject = new TaskObject(taskId);\n\n    if(taskId != null) {\n      // Put the tasks into the maps for tracking\n      if (getRequestStatusMap(RUNNING).containsKey(taskId) || getRequestStatusMap(COMPLETED).containsKey(taskId) || getRequestStatusMap(FAILED).containsKey(taskId)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Duplicate request with the same requestid found.\");\n      }\n\n      addTask(RUNNING, taskObject);\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a == null) throw new SolrException(ErrorCode.BAD_REQUEST, \"No action\");\n\n    CoreAdminOperation op = opMap.get(a.toLowerCase(Locale.ROOT));\n    if (op == null) {\n      this.handleCustomAction(req, rsp);\n      return;\n    }\n\n    final CallInfo callInfo = new CallInfo(this, req, rsp, op);\n    if (taskId == null) {\n      callInfo.call();\n    } else {\n      try {\n        MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n        MDC.put(\"CoreAdminHandler.action\", action.name());\n        parallelExecutor.execute(new Runnable() {\n          @Override\n          public void run() {\n            boolean exceptionCaught = false;\n            try {\n              callInfo.call();\n              taskObject.setRspObject(callInfo.rsp);\n            } catch (Exception e) {\n              exceptionCaught = true;\n              taskObject.setRspObjectFromException(e);\n            } finally {\n              removeTask(\"running\", taskObject.taskId);\n              if (exceptionCaught) {\n                addTask(\"failed\", taskObject, true);\n              } else\n                addTask(\"completed\", taskObject, true);\n            }\n          }\n        });\n      } finally {\n        MDC.remove(\"CoreAdminHandler.asyncId\");\n        MDC.remove(\"CoreAdminHandler.action\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n    final String taskId = req.getParams().get(CommonAdminParams.ASYNC);\n    TaskObject taskObject = new TaskObject(taskId);\n\n    if(taskId != null) {\n      // Put the tasks into the maps for tracking\n      if (getMap(RUNNING).containsKey(taskId) || getMap(COMPLETED).containsKey(taskId) || getMap(FAILED).containsKey(taskId)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Duplicate request with the same requestid found.\");\n      }\n\n      addTask(RUNNING, taskObject);\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a != null) {\n      action = CoreAdminAction.get(a);\n      if (action == null) {\n        this.handleCustomAction(req, rsp);\n      }\n    }\n\n    if (taskId == null) {\n      handleRequestInternal(req, rsp, action);\n    } else {\n      ParallelCoreAdminHandlerThread parallelHandlerThread = new ParallelCoreAdminHandlerThread(req, rsp, action, taskObject);\n      try {\n        MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n        if (action != null) {\n          MDC.put(\"CoreAdminHandler.action\", action.name());\n        }\n        parallelExecutor.execute(parallelHandlerThread);\n      } finally {\n        MDC.remove(\"CoreAdminHandler.asyncId\");\n        MDC.remove(\"CoreAdminHandler.action\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"202d934bd54bf65659c976f0b39cbec42ddecde4","date":1451919424,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    try {\n      CoreContainer cores = getCoreContainer();\n      if (cores == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n                \"Core container instance missing\");\n      }\n      //boolean doPersist = false;\n      final String taskId = req.getParams().get(CommonAdminParams.ASYNC);\n      final TaskObject taskObject = new TaskObject(taskId);\n\n      if(taskId != null) {\n        // Put the tasks into the maps for tracking\n        if (getRequestStatusMap(RUNNING).containsKey(taskId) || getRequestStatusMap(COMPLETED).containsKey(taskId) || getRequestStatusMap(FAILED).containsKey(taskId)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\n              \"Duplicate request with the same requestid found.\");\n        }\n\n        addTask(RUNNING, taskObject);\n      }\n\n      // Pick the action\n      SolrParams params = req.getParams();\n      CoreAdminAction action = CoreAdminAction.STATUS;\n      String a = params.get(CoreAdminParams.ACTION);\n      if (a == null) return;\n\n      CoreAdminOperation op = opMap.get(a.toLowerCase(Locale.ROOT));\n      if (op == null) {\n        this.handleCustomAction(req, rsp);\n        return;\n      }\n\n      final CallInfo callInfo = new CallInfo(this, req, rsp, op);\n      if (taskId == null) {\n        callInfo.call();\n      } else {\n        try {\n          MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n          MDC.put(\"CoreAdminHandler.action\", action.name());\n          parallelExecutor.execute(new Runnable() {\n            @Override\n            public void run() {\n              boolean exceptionCaught = false;\n              try {\n                callInfo.call();\n                taskObject.setRspObject(callInfo.rsp);\n              } catch (Exception e) {\n                exceptionCaught = true;\n                taskObject.setRspObjectFromException(e);\n              } finally {\n                removeTask(\"running\", taskObject.taskId);\n                if (exceptionCaught) {\n                  addTask(\"failed\", taskObject, true);\n                } else\n                  addTask(\"completed\", taskObject, true);\n              }\n            }\n          });\n        } finally {\n          MDC.remove(\"CoreAdminHandler.asyncId\");\n          MDC.remove(\"CoreAdminHandler.action\");\n        }\n      }\n    } finally {\n      rsp.setHttpCaching(false);\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    CoreContainer cores = getCoreContainer();\n    if (cores == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n    //boolean doPersist = false;\n    final String taskId = req.getParams().get(CommonAdminParams.ASYNC);\n    final TaskObject taskObject = new TaskObject(taskId);\n\n    if(taskId != null) {\n      // Put the tasks into the maps for tracking\n      if (getRequestStatusMap(RUNNING).containsKey(taskId) || getRequestStatusMap(COMPLETED).containsKey(taskId) || getRequestStatusMap(FAILED).containsKey(taskId)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Duplicate request with the same requestid found.\");\n      }\n\n      addTask(RUNNING, taskObject);\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    CoreAdminAction action = CoreAdminAction.STATUS;\n    String a = params.get(CoreAdminParams.ACTION);\n    if (a == null) throw new SolrException(ErrorCode.BAD_REQUEST, \"No action\");\n\n    CoreAdminOperation op = opMap.get(a.toLowerCase(Locale.ROOT));\n    if (op == null) {\n      this.handleCustomAction(req, rsp);\n      return;\n    }\n\n    final CallInfo callInfo = new CallInfo(this, req, rsp, op);\n    if (taskId == null) {\n      callInfo.call();\n    } else {\n      try {\n        MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n        MDC.put(\"CoreAdminHandler.action\", action.name());\n        parallelExecutor.execute(new Runnable() {\n          @Override\n          public void run() {\n            boolean exceptionCaught = false;\n            try {\n              callInfo.call();\n              taskObject.setRspObject(callInfo.rsp);\n            } catch (Exception e) {\n              exceptionCaught = true;\n              taskObject.setRspObjectFromException(e);\n            } finally {\n              removeTask(\"running\", taskObject.taskId);\n              if (exceptionCaught) {\n                addTask(\"failed\", taskObject, true);\n              } else\n                addTask(\"completed\", taskObject, true);\n            }\n          }\n        });\n      } finally {\n        MDC.remove(\"CoreAdminHandler.asyncId\");\n        MDC.remove(\"CoreAdminHandler.action\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a460c288e145df90c2c4a6d0c74b3c6e3500c4a0","date":1451922492,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    try {\n      CoreContainer cores = getCoreContainer();\n      if (cores == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n                \"Core container instance missing\");\n      }\n      //boolean doPersist = false;\n      final String taskId = req.getParams().get(CommonAdminParams.ASYNC);\n      final TaskObject taskObject = new TaskObject(taskId);\n\n      if(taskId != null) {\n        // Put the tasks into the maps for tracking\n        if (getRequestStatusMap(RUNNING).containsKey(taskId) || getRequestStatusMap(COMPLETED).containsKey(taskId) || getRequestStatusMap(FAILED).containsKey(taskId)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\n              \"Duplicate request with the same requestid found.\");\n        }\n\n        addTask(RUNNING, taskObject);\n      }\n\n      // Pick the action\n      CoreAdminOperation op = opMap.get(req.getParams().get(ACTION, STATUS.toString()).toLowerCase(Locale.ROOT));\n      if (op == null) {\n        handleCustomAction(req, rsp);\n        return;\n      }\n\n      final CallInfo callInfo = new CallInfo(this, req, rsp, op);\n      if (taskId == null) {\n        callInfo.call();\n      } else {\n        try {\n          MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n          MDC.put(\"CoreAdminHandler.action\", op.action.toString());\n          parallelExecutor.execute(new Runnable() {\n            @Override\n            public void run() {\n              boolean exceptionCaught = false;\n              try {\n                callInfo.call();\n                taskObject.setRspObject(callInfo.rsp);\n              } catch (Exception e) {\n                exceptionCaught = true;\n                taskObject.setRspObjectFromException(e);\n              } finally {\n                removeTask(\"running\", taskObject.taskId);\n                if (exceptionCaught) {\n                  addTask(\"failed\", taskObject, true);\n                } else\n                  addTask(\"completed\", taskObject, true);\n              }\n            }\n          });\n        } finally {\n          MDC.remove(\"CoreAdminHandler.asyncId\");\n          MDC.remove(\"CoreAdminHandler.action\");\n        }\n      }\n    } finally {\n      rsp.setHttpCaching(false);\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    try {\n      CoreContainer cores = getCoreContainer();\n      if (cores == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n                \"Core container instance missing\");\n      }\n      //boolean doPersist = false;\n      final String taskId = req.getParams().get(CommonAdminParams.ASYNC);\n      final TaskObject taskObject = new TaskObject(taskId);\n\n      if(taskId != null) {\n        // Put the tasks into the maps for tracking\n        if (getRequestStatusMap(RUNNING).containsKey(taskId) || getRequestStatusMap(COMPLETED).containsKey(taskId) || getRequestStatusMap(FAILED).containsKey(taskId)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\n              \"Duplicate request with the same requestid found.\");\n        }\n\n        addTask(RUNNING, taskObject);\n      }\n\n      // Pick the action\n      SolrParams params = req.getParams();\n      CoreAdminAction action = CoreAdminAction.STATUS;\n      String a = params.get(CoreAdminParams.ACTION);\n      if (a == null) return;\n\n      CoreAdminOperation op = opMap.get(a.toLowerCase(Locale.ROOT));\n      if (op == null) {\n        this.handleCustomAction(req, rsp);\n        return;\n      }\n\n      final CallInfo callInfo = new CallInfo(this, req, rsp, op);\n      if (taskId == null) {\n        callInfo.call();\n      } else {\n        try {\n          MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n          MDC.put(\"CoreAdminHandler.action\", action.name());\n          parallelExecutor.execute(new Runnable() {\n            @Override\n            public void run() {\n              boolean exceptionCaught = false;\n              try {\n                callInfo.call();\n                taskObject.setRspObject(callInfo.rsp);\n              } catch (Exception e) {\n                exceptionCaught = true;\n                taskObject.setRspObjectFromException(e);\n              } finally {\n                removeTask(\"running\", taskObject.taskId);\n                if (exceptionCaught) {\n                  addTask(\"failed\", taskObject, true);\n                } else\n                  addTask(\"completed\", taskObject, true);\n              }\n            }\n          });\n        } finally {\n          MDC.remove(\"CoreAdminHandler.asyncId\");\n          MDC.remove(\"CoreAdminHandler.action\");\n        }\n      }\n    } finally {\n      rsp.setHttpCaching(false);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    try {\n      CoreContainer cores = getCoreContainer();\n      if (cores == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n                \"Core container instance missing\");\n      }\n      //boolean doPersist = false;\n      final String taskId = req.getParams().get(CommonAdminParams.ASYNC);\n      final TaskObject taskObject = new TaskObject(taskId);\n\n      if(taskId != null) {\n        // Put the tasks into the maps for tracking\n        if (getRequestStatusMap(RUNNING).containsKey(taskId) || getRequestStatusMap(COMPLETED).containsKey(taskId) || getRequestStatusMap(FAILED).containsKey(taskId)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\n              \"Duplicate request with the same requestid found.\");\n        }\n\n        addTask(RUNNING, taskObject);\n      }\n\n      // Pick the action\n      CoreAdminOperation op = opMap.get(req.getParams().get(ACTION, STATUS.toString()).toLowerCase(Locale.ROOT));\n      if (op == null) {\n        handleCustomAction(req, rsp);\n        return;\n      }\n\n      final CallInfo callInfo = new CallInfo(this, req, rsp, op);\n      if (taskId == null) {\n        callInfo.call();\n      } else {\n        try {\n          MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n          MDC.put(\"CoreAdminHandler.action\", op.action.toString());\n          parallelExecutor.execute(() -> {\n            boolean exceptionCaught = false;\n            try {\n              callInfo.call();\n              taskObject.setRspObject(callInfo.rsp);\n            } catch (Exception e) {\n              exceptionCaught = true;\n              taskObject.setRspObjectFromException(e);\n            } finally {\n              removeTask(\"running\", taskObject.taskId);\n              if (exceptionCaught) {\n                addTask(\"failed\", taskObject, true);\n              } else\n                addTask(\"completed\", taskObject, true);\n            }\n          });\n        } finally {\n          MDC.remove(\"CoreAdminHandler.asyncId\");\n          MDC.remove(\"CoreAdminHandler.action\");\n        }\n      }\n    } finally {\n      rsp.setHttpCaching(false);\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    try {\n      CoreContainer cores = getCoreContainer();\n      if (cores == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n                \"Core container instance missing\");\n      }\n      //boolean doPersist = false;\n      final String taskId = req.getParams().get(CommonAdminParams.ASYNC);\n      final TaskObject taskObject = new TaskObject(taskId);\n\n      if(taskId != null) {\n        // Put the tasks into the maps for tracking\n        if (getRequestStatusMap(RUNNING).containsKey(taskId) || getRequestStatusMap(COMPLETED).containsKey(taskId) || getRequestStatusMap(FAILED).containsKey(taskId)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\n              \"Duplicate request with the same requestid found.\");\n        }\n\n        addTask(RUNNING, taskObject);\n      }\n\n      // Pick the action\n      CoreAdminOperation op = opMap.get(req.getParams().get(ACTION, STATUS.toString()).toLowerCase(Locale.ROOT));\n      if (op == null) {\n        handleCustomAction(req, rsp);\n        return;\n      }\n\n      final CallInfo callInfo = new CallInfo(this, req, rsp, op);\n      if (taskId == null) {\n        callInfo.call();\n      } else {\n        try {\n          MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n          MDC.put(\"CoreAdminHandler.action\", op.action.toString());\n          parallelExecutor.execute(new Runnable() {\n            @Override\n            public void run() {\n              boolean exceptionCaught = false;\n              try {\n                callInfo.call();\n                taskObject.setRspObject(callInfo.rsp);\n              } catch (Exception e) {\n                exceptionCaught = true;\n                taskObject.setRspObjectFromException(e);\n              } finally {\n                removeTask(\"running\", taskObject.taskId);\n                if (exceptionCaught) {\n                  addTask(\"failed\", taskObject, true);\n                } else\n                  addTask(\"completed\", taskObject, true);\n              }\n            }\n          });\n        } finally {\n          MDC.remove(\"CoreAdminHandler.asyncId\");\n          MDC.remove(\"CoreAdminHandler.action\");\n        }\n      }\n    } finally {\n      rsp.setHttpCaching(false);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a1433ed38359db87025c507d89ae6ae5bb005c4","date":1525329410,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    try {\n      CoreContainer cores = getCoreContainer();\n      if (cores == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n                \"Core container instance missing\");\n      }\n      //boolean doPersist = false;\n      final String taskId = req.getParams().get(CommonAdminParams.ASYNC);\n      final TaskObject taskObject = new TaskObject(taskId);\n\n      if(taskId != null) {\n        // Put the tasks into the maps for tracking\n        if (getRequestStatusMap(RUNNING).containsKey(taskId) || getRequestStatusMap(COMPLETED).containsKey(taskId) || getRequestStatusMap(FAILED).containsKey(taskId)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\n              \"Duplicate request with the same requestid found.\");\n        }\n\n        addTask(RUNNING, taskObject);\n      }\n\n      // Pick the action\n      CoreAdminOperation op = opMap.get(req.getParams().get(ACTION, STATUS.toString()).toLowerCase(Locale.ROOT));\n      if (op == null) {\n        handleCustomAction(req, rsp);\n        return;\n      }\n\n      final CallInfo callInfo = new CallInfo(this, req, rsp, op);\n      String coreName = req.getParams().get(CoreAdminParams.CORE);\n      if (coreName == null) {\n        coreName = req.getParams().get(CoreAdminParams.NAME);\n      }\n      MDCLoggingContext.setCoreName(coreName);\n      if (taskId == null) {\n        callInfo.call();\n      } else {\n        try {\n          MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n          MDC.put(\"CoreAdminHandler.action\", op.action.toString());\n          parallelExecutor.execute(() -> {\n            boolean exceptionCaught = false;\n            try {\n              callInfo.call();\n              taskObject.setRspObject(callInfo.rsp);\n            } catch (Exception e) {\n              exceptionCaught = true;\n              taskObject.setRspObjectFromException(e);\n            } finally {\n              removeTask(\"running\", taskObject.taskId);\n              if (exceptionCaught) {\n                addTask(\"failed\", taskObject, true);\n              } else\n                addTask(\"completed\", taskObject, true);\n            }\n          });\n        } finally {\n          MDC.remove(\"CoreAdminHandler.asyncId\");\n          MDC.remove(\"CoreAdminHandler.action\");\n        }\n      }\n    } finally {\n      rsp.setHttpCaching(false);\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    try {\n      CoreContainer cores = getCoreContainer();\n      if (cores == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n                \"Core container instance missing\");\n      }\n      //boolean doPersist = false;\n      final String taskId = req.getParams().get(CommonAdminParams.ASYNC);\n      final TaskObject taskObject = new TaskObject(taskId);\n\n      if(taskId != null) {\n        // Put the tasks into the maps for tracking\n        if (getRequestStatusMap(RUNNING).containsKey(taskId) || getRequestStatusMap(COMPLETED).containsKey(taskId) || getRequestStatusMap(FAILED).containsKey(taskId)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\n              \"Duplicate request with the same requestid found.\");\n        }\n\n        addTask(RUNNING, taskObject);\n      }\n\n      // Pick the action\n      CoreAdminOperation op = opMap.get(req.getParams().get(ACTION, STATUS.toString()).toLowerCase(Locale.ROOT));\n      if (op == null) {\n        handleCustomAction(req, rsp);\n        return;\n      }\n\n      final CallInfo callInfo = new CallInfo(this, req, rsp, op);\n      if (taskId == null) {\n        callInfo.call();\n      } else {\n        try {\n          MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n          MDC.put(\"CoreAdminHandler.action\", op.action.toString());\n          parallelExecutor.execute(() -> {\n            boolean exceptionCaught = false;\n            try {\n              callInfo.call();\n              taskObject.setRspObject(callInfo.rsp);\n            } catch (Exception e) {\n              exceptionCaught = true;\n              taskObject.setRspObjectFromException(e);\n            } finally {\n              removeTask(\"running\", taskObject.taskId);\n              if (exceptionCaught) {\n                addTask(\"failed\", taskObject, true);\n              } else\n                addTask(\"completed\", taskObject, true);\n            }\n          });\n        } finally {\n          MDC.remove(\"CoreAdminHandler.asyncId\");\n          MDC.remove(\"CoreAdminHandler.action\");\n        }\n      }\n    } finally {\n      rsp.setHttpCaching(false);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab6131420a270c49b653c969cc1dbbaf7d1b36e7","date":1550697886,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    try {\n      CoreContainer cores = getCoreContainer();\n      if (cores == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n                \"Core container instance missing\");\n      }\n      //boolean doPersist = false;\n      final String taskId = req.getParams().get(CommonAdminParams.ASYNC);\n      final TaskObject taskObject = new TaskObject(taskId);\n\n      if(taskId != null) {\n        // Put the tasks into the maps for tracking\n        if (getRequestStatusMap(RUNNING).containsKey(taskId) || getRequestStatusMap(COMPLETED).containsKey(taskId) || getRequestStatusMap(FAILED).containsKey(taskId)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\n              \"Duplicate request with the same requestid found.\");\n        }\n\n        addTask(RUNNING, taskObject);\n      }\n\n      // Pick the action\n      CoreAdminOperation op = opMap.get(req.getParams().get(ACTION, STATUS.toString()).toLowerCase(Locale.ROOT));\n      if (op == null) {\n        handleCustomAction(req, rsp);\n        return;\n      }\n\n      final CallInfo callInfo = new CallInfo(this, req, rsp, op);\n      String coreName = req.getParams().get(CoreAdminParams.CORE);\n      if (coreName == null) {\n        coreName = req.getParams().get(CoreAdminParams.NAME);\n      }\n      MDCLoggingContext.setCoreName(coreName);\n      if (taskId == null) {\n        callInfo.call();\n      } else {\n        try {\n          MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n          MDC.put(\"CoreAdminHandler.action\", op.action.toString());\n          parallelExecutor.execute(() -> {\n            boolean exceptionCaught = false;\n            try {\n              callInfo.call();\n              taskObject.setRspObject(callInfo.rsp);\n            } catch (Exception e) {\n              exceptionCaught = true;\n              taskObject.setRspObjectFromException(e);\n            } finally {\n              removeTask(\"running\", taskObject.taskId);\n              if (exceptionCaught) {\n                addTask(\"failed\", taskObject, true);\n              } else {\n                addTask(\"completed\", taskObject, true);\n              }\n            }\n          });\n        } finally {\n          MDC.remove(\"CoreAdminHandler.asyncId\");\n          MDC.remove(\"CoreAdminHandler.action\");\n        }\n      }\n    } finally {\n      rsp.setHttpCaching(false);\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Make sure the cores is enabled\n    try {\n      CoreContainer cores = getCoreContainer();\n      if (cores == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n                \"Core container instance missing\");\n      }\n      //boolean doPersist = false;\n      final String taskId = req.getParams().get(CommonAdminParams.ASYNC);\n      final TaskObject taskObject = new TaskObject(taskId);\n\n      if(taskId != null) {\n        // Put the tasks into the maps for tracking\n        if (getRequestStatusMap(RUNNING).containsKey(taskId) || getRequestStatusMap(COMPLETED).containsKey(taskId) || getRequestStatusMap(FAILED).containsKey(taskId)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\n              \"Duplicate request with the same requestid found.\");\n        }\n\n        addTask(RUNNING, taskObject);\n      }\n\n      // Pick the action\n      CoreAdminOperation op = opMap.get(req.getParams().get(ACTION, STATUS.toString()).toLowerCase(Locale.ROOT));\n      if (op == null) {\n        handleCustomAction(req, rsp);\n        return;\n      }\n\n      final CallInfo callInfo = new CallInfo(this, req, rsp, op);\n      String coreName = req.getParams().get(CoreAdminParams.CORE);\n      if (coreName == null) {\n        coreName = req.getParams().get(CoreAdminParams.NAME);\n      }\n      MDCLoggingContext.setCoreName(coreName);\n      if (taskId == null) {\n        callInfo.call();\n      } else {\n        try {\n          MDC.put(\"CoreAdminHandler.asyncId\", taskId);\n          MDC.put(\"CoreAdminHandler.action\", op.action.toString());\n          parallelExecutor.execute(() -> {\n            boolean exceptionCaught = false;\n            try {\n              callInfo.call();\n              taskObject.setRspObject(callInfo.rsp);\n            } catch (Exception e) {\n              exceptionCaught = true;\n              taskObject.setRspObjectFromException(e);\n            } finally {\n              removeTask(\"running\", taskObject.taskId);\n              if (exceptionCaught) {\n                addTask(\"failed\", taskObject, true);\n              } else\n                addTask(\"completed\", taskObject, true);\n            }\n          });\n        } finally {\n          MDC.remove(\"CoreAdminHandler.asyncId\");\n          MDC.remove(\"CoreAdminHandler.action\");\n        }\n      }\n    } finally {\n      rsp.setHttpCaching(false);\n\n    }\n  }\n\n","bugFix":["3a0c04b71951333291abc7f317109a6a5957bd28"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95"],"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95":["dc7a519696e76e3fbabd587f12a70ff43583d363"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["702f9eb5f4d8ac6dea3945928de043b9d25fa87d"],"44de42d869f7d8e5235d43c4ad9a99f520363a2f":["da888af1ab894358122a22229051215f58cf4d54"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["3a1433ed38359db87025c507d89ae6ae5bb005c4"],"a460c288e145df90c2c4a6d0c74b3c6e3500c4a0":["202d934bd54bf65659c976f0b39cbec42ddecde4"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["33d0ed80b7b47e34ad3ff033a77544563aba3085","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc7a519696e76e3fbabd587f12a70ff43583d363":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["eb3b1637e55022f1864e609f7a7ac6d679d9bdb1"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fa0876236f0bd8be403747120d248bdd42b75a96":["f222f4f2bda21ffd6b39b3362b2412e98e4d5e31"],"e147cce225492338f15a94a427f51f867da574ee":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["e147cce225492338f15a94a427f51f867da574ee"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["aba371508186796cc6151d8223a5b4e16d02e26e","e147cce225492338f15a94a427f51f867da574ee"],"3a1433ed38359db87025c507d89ae6ae5bb005c4":["3a0c04b71951333291abc7f317109a6a5957bd28"],"3a0c04b71951333291abc7f317109a6a5957bd28":["a460c288e145df90c2c4a6d0c74b3c6e3500c4a0"],"da888af1ab894358122a22229051215f58cf4d54":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"702f9eb5f4d8ac6dea3945928de043b9d25fa87d":["44de42d869f7d8e5235d43c4ad9a99f520363a2f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["eb3b1637e55022f1864e609f7a7ac6d679d9bdb1","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"202d934bd54bf65659c976f0b39cbec42ddecde4":["fa0876236f0bd8be403747120d248bdd42b75a96"],"eb3b1637e55022f1864e609f7a7ac6d679d9bdb1":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"]},"commit2Childs":{"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31":["fa0876236f0bd8be403747120d248bdd42b75a96"],"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95":["f222f4f2bda21ffd6b39b3362b2412e98e4d5e31"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["dc7a519696e76e3fbabd587f12a70ff43583d363"],"44de42d869f7d8e5235d43c4ad9a99f520363a2f":["702f9eb5f4d8ac6dea3945928de043b9d25fa87d"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","e147cce225492338f15a94a427f51f867da574ee"],"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a460c288e145df90c2c4a6d0c74b3c6e3500c4a0":["3a0c04b71951333291abc7f317109a6a5957bd28"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"dc7a519696e76e3fbabd587f12a70ff43583d363":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","da888af1ab894358122a22229051215f58cf4d54"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"fa0876236f0bd8be403747120d248bdd42b75a96":["202d934bd54bf65659c976f0b39cbec42ddecde4"],"e147cce225492338f15a94a427f51f867da574ee":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3","05a14b2611ead08655a2b2bdc61632eb31316e57"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"3a1433ed38359db87025c507d89ae6ae5bb005c4":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"3a0c04b71951333291abc7f317109a6a5957bd28":["3a1433ed38359db87025c507d89ae6ae5bb005c4"],"da888af1ab894358122a22229051215f58cf4d54":["44de42d869f7d8e5235d43c4ad9a99f520363a2f"],"702f9eb5f4d8ac6dea3945928de043b9d25fa87d":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"202d934bd54bf65659c976f0b39cbec42ddecde4":["a460c288e145df90c2c4a6d0c74b3c6e3500c4a0"],"eb3b1637e55022f1864e609f7a7ac6d679d9bdb1":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","3a80994db3380cd78c6f65b84515e2e931b6b3da"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["eb3b1637e55022f1864e609f7a7ac6d679d9bdb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0d22ac6a4146774c1bc8400160fc0b6150294e92","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","05a14b2611ead08655a2b2bdc61632eb31316e57","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}