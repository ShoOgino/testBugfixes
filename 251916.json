{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#replicaPropTest().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#replicaPropTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","sourceNew":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          OverseerCollectionMessageHandler.SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          OverseerCollectionMessageHandler.SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            OverseerCollectionMessageHandler.SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"base_url\");\n\n    }\n  }\n\n","sourceOld":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"base_url\");\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#replicaPropTest().mjava","pathOld":"/dev/null","sourceNew":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          OverseerCollectionMessageHandler.SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          OverseerCollectionMessageHandler.SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            OverseerCollectionMessageHandler.SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"base_url\");\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#replicaPropTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#replicaPropTest().mjava","sourceNew":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          OverseerCollectionMessageHandler.SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          OverseerCollectionMessageHandler.SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            OverseerCollectionMessageHandler.SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"base_url\");\n\n    }\n  }\n\n","sourceOld":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          OverseerCollectionMessageHandler.SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          OverseerCollectionMessageHandler.SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            OverseerCollectionMessageHandler.SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"base_url\");\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}