{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader)solrCore.getResourceLoader()).getCollectionZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if(configLocation != null) {\n      synchronized (confDirectoryWatchers) {\n        log.info(\"This conf directory is no more watched {0}\",configLocation);\n        confDirectoryWatchers.remove(configLocation);\n      }\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17778d9c1f3a8a67383edebf24754bf30a5120f8","date":1415342366,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader)solrCore.getResourceLoader()).getConfigSetZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if(configLocation != null) {\n      synchronized (confDirectoryWatchers) {\n        log.info(\"This conf directory is no more watched {0}\",configLocation);\n        confDirectoryWatchers.remove(configLocation);\n      }\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader)solrCore.getResourceLoader()).getCollectionZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if(configLocation != null) {\n      synchronized (confDirectoryWatchers) {\n        log.info(\"This conf directory is no more watched {0}\",configLocation);\n        confDirectoryWatchers.remove(configLocation);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader)solrCore.getResourceLoader()).getConfigSetZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if(configLocation != null) {\n      synchronized (confDirectoryListeners) {\n        log.info(\"This conf directory is no more watched {0}\",configLocation);\n        confDirectoryListeners.remove(configLocation);\n      }\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader)solrCore.getResourceLoader()).getConfigSetZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if(configLocation != null) {\n      synchronized (confDirectoryWatchers) {\n        log.info(\"This conf directory is no more watched {0}\",configLocation);\n        confDirectoryWatchers.remove(configLocation);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader)solrCore.getResourceLoader()).getConfigSetZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if(configLocation != null) {\n      synchronized (confDirectoryListeners) {\n        log.info(\"This conf directory is no more watched {0}\",configLocation);\n        confDirectoryListeners.remove(configLocation);\n      }\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader)solrCore.getResourceLoader()).getConfigSetZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if(configLocation != null) {\n      synchronized (confDirectoryListeners) {\n        log.info(\"This conf directory is no more watched {0}\",configLocation);\n        confDirectoryListeners.remove(configLocation);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n\n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader) solrCore.getResourceLoader()).getConfigSetZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n          cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if (configLocation != null) {\n      synchronized (confDirectoryListeners) {\n        log.info(\"This conf directory is no more watched {0}\", configLocation);\n        confDirectoryListeners.remove(configLocation);\n      }\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader)solrCore.getResourceLoader()).getConfigSetZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if(configLocation != null) {\n      synchronized (confDirectoryListeners) {\n        log.info(\"This conf directory is no more watched {0}\",configLocation);\n        confDirectoryListeners.remove(configLocation);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n\n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader) solrCore.getResourceLoader()).getConfigSetZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n          cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if (configLocation != null) {\n      synchronized (confDirectoryListeners) {\n        log.info(\"This conf directory is no more watched {0}\", configLocation);\n        confDirectoryListeners.remove(configLocation);\n      }\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader)solrCore.getResourceLoader()).getConfigSetZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if(configLocation != null) {\n      synchronized (confDirectoryListeners) {\n        log.info(\"This conf directory is no more watched {0}\",configLocation);\n        confDirectoryListeners.remove(configLocation);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n\n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader) solrCore.getResourceLoader()).getConfigSetZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n          cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if (configLocation != null) {\n      synchronized (confDirectoryListeners) {\n        log.info(\"This conf directory is no more watched {}\", configLocation);\n        confDirectoryListeners.remove(configLocation);\n      }\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n\n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader) solrCore.getResourceLoader()).getConfigSetZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n          cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if (configLocation != null) {\n      synchronized (confDirectoryListeners) {\n        log.info(\"This conf directory is no more watched {0}\", configLocation);\n        confDirectoryListeners.remove(configLocation);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54bb8da55080e4569804e0661b83a3c72cbd8d4d","date":1429691126,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    final Collection<SolrCore> cores = cc.getCores();\n    \n    // if there is no SolrCore which is a member of this collection, remove the watch\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    for (SolrCore solrCore : cores) {\n      final CloudDescriptor cloudDesc = solrCore.getCoreDescriptor().getCloudDescriptor();\n      if (cloudDesc != null && cloudDescriptor.getCollectionName().equals(cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    \n    if (removeWatch) {\n      zkStateReader.removeZKWatch(collection);\n    }\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n\n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader) solrCore.getResourceLoader()).getConfigSetZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n          cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if (configLocation != null) {\n      synchronized (confDirectoryListeners) {\n        log.info(\"This conf directory is no more watched {}\", configLocation);\n        confDirectoryListeners.remove(configLocation);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","fbcfc050b9f253136eaa5950b57248b2109eac11"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}