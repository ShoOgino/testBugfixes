{"path":"src/test/org/apache/lucene/index/TestIndexReader#assertTermDocsCount(String,IndexReader,Term,int).mjava","commits":[{"id":"1ab868ed766616ebbbba2e7645d01945520e0b6c","date":1064526173,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#assertTermDocsCount(String,IndexReader,Term,int).mjava","pathOld":"/dev/null","sourceNew":"    private void assertTermDocsCount(String msg, \n                                     IndexReader reader, \n                                     Term term,\n                                     int expected) \n    throws IOException\n    {\n        TermDocs tdocs = null;\n        \n        try {\n            tdocs = reader.termDocs(term);\n            assertNotNull(msg + \", null TermDocs\", tdocs);\n            int count = 0;\n            while(tdocs.next()) {\n                count++;\n            }\n            assertEquals(msg + \", count mismatch\", expected, count);\n            \n        } finally {\n            if (tdocs != null) \n                try { tdocs.close(); } catch (Exception e) { }\n        }\n        \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96","date":1066874526,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#assertTermDocsCount(String,IndexReader,Term,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#assertTermDocsCount(String,IndexReader,Term,int).mjava","sourceNew":"    private void assertTermDocsCount(String msg,\n                                     IndexReader reader,\n                                     Term term,\n                                     int expected)\n    throws IOException\n    {\n        TermDocs tdocs = null;\n\n        try {\n            tdocs = reader.termDocs(term);\n            assertNotNull(msg + \", null TermDocs\", tdocs);\n            int count = 0;\n            while(tdocs.next()) {\n                count++;\n            }\n            assertEquals(msg + \", count mismatch\", expected, count);\n\n        } finally {\n            if (tdocs != null)\n                try { tdocs.close(); } catch (Exception e) { }\n        }\n\n    }\n\n","sourceOld":"    private void assertTermDocsCount(String msg, \n                                     IndexReader reader, \n                                     Term term,\n                                     int expected) \n    throws IOException\n    {\n        TermDocs tdocs = null;\n        \n        try {\n            tdocs = reader.termDocs(term);\n            assertNotNull(msg + \", null TermDocs\", tdocs);\n            int count = 0;\n            while(tdocs.next()) {\n                count++;\n            }\n            assertEquals(msg + \", count mismatch\", expected, count);\n            \n        } finally {\n            if (tdocs != null) \n                try { tdocs.close(); } catch (Exception e) { }\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#assertTermDocsCount(String,IndexReader,Term,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#assertTermDocsCount(String,IndexReader,Term,int).mjava","sourceNew":"    private void assertTermDocsCount(String msg,\n                                     IndexReader reader,\n                                     Term term,\n                                     int expected)\n    throws IOException\n    {\n        TermDocs tdocs = null;\n\n        try {\n            tdocs = reader.termDocs(term);\n            assertNotNull(msg + \", null TermDocs\", tdocs);\n            int count = 0;\n            while(tdocs.next()) {\n                count++;\n            }\n            assertEquals(msg + \", count mismatch\", expected, count);\n\n        } finally {\n            if (tdocs != null)\n                tdocs.close();\n        }\n\n    }\n\n","sourceOld":"    private void assertTermDocsCount(String msg,\n                                     IndexReader reader,\n                                     Term term,\n                                     int expected)\n    throws IOException\n    {\n        TermDocs tdocs = null;\n\n        try {\n            tdocs = reader.termDocs(term);\n            assertNotNull(msg + \", null TermDocs\", tdocs);\n            int count = 0;\n            while(tdocs.next()) {\n                count++;\n            }\n            assertEquals(msg + \", count mismatch\", expected, count);\n\n        } finally {\n            if (tdocs != null)\n                try { tdocs.close(); } catch (Exception e) { }\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb","date":1185160645,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#assertTermDocsCount(String,IndexReader,Term,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#assertTermDocsCount(String,IndexReader,Term,int).mjava","sourceNew":"  private void assertTermDocsCount(String msg,\n                                     IndexReader reader,\n                                     Term term,\n                                     int expected)\n    throws IOException\n    {\n        TermDocs tdocs = null;\n\n        try {\n            tdocs = reader.termDocs(term);\n            assertNotNull(msg + \", null TermDocs\", tdocs);\n            int count = 0;\n            while(tdocs.next()) {\n                count++;\n            }\n            assertEquals(msg + \", count mismatch\", expected, count);\n\n        } finally {\n            if (tdocs != null)\n                tdocs.close();\n        }\n\n    }\n\n","sourceOld":"    private void assertTermDocsCount(String msg,\n                                     IndexReader reader,\n                                     Term term,\n                                     int expected)\n    throws IOException\n    {\n        TermDocs tdocs = null;\n\n        try {\n            tdocs = reader.termDocs(term);\n            assertNotNull(msg + \", null TermDocs\", tdocs);\n            int count = 0;\n            while(tdocs.next()) {\n                count++;\n            }\n            assertEquals(msg + \", count mismatch\", expected, count);\n\n        } finally {\n            if (tdocs != null)\n                tdocs.close();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertTermDocsCount(String,IndexReader,Term,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#assertTermDocsCount(String,IndexReader,Term,int).mjava","sourceNew":"  private void assertTermDocsCount(String msg,\n                                     IndexReader reader,\n                                     Term term,\n                                     int expected)\n    throws IOException\n    {\n        TermDocs tdocs = null;\n\n        try {\n            tdocs = reader.termDocs(term);\n            assertNotNull(msg + \", null TermDocs\", tdocs);\n            int count = 0;\n            while(tdocs.next()) {\n                count++;\n            }\n            assertEquals(msg + \", count mismatch\", expected, count);\n\n        } finally {\n            if (tdocs != null)\n                tdocs.close();\n        }\n\n    }\n\n","sourceOld":"  private void assertTermDocsCount(String msg,\n                                     IndexReader reader,\n                                     Term term,\n                                     int expected)\n    throws IOException\n    {\n        TermDocs tdocs = null;\n\n        try {\n            tdocs = reader.termDocs(term);\n            assertNotNull(msg + \", null TermDocs\", tdocs);\n            int count = 0;\n            while(tdocs.next()) {\n                count++;\n            }\n            assertEquals(msg + \", count mismatch\", expected, count);\n\n        } finally {\n            if (tdocs != null)\n                tdocs.close();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab868ed766616ebbbba2e7645d01945520e0b6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96":["1ab868ed766616ebbbba2e7645d01945520e0b6c"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"]},"commit2Childs":{"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ab868ed766616ebbbba2e7645d01945520e0b6c"],"1ab868ed766616ebbbba2e7645d01945520e0b6c":["2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96"],"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}