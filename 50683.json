{"path":"lucene/src/test/org/apache/lucene/index/TestIndexInput#checkReads(IndexInput).mjava","commits":[{"id":"4963c64955c4dcac8d4067aacd07a97e9308c482","date":1300558381,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexInput#checkReads(IndexInput).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRead().mjava","sourceNew":"  private void checkReads(IndexInput is) throws IOException {\n    assertEquals(128,is.readVInt());\n    assertEquals(16383,is.readVInt());\n    assertEquals(16384,is.readVInt());\n    assertEquals(16385,is.readVInt());\n    assertEquals(Integer.MAX_VALUE, is.readVInt());\n    assertEquals((long) Integer.MAX_VALUE, is.readVLong());\n    assertEquals(Long.MAX_VALUE, is.readVLong());\n    assertEquals(\"Lucene\",is.readString());\n\n    assertEquals(\"\\u00BF\",is.readString());\n    assertEquals(\"Lu\\u00BFce\\u00BFne\",is.readString());\n\n    assertEquals(\"\\u2620\",is.readString());\n    assertEquals(\"Lu\\u2620ce\\u2620ne\",is.readString());\n\n    assertEquals(\"\\uD834\\uDD1E\",is.readString());\n    assertEquals(\"\\uD834\\uDD1E\\uD834\\uDD60\",is.readString());\n    assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne\",is.readString());\n    \n    assertEquals(\"\\u0000\",is.readString());\n    assertEquals(\"Lu\\u0000ce\\u0000ne\",is.readString());\n  }\n\n","sourceOld":"  public void testRead() throws IOException {\n    IndexInput is = new MockIndexInput(new byte[] { \n      (byte) 0x80, 0x01,\n      (byte) 0xFF, 0x7F,\n      (byte) 0x80, (byte) 0x80, 0x01,\n      (byte) 0x81, (byte) 0x80, 0x01,\n      0x06, 'L', 'u', 'c', 'e', 'n', 'e',\n\n      // 2-byte UTF-8 (U+00BF \"INVERTED QUESTION MARK\") \n      0x02, (byte) 0xC2, (byte) 0xBF,\n      0x0A, 'L', 'u', (byte) 0xC2, (byte) 0xBF, \n            'c', 'e', (byte) 0xC2, (byte) 0xBF, \n            'n', 'e',\n\n      // 3-byte UTF-8 (U+2620 \"SKULL AND CROSSBONES\") \n      0x03, (byte) 0xE2, (byte) 0x98, (byte) 0xA0,\n      0x0C, 'L', 'u', (byte) 0xE2, (byte) 0x98, (byte) 0xA0,\n            'c', 'e', (byte) 0xE2, (byte) 0x98, (byte) 0xA0,\n            'n', 'e',\n\n      // surrogate pairs\n      // (U+1D11E \"MUSICAL SYMBOL G CLEF\")\n      // (U+1D160 \"MUSICAL SYMBOL EIGHTH NOTE\")\n      0x04, (byte) 0xF0, (byte) 0x9D, (byte) 0x84, (byte) 0x9E,\n      0x08, (byte) 0xF0, (byte) 0x9D, (byte) 0x84, (byte) 0x9E, \n            (byte) 0xF0, (byte) 0x9D, (byte) 0x85, (byte) 0xA0, \n      0x0E, 'L', 'u',\n            (byte) 0xF0, (byte) 0x9D, (byte) 0x84, (byte) 0x9E,\n            'c', 'e', \n            (byte) 0xF0, (byte) 0x9D, (byte) 0x85, (byte) 0xA0, \n            'n', 'e',  \n\n      // null bytes\n      0x01, 0x00,\n      0x08, 'L', 'u', 0x00, 'c', 'e', 0x00, 'n', 'e',\n    });\n        \n    assertEquals(128,is.readVInt());\n    assertEquals(16383,is.readVInt());\n    assertEquals(16384,is.readVInt());\n    assertEquals(16385,is.readVInt());\n    assertEquals(\"Lucene\",is.readString());\n\n    assertEquals(\"\\u00BF\",is.readString());\n    assertEquals(\"Lu\\u00BFce\\u00BFne\",is.readString());\n\n    assertEquals(\"\\u2620\",is.readString());\n    assertEquals(\"Lu\\u2620ce\\u2620ne\",is.readString());\n\n    assertEquals(\"\\uD834\\uDD1E\",is.readString());\n    assertEquals(\"\\uD834\\uDD1E\\uD834\\uDD60\",is.readString());\n    assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne\",is.readString());\n    \n    assertEquals(\"\\u0000\",is.readString());\n    assertEquals(\"Lu\\u0000ce\\u0000ne\",is.readString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexInput#checkReads(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private void checkReads(IndexInput is) throws IOException {\n    assertEquals(128,is.readVInt());\n    assertEquals(16383,is.readVInt());\n    assertEquals(16384,is.readVInt());\n    assertEquals(16385,is.readVInt());\n    assertEquals(Integer.MAX_VALUE, is.readVInt());\n    assertEquals((long) Integer.MAX_VALUE, is.readVLong());\n    assertEquals(Long.MAX_VALUE, is.readVLong());\n    assertEquals(\"Lucene\",is.readString());\n\n    assertEquals(\"\\u00BF\",is.readString());\n    assertEquals(\"Lu\\u00BFce\\u00BFne\",is.readString());\n\n    assertEquals(\"\\u2620\",is.readString());\n    assertEquals(\"Lu\\u2620ce\\u2620ne\",is.readString());\n\n    assertEquals(\"\\uD834\\uDD1E\",is.readString());\n    assertEquals(\"\\uD834\\uDD1E\\uD834\\uDD60\",is.readString());\n    assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne\",is.readString());\n    \n    assertEquals(\"\\u0000\",is.readString());\n    assertEquals(\"Lu\\u0000ce\\u0000ne\",is.readString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexInput#checkReads(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private void checkReads(IndexInput is) throws IOException {\n    assertEquals(128,is.readVInt());\n    assertEquals(16383,is.readVInt());\n    assertEquals(16384,is.readVInt());\n    assertEquals(16385,is.readVInt());\n    assertEquals(Integer.MAX_VALUE, is.readVInt());\n    assertEquals((long) Integer.MAX_VALUE, is.readVLong());\n    assertEquals(Long.MAX_VALUE, is.readVLong());\n    assertEquals(\"Lucene\",is.readString());\n\n    assertEquals(\"\\u00BF\",is.readString());\n    assertEquals(\"Lu\\u00BFce\\u00BFne\",is.readString());\n\n    assertEquals(\"\\u2620\",is.readString());\n    assertEquals(\"Lu\\u2620ce\\u2620ne\",is.readString());\n\n    assertEquals(\"\\uD834\\uDD1E\",is.readString());\n    assertEquals(\"\\uD834\\uDD1E\\uD834\\uDD60\",is.readString());\n    assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne\",is.readString());\n    \n    assertEquals(\"\\u0000\",is.readString());\n    assertEquals(\"Lu\\u0000ce\\u0000ne\",is.readString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#checkReads(IndexInput).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexInput#checkReads(IndexInput).mjava","sourceNew":"  private void checkReads(IndexInput is) throws IOException {\n    assertEquals(128,is.readVInt());\n    assertEquals(16383,is.readVInt());\n    assertEquals(16384,is.readVInt());\n    assertEquals(16385,is.readVInt());\n    assertEquals(Integer.MAX_VALUE, is.readVInt());\n    assertEquals((long) Integer.MAX_VALUE, is.readVLong());\n    assertEquals(Long.MAX_VALUE, is.readVLong());\n    assertEquals(\"Lucene\",is.readString());\n\n    assertEquals(\"\\u00BF\",is.readString());\n    assertEquals(\"Lu\\u00BFce\\u00BFne\",is.readString());\n\n    assertEquals(\"\\u2620\",is.readString());\n    assertEquals(\"Lu\\u2620ce\\u2620ne\",is.readString());\n\n    assertEquals(\"\\uD834\\uDD1E\",is.readString());\n    assertEquals(\"\\uD834\\uDD1E\\uD834\\uDD60\",is.readString());\n    assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne\",is.readString());\n    \n    assertEquals(\"\\u0000\",is.readString());\n    assertEquals(\"Lu\\u0000ce\\u0000ne\",is.readString());\n  }\n\n","sourceOld":"  private void checkReads(IndexInput is) throws IOException {\n    assertEquals(128,is.readVInt());\n    assertEquals(16383,is.readVInt());\n    assertEquals(16384,is.readVInt());\n    assertEquals(16385,is.readVInt());\n    assertEquals(Integer.MAX_VALUE, is.readVInt());\n    assertEquals((long) Integer.MAX_VALUE, is.readVLong());\n    assertEquals(Long.MAX_VALUE, is.readVLong());\n    assertEquals(\"Lucene\",is.readString());\n\n    assertEquals(\"\\u00BF\",is.readString());\n    assertEquals(\"Lu\\u00BFce\\u00BFne\",is.readString());\n\n    assertEquals(\"\\u2620\",is.readString());\n    assertEquals(\"Lu\\u2620ce\\u2620ne\",is.readString());\n\n    assertEquals(\"\\uD834\\uDD1E\",is.readString());\n    assertEquals(\"\\uD834\\uDD1E\\uD834\\uDD60\",is.readString());\n    assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne\",is.readString());\n    \n    assertEquals(\"\\u0000\",is.readString());\n    assertEquals(\"Lu\\u0000ce\\u0000ne\",is.readString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4963c64955c4dcac8d4067aacd07a97e9308c482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4963c64955c4dcac8d4067aacd07a97e9308c482"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4963c64955c4dcac8d4067aacd07a97e9308c482"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4963c64955c4dcac8d4067aacd07a97e9308c482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"4963c64955c4dcac8d4067aacd07a97e9308c482":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4963c64955c4dcac8d4067aacd07a97e9308c482","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}