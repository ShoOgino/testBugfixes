{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}