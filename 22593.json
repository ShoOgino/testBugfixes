{"path":"lucene/src/java/org/apache/lucene/index/values/IndexDocValuesArray.DoubleValues#DoubleValues(IndexInput,int).mjava","commits":[{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IndexDocValuesArray.DoubleValues#DoubleValues(IndexInput,int).mjava","pathOld":"/dev/null","sourceNew":"    private DoubleValues(IndexInput input, int numDocs) throws IOException {\n      super(RamUsageEstimator.NUM_BYTES_DOUBLE, ValueType.FLOAT_64);\n      values = new double[numDocs];\n      /* we always read BIG_ENDIAN here since the writer serialized plain bytes\n       * we can simply read the ints / longs\n       * back in using readInt / readLong */\n      for (int i = 0; i < values.length; i++) {\n        values[i] = Double.longBitsToDouble(input.readLong());\n      }\n      maxDocID = numDocs - 1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IndexDocValuesArray.DoubleValues#DoubleValues(IndexInput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IndexDocValuesArray.DoubleValues#DoubleValues(IndexInput,int).mjava","sourceNew":"    private DoubleValues(IndexInput input, int numDocs) throws IOException {\n      super(RamUsageEstimator.NUM_BYTES_DOUBLE, ValueType.FLOAT_64);\n      values = new double[numDocs];\n      /*\n       * we always read BIG_ENDIAN here since the writer serialized plain bytes\n       * we can simply read the ints / longs back in using readInt / readLong\n       */\n      for (int i = 0; i < values.length; i++) {\n        values[i] = Double.longBitsToDouble(input.readLong());\n      }\n    }\n\n","sourceOld":"    private DoubleValues(IndexInput input, int numDocs) throws IOException {\n      super(RamUsageEstimator.NUM_BYTES_DOUBLE, ValueType.FLOAT_64);\n      values = new double[numDocs];\n      /* we always read BIG_ENDIAN here since the writer serialized plain bytes\n       * we can simply read the ints / longs\n       * back in using readInt / readLong */\n      for (int i = 0; i < values.length; i++) {\n        values[i] = Double.longBitsToDouble(input.readLong());\n      }\n      maxDocID = numDocs - 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/IndexDocValuesArray.DoubleValues#DoubleValues(IndexInput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IndexDocValuesArray.DoubleValues#DoubleValues(IndexInput,int).mjava","sourceNew":"    private DoubleValues(IndexInput input, int numDocs) throws IOException {\n      super(RamUsageEstimator.NUM_BYTES_DOUBLE, ValueType.FLOAT_64);\n      values = new double[numDocs];\n      /*\n       * we always read BIG_ENDIAN here since the writer serialized plain bytes\n       * we can simply read the ints / longs back in using readInt / readLong\n       */\n      for (int i = 0; i < values.length; i++) {\n        values[i] = Double.longBitsToDouble(input.readLong());\n      }\n    }\n\n","sourceOld":"    private DoubleValues(IndexInput input, int numDocs) throws IOException {\n      super(RamUsageEstimator.NUM_BYTES_DOUBLE, ValueType.FLOAT_64);\n      values = new double[numDocs];\n      /*\n       * we always read BIG_ENDIAN here since the writer serialized plain bytes\n       * we can simply read the ints / longs back in using readInt / readLong\n       */\n      for (int i = 0; i < values.length; i++) {\n        values[i] = Double.longBitsToDouble(input.readLong());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/DocValuesArray.DoubleValues#DoubleValues(IndexInput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IndexDocValuesArray.DoubleValues#DoubleValues(IndexInput,int).mjava","sourceNew":"    private DoubleValues(IndexInput input, int numDocs) throws IOException {\n      super(RamUsageEstimator.NUM_BYTES_DOUBLE, Type.FLOAT_64);\n      values = new double[numDocs];\n      /*\n       * we always read BIG_ENDIAN here since the writer serialized plain bytes\n       * we can simply read the ints / longs back in using readInt / readLong\n       */\n      for (int i = 0; i < values.length; i++) {\n        values[i] = Double.longBitsToDouble(input.readLong());\n      }\n    }\n\n","sourceOld":"    private DoubleValues(IndexInput input, int numDocs) throws IOException {\n      super(RamUsageEstimator.NUM_BYTES_DOUBLE, ValueType.FLOAT_64);\n      values = new double[numDocs];\n      /*\n       * we always read BIG_ENDIAN here since the writer serialized plain bytes\n       * we can simply read the ints / longs back in using readInt / readLong\n       */\n      for (int i = 0; i < values.length; i++) {\n        values[i] = Double.longBitsToDouble(input.readLong());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85eb75e0c0203e44dcf686f35876cf6080f3a671":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["e128967bca58657bc0039d4bfe631e63e81f1977"],"e128967bca58657bc0039d4bfe631e63e81f1977":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e128967bca58657bc0039d4bfe631e63e81f1977","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"85eb75e0c0203e44dcf686f35876cf6080f3a671":["e128967bca58657bc0039d4bfe631e63e81f1977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e128967bca58657bc0039d4bfe631e63e81f1977":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}