{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.GroupQueue#lessThan(OneGroup,OneGroup).mjava","commits":[{"id":"3ce36a160d1241ae9c70e109dc3fdfdfb009674a","date":1307033216,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.GroupQueue#lessThan(OneGroup,OneGroup).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected boolean lessThan(final OneGroup group1, final OneGroup group2) {\n\n      //System.out.println(\"    ltcheck\");\n      assert group1 != group2;\n      assert group1.comparatorSlot != group2.comparatorSlot;\n\n      final int numComparators = comparators.length;\n      for (int compIDX=0;compIDX < numComparators; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compare(group1.comparatorSlot, group2.comparatorSlot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // Break ties by docID; lower docID is always sorted first\n      return group1.topGroupDoc > group2.topGroupDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d62f5453a200cec2cbb60148de159dbf55591e9d","date":1307049300,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.GroupQueue#lessThan(OneGroup,OneGroup).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected boolean lessThan(final OneGroup group1, final OneGroup group2) {\n\n      //System.out.println(\"    ltcheck\");\n      assert group1 != group2;\n      assert group1.comparatorSlot != group2.comparatorSlot;\n\n      final int numComparators = comparators.length;\n      for (int compIDX=0;compIDX < numComparators; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compare(group1.comparatorSlot, group2.comparatorSlot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // Break ties by docID; lower docID is always sorted first\n      return group1.topGroupDoc > group2.topGroupDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.GroupQueue#lessThan(OneGroup,OneGroup).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected boolean lessThan(final OneGroup group1, final OneGroup group2) {\n\n      //System.out.println(\"    ltcheck\");\n      assert group1 != group2;\n      assert group1.comparatorSlot != group2.comparatorSlot;\n\n      final int numComparators = comparators.length;\n      for (int compIDX=0;compIDX < numComparators; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compare(group1.comparatorSlot, group2.comparatorSlot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // Break ties by docID; lower docID is always sorted first\n      return group1.topGroupDoc > group2.topGroupDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.GroupQueue#lessThan(OneGroup,OneGroup).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.GroupQueue#lessThan(OneGroup,OneGroup).mjava","sourceNew":"    @Override\n    protected boolean lessThan(final OneGroup group1, final OneGroup group2) {\n\n      //System.out.println(\"    ltcheck\");\n      assert group1 != group2;\n      assert group1.comparatorSlot != group2.comparatorSlot;\n\n      final int numComparators = comparators.length;\n      for (int compIDX=0;compIDX < numComparators; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compare(group1.comparatorSlot, group2.comparatorSlot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // Break ties by docID; lower docID is always sorted first\n      return group1.topGroupDoc > group2.topGroupDoc;\n    }\n\n","sourceOld":"    @Override\n    protected boolean lessThan(final OneGroup group1, final OneGroup group2) {\n\n      //System.out.println(\"    ltcheck\");\n      assert group1 != group2;\n      assert group1.comparatorSlot != group2.comparatorSlot;\n\n      final int numComparators = comparators.length;\n      for (int compIDX=0;compIDX < numComparators; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compare(group1.comparatorSlot, group2.comparatorSlot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // Break ties by docID; lower docID is always sorted first\n      return group1.topGroupDoc > group2.topGroupDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3ce36a160d1241ae9c70e109dc3fdfdfb009674a"],"3ce36a160d1241ae9c70e109dc3fdfdfb009674a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3ce36a160d1241ae9c70e109dc3fdfdfb009674a"],"d62f5453a200cec2cbb60148de159dbf55591e9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3ce36a160d1241ae9c70e109dc3fdfdfb009674a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3ce36a160d1241ae9c70e109dc3fdfdfb009674a":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ce36a160d1241ae9c70e109dc3fdfdfb009674a","c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"d62f5453a200cec2cbb60148de159dbf55591e9d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}