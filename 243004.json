{"path":"contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","commits":[{"id":"db22d0edb2467b44638dfe7d72c29c2ef6fc84e5","date":1239654370,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2b69725d5832c3c9fa9df6b9081c7d4e46a281","date":1260515652,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","sourceNew":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","sourceOld":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b7b8ee0df825b37bc7fb44a2bfd91aa08357492","date":1260863347,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","sourceNew":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","sourceOld":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","sourceNew":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","sourceOld":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d2b69725d5832c3c9fa9df6b9081c7d4e46a281":["db22d0edb2467b44638dfe7d72c29c2ef6fc84e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6b7b8ee0df825b37bc7fb44a2bfd91aa08357492":["0d2b69725d5832c3c9fa9df6b9081c7d4e46a281"],"ad94625fb8d088209f46650c8097196fec67f00c":["6b7b8ee0df825b37bc7fb44a2bfd91aa08357492"],"db22d0edb2467b44638dfe7d72c29c2ef6fc84e5":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0d2b69725d5832c3c9fa9df6b9081c7d4e46a281":["6b7b8ee0df825b37bc7fb44a2bfd91aa08357492"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["db22d0edb2467b44638dfe7d72c29c2ef6fc84e5"],"6b7b8ee0df825b37bc7fb44a2bfd91aa08357492":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"db22d0edb2467b44638dfe7d72c29c2ef6fc84e5":["0d2b69725d5832c3c9fa9df6b9081c7d4e46a281"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}