{"path":"lucene/core/src/test/org/apache/lucene/util/TestSorterTemplate#testSort(int[]).mjava","commits":[{"id":"d666f5b596b5ce43296739e9453ff761c7ddde3f","date":1363451610,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSorterTemplate#testSort(int[]).mjava","pathOld":"/dev/null","sourceNew":"  void testSort(int[] intArr) {\n    // we modify the array as a long[] and store the original ord in the first 32 bits\n    // to be able to check stability\n    final long[] arr = toLongsAndOrds(intArr);\n\n    // use MergeSort as a reference\n    // assertArrayEquals checks for sorting + stability\n    // assertArrayEquals(toInts) checks for sorting only\n    final long[] mergeSorted = Arrays.copyOf(arr, arr.length);\n    new Last32BitsSorterTemplate(mergeSorted).mergeSort(0, arr.length - 1);\n\n    if (arr.length < SLOW_SORT_THRESHOLD) {\n      final long[] insertionSorted = Arrays.copyOf(arr, arr.length);\n      new Last32BitsSorterTemplate(insertionSorted).insertionSort(0, arr.length - 1);\n      assertArrayEquals(mergeSorted, insertionSorted);\n      \n      final long[] binarySorted = Arrays.copyOf(arr, arr.length);\n      new Last32BitsSorterTemplate(binarySorted).binarySort(0, arr.length - 1);\n      assertArrayEquals(mergeSorted, binarySorted);\n    }\n\n    final long[] quickSorted = Arrays.copyOf(arr, arr.length);\n    new Last32BitsSorterTemplate(quickSorted).quickSort(0, arr.length - 1);\n    assertArrayEquals(toInts(mergeSorted), toInts(quickSorted));\n\n    final long[] timSorted = Arrays.copyOf(arr, arr.length);\n    new Last32BitsSorterTemplate(timSorted).timSort(0, arr.length - 1);\n    assertArrayEquals(mergeSorted, timSorted);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestSorterTemplate#testSort(int[]).mjava","sourceNew":null,"sourceOld":"  void testSort(int[] intArr) {\n    // we modify the array as a long[] and store the original ord in the first 32 bits\n    // to be able to check stability\n    final long[] arr = toLongsAndOrds(intArr);\n\n    // use MergeSort as a reference\n    // assertArrayEquals checks for sorting + stability\n    // assertArrayEquals(toInts) checks for sorting only\n    final long[] mergeSorted = Arrays.copyOf(arr, arr.length);\n    new Last32BitsSorterTemplate(mergeSorted).mergeSort(0, arr.length - 1);\n\n    if (arr.length < SLOW_SORT_THRESHOLD) {\n      final long[] insertionSorted = Arrays.copyOf(arr, arr.length);\n      new Last32BitsSorterTemplate(insertionSorted).insertionSort(0, arr.length - 1);\n      assertArrayEquals(mergeSorted, insertionSorted);\n      \n      final long[] binarySorted = Arrays.copyOf(arr, arr.length);\n      new Last32BitsSorterTemplate(binarySorted).binarySort(0, arr.length - 1);\n      assertArrayEquals(mergeSorted, binarySorted);\n    }\n\n    final long[] quickSorted = Arrays.copyOf(arr, arr.length);\n    new Last32BitsSorterTemplate(quickSorted).quickSort(0, arr.length - 1);\n    assertArrayEquals(toInts(mergeSorted), toInts(quickSorted));\n\n    final long[] timSorted = Arrays.copyOf(arr, arr.length);\n    new Last32BitsSorterTemplate(timSorted).timSort(0, arr.length - 1);\n    assertArrayEquals(mergeSorted, timSorted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d666f5b596b5ce43296739e9453ff761c7ddde3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["d666f5b596b5ce43296739e9453ff761c7ddde3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"]},"commit2Childs":{"d666f5b596b5ce43296739e9453ff761c7ddde3f":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d666f5b596b5ce43296739e9453ff761c7ddde3f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}