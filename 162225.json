{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeatLight(LightAutomaton).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeatLight(LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public LightAutomaton repeatLight(LightAutomaton a) {\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n    builder.createState();\n    builder.setAccept(0, true);\n    builder.copy(a);\n\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      builder.addTransition(0, t.dest+1, t.min, t.max);\n    }\n\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      if (a.isAccept(s)) {\n        count = a.initTransition(0, t);\n        for(int i=0;i<count;i++) {\n          a.getNextTransition(t);\n          builder.addTransition(s+1, t.dest+1, t.min, t.max);\n        }\n      }\n    }\n\n    return builder.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeatLight(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeatLight(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public LightAutomaton repeatLight(LightAutomaton a) {\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n    builder.createState();\n    builder.setAccept(0, true);\n    builder.copy(a);\n\n    Transition t = new Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      builder.addTransition(0, t.dest+1, t.min, t.max);\n    }\n\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      if (a.isAccept(s)) {\n        count = a.initTransition(0, t);\n        for(int i=0;i<count;i++) {\n          a.getNextTransition(t);\n          builder.addTransition(s+1, t.dest+1, t.min, t.max);\n        }\n      }\n    }\n\n    return builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public LightAutomaton repeatLight(LightAutomaton a) {\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n    builder.createState();\n    builder.setAccept(0, true);\n    builder.copy(a);\n\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      builder.addTransition(0, t.dest+1, t.min, t.max);\n    }\n\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      if (a.isAccept(s)) {\n        count = a.initTransition(0, t);\n        for(int i=0;i<count;i++) {\n          a.getNextTransition(t);\n          builder.addTransition(s+1, t.dest+1, t.min, t.max);\n        }\n      }\n    }\n\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeatLight(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton repeat(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n    builder.createState();\n    builder.setAccept(0, true);\n    builder.copy(a);\n\n    Transition t = new Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      builder.addTransition(0, t.dest+1, t.min, t.max);\n    }\n\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      if (a.isAccept(s)) {\n        count = a.initTransition(0, t);\n        for(int i=0;i<count;i++) {\n          a.getNextTransition(t);\n          builder.addTransition(s+1, t.dest+1, t.min, t.max);\n        }\n      }\n    }\n\n    return builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public LightAutomaton repeatLight(LightAutomaton a) {\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n    builder.createState();\n    builder.setAccept(0, true);\n    builder.copy(a);\n\n    Transition t = new Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      builder.addTransition(0, t.dest+1, t.min, t.max);\n    }\n\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      if (a.isAccept(s)) {\n        count = a.initTransition(0, t);\n        for(int i=0;i<count;i++) {\n          a.getNextTransition(t);\n          builder.addTransition(s+1, t.dest+1, t.min, t.max);\n        }\n      }\n    }\n\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}