{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset] );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset] );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset] );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset] );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset]);\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset] );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      @Override\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      @Override\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset] );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      @Override\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      @Override\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      @Override\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      @Override\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset] );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.IntParser(){\n      @Override\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.FloatParser(){\n      @Override\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset]);\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.LongParser(){\n      @Override\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.DoubleParser(){\n      @Override\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ByteParser(){\n      @Override\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ShortParser(){\n      @Override\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset]);\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"edc944077593063d718a895a9d7afdf6895d6685","date":1360052675,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      @Override\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      @Override\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset] );\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      @Override\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      @Override\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      @Override\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      @Override\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      @Override\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      @Override\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset] );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      @Override\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      @Override\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      @Override\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      @Override\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.IntParser(){\n      @Override\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.FloatParser(){\n      @Override\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset]);\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.LongParser(){\n      @Override\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.DoubleParser(){\n      @Override\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ByteParser(){\n      @Override\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ShortParser(){\n      @Override\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.IntParser(){\n      @Override\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.FloatParser(){\n      @Override\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset]);\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.LongParser(){\n      @Override\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.DoubleParser(){\n      @Override\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ByteParser(){\n      @Override\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ShortParser(){\n      @Override\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC);\n    assertMatches(full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.IntParser(){\n      @Override\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.FloatParser(){\n      @Override\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset]);\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.LongParser(){\n      @Override\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.DoubleParser(){\n      @Override\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ByteParser(){\n      @Override\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ShortParser(){\n      @Override\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      @Override\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      @Override\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset] );\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      @Override\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      @Override\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      @Override\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      @Override\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d843efbadfe3b95ce9db390b91d7abe2c5e351a5","date":1360957237,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":null,"sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.IntParser(){\n      @Override\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.FloatParser(){\n      @Override\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset]);\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.LongParser(){\n      @Override\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.DoubleParser(){\n      @Override\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ByteParser(){\n      @Override\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ShortParser(){\n      @Override\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":null,"sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.IntParser(){\n      @Override\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.FloatParser(){\n      @Override\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset]);\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.LongParser(){\n      @Override\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n      \n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.DoubleParser(){\n      @Override\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A'));\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ByteParser(){\n      @Override\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort(new SortField(\"parser\", new FieldCache.ShortParser(){\n      @Override\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n      @Override\n      public TermsEnum termsEnum(Terms terms) throws IOException {\n        return terms.iterator(null);\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getTestName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3e29774db46ad98ca4a8d7fcbfab633ebc01f358","7530de27b87b961b51f01bd1299b7004d46e8823"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["edc944077593063d718a895a9d7afdf6895d6685","3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","edc944077593063d718a895a9d7afdf6895d6685"],"3b41f996b22bd5518650f897d050088ff808ec03":["d4d69c535930b5cce125cff868d40f6373dc27d4","d843efbadfe3b95ce9db390b91d7abe2c5e351a5"],"d843efbadfe3b95ce9db390b91d7abe2c5e351a5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"edc944077593063d718a895a9d7afdf6895d6685":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d843efbadfe3b95ce9db390b91d7abe2c5e351a5"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3b41f996b22bd5518650f897d050088ff808ec03","d843efbadfe3b95ce9db390b91d7abe2c5e351a5"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["7530de27b87b961b51f01bd1299b7004d46e8823","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"edc944077593063d718a895a9d7afdf6895d6685":["d4d69c535930b5cce125cff868d40f6373dc27d4","3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d843efbadfe3b95ce9db390b91d7abe2c5e351a5":["3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","edc944077593063d718a895a9d7afdf6895d6685"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}