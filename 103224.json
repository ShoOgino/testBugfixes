{"path":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean,float).mjava","commits":[{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean).mjava","sourceNew":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersect(iterators);\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersect(iterators);\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean,float).mjava","sourceNew":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersect(iterators);\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","date":1465831664,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean,float).mjava","sourceNew":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean,float).mjava","sourceNew":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean,float).mjava","sourceNew":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33eef98c565ee21b199f04b92acd6e00b842bd1e","date":1514538360,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#ExactPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SimScorer,boolean,float).mjava","sourceNew":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, ScoreMode scoreMode,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = scoreMode.needsScores();\n    this.needsTotalHitCount = scoreMode != ScoreMode.TOP_SCORES;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  ExactPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n                    Similarity.SimScorer docScorer, boolean needsScores,\n                    float matchCost) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n\n    List<DocIdSetIterator> iterators = new ArrayList<>();\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      iterators.add(posting.postings);\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    conjunction = ConjunctionDISI.intersectIterators(iterators);\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"33eef98c565ee21b199f04b92acd6e00b842bd1e":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["7dd748bb245633a8195281556bb0e68a6ea97d18","a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33eef98c565ee21b199f04b92acd6e00b842bd1e"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"33eef98c565ee21b199f04b92acd6e00b842bd1e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["33eef98c565ee21b199f04b92acd6e00b842bd1e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}