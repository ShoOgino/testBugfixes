{"path":"src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","commits":[{"id":"5a0af3a442be522899177e5e11384a45a6784a3f","date":1205348952,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","pathOld":"/dev/null","sourceNew":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final HashMap newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      newDeleteTerms = new HashMap();\n      Iterator iter = terms.entrySet().iterator();\n      while(iter.hasNext()) {\n        Entry entry = (Entry) iter.next();\n        Num num = (Num) entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else\n      newDeleteTerms = null;\n\n    // Remap delete-by-docID\n    final List newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList(docIDs.size());\n      Iterator iter = docIDs.iterator();\n      while(iter.hasNext()) {\n        Integer num = (Integer) iter.next();\n        newDeleteDocIDs.add(new Integer(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteDocIDs = null;\n\n    // Remap delete-by-query\n    final HashMap newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap(queries.size());\n      Iterator iter = queries.entrySet().iterator();\n      while(iter.hasNext()) {\n        Entry entry = (Entry) iter.next();\n        Integer num = (Integer) entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             new Integer(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","pathOld":"src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","sourceNew":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final HashMap newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      newDeleteTerms = new HashMap();\n      Iterator iter = terms.entrySet().iterator();\n      while(iter.hasNext()) {\n        Entry entry = (Entry) iter.next();\n        Num num = (Num) entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else\n      newDeleteTerms = null;\n\n    // Remap delete-by-docID\n    final List newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList(docIDs.size());\n      Iterator iter = docIDs.iterator();\n      while(iter.hasNext()) {\n        Integer num = (Integer) iter.next();\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteDocIDs = null;\n\n    // Remap delete-by-query\n    final HashMap newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap(queries.size());\n      Iterator iter = queries.entrySet().iterator();\n      while(iter.hasNext()) {\n        Entry entry = (Entry) iter.next();\n        Integer num = (Integer) entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","sourceOld":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final HashMap newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      newDeleteTerms = new HashMap();\n      Iterator iter = terms.entrySet().iterator();\n      while(iter.hasNext()) {\n        Entry entry = (Entry) iter.next();\n        Num num = (Num) entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else\n      newDeleteTerms = null;\n\n    // Remap delete-by-docID\n    final List newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList(docIDs.size());\n      Iterator iter = docIDs.iterator();\n      while(iter.hasNext()) {\n        Integer num = (Integer) iter.next();\n        newDeleteDocIDs.add(new Integer(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteDocIDs = null;\n\n    // Remap delete-by-query\n    final HashMap newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap(queries.size());\n      Iterator iter = queries.entrySet().iterator();\n      while(iter.hasNext()) {\n        Entry entry = (Entry) iter.next();\n        Integer num = (Integer) entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             new Integer(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","pathOld":"src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","sourceNew":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final HashMap<Term,Num> newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      newDeleteTerms = new HashMap<Term, Num>();\n      for(Entry<Term,Num> entry : terms.entrySet()) {\n        Num num = entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else \n      newDeleteTerms = null;\n    \n\n    // Remap delete-by-docID\n    final List<Integer> newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList<Integer>(docIDs.size());\n      for (Integer num : docIDs) {\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else \n      newDeleteDocIDs = null;\n    \n\n    // Remap delete-by-query\n    final HashMap<Query,Integer> newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap<Query, Integer>(queries.size());\n      for(Entry<Query,Integer> entry: queries.entrySet()) {\n        Integer num = (Integer) entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","sourceOld":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final HashMap newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      newDeleteTerms = new HashMap();\n      Iterator iter = terms.entrySet().iterator();\n      while(iter.hasNext()) {\n        Entry entry = (Entry) iter.next();\n        Num num = (Num) entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else\n      newDeleteTerms = null;\n\n    // Remap delete-by-docID\n    final List newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList(docIDs.size());\n      Iterator iter = docIDs.iterator();\n      while(iter.hasNext()) {\n        Integer num = (Integer) iter.next();\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteDocIDs = null;\n\n    // Remap delete-by-query\n    final HashMap newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap(queries.size());\n      Iterator iter = queries.entrySet().iterator();\n      while(iter.hasNext()) {\n        Entry entry = (Entry) iter.next();\n        Integer num = (Integer) entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","pathOld":"src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","sourceNew":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final HashMap<Term,Num> newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      newDeleteTerms = new HashMap<Term, Num>();\n      for(Entry<Term,Num> entry : terms.entrySet()) {\n        Num num = entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else \n      newDeleteTerms = null;\n    \n\n    // Remap delete-by-docID\n    final List<Integer> newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList<Integer>(docIDs.size());\n      for (Integer num : docIDs) {\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else \n      newDeleteDocIDs = null;\n    \n\n    // Remap delete-by-query\n    final HashMap<Query,Integer> newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap<Query, Integer>(queries.size());\n      for(Entry<Query,Integer> entry: queries.entrySet()) {\n        Integer num = entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","sourceOld":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final HashMap<Term,Num> newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      newDeleteTerms = new HashMap<Term, Num>();\n      for(Entry<Term,Num> entry : terms.entrySet()) {\n        Num num = entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else \n      newDeleteTerms = null;\n    \n\n    // Remap delete-by-docID\n    final List<Integer> newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList<Integer>(docIDs.size());\n      for (Integer num : docIDs) {\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else \n      newDeleteDocIDs = null;\n    \n\n    // Remap delete-by-query\n    final HashMap<Query,Integer> newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap<Query, Integer>(queries.size());\n      for(Entry<Query,Integer> entry: queries.entrySet()) {\n        Integer num = (Integer) entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a08a1e02b87db52ce330fbc9d8ff26b65bd52be5","date":1258742262,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","pathOld":"src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","sourceNew":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final Map<Term,Num> newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      if (doTermSort) {\n        newDeleteTerms = new TreeMap<Term,Num>();\n      } else {\n        newDeleteTerms = new HashMap<Term,Num>();\n      }\n      for(Entry<Term,Num> entry : terms.entrySet()) {\n        Num num = entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else \n      newDeleteTerms = null;\n    \n\n    // Remap delete-by-docID\n    final List<Integer> newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList<Integer>(docIDs.size());\n      for (Integer num : docIDs) {\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else \n      newDeleteDocIDs = null;\n    \n\n    // Remap delete-by-query\n    final HashMap<Query,Integer> newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap<Query, Integer>(queries.size());\n      for(Entry<Query,Integer> entry: queries.entrySet()) {\n        Integer num = entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","sourceOld":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final HashMap<Term,Num> newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      newDeleteTerms = new HashMap<Term, Num>();\n      for(Entry<Term,Num> entry : terms.entrySet()) {\n        Num num = entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else \n      newDeleteTerms = null;\n    \n\n    // Remap delete-by-docID\n    final List<Integer> newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList<Integer>(docIDs.size());\n      for (Integer num : docIDs) {\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else \n      newDeleteDocIDs = null;\n    \n\n    // Remap delete-by-query\n    final HashMap<Query,Integer> newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap<Query, Integer>(queries.size());\n      for(Entry<Query,Integer> entry: queries.entrySet()) {\n        Integer num = entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","pathOld":"src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","sourceNew":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final Map<Term,Num> newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      if (doTermSort) {\n        newDeleteTerms = new TreeMap<Term,Num>();\n      } else {\n        newDeleteTerms = new HashMap<Term,Num>();\n      }\n      for(Entry<Term,Num> entry : terms.entrySet()) {\n        Num num = entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else \n      newDeleteTerms = null;\n    \n\n    // Remap delete-by-docID\n    final List<Integer> newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList<Integer>(docIDs.size());\n      for (Integer num : docIDs) {\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else \n      newDeleteDocIDs = null;\n    \n\n    // Remap delete-by-query\n    final HashMap<Query,Integer> newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap<Query, Integer>(queries.size());\n      for(Entry<Query,Integer> entry: queries.entrySet()) {\n        Integer num = entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","sourceOld":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final Map<Term,Num> newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      if (doTermSort) {\n        newDeleteTerms = new TreeMap<Term,Num>();\n      } else {\n        newDeleteTerms = new HashMap<Term,Num>();\n      }\n      for(Entry<Term,Num> entry : terms.entrySet()) {\n        Num num = entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else \n      newDeleteTerms = null;\n    \n\n    // Remap delete-by-docID\n    final List<Integer> newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList<Integer>(docIDs.size());\n      for (Integer num : docIDs) {\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else \n      newDeleteDocIDs = null;\n    \n\n    // Remap delete-by-query\n    final HashMap<Query,Integer> newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap<Query, Integer>(queries.size());\n      for(Entry<Query,Integer> entry: queries.entrySet()) {\n        Integer num = entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["5a0af3a442be522899177e5e11384a45a6784a3f"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"a08a1e02b87db52ce330fbc9d8ff26b65bd52be5":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["6bcde5e3f23911110baa101ed062b544162825b5"],"5a0af3a442be522899177e5e11384a45a6784a3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a08a1e02b87db52ce330fbc9d8ff26b65bd52be5"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["a08a1e02b87db52ce330fbc9d8ff26b65bd52be5"],"a08a1e02b87db52ce330fbc9d8ff26b65bd52be5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a0af3a442be522899177e5e11384a45a6784a3f"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"5a0af3a442be522899177e5e11384a45a6784a3f":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}