{"path":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#getMaxNumRecordsPerArtist(ScoreDoc[]).mjava","commits":[{"id":"45ccb604e99f21f1c05722c0e28bcfa64b94a861","date":1423735816,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#getMaxNumRecordsPerArtist(ScoreDoc[]).mjava","pathOld":"/dev/null","sourceNew":"  private int getMaxNumRecordsPerArtist(ScoreDoc[] sd) throws IOException {\n    int result = 0;\n    HashMap<String, Integer> artistCounts = new HashMap<String, Integer>();\n    for (int i = 0; i < sd.length; i++) {\n      StoredDocument doc = reader.document(sd[i].doc);\n      Record record = parsedRecords.get(doc.get(\"id\"));\n      Integer count = artistCounts.get(record.artist);\n      int newCount = 1;\n      if (count != null) {\n        newCount = count.intValue() + 1;\n      }\n      result = Math.max(result, newCount);\n      artistCounts.put(record.artist, newCount);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#getMaxNumRecordsPerArtist(ScoreDoc[]).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#getMaxNumRecordsPerArtist(ScoreDoc[]).mjava","sourceNew":"  private int getMaxNumRecordsPerArtist(ScoreDoc[] sd) throws IOException {\n    int result = 0;\n    HashMap<String, Integer> artistCounts = new HashMap<String, Integer>();\n    for (int i = 0; i < sd.length; i++) {\n      Document doc = reader.document(sd[i].doc);\n      Record record = parsedRecords.get(doc.get(\"id\"));\n      Integer count = artistCounts.get(record.artist);\n      int newCount = 1;\n      if (count != null) {\n        newCount = count.intValue() + 1;\n      }\n      result = Math.max(result, newCount);\n      artistCounts.put(record.artist, newCount);\n    }\n    return result;\n  }\n\n","sourceOld":"  private int getMaxNumRecordsPerArtist(ScoreDoc[] sd) throws IOException {\n    int result = 0;\n    HashMap<String, Integer> artistCounts = new HashMap<String, Integer>();\n    for (int i = 0; i < sd.length; i++) {\n      StoredDocument doc = reader.document(sd[i].doc);\n      Record record = parsedRecords.get(doc.get(\"id\"));\n      Integer count = artistCounts.get(record.artist);\n      int newCount = 1;\n      if (count != null) {\n        newCount = count.intValue() + 1;\n      }\n      result = Math.max(result, newCount);\n      artistCounts.put(record.artist, newCount);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"]},"commit2Childs":{"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}