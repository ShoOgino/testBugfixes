{"path":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testXMLLabeledChildren().mjava","commits":[{"id":"05216852560771de14a5513cd4afd45c8655d1ee","date":1533664331,"type":0,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testXMLLabeledChildren().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testXMLLabeledChildren() throws IOException, XMLStreamException {\n    UpdateRequest req = new UpdateRequest();\n\n    List<SolrInputDocument> docs = new ArrayList<>();\n\n    String xml_doc1 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">1</field>\" +\n            \"  <field name=\\\"empty_s\\\"></field>\" +\n            \"  <field name=\\\"parent_s\\\">X</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >2</field>\" +\n            \"      <field name=\\\"child_s\\\">y</field>\" +\n            \"    </doc>\"+\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >3</field>\" +\n            \"      <field name=\\\"child_s\\\">z</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">4</field>\" +\n            \"  <field name=\\\"parent_s\\\">A</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >5</field>\" +\n            \"      <field name=\\\"child_s\\\">b</field>\" +\n            \"    </doc>\"+\n            \"  </field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >6</field>\" +\n            \"      <field name=\\\"child_s\\\">c</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    XMLStreamReader parser =\n        inputFactory.createXMLStreamReader( new StringReader( xml_doc1 ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc( parser );\n\n    XMLStreamReader parser2 =\n        inputFactory.createXMLStreamReader( new StringReader( xml_doc2 ) );\n    parser2.next(); // read the START document...\n    //null for the processor is all right here\n    //XMLLoader loader = new XMLLoader();\n    SolrInputDocument document2 = loader.readDoc( parser2 );\n\n    assertFalse(document1.hasChildDocuments());\n    assertEquals(document1.toString(), sdoc(\"id\", \"1\", \"empty_s\", \"\", \"parent_s\", \"X\", \"test\",\n        sdocs(sdoc(\"id\", \"2\", \"child_s\", \"y\"), sdoc(\"id\", \"3\", \"child_s\", \"z\"))).toString());\n\n    assertFalse(document2.hasChildDocuments());\n    assertEquals(document2.toString(), sdoc(\"id\", \"4\", \"parent_s\", \"A\", \"test\",\n        sdocs(sdoc(\"id\", \"5\", \"child_s\", \"b\"), sdoc(\"id\", \"6\", \"child_s\", \"c\"))).toString());\n\n    docs.add(document1);\n    docs.add(document2);\n\n    Collections.shuffle(docs, random());\n    req.add(docs);\n\n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1a5eff758fefcac883606f32579ae501a14119","date":1553516101,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testXMLLabeledChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testXMLLabeledChildren().mjava","sourceNew":"  @Test\n  public void testXMLLabeledChildren() throws IOException, XMLStreamException {\n    UpdateRequest req = new UpdateRequest();\n\n    List<SolrInputDocument> docs = new ArrayList<>();\n\n    String xml_doc1 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">1</field>\" +\n            \"  <field name=\\\"empty_s\\\"></field>\" +\n            \"  <field name=\\\"parent_s\\\">X</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >2</field>\" +\n            \"      <field name=\\\"child_s\\\">y</field>\" +\n            \"    </doc>\"+\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >3</field>\" +\n            \"      <field name=\\\"child_s\\\">z</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">4</field>\" +\n            \"  <field name=\\\"parent_s\\\">A</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >5</field>\" +\n            \"      <field name=\\\"child_s\\\">b</field>\" +\n            \"    </doc>\"+\n            \"  </field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >6</field>\" +\n            \"      <field name=\\\"child_s\\\">c</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    XMLStreamReader parser =\n        inputFactory.createXMLStreamReader( new StringReader( xml_doc1 ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc( parser );\n\n    XMLStreamReader parser2 =\n        inputFactory.createXMLStreamReader( new StringReader( xml_doc2 ) );\n    parser2.next(); // read the START document...\n    //null for the processor is all right here\n    //XMLLoader loader = new XMLLoader();\n    SolrInputDocument document2 = loader.readDoc( parser2 );\n\n    assertFalse(document1.hasChildDocuments());\n    assertEquals(document1.toString(), sdoc(\"id\", \"1\", \"empty_s\", \"\", \"parent_s\", \"X\", \"test\",\n        sdocs(sdoc(\"id\", \"2\", \"child_s\", \"y\"), sdoc(\"id\", \"3\", \"child_s\", \"z\"))).toString());\n\n    assertFalse(document2.hasChildDocuments());\n    assertEquals(document2.toString(), sdoc(\"id\", \"4\", \"parent_s\", \"A\", \"test\",\n        sdocs(sdoc(\"id\", \"5\", \"child_s\", \"b\"), sdoc(\"id\", \"6\", \"child_s\", \"c\"))).toString());\n\n    docs.add(document1);\n    docs.add(document2);\n\n    Collections.shuffle(docs, random());\n    req.add(docs);\n\n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","sourceOld":"  @Test\n  public void testXMLLabeledChildren() throws IOException, XMLStreamException {\n    UpdateRequest req = new UpdateRequest();\n\n    List<SolrInputDocument> docs = new ArrayList<>();\n\n    String xml_doc1 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">1</field>\" +\n            \"  <field name=\\\"empty_s\\\"></field>\" +\n            \"  <field name=\\\"parent_s\\\">X</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >2</field>\" +\n            \"      <field name=\\\"child_s\\\">y</field>\" +\n            \"    </doc>\"+\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >3</field>\" +\n            \"      <field name=\\\"child_s\\\">z</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">4</field>\" +\n            \"  <field name=\\\"parent_s\\\">A</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >5</field>\" +\n            \"      <field name=\\\"child_s\\\">b</field>\" +\n            \"    </doc>\"+\n            \"  </field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >6</field>\" +\n            \"      <field name=\\\"child_s\\\">c</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    XMLStreamReader parser =\n        inputFactory.createXMLStreamReader( new StringReader( xml_doc1 ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc( parser );\n\n    XMLStreamReader parser2 =\n        inputFactory.createXMLStreamReader( new StringReader( xml_doc2 ) );\n    parser2.next(); // read the START document...\n    //null for the processor is all right here\n    //XMLLoader loader = new XMLLoader();\n    SolrInputDocument document2 = loader.readDoc( parser2 );\n\n    assertFalse(document1.hasChildDocuments());\n    assertEquals(document1.toString(), sdoc(\"id\", \"1\", \"empty_s\", \"\", \"parent_s\", \"X\", \"test\",\n        sdocs(sdoc(\"id\", \"2\", \"child_s\", \"y\"), sdoc(\"id\", \"3\", \"child_s\", \"z\"))).toString());\n\n    assertFalse(document2.hasChildDocuments());\n    assertEquals(document2.toString(), sdoc(\"id\", \"4\", \"parent_s\", \"A\", \"test\",\n        sdocs(sdoc(\"id\", \"5\", \"child_s\", \"b\"), sdoc(\"id\", \"6\", \"child_s\", \"c\"))).toString());\n\n    docs.add(document1);\n    docs.add(document2);\n\n    Collections.shuffle(docs, random());\n    req.add(docs);\n\n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb1a5eff758fefcac883606f32579ae501a14119":["05216852560771de14a5513cd4afd45c8655d1ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05216852560771de14a5513cd4afd45c8655d1ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb1a5eff758fefcac883606f32579ae501a14119"]},"commit2Childs":{"bb1a5eff758fefcac883606f32579ae501a14119":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05216852560771de14a5513cd4afd45c8655d1ee"],"05216852560771de14a5513cd4afd45c8655d1ee":["bb1a5eff758fefcac883606f32579ae501a14119"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}