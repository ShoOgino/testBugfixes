{"path":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","commits":[{"id":"8d47f68d60cbff5718136b945ba8c55982342f38","date":1285583375,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          String field = StringHelper.intern(new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\"));\n          omitTF = fieldInfos.fieldInfo(field).omitTermFreqAndPositions;\n          return field;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02f9424edb9eccc558626693e4a4cd43f8ce2622","date":1288987640,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","sourceNew":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          String field = StringHelper.intern(new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\"));\n          current = field;\n          return field;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          String field = StringHelper.intern(new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\"));\n          omitTF = fieldInfos.fieldInfo(field).omitTermFreqAndPositions;\n          return field;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["f7d6f751de577f829f8bdc897d050c728075723a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7d6f751de577f829f8bdc897d050c728075723a","date":1288988093,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","sourceNew":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          String field = StringHelper.intern(new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\"));\n          omitTF = fieldInfos.fieldInfo(field).omitTermFreqAndPositions;\n          return field;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          String field = StringHelper.intern(new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\"));\n          current = field;\n          return field;\n        }\n      }\n    }\n\n","bugFix":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b2d719eaefc9684ff00084555da5f61a7f32aef","date":1288993916,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","sourceNew":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          String field = StringHelper.intern(new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\"));\n          current = field;\n          return field;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          String field = StringHelper.intern(new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\"));\n          omitTF = fieldInfos.fieldInfo(field).omitTermFreqAndPositions;\n          return field;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","sourceNew":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          String field = StringHelper.intern(new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\"));\n          current = field;\n          return field;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          String field = StringHelper.intern(new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\"));\n          omitTF = fieldInfos.fieldInfo(field).omitTermFreqAndPositions;\n          return field;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          String field = StringHelper.intern(new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\"));\n          current = field;\n          return field;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","sourceNew":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          return current = new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          String field = StringHelper.intern(new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\"));\n          current = field;\n          return field;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","sourceNew":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          return current = new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          String field = StringHelper.intern(new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\"));\n          current = field;\n          return field;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","sourceNew":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          return current = new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          String field = StringHelper.intern(new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\"));\n          current = field;\n          return field;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","sourceNew":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          return current = new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          return current = new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","date":1322511317,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","sourceNew":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (StringHelper.startsWith(scratch, FIELD)) {\n          return current = new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (scratch.startsWith(FIELD)) {\n          return current = new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextFieldsEnum#next().mjava","sourceNew":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (StringHelper.startsWith(scratch, FIELD)) {\n          return current = new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public String next() throws IOException {\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END)) {\n          current = null;\n          return null;\n        }\n        if (StringHelper.startsWith(scratch, FIELD)) {\n          return current = new String(scratch.bytes, scratch.offset + FIELD.length, scratch.length - FIELD.length, \"UTF-8\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["2b2d719eaefc9684ff00084555da5f61a7f32aef"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["06584e6e98d592b34e1329b384182f368d2025e8"],"85a883878c0af761245ab048babc63d099f835f3":["8d47f68d60cbff5718136b945ba8c55982342f38","2b2d719eaefc9684ff00084555da5f61a7f32aef"],"8d47f68d60cbff5718136b945ba8c55982342f38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["2b2d719eaefc9684ff00084555da5f61a7f32aef","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2b2d719eaefc9684ff00084555da5f61a7f32aef"],"2b2d719eaefc9684ff00084555da5f61a7f32aef":["f7d6f751de577f829f8bdc897d050c728075723a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2b2d719eaefc9684ff00084555da5f61a7f32aef","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["8d47f68d60cbff5718136b945ba8c55982342f38"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"f7d6f751de577f829f8bdc897d050c728075723a":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["06584e6e98d592b34e1329b384182f368d2025e8","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"85a883878c0af761245ab048babc63d099f835f3":[],"8d47f68d60cbff5718136b945ba8c55982342f38":["85a883878c0af761245ab048babc63d099f835f3","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"2b2d719eaefc9684ff00084555da5f61a7f32aef":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","85a883878c0af761245ab048babc63d099f835f3","2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d47f68d60cbff5718136b945ba8c55982342f38","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["f7d6f751de577f829f8bdc897d050c728075723a"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7d6f751de577f829f8bdc897d050c728075723a":["2b2d719eaefc9684ff00084555da5f61a7f32aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}