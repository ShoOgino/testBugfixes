{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","sourceNew":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","sourceNew":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","sourceNew":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","sourceNew":"  public void testUnicode() throws Exception {\n    int numIterations = atLeast(3);\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 10*RANDOM_MULTIPLIER);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","sourceNew":"  public void testUnicode() throws Exception {\n    int numIterations = atLeast(3);\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof HttpSolrServer) {\n      HttpSolrServer cserver = (HttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof HttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((HttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((HttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 10*RANDOM_MULTIPLIER);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((HttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":"  public void testUnicode() throws Exception {\n    int numIterations = atLeast(3);\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 10*RANDOM_MULTIPLIER);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","sourceNew":"  public void testUnicode() throws Exception {\n    Random random = random();\n    int numIterations = atLeast(3);\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof HttpSolrServer) {\n      HttpSolrServer cserver = (HttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof HttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((HttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((HttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random(), 1, 10*RANDOM_MULTIPLIER);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((HttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":"  public void testUnicode() throws Exception {\n    int numIterations = atLeast(3);\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof HttpSolrServer) {\n      HttpSolrServer cserver = (HttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof HttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((HttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((HttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 10*RANDOM_MULTIPLIER);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((HttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","sourceNew":"  public void testUnicode() throws Exception {\n    Random random = random();\n    int numIterations = atLeast(3);\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof HttpSolrServer) {\n      HttpSolrServer cserver = (HttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof HttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((HttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((HttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = TestUtil.nextInt(random(), 1, 10 * RANDOM_MULTIPLIER);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((HttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":"  public void testUnicode() throws Exception {\n    Random random = random();\n    int numIterations = atLeast(3);\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof HttpSolrServer) {\n      HttpSolrServer cserver = (HttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof HttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((HttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((HttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random(), 1, 10*RANDOM_MULTIPLIER);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((HttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","sourceNew":"  public void testUnicode() throws Exception {\n    Random random = random();\n    int numIterations = atLeast(3);\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof HttpSolrServer) {\n      HttpSolrServer cserver = (HttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof HttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((HttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((HttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = TestUtil.nextInt(random(), 1, 10 * RANDOM_MULTIPLIER);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((HttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":"  public void testUnicode() throws Exception {\n    Random random = random();\n    int numIterations = atLeast(3);\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof HttpSolrServer) {\n      HttpSolrServer cserver = (HttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof HttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((HttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((HttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = TestUtil.nextInt(random(), 1, 10 * RANDOM_MULTIPLIER);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((HttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","sourceNew":"  public void testUnicode() throws Exception {\n    Random random = random();\n    int numIterations = atLeast(3);\n    \n    SolrClient client = getSolrClient();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (client instanceof HttpSolrClient) {\n      HttpSolrClient httpSolrClient = (HttpSolrClient) client;\n      oldParser = httpSolrClient.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (client instanceof HttpSolrClient) {\n          if (random.nextBoolean()) {\n            ((HttpSolrClient) client).setParser(new BinaryResponseParser());\n          } else {\n            ((HttpSolrClient) client).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = TestUtil.nextInt(random(), 1, 10 * RANDOM_MULTIPLIER);\n        \n        // Empty the database...\n        client.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        client.add(docs);\n        client.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = client.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((HttpSolrClient)client).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":"  public void testUnicode() throws Exception {\n    Random random = random();\n    int numIterations = atLeast(3);\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof HttpSolrServer) {\n      HttpSolrServer cserver = (HttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof HttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((HttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((HttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = TestUtil.nextInt(random(), 1, 10 * RANDOM_MULTIPLIER);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((HttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"bafca15d8e408346a67f4282ad1143b88023893b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bafca15d8e408346a67f4282ad1143b88023893b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}