{"path":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","sourceNew":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    update = new JavaBinUpdateRequestCodec().unmarshal(stream,\n            new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n              private AddUpdateCommand addCmd = null;\n\n              public void document(SolrInputDocument document, UpdateRequest updateRequest) {\n                if (addCmd == null) {\n                  addCmd = getAddCommand(req, updateRequest.getParams());\n                }\n                addCmd.solrDoc = document;\n                try {\n                  processor.processAdd(addCmd);\n                  addCmd.clear();\n                } catch (IOException e) {\n                  throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n                }\n              }\n            });\n    if (update.getDeleteById() != null) {\n      delete(req, update.getDeleteById(), processor, true);\n    }\n    if (update.getDeleteQuery() != null) {\n      delete(req, update.getDeleteQuery(), processor, false);\n    }\n\n  }\n\n","sourceOld":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    update = new JavaBinUpdateRequestCodec().unmarshal(stream,\n            new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n              private AddUpdateCommand addCmd = null;\n\n              public void document(SolrInputDocument document, UpdateRequest updateRequest) {\n                if (addCmd == null) {\n                  addCmd = getAddCommand(req, updateRequest.getParams());\n                }\n                addCmd.solrDoc = document;\n                try {\n                  processor.processAdd(addCmd);\n                  addCmd.clear();\n                } catch (IOException e) {\n                  throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n                }\n              }\n            });\n    if (update.getDeleteById() != null) {\n      delete(req, update.getDeleteById(), processor, true);\n    }\n    if (update.getDeleteQuery() != null) {\n      delete(req, update.getDeleteQuery(), processor, false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","sourceNew":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    update = new JavaBinUpdateRequestCodec().unmarshal(stream,\n            new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n              private AddUpdateCommand addCmd = null;\n\n              public void document(SolrInputDocument document, UpdateRequest updateRequest) {\n                if (addCmd == null) {\n                  addCmd = getAddCommand(req, updateRequest.getParams());\n                }\n                addCmd.solrDoc = document;\n                try {\n                  processor.processAdd(addCmd);\n                  addCmd.clear();\n                } catch (IOException e) {\n                  throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n                }\n              }\n            });\n    if (update.getDeleteById() != null) {\n      delete(req, update.getDeleteById(), processor, true);\n    }\n    if (update.getDeleteQuery() != null) {\n      delete(req, update.getDeleteQuery(), processor, false);\n    }\n\n  }\n\n","sourceOld":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    update = new JavaBinUpdateRequestCodec().unmarshal(stream,\n            new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n              private AddUpdateCommand addCmd = null;\n\n              public void document(SolrInputDocument document, UpdateRequest updateRequest) {\n                if (addCmd == null) {\n                  addCmd = getAddCommand(req, updateRequest.getParams());\n                }\n                addCmd.solrDoc = document;\n                try {\n                  processor.processAdd(addCmd);\n                  addCmd.clear();\n                } catch (IOException e) {\n                  throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n                }\n              }\n            });\n    if (update.getDeleteById() != null) {\n      delete(req, update.getDeleteById(), processor, true);\n    }\n    if (update.getDeleteQuery() != null) {\n      delete(req, update.getDeleteQuery(), processor, false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","sourceNew":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    update = new JavaBinUpdateRequestCodec().unmarshal(stream,\n            new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n              private AddUpdateCommand addCmd = null;\n\n              public void document(SolrInputDocument document, UpdateRequest updateRequest) {\n                if (addCmd == null) {\n                  addCmd = getAddCommand(req, updateRequest.getParams());\n                }\n                addCmd.solrDoc = document;\n                try {\n                  processor.processAdd(addCmd);\n                  addCmd.clear();\n                } catch (IOException e) {\n                  throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n                }\n              }\n            });\n    if (update.getDeleteById() != null) {\n      delete(req, update.getDeleteById(), processor, true);\n    }\n    if (update.getDeleteQuery() != null) {\n      delete(req, update.getDeleteQuery(), processor, false);\n    }\n\n  }\n\n","sourceOld":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    update = new JavaBinUpdateRequestCodec().unmarshal(stream,\n            new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n              private AddUpdateCommand addCmd = null;\n\n              public void document(SolrInputDocument document, UpdateRequest updateRequest) {\n                if (addCmd == null) {\n                  addCmd = getAddCommand(req, updateRequest.getParams());\n                }\n                addCmd.solrDoc = document;\n                try {\n                  processor.processAdd(addCmd);\n                  addCmd.clear();\n                } catch (IOException e) {\n                  throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n                }\n              }\n            });\n    if (update.getDeleteById() != null) {\n      delete(req, update.getDeleteById(), processor, true);\n    }\n    if (update.getDeleteQuery() != null) {\n      delete(req, update.getDeleteQuery(), processor, false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e75d826d1f37079d934ae6ec2016a235d96c041","date":1321875173,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","sourceNew":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      private AddUpdateCommand addCmd = null;\n\n      public void update(SolrInputDocument document, UpdateRequest updateRequest) {\n        if (document == null) {\n          // Perhaps commit from the parameters\n          try {\n            RequestHandlerUtils.handleCommit(req, processor, updateRequest.getParams(), false);\n            RequestHandlerUtils.handleRollback(req, processor, updateRequest.getParams(), false);\n          } catch (IOException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR handling commit/rollback\");\n          }\n          return;\n        }\n        if (addCmd == null) {\n          addCmd = getAddCommand(req, updateRequest.getParams());\n        }\n        addCmd.solrDoc = document;\n        try {\n          processor.processAdd(addCmd);\n          addCmd.clear();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n        }\n      }\n    };\n    FastInputStream in = FastInputStream.wrap(stream);\n    for (; ; ) {\n      try {\n        update = new JavaBinUpdateRequestCodec().unmarshal(in, handler);\n      } catch (EOFException e) {\n        break; // this is expected\n      } catch (Exception e) {\n        log.error(\"Exception while processing update request\", e);\n        break;\n      }\n      if (update.getDeleteById() != null) {\n        delete(req, update.getDeleteById(), processor, true);\n      }\n      if (update.getDeleteQuery() != null) {\n        delete(req, update.getDeleteQuery(), processor, false);\n      }\n    }\n  }\n\n","sourceOld":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    update = new JavaBinUpdateRequestCodec().unmarshal(stream,\n            new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n              private AddUpdateCommand addCmd = null;\n\n              public void document(SolrInputDocument document, UpdateRequest updateRequest) {\n                if (addCmd == null) {\n                  addCmd = getAddCommand(req, updateRequest.getParams());\n                }\n                addCmd.solrDoc = document;\n                try {\n                  processor.processAdd(addCmd);\n                  addCmd.clear();\n                } catch (IOException e) {\n                  throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n                }\n              }\n            });\n    if (update.getDeleteById() != null) {\n      delete(req, update.getDeleteById(), processor, true);\n    }\n    if (update.getDeleteQuery() != null) {\n      delete(req, update.getDeleteQuery(), processor, false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["61a4a35e13b1b983d53f4fc14642b1f796f81483","b07da04837dda68434fe9bba384d3c4faaa21235","818d704eaaf0fba0561d0d2752832e1015053482"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"818d704eaaf0fba0561d0d2752832e1015053482","date":1327419676,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","sourceNew":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      private AddUpdateCommand addCmd = null;\n\n      public void update(SolrInputDocument document, UpdateRequest updateRequest) {\n        if (document == null) {\n          // Perhaps commit from the parameters\n          try {\n            RequestHandlerUtils.handleCommit(req, processor, updateRequest.getParams(), false);\n            RequestHandlerUtils.handleRollback(req, processor, updateRequest.getParams(), false);\n          } catch (IOException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR handling commit/rollback\");\n          }\n          return;\n        }\n        if (addCmd == null) {\n          addCmd = getAddCommand(req, updateRequest.getParams());\n        }\n        addCmd.solrDoc = document;\n        try {\n          processor.processAdd(addCmd);\n          addCmd.clear();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n        }\n      }\n    };\n    FastInputStream in = FastInputStream.wrap(stream);\n    for (; ; ) {\n      try {\n        update = new JavaBinUpdateRequestCodec().unmarshal(in, handler);\n      } catch (EOFException e) {\n        break; // this is expected\n      } catch (Exception e) {\n        log.error(\"Exception while processing update request\", e);\n        break;\n      }\n      if (update.getDeleteById() != null || update.getDeleteQuery() != null) {\n        delete(req, update, processor);\n      }\n    }\n  }\n\n","sourceOld":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      private AddUpdateCommand addCmd = null;\n\n      public void update(SolrInputDocument document, UpdateRequest updateRequest) {\n        if (document == null) {\n          // Perhaps commit from the parameters\n          try {\n            RequestHandlerUtils.handleCommit(req, processor, updateRequest.getParams(), false);\n            RequestHandlerUtils.handleRollback(req, processor, updateRequest.getParams(), false);\n          } catch (IOException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR handling commit/rollback\");\n          }\n          return;\n        }\n        if (addCmd == null) {\n          addCmd = getAddCommand(req, updateRequest.getParams());\n        }\n        addCmd.solrDoc = document;\n        try {\n          processor.processAdd(addCmd);\n          addCmd.clear();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n        }\n      }\n    };\n    FastInputStream in = FastInputStream.wrap(stream);\n    for (; ; ) {\n      try {\n        update = new JavaBinUpdateRequestCodec().unmarshal(in, handler);\n      } catch (EOFException e) {\n        break; // this is expected\n      } catch (Exception e) {\n        log.error(\"Exception while processing update request\", e);\n        break;\n      }\n      if (update.getDeleteById() != null) {\n        delete(req, update.getDeleteById(), processor, true);\n      }\n      if (update.getDeleteQuery() != null) {\n        delete(req, update.getDeleteQuery(), processor, false);\n      }\n    }\n  }\n\n","bugFix":["0e75d826d1f37079d934ae6ec2016a235d96c041"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","sourceNew":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      private AddUpdateCommand addCmd = null;\n\n      public void update(SolrInputDocument document, UpdateRequest updateRequest) {\n        if (document == null) {\n          // Perhaps commit from the parameters\n          try {\n            RequestHandlerUtils.handleCommit(req, processor, updateRequest.getParams(), false);\n            RequestHandlerUtils.handleRollback(req, processor, updateRequest.getParams(), false);\n          } catch (IOException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR handling commit/rollback\");\n          }\n          return;\n        }\n        if (addCmd == null) {\n          addCmd = getAddCommand(req, updateRequest.getParams());\n        }\n        addCmd.solrDoc = document;\n        try {\n          processor.processAdd(addCmd);\n          addCmd.clear();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n        }\n      }\n    };\n    FastInputStream in = FastInputStream.wrap(stream);\n    for (; ; ) {\n      try {\n        update = new JavaBinUpdateRequestCodec().unmarshal(in, handler);\n      } catch (EOFException e) {\n        break; // this is expected\n      } catch (Exception e) {\n        log.error(\"Exception while processing update request\", e);\n        break;\n      }\n      if (update.getDeleteById() != null || update.getDeleteQuery() != null) {\n        delete(req, update, processor);\n      }\n    }\n  }\n\n","sourceOld":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      private AddUpdateCommand addCmd = null;\n\n      public void update(SolrInputDocument document, UpdateRequest updateRequest) {\n        if (document == null) {\n          // Perhaps commit from the parameters\n          try {\n            RequestHandlerUtils.handleCommit(req, processor, updateRequest.getParams(), false);\n            RequestHandlerUtils.handleRollback(req, processor, updateRequest.getParams(), false);\n          } catch (IOException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR handling commit/rollback\");\n          }\n          return;\n        }\n        if (addCmd == null) {\n          addCmd = getAddCommand(req, updateRequest.getParams());\n        }\n        addCmd.solrDoc = document;\n        try {\n          processor.processAdd(addCmd);\n          addCmd.clear();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n        }\n      }\n    };\n    FastInputStream in = FastInputStream.wrap(stream);\n    for (; ; ) {\n      try {\n        update = new JavaBinUpdateRequestCodec().unmarshal(in, handler);\n      } catch (EOFException e) {\n        break; // this is expected\n      } catch (Exception e) {\n        log.error(\"Exception while processing update request\", e);\n        break;\n      }\n      if (update.getDeleteById() != null) {\n        delete(req, update.getDeleteById(), processor, true);\n      }\n      if (update.getDeleteQuery() != null) {\n        delete(req, update.getDeleteQuery(), processor, false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","sourceNew":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      private AddUpdateCommand addCmd = null;\n\n      public void update(SolrInputDocument document, UpdateRequest updateRequest) {\n        if (document == null) {\n          // Perhaps commit from the parameters\n          try {\n            RequestHandlerUtils.handleCommit(req, processor, updateRequest.getParams(), false);\n            RequestHandlerUtils.handleRollback(req, processor, updateRequest.getParams(), false);\n          } catch (IOException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR handling commit/rollback\");\n          }\n          return;\n        }\n        if (addCmd == null) {\n          addCmd = getAddCommand(req, updateRequest.getParams());\n        }\n        addCmd.solrDoc = document;\n        try {\n          processor.processAdd(addCmd);\n          addCmd.clear();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n        }\n      }\n    };\n    FastInputStream in = FastInputStream.wrap(stream);\n    for (; ; ) {\n      try {\n        update = new JavaBinUpdateRequestCodec().unmarshal(in, handler);\n      } catch (EOFException e) {\n        break; // this is expected\n      } catch (Exception e) {\n        log.error(\"Exception while processing update request\", e);\n        break;\n      }\n      if (update.getDeleteById() != null || update.getDeleteQuery() != null) {\n        delete(req, update, processor);\n      }\n    }\n  }\n\n","sourceOld":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      private AddUpdateCommand addCmd = null;\n\n      public void update(SolrInputDocument document, UpdateRequest updateRequest) {\n        if (document == null) {\n          // Perhaps commit from the parameters\n          try {\n            RequestHandlerUtils.handleCommit(req, processor, updateRequest.getParams(), false);\n            RequestHandlerUtils.handleRollback(req, processor, updateRequest.getParams(), false);\n          } catch (IOException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR handling commit/rollback\");\n          }\n          return;\n        }\n        if (addCmd == null) {\n          addCmd = getAddCommand(req, updateRequest.getParams());\n        }\n        addCmd.solrDoc = document;\n        try {\n          processor.processAdd(addCmd);\n          addCmd.clear();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n        }\n      }\n    };\n    FastInputStream in = FastInputStream.wrap(stream);\n    for (; ; ) {\n      try {\n        update = new JavaBinUpdateRequestCodec().unmarshal(in, handler);\n      } catch (EOFException e) {\n        break; // this is expected\n      } catch (Exception e) {\n        log.error(\"Exception while processing update request\", e);\n        break;\n      }\n      if (update.getDeleteById() != null) {\n        delete(req, update.getDeleteById(), processor, true);\n      }\n      if (update.getDeleteQuery() != null) {\n        delete(req, update.getDeleteQuery(), processor, false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JavabinLoader#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor).mjava","sourceNew":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      private AddUpdateCommand addCmd = null;\n\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest updateRequest) {\n        if (document == null) {\n          // Perhaps commit from the parameters\n          try {\n            RequestHandlerUtils.handleCommit(req, processor, updateRequest.getParams(), false);\n            RequestHandlerUtils.handleRollback(req, processor, updateRequest.getParams(), false);\n          } catch (IOException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR handling commit/rollback\");\n          }\n          return;\n        }\n        if (addCmd == null) {\n          addCmd = getAddCommand(req, updateRequest.getParams());\n        }\n        addCmd.solrDoc = document;\n        try {\n          processor.processAdd(addCmd);\n          addCmd.clear();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n        }\n      }\n    };\n    FastInputStream in = FastInputStream.wrap(stream);\n    for (; ; ) {\n      try {\n        update = new JavaBinUpdateRequestCodec().unmarshal(in, handler);\n      } catch (EOFException e) {\n        break; // this is expected\n      } catch (Exception e) {\n        log.error(\"Exception while processing update request\", e);\n        break;\n      }\n      if (update.getDeleteById() != null || update.getDeleteQuery() != null) {\n        delete(req, update, processor);\n      }\n    }\n  }\n\n","sourceOld":"  private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp, InputStream stream,\n                                final UpdateRequestProcessor processor) throws IOException {\n    UpdateRequest update = null;\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      private AddUpdateCommand addCmd = null;\n\n      public void update(SolrInputDocument document, UpdateRequest updateRequest) {\n        if (document == null) {\n          // Perhaps commit from the parameters\n          try {\n            RequestHandlerUtils.handleCommit(req, processor, updateRequest.getParams(), false);\n            RequestHandlerUtils.handleRollback(req, processor, updateRequest.getParams(), false);\n          } catch (IOException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR handling commit/rollback\");\n          }\n          return;\n        }\n        if (addCmd == null) {\n          addCmd = getAddCommand(req, updateRequest.getParams());\n        }\n        addCmd.solrDoc = document;\n        try {\n          processor.processAdd(addCmd);\n          addCmd.clear();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document);\n        }\n      }\n    };\n    FastInputStream in = FastInputStream.wrap(stream);\n    for (; ; ) {\n      try {\n        update = new JavaBinUpdateRequestCodec().unmarshal(in, handler);\n      } catch (EOFException e) {\n        break; // this is expected\n      } catch (Exception e) {\n        log.error(\"Exception while processing update request\", e);\n        break;\n      }\n      if (update.getDeleteById() != null || update.getDeleteQuery() != null) {\n        delete(req, update, processor);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["0e75d826d1f37079d934ae6ec2016a235d96c041","818d704eaaf0fba0561d0d2752832e1015053482"],"042e4d934397657ba04c82b46cc5665076bc5c58":["818d704eaaf0fba0561d0d2752832e1015053482"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e75d826d1f37079d934ae6ec2016a235d96c041":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["0e75d826d1f37079d934ae6ec2016a235d96c041","818d704eaaf0fba0561d0d2752832e1015053482"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"818d704eaaf0fba0561d0d2752832e1015053482":["0e75d826d1f37079d934ae6ec2016a235d96c041"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042e4d934397657ba04c82b46cc5665076bc5c58"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"042e4d934397657ba04c82b46cc5665076bc5c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"0e75d826d1f37079d934ae6ec2016a235d96c041":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","818d704eaaf0fba0561d0d2752832e1015053482"],"c26f00b574427b55127e869b935845554afde1fa":["0e75d826d1f37079d934ae6ec2016a235d96c041"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"818d704eaaf0fba0561d0d2752832e1015053482":["0d22ac6a4146774c1bc8400160fc0b6150294e92","042e4d934397657ba04c82b46cc5665076bc5c58","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}