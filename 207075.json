{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/BatchWriter#throwIf().mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/BatchWriter#throwIf().mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/BatchWriter#throwIf().mjava","sourceNew":"  /**\n   * Throw a legal exception if a previous batch write had an exception. The\n   * previous state is cleared. Uses {@link #batchWriteException} for the state\n   * from the last exception.\n   * \n   * This will loose individual exceptions if the exceptions happen rapidly.\n   * \n   * @throws IOException On low level IO error\n   * @throws SolrServerException On Solr Exception\n   */\n  private void throwIf() throws IOException, SolrServerException {\n\n    final Exception last = batchWriteException;\n    batchWriteException = null;\n\n    if (last == null) {\n      return;\n    }\n    if (last instanceof SolrServerException) {\n      throw (SolrServerException) last;\n    }\n    if (last instanceof IOException) {\n      throw (IOException) last;\n    }\n    throw new IOException(\"Batch Write Failure\", last);\n  }\n\n","sourceOld":"  /**\n   * Throw a legal exception if a previous batch write had an exception. The\n   * previous state is cleared. Uses {@link #batchWriteException} for the state\n   * from the last exception.\n   * \n   * This will loose individual exceptions if the exceptions happen rapidly.\n   * \n   * @throws IOException On low level IO error\n   * @throws SolrServerException On Solr Exception\n   */\n  private void throwIf() throws IOException, SolrServerException {\n\n    final Exception last = batchWriteException;\n    batchWriteException = null;\n\n    if (last == null) {\n      return;\n    }\n    if (last instanceof SolrServerException) {\n      throw (SolrServerException) last;\n    }\n    if (last instanceof IOException) {\n      throw (IOException) last;\n    }\n    throw new IOException(\"Batch Write Failure\", last);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/BatchWriter#throwIf().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Throw a legal exception if a previous batch write had an exception. The\n   * previous state is cleared. Uses {@link #batchWriteException} for the state\n   * from the last exception.\n   * \n   * This will loose individual exceptions if the exceptions happen rapidly.\n   * \n   * @throws IOException On low level IO error\n   * @throws SolrServerException On Solr Exception\n   */\n  private void throwIf() throws IOException, SolrServerException {\n\n    final Exception last = batchWriteException;\n    batchWriteException = null;\n\n    if (last == null) {\n      return;\n    }\n    if (last instanceof SolrServerException) {\n      throw (SolrServerException) last;\n    }\n    if (last instanceof IOException) {\n      throw (IOException) last;\n    }\n    throw new IOException(\"Batch Write Failure\", last);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/BatchWriter#throwIf().mjava","sourceNew":null,"sourceOld":"  /**\n   * Throw a legal exception if a previous batch write had an exception. The\n   * previous state is cleared. Uses {@link #batchWriteException} for the state\n   * from the last exception.\n   * \n   * This will loose individual exceptions if the exceptions happen rapidly.\n   * \n   * @throws IOException On low level IO error\n   * @throws SolrServerException On Solr Exception\n   */\n  private void throwIf() throws IOException, SolrServerException {\n\n    final Exception last = batchWriteException;\n    batchWriteException = null;\n\n    if (last == null) {\n      return;\n    }\n    if (last instanceof SolrServerException) {\n      throw (SolrServerException) last;\n    }\n    if (last instanceof IOException) {\n      throw (IOException) last;\n    }\n    throw new IOException(\"Batch Write Failure\", last);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/BatchWriter#throwIf().mjava","sourceNew":null,"sourceOld":"  /**\n   * Throw a legal exception if a previous batch write had an exception. The\n   * previous state is cleared. Uses {@link #batchWriteException} for the state\n   * from the last exception.\n   * \n   * This will loose individual exceptions if the exceptions happen rapidly.\n   * \n   * @throws IOException On low level IO error\n   * @throws SolrServerException On Solr Exception\n   */\n  private void throwIf() throws IOException, SolrServerException {\n\n    final Exception last = batchWriteException;\n    batchWriteException = null;\n\n    if (last == null) {\n      return;\n    }\n    if (last instanceof SolrServerException) {\n      throw (SolrServerException) last;\n    }\n    if (last instanceof IOException) {\n      throw (IOException) last;\n    }\n    throw new IOException(\"Batch Write Failure\", last);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["12109b652e9210b8d58fca47f6c4a725d058a58e","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}