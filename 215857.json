{"path":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","commits":[{"id":"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","date":1310159023,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator();\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator();\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","sourceNew":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","sourceOld":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator();\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","sourceNew":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","sourceOld":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["3cc749c053615f5871f3b95715fe292f34e70a53","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}