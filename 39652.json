{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testZInt().mjava","commits":[{"id":"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493","date":1406810962,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testZInt().mjava","pathOld":"/dev/null","sourceNew":"  public void testZInt() throws Exception {\n    final int[] ints = new int[random().nextInt(10)];\n    for (int i = 0; i < ints.length; ++i) {\n      switch (random().nextInt(3)) {\n        case 0:\n          ints[i] = random().nextInt();\n          break;\n        case 1:\n          ints[i] = random().nextBoolean() ? Integer.MIN_VALUE : Integer.MAX_VALUE;\n          break;\n        case 2:\n          ints[i] = (random().nextBoolean() ? -1 : 1) * random().nextInt(1024);\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n    Directory dir = getDirectory(createTempDir(\"testZInt\"));\n    IndexOutput output = dir.createOutput(\"zint\", newIOContext(random()));\n    for (int i : ints) {\n      output.writeZInt(i);\n    }\n    output.close();\n    \n    IndexInput input = dir.openInput(\"zint\", newIOContext(random()));\n    for (int i : ints) {\n      assertEquals(i, input.readZInt());\n    }\n    assertEquals(input.length(), input.getFilePointer());\n    input.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testZInt().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testZInt().mjava","sourceNew":"  public void testZInt() throws Exception {\n    final int[] ints = new int[random().nextInt(10)];\n    for (int i = 0; i < ints.length; ++i) {\n      switch (random().nextInt(3)) {\n        case 0:\n          ints[i] = random().nextInt();\n          break;\n        case 1:\n          ints[i] = random().nextBoolean() ? Integer.MIN_VALUE : Integer.MAX_VALUE;\n          break;\n        case 2:\n          ints[i] = (random().nextBoolean() ? -1 : 1) * random().nextInt(1024);\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n\n    try (Directory dir = getDirectory(createTempDir(\"testZInt\"))) {\n      IndexOutput output = dir.createOutput(\"zint\", newIOContext(random()));\n      for (int i : ints) {\n        output.writeZInt(i);\n      }\n      output.close();\n\n      IndexInput input = dir.openInput(\"zint\", newIOContext(random()));\n      for (int i : ints) {\n        assertEquals(i, input.readZInt());\n      }\n      assertEquals(input.length(), input.getFilePointer());\n      input.close();\n    }\n  }\n\n","sourceOld":"  public void testZInt() throws Exception {\n    final int[] ints = new int[random().nextInt(10)];\n    for (int i = 0; i < ints.length; ++i) {\n      switch (random().nextInt(3)) {\n        case 0:\n          ints[i] = random().nextInt();\n          break;\n        case 1:\n          ints[i] = random().nextBoolean() ? Integer.MIN_VALUE : Integer.MAX_VALUE;\n          break;\n        case 2:\n          ints[i] = (random().nextBoolean() ? -1 : 1) * random().nextInt(1024);\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n    Directory dir = getDirectory(createTempDir(\"testZInt\"));\n    IndexOutput output = dir.createOutput(\"zint\", newIOContext(random()));\n    for (int i : ints) {\n      output.writeZInt(i);\n    }\n    output.close();\n    \n    IndexInput input = dir.openInput(\"zint\", newIOContext(random()));\n    for (int i : ints) {\n      assertEquals(i, input.readZInt());\n    }\n    assertEquals(input.length(), input.getFilePointer());\n    input.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3adea0022cffaaa592081efed775a7b8bf86b51":["ee0a782aba5788b03bbf2ba679d4f4b0ebc88493"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3adea0022cffaaa592081efed775a7b8bf86b51"]},"commit2Childs":{"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee0a782aba5788b03bbf2ba679d4f4b0ebc88493"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}