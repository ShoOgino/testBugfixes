{"path":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.getVal(0);\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.getVal(0);\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.getVal(0);\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.get(\"collection1\");\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchema#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    @SuppressWarnings({\"rawtypes\"})\n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList collectionStatus = (NamedList)status.getVal(0);\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.STATUS.toString());\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient)clients.get(which);\n    String previousBaseURL = client.getBaseURL();\n    // Strip /collection1 step from baseURL - requests fail otherwise\n    client.setBaseURL(previousBaseURL.substring(0, previousBaseURL.lastIndexOf(\"/\")));\n    NamedList namedListResponse = client.request(request);\n    client.setBaseURL(previousBaseURL); // Restore baseURL \n    NamedList status = (NamedList)namedListResponse.get(\"status\");\n    NamedList collectionStatus = (NamedList)status.getVal(0);\n    String collectionSchema = (String)collectionStatus.get(CoreAdminParams.SCHEMA);\n    // Make sure the upgrade to managed schema happened\n    assertEquals(\"Schema resource name differs from expected name\", \"managed-schema\", collectionSchema);\n\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), 30000);\n    try {\n      // Make sure \"DO NOT EDIT\" is in the content of the managed schema\n      String fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/managed-schema\");\n      assertTrue(\"Managed schema is missing\", fileContent.contains(\"DO NOT EDIT\"));\n\n      // Make sure the original non-managed schema is no longer in ZooKeeper\n      assertFileNotInZooKeeper(zkClient, \"/solr/configs/conf1\", \"schema.xml\");\n\n      // Make sure the renamed non-managed schema is present in ZooKeeper\n      fileContent = getFileContentFromZooKeeper(zkClient, \"/solr/configs/conf1/schema.xml.bak\");\n      assertTrue(\"schema file doesn't contain '<schema'\", fileContent.contains(\"<schema\"));\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["abb23fcc2461782ab204e61213240feb77d355aa"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["abb23fcc2461782ab204e61213240feb77d355aa","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["abb23fcc2461782ab204e61213240feb77d355aa","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"abb23fcc2461782ab204e61213240feb77d355aa":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}