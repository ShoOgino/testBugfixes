{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","commits":[{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<String, Slice>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      if (DocCollection.PROPERTIES.equals(name)) continue;  // skip special properties entry\n      Object val = entry.getValue();\n      Slice s;\n      if (val instanceof Slice) {\n        s = (Slice)val;\n      } else {\n        s = new Slice(name, null, (Map<String,Object>)val);\n      }\n      result.put(name, s);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<String, Slice>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      if (DocCollection.PROPERTIES.equals(name)) continue;  // skip special properties entry\n      Object val = entry.getValue();\n      Slice s;\n      if (val instanceof Slice) {\n        s = (Slice)val;\n      } else {\n        s = new Slice(name, null, (Map<String,Object>)val);\n      }\n      result.put(name, s);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc4e6d2476fe40f282c0c25e20e629a6f37580cf","date":1355430839,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","sourceNew":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<String, Slice>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<String, Slice>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      if (DocCollection.PROPERTIES.equals(name)) continue;  // skip special properties entry\n      Object val = entry.getValue();\n      Slice s;\n      if (val instanceof Slice) {\n        s = (Slice)val;\n      } else {\n        s = new Slice(name, null, (Map<String,Object>)val);\n      }\n      result.put(name, s);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","sourceNew":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<String, Slice>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<String, Slice>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      if (DocCollection.PROPERTIES.equals(name)) continue;  // skip special properties entry\n      Object val = entry.getValue();\n      Slice s;\n      if (val instanceof Slice) {\n        s = (Slice)val;\n      } else {\n        s = new Slice(name, null, (Map<String,Object>)val);\n      }\n      result.put(name, s);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","sourceNew":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<String, Slice>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","sourceNew":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","sourceNew":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Slice#loadAllFromMap(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#makeSlices(Map[String,Object]).mjava","sourceNew":"  /** Loads multiple slices into a Map from a generic Map that probably came from deserialized JSON. */\n  public static Map<String,Slice> loadAllFromMap(Map<String, Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private static Map<String,Slice> makeSlices(Map<String,Object> genericSlices) {\n    if (genericSlices == null) return Collections.emptyMap();\n    Map<String,Slice> result = new LinkedHashMap<>(genericSlices.size());\n    for (Map.Entry<String,Object> entry : genericSlices.entrySet()) {\n      String name = entry.getKey();\n      Object val = entry.getValue();\n      if (val instanceof Slice) {\n        result.put(name, (Slice)val);\n      } else if (val instanceof Map) {\n        result.put(name, new Slice(name, null, (Map<String,Object>)val));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc4e6d2476fe40f282c0c25e20e629a6f37580cf":["c5a558d54519c651068ddb202f03befefb1514a7"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","dc4e6d2476fe40f282c0c25e20e629a6f37580cf"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["dc4e6d2476fe40f282c0c25e20e629a6f37580cf"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"c5a558d54519c651068ddb202f03befefb1514a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5a558d54519c651068ddb202f03befefb1514a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1c7a21395bae9e2f61aeb639f47aaca771c426ed"]},"commit2Childs":{"dc4e6d2476fe40f282c0c25e20e629a6f37580cf":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c5c99ad021f3da085fcb66220598a8f91dc5e453","1c7a21395bae9e2f61aeb639f47aaca771c426ed","55b50463286869f584cf849d1587a0fcd54d1dfa"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"c5a558d54519c651068ddb202f03befefb1514a7":["dc4e6d2476fe40f282c0c25e20e629a6f37580cf","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}