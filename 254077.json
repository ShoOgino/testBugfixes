{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#ensureContiguousMerge(MergePolicy.OneMerge).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#ensureContiguousMerge(MergePolicy.OneMerge).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#ensureContiguousMerge(MergePolicy.OneMerge).mjava","sourceNew":"  private int ensureContiguousMerge(MergePolicy.OneMerge merge) {\n\n    int first = segmentInfos.indexOf(merge.segments.info(0));\n    if (first == -1)\n      throw new MergePolicy.MergeException(\"could not find segment \" + merge.segments.info(0).name + \" in current index \" + segString(), directory);\n\n    final int numSegments = segmentInfos.size();\n    \n    final int numSegmentsToMerge = merge.segments.size();\n    for(int i=0;i<numSegmentsToMerge;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n\n      if (first + i >= numSegments || !segmentInfos.info(first+i).equals(info)) {\n        if (segmentInfos.indexOf(info) == -1)\n          throw new MergePolicy.MergeException(\"MergePolicy selected a segment (\" + info.name + \") that is not in the current index \" + segString(), directory);\n        else\n          throw new MergePolicy.MergeException(\"MergePolicy selected non-contiguous segments to merge (\" + merge.segString(directory) + \" vs \" + segString() + \"), which IndexWriter (currently) cannot handle\",\n                                               directory);\n      }\n    }\n\n    return first;\n  }\n\n","sourceOld":"  private int ensureContiguousMerge(MergePolicy.OneMerge merge) {\n\n    int first = segmentInfos.indexOf(merge.segments.info(0));\n    if (first == -1)\n      throw new MergePolicy.MergeException(\"could not find segment \" + merge.segments.info(0).name + \" in current index \" + segString(), directory);\n\n    final int numSegments = segmentInfos.size();\n    \n    final int numSegmentsToMerge = merge.segments.size();\n    for(int i=0;i<numSegmentsToMerge;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n\n      if (first + i >= numSegments || !segmentInfos.info(first+i).equals(info)) {\n        if (segmentInfos.indexOf(info) == -1)\n          throw new MergePolicy.MergeException(\"MergePolicy selected a segment (\" + info.name + \") that is not in the current index \" + segString(), directory);\n        else\n          throw new MergePolicy.MergeException(\"MergePolicy selected non-contiguous segments to merge (\" + merge.segString(directory) + \" vs \" + segString() + \"), which IndexWriter (currently) cannot handle\",\n                                               directory);\n      }\n    }\n\n    return first;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#ensureContiguousMerge(MergePolicy.OneMerge).mjava","sourceNew":null,"sourceOld":"  private int ensureContiguousMerge(MergePolicy.OneMerge merge) {\n\n    int first = segmentInfos.indexOf(merge.segments.info(0));\n    if (first == -1)\n      throw new MergePolicy.MergeException(\"could not find segment \" + merge.segments.info(0).name + \" in current index \" + segString(), directory);\n\n    final int numSegments = segmentInfos.size();\n    \n    final int numSegmentsToMerge = merge.segments.size();\n    for(int i=0;i<numSegmentsToMerge;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n\n      if (first + i >= numSegments || !segmentInfos.info(first+i).equals(info)) {\n        if (segmentInfos.indexOf(info) == -1)\n          throw new MergePolicy.MergeException(\"MergePolicy selected a segment (\" + info.name + \") that is not in the current index \" + segString(), directory);\n        else\n          throw new MergePolicy.MergeException(\"MergePolicy selected non-contiguous segments to merge (\" + merge.segString(directory) + \" vs \" + segString() + \"), which IndexWriter (currently) cannot handle\",\n                                               directory);\n      }\n    }\n\n    return first;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}