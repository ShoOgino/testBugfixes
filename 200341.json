{"path":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance#testGetDistance().mjava","commits":[{"id":"6000179efff4c320dafa76c7f0f088e44c4df0d0","date":1213765317,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance#testGetDistance().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetDistance() {\n    float d = sd.getDistance(\"al\", \"al\");\n    assertTrue(d == 1.0f);\n    d = sd.getDistance(\"martha\", \"marhta\");\n    assertTrue(d > 0.66 && d <0.67);\n    d = sd.getDistance(\"jones\", \"johnson\");\n    assertTrue(d > 0.199 && d < 0.201);\n    d = sd.getDistance(\"abcvwxyz\", \"cabvwxyz\");\n    assertTrue(d > 0.749 && d < 0.751);\n    d = sd.getDistance(\"dwayne\", \"duane\");\n    assertTrue(d > 0.599 && d < 0.601);\n    d = sd.getDistance(\"dixon\", \"dicksonx\");\n    assertTrue(d > 0.199 && d < 0.201);\n    d = sd.getDistance(\"six\", \"ten\");\n    assertTrue(d == 0f);\n    float d1 = sd.getDistance(\"zac ephron\", \"zac efron\");\n    float d2 = sd.getDistance(\"zac ephron\", \"kai ephron\");\n    assertTrue(d1 < d2);\n    d1 = sd.getDistance(\"brittney spears\", \"britney spears\");\n    d2 = sd.getDistance(\"brittney spears\", \"brittney startzman\");\n    assertTrue(d1 > d2);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9fb1569ee65389d2a4b724f0c8ccc60c46dd53a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9fb1569ee65389d2a4b724f0c8ccc60c46dd53a3","date":1235743632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance#testGetDistance().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance#testGetDistance().mjava","sourceNew":"  public void testGetDistance() {\n    float d = sd.getDistance(\"al\", \"al\");\n    assertEquals(d,1.0f,0.001);\n    d = sd.getDistance(\"martha\", \"marhta\");\n    assertEquals(d,0.6666,0.001);\n    d = sd.getDistance(\"jones\", \"johnson\");\n    assertEquals(d,0.4285,0.001);\n    d = sd.getDistance(\"abcvwxyz\", \"cabvwxyz\");\n    assertEquals(d,0.75,0.001);    \n    d = sd.getDistance(\"dwayne\", \"duane\");\n    assertEquals(d,0.666,0.001);\n    d = sd.getDistance(\"dixon\", \"dicksonx\");\n    assertEquals(d,0.5,0.001);\n    d = sd.getDistance(\"six\", \"ten\");\n    assertEquals(d,0,0.001);\n    float d1 = sd.getDistance(\"zac ephron\", \"zac efron\");\n    float d2 = sd.getDistance(\"zac ephron\", \"kai ephron\");\n    assertEquals(d1,d2,0.001);\n    d1 = sd.getDistance(\"brittney spears\", \"britney spears\");\n    d2 = sd.getDistance(\"brittney spears\", \"brittney startzman\");\n    assertTrue(d1 > d2);\n  }\n\n","sourceOld":"  public void testGetDistance() {\n    float d = sd.getDistance(\"al\", \"al\");\n    assertTrue(d == 1.0f);\n    d = sd.getDistance(\"martha\", \"marhta\");\n    assertTrue(d > 0.66 && d <0.67);\n    d = sd.getDistance(\"jones\", \"johnson\");\n    assertTrue(d > 0.199 && d < 0.201);\n    d = sd.getDistance(\"abcvwxyz\", \"cabvwxyz\");\n    assertTrue(d > 0.749 && d < 0.751);\n    d = sd.getDistance(\"dwayne\", \"duane\");\n    assertTrue(d > 0.599 && d < 0.601);\n    d = sd.getDistance(\"dixon\", \"dicksonx\");\n    assertTrue(d > 0.199 && d < 0.201);\n    d = sd.getDistance(\"six\", \"ten\");\n    assertTrue(d == 0f);\n    float d1 = sd.getDistance(\"zac ephron\", \"zac efron\");\n    float d2 = sd.getDistance(\"zac ephron\", \"kai ephron\");\n    assertTrue(d1 < d2);\n    d1 = sd.getDistance(\"brittney spears\", \"britney spears\");\n    d2 = sd.getDistance(\"brittney spears\", \"brittney startzman\");\n    assertTrue(d1 > d2);    \n  }\n\n","bugFix":["6000179efff4c320dafa76c7f0f088e44c4df0d0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance#testGetDistance().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance#testGetDistance().mjava","sourceNew":"  public void testGetDistance() {\n    float d = sd.getDistance(\"al\", \"al\");\n    assertEquals(d,1.0f,0.001);\n    d = sd.getDistance(\"martha\", \"marhta\");\n    assertEquals(d,0.6666,0.001);\n    d = sd.getDistance(\"jones\", \"johnson\");\n    assertEquals(d,0.4285,0.001);\n    d = sd.getDistance(\"abcvwxyz\", \"cabvwxyz\");\n    assertEquals(d,0.75,0.001);    \n    d = sd.getDistance(\"dwayne\", \"duane\");\n    assertEquals(d,0.666,0.001);\n    d = sd.getDistance(\"dixon\", \"dicksonx\");\n    assertEquals(d,0.5,0.001);\n    d = sd.getDistance(\"six\", \"ten\");\n    assertEquals(d,0,0.001);\n    float d1 = sd.getDistance(\"zac ephron\", \"zac efron\");\n    float d2 = sd.getDistance(\"zac ephron\", \"kai ephron\");\n    assertEquals(d1,d2,0.001);\n    d1 = sd.getDistance(\"brittney spears\", \"britney spears\");\n    d2 = sd.getDistance(\"brittney spears\", \"brittney startzman\");\n    assertTrue(d1 > d2);\n  }\n\n","sourceOld":"  public void testGetDistance() {\n    float d = sd.getDistance(\"al\", \"al\");\n    assertEquals(d,1.0f,0.001);\n    d = sd.getDistance(\"martha\", \"marhta\");\n    assertEquals(d,0.6666,0.001);\n    d = sd.getDistance(\"jones\", \"johnson\");\n    assertEquals(d,0.4285,0.001);\n    d = sd.getDistance(\"abcvwxyz\", \"cabvwxyz\");\n    assertEquals(d,0.75,0.001);    \n    d = sd.getDistance(\"dwayne\", \"duane\");\n    assertEquals(d,0.666,0.001);\n    d = sd.getDistance(\"dixon\", \"dicksonx\");\n    assertEquals(d,0.5,0.001);\n    d = sd.getDistance(\"six\", \"ten\");\n    assertEquals(d,0,0.001);\n    float d1 = sd.getDistance(\"zac ephron\", \"zac efron\");\n    float d2 = sd.getDistance(\"zac ephron\", \"kai ephron\");\n    assertEquals(d1,d2,0.001);\n    d1 = sd.getDistance(\"brittney spears\", \"britney spears\");\n    d2 = sd.getDistance(\"brittney spears\", \"brittney startzman\");\n    assertTrue(d1 > d2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fb1569ee65389d2a4b724f0c8ccc60c46dd53a3":["6000179efff4c320dafa76c7f0f088e44c4df0d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6000179efff4c320dafa76c7f0f088e44c4df0d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9fb1569ee65389d2a4b724f0c8ccc60c46dd53a3"]},"commit2Childs":{"9fb1569ee65389d2a4b724f0c8ccc60c46dd53a3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6000179efff4c320dafa76c7f0f088e44c4df0d0"],"6000179efff4c320dafa76c7f0f088e44c4df0d0":["9fb1569ee65389d2a4b724f0c8ccc60c46dd53a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}