{"path":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","commits":[{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","pathOld":"/dev/null","sourceNew":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    int i = 0;\n    TermAttribute termAtt = (TermAttribute) source.getAttribute(TermAttribute.class);\n    while (source.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = (TermAttribute) sink1.getAttribute(TermAttribute.class);\n    while (sink1.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = (TermAttribute) sink2.getAttribute(TermAttribute.class);\n    while (sink2.incrementToken()) {\n      assertTrue(termAtt.term().equalsIgnoreCase(\"The\"));\n      i++;\n    }\n    assertEquals(\"there should be two times 'the' in the stream\", 2, i);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["360d15dc189fb48153cb62234f7d20819e4e292e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","sourceNew":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    int i = 0;\n    TermAttribute termAtt = source.getAttribute(TermAttribute.class);\n    while (source.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = sink1.getAttribute(TermAttribute.class);\n    while (sink1.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = sink2.getAttribute(TermAttribute.class);\n    while (sink2.incrementToken()) {\n      assertTrue(termAtt.term().equalsIgnoreCase(\"The\"));\n      i++;\n    }\n    assertEquals(\"there should be two times 'the' in the stream\", 2, i);\n  }\n\n","sourceOld":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    int i = 0;\n    TermAttribute termAtt = (TermAttribute) source.getAttribute(TermAttribute.class);\n    while (source.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = (TermAttribute) sink1.getAttribute(TermAttribute.class);\n    while (sink1.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = (TermAttribute) sink2.getAttribute(TermAttribute.class);\n    while (sink2.incrementToken()) {\n      assertTrue(termAtt.term().equalsIgnoreCase(\"The\"));\n      i++;\n    }\n    assertEquals(\"there should be two times 'the' in the stream\", 2, i);\n  }\n\n","bugFix":null,"bugIntro":["360d15dc189fb48153cb62234f7d20819e4e292e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"360d15dc189fb48153cb62234f7d20819e4e292e","date":1263562938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","sourceNew":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    \n    source.addAttribute(CheckClearAttributesAttribute.class);\n    sink1.addAttribute(CheckClearAttributesAttribute.class);\n    sink2.addAttribute(CheckClearAttributesAttribute.class);\n    \n    assertTokenStreamContents(source, tokens1);\n    assertTokenStreamContents(sink1, tokens1);\n    assertTokenStreamContents(sink2, new String[]{\"The\", \"the\"});\n  }\n\n","sourceOld":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    int i = 0;\n    TermAttribute termAtt = source.getAttribute(TermAttribute.class);\n    while (source.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = sink1.getAttribute(TermAttribute.class);\n    while (sink1.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = sink2.getAttribute(TermAttribute.class);\n    while (sink2.incrementToken()) {\n      assertTrue(termAtt.term().equalsIgnoreCase(\"The\"));\n      i++;\n    }\n    assertEquals(\"there should be two times 'the' in the stream\", 2, i);\n  }\n\n","bugFix":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568","8d78f014fded44fbde905f4f84cdc21907b371e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","sourceNew":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    \n    source.addAttribute(CheckClearAttributesAttribute.class);\n    sink1.addAttribute(CheckClearAttributesAttribute.class);\n    sink2.addAttribute(CheckClearAttributesAttribute.class);\n    \n    assertTokenStreamContents(source, tokens1);\n    assertTokenStreamContents(sink1, tokens1);\n    assertTokenStreamContents(sink2, new String[]{\"The\", \"the\"});\n  }\n\n","sourceOld":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    \n    source.addAttribute(CheckClearAttributesAttribute.class);\n    sink1.addAttribute(CheckClearAttributesAttribute.class);\n    sink2.addAttribute(CheckClearAttributesAttribute.class);\n    \n    assertTokenStreamContents(source, tokens1);\n    assertTokenStreamContents(sink1, tokens1);\n    assertTokenStreamContents(sink2, new String[]{\"The\", \"the\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","sourceNew":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    \n    source.addAttribute(CheckClearAttributesAttribute.class);\n    sink1.addAttribute(CheckClearAttributesAttribute.class);\n    sink2.addAttribute(CheckClearAttributesAttribute.class);\n    \n    assertTokenStreamContents(source, tokens1);\n    assertTokenStreamContents(sink1, tokens1);\n    assertTokenStreamContents(sink2, new String[]{\"The\", \"the\"});\n  }\n\n","sourceOld":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    \n    source.addAttribute(CheckClearAttributesAttribute.class);\n    sink1.addAttribute(CheckClearAttributesAttribute.class);\n    sink2.addAttribute(CheckClearAttributesAttribute.class);\n    \n    assertTokenStreamContents(source, tokens1);\n    assertTokenStreamContents(sink1, tokens1);\n    assertTokenStreamContents(sink2, new String[]{\"The\", \"the\"});\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","sourceNew":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    \n    source.addAttribute(CheckClearAttributesAttribute.class);\n    sink1.addAttribute(CheckClearAttributesAttribute.class);\n    sink2.addAttribute(CheckClearAttributesAttribute.class);\n    \n    assertTokenStreamContents(source, tokens1);\n    assertTokenStreamContents(sink1, tokens1);\n    assertTokenStreamContents(sink2, new String[]{\"The\", \"the\"});\n  }\n\n","sourceOld":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    \n    source.addAttribute(CheckClearAttributesAttribute.class);\n    sink1.addAttribute(CheckClearAttributesAttribute.class);\n    sink2.addAttribute(CheckClearAttributesAttribute.class);\n    \n    assertTokenStreamContents(source, tokens1);\n    assertTokenStreamContents(sink1, tokens1);\n    assertTokenStreamContents(sink2, new String[]{\"The\", \"the\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["360d15dc189fb48153cb62234f7d20819e4e292e"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"360d15dc189fb48153cb62234f7d20819e4e292e":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["360d15dc189fb48153cb62234f7d20819e4e292e"],"360d15dc189fb48153cb62234f7d20819e4e292e":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}