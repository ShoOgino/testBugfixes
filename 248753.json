{"path":"lucene/core/src/java/org/apache/lucene/geo/ComponentTree#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","commits":[{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/ComponentTree#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#relateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  /** Returns relation to the provided triangle */\n  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (minY <= this.maxY && minX <= this.maxX) {\n      Relation relation = component.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        return relation;\n      }\n      if (left != null) {\n        relation = left.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n      if (right != null && ((splitX == false && maxY >= this.component.getMinY()) || (splitX && maxX >= this.component.getMinX()))) {\n        relation = right.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  /** Returns relation to the provided triangle */\n  public Relation relateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double triMinLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double triMinLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    if (triMinLat <= maxY && triMinLon <= maxX) {\n      Relation relation = internalComponentRelateTriangle(ax, ay, bx, by, cx, cy);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        return relation;\n      }\n      if (left != null) {\n        relation = left.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n      double triMaxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n      double triMaxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n      if (right != null && ((splitX == false && triMaxLat >= this.minLat) || (splitX && triMaxLon >= this.minLon))) {\n        relation = right.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/ComponentTree#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns relation to the provided triangle */\n  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (minY <= this.maxY && minX <= this.maxX) {\n      Relation relation = component.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        return relation;\n      }\n      if (left != null) {\n        relation = left.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n      if (right != null && ((splitX == false && maxY >= this.component.getMinY()) || (splitX && maxX >= this.component.getMinX()))) {\n        relation = right.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a923e28c9d079048c6993884ec89c44f0380b923","date":1581100153,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/ComponentTree#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/ComponentTree#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (minY <= this.maxY && minX <= this.maxX) {\n      Relation relation = component.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        return relation;\n      }\n      if (left != null) {\n        relation = left.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n      if (right != null && ((splitX == false && maxY >= this.component.getMinY()) || (splitX && maxX >= this.component.getMinX()))) {\n        relation = right.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  /** Returns relation to the provided triangle */\n  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (minY <= this.maxY && minX <= this.maxX) {\n      Relation relation = component.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        return relation;\n      }\n      if (left != null) {\n        relation = left.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n      if (right != null && ((splitX == false && maxY >= this.component.getMinY()) || (splitX && maxX >= this.component.getMinX()))) {\n        relation = right.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/ComponentTree#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (minY <= this.maxY && minX <= this.maxX) {\n      Relation relation = component.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        return relation;\n      }\n      if (left != null) {\n        relation = left.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n      if (right != null && ((splitX == false && maxY >= this.component.getMinY()) || (splitX && maxX >= this.component.getMinX()))) {\n        relation = right.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c568a1e2a5125c2245150eebb030a81baa158b31":["a923e28c9d079048c6993884ec89c44f0380b923"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a923e28c9d079048c6993884ec89c44f0380b923":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["a923e28c9d079048c6993884ec89c44f0380b923","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a923e28c9d079048c6993884ec89c44f0380b923":["c568a1e2a5125c2245150eebb030a81baa158b31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}