{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","pathOld":"/dev/null","sourceNew":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random;\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1.0f));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Float previous = null; \n    for (TermFreq tf : keys) {\n      Float current = lookup.get(tf.term);\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d334a3e8e6b94298d8cf2802a403a096c06f0b92","date":1329766559,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","sourceNew":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random;\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1.0f));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Float previous = null; \n    for (TermFreq tf : keys) {\n      Float current = lookup.get(tf.term.utf8ToString());\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","sourceOld":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random;\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1.0f));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Float previous = null; \n    for (TermFreq tf : keys) {\n      Float current = lookup.get(tf.term);\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","sourceNew":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random;\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Float previous = null; \n    for (TermFreq tf : keys) {\n      Float current = (Float)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random));\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","sourceOld":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random;\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1.0f));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Float previous = null; \n    for (TermFreq tf : keys) {\n      Float current = lookup.get(tf.term.utf8ToString());\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","sourceNew":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random;\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (TermFreq tf : keys) {\n      Long current = ((Number)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","sourceOld":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random;\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Float previous = null; \n    for (TermFreq tf : keys) {\n      Float current = (Float)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random));\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","sourceNew":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random;\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (TermFreq tf : keys) {\n      Long current = ((Number)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","sourceOld":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random;\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1.0f));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Float previous = null; \n    for (TermFreq tf : keys) {\n      Float current = lookup.get(tf.term);\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","sourceNew":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (TermFreq tf : keys) {\n      Long current = ((Number)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","sourceOld":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random;\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (TermFreq tf : keys) {\n      Long current = ((Number)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","sourceNew":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (TermFreq tf : keys) {\n      Long current = ((Number)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","sourceOld":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (TermFreq tf : keys) {\n      Long current = ((Number)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7bf07f4ebadc7539de83a531e64678350d78ca26","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ecc52400551de6a7d8daf646be839487911627c":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["6ecc52400551de6a7d8daf646be839487911627c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["6ecc52400551de6a7d8daf646be839487911627c"],"6ecc52400551de6a7d8daf646be839487911627c":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}