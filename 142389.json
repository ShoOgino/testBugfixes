{"path":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapCopy(Map).mjava","commits":[{"id":"01ff1eeea394f76a66d8998b861d33d8546b8ca4","date":1422517232,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapCopy(Map).mjava","pathOld":"/dev/null","sourceNew":"  private static Map getMapCopy(Map value) {\n    Map copy = new LinkedHashMap<>();\n    for (Object o1 : value.entrySet()) {\n      Map.Entry entry = (Map.Entry) o1;\n      if(\"\".equals( entry.getKey())){\n        copy.put(entry.getKey(),entry.getValue());\n        continue;\n      }\n      if (entry.getValue() != null) {\n        if (entry.getValue() instanceof List) {\n          List l = (List) entry.getValue();\n          String[] sarr = new String[l.size()];\n          for (int i = 0; i < l.size(); i++) {\n            if( l.get(i) != null)  sarr[i]= String.valueOf(l.get(i));\n          }\n          copy.put(entry.getKey(), sarr);\n        } else {\n          copy.put(entry.getKey(), String.valueOf(entry.getValue()));\n        }\n      } else {\n        copy.put(entry.getKey(), entry.getValue());\n      }\n    }\n    return copy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapCopy(Map).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapCopy(Map).mjava","sourceNew":"  private static Map getMapCopy(Map value) {\n    Map copy = new LinkedHashMap<>();\n    for (Object o1 : value.entrySet()) {\n      Map.Entry entry = (Map.Entry) o1;\n      if (\"\".equals(entry.getKey())) {\n        copy.put(entry.getKey(), entry.getValue());\n        continue;\n      }\n      if (entry.getValue() != null) {\n        if (entry.getValue() instanceof List) {\n          List l = (List) entry.getValue();\n          String[] sarr = new String[l.size()];\n          for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) != null) sarr[i] = String.valueOf(l.get(i));\n          }\n          copy.put(entry.getKey(), sarr);\n        } else {\n          copy.put(entry.getKey(), String.valueOf(entry.getValue()));\n        }\n      } else {\n        copy.put(entry.getKey(), entry.getValue());\n      }\n    }\n    return copy;\n  }\n\n","sourceOld":"  private static Map getMapCopy(Map value) {\n    Map copy = new LinkedHashMap<>();\n    for (Object o1 : value.entrySet()) {\n      Map.Entry entry = (Map.Entry) o1;\n      if(\"\".equals( entry.getKey())){\n        copy.put(entry.getKey(),entry.getValue());\n        continue;\n      }\n      if (entry.getValue() != null) {\n        if (entry.getValue() instanceof List) {\n          List l = (List) entry.getValue();\n          String[] sarr = new String[l.size()];\n          for (int i = 0; i < l.size(); i++) {\n            if( l.get(i) != null)  sarr[i]= String.valueOf(l.get(i));\n          }\n          copy.put(entry.getKey(), sarr);\n        } else {\n          copy.put(entry.getKey(), String.valueOf(entry.getValue()));\n        }\n      } else {\n        copy.put(entry.getKey(), entry.getValue());\n      }\n    }\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapCopy(Map).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapCopy(Map).mjava","sourceNew":"  /**\n   * This converts Lists to arrays of strings. Because Solr expects\n   * params to be String[]\n   */\n  private static Map getMapCopy(Map value) {\n    Map copy = new LinkedHashMap<>();\n    for (Object o1 : value.entrySet()) {\n      Map.Entry entry = (Map.Entry) o1;\n      if (\"\".equals(entry.getKey())) {\n        copy.put(entry.getKey(), entry.getValue());\n        continue;\n      }\n      if (entry.getValue() != null) {\n        if (entry.getValue() instanceof List) {\n          List l = (List) entry.getValue();\n          String[] sarr = new String[l.size()];\n          for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) != null) sarr[i] = String.valueOf(l.get(i));\n          }\n          copy.put(entry.getKey(), sarr);\n        } else {\n          copy.put(entry.getKey(), String.valueOf(entry.getValue()));\n        }\n      } else {\n        copy.put(entry.getKey(), entry.getValue());\n      }\n    }\n    return copy;\n  }\n\n","sourceOld":"  private static Map getMapCopy(Map value) {\n    Map copy = new LinkedHashMap<>();\n    for (Object o1 : value.entrySet()) {\n      Map.Entry entry = (Map.Entry) o1;\n      if (\"\".equals(entry.getKey())) {\n        copy.put(entry.getKey(), entry.getValue());\n        continue;\n      }\n      if (entry.getValue() != null) {\n        if (entry.getValue() instanceof List) {\n          List l = (List) entry.getValue();\n          String[] sarr = new String[l.size()];\n          for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) != null) sarr[i] = String.valueOf(l.get(i));\n          }\n          copy.put(entry.getKey(), sarr);\n        } else {\n          copy.put(entry.getKey(), String.valueOf(entry.getValue()));\n        }\n      } else {\n        copy.put(entry.getKey(), entry.getValue());\n      }\n    }\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapCopy(Map).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapCopy(Map).mjava","sourceNew":"  /**\n   * This converts Lists to arrays of strings. Because Solr expects\n   * params to be String[]\n   */\n  private static Map getMapCopy(Map value) {\n    Map copy = new LinkedHashMap<>();\n    for (Object o1 : value.entrySet()) {\n      Map.Entry entry = (Map.Entry) o1;\n      if (\"\".equals(entry.getKey())) {\n        copy.put(entry.getKey(), entry.getValue());\n        continue;\n      }\n      if (entry.getValue() != null) {\n        if (entry.getValue() instanceof List) {\n          List l = (List) entry.getValue();\n          String[] sarr = new String[l.size()];\n          for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) != null) sarr[i] = String.valueOf(l.get(i));\n          }\n          copy.put(entry.getKey(), sarr);\n        } else {\n          copy.put(entry.getKey(), String.valueOf(entry.getValue()));\n        }\n      } else {\n        copy.put(entry.getKey(), entry.getValue());\n      }\n    }\n    return copy;\n  }\n\n","sourceOld":"  private static Map getMapCopy(Map value) {\n    Map copy = new LinkedHashMap<>();\n    for (Object o1 : value.entrySet()) {\n      Map.Entry entry = (Map.Entry) o1;\n      if (\"\".equals(entry.getKey())) {\n        copy.put(entry.getKey(), entry.getValue());\n        continue;\n      }\n      if (entry.getValue() != null) {\n        if (entry.getValue() instanceof List) {\n          List l = (List) entry.getValue();\n          String[] sarr = new String[l.size()];\n          for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) != null) sarr[i] = String.valueOf(l.get(i));\n          }\n          copy.put(entry.getKey(), sarr);\n        } else {\n          copy.put(entry.getKey(), String.valueOf(entry.getValue()));\n        }\n      } else {\n        copy.put(entry.getKey(), entry.getValue());\n      }\n    }\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapCopy(Map).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapCopy(Map).mjava","sourceNew":"  /**\n   * This converts Lists to arrays of strings. Because Solr expects\n   * params to be String[]\n   */\n\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static Map getMapCopy(Map value) {\n    @SuppressWarnings({\"rawtypes\"})\n    Map copy = new LinkedHashMap<>();\n    for (Object o1 : value.entrySet()) {\n      @SuppressWarnings({\"rawtypes\"})\n      Map.Entry entry = (Map.Entry) o1;\n      if (\"\".equals(entry.getKey())) {\n        copy.put(entry.getKey(), entry.getValue());\n        continue;\n      }\n      if (entry.getValue() != null) {\n        if (entry.getValue() instanceof List) {\n          @SuppressWarnings({\"rawtypes\"})\n          List l = (List) entry.getValue();\n          String[] sarr = new String[l.size()];\n          for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) != null) sarr[i] = String.valueOf(l.get(i));\n          }\n          copy.put(entry.getKey(), sarr);\n        } else {\n          copy.put(entry.getKey(), String.valueOf(entry.getValue()));\n        }\n      } else {\n        copy.put(entry.getKey(), entry.getValue());\n      }\n    }\n    return copy;\n  }\n\n","sourceOld":"  /**\n   * This converts Lists to arrays of strings. Because Solr expects\n   * params to be String[]\n   */\n  private static Map getMapCopy(Map value) {\n    Map copy = new LinkedHashMap<>();\n    for (Object o1 : value.entrySet()) {\n      Map.Entry entry = (Map.Entry) o1;\n      if (\"\".equals(entry.getKey())) {\n        copy.put(entry.getKey(), entry.getValue());\n        continue;\n      }\n      if (entry.getValue() != null) {\n        if (entry.getValue() instanceof List) {\n          List l = (List) entry.getValue();\n          String[] sarr = new String[l.size()];\n          for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) != null) sarr[i] = String.valueOf(l.get(i));\n          }\n          copy.put(entry.getKey(), sarr);\n        } else {\n          copy.put(entry.getKey(), String.valueOf(entry.getValue()));\n        }\n      } else {\n        copy.put(entry.getKey(), entry.getValue());\n      }\n    }\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7207d1200ca5f52d4214da9c87a2cb93ce7564","date":1591903314,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#getMapCopy(Map).mjava","sourceNew":null,"sourceOld":"  /**\n   * This converts Lists to arrays of strings. Because Solr expects\n   * params to be String[]\n   */\n\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static Map getMapCopy(Map value) {\n    @SuppressWarnings({\"rawtypes\"})\n    Map copy = new LinkedHashMap<>();\n    for (Object o1 : value.entrySet()) {\n      @SuppressWarnings({\"rawtypes\"})\n      Map.Entry entry = (Map.Entry) o1;\n      if (\"\".equals(entry.getKey())) {\n        copy.put(entry.getKey(), entry.getValue());\n        continue;\n      }\n      if (entry.getValue() != null) {\n        if (entry.getValue() instanceof List) {\n          @SuppressWarnings({\"rawtypes\"})\n          List l = (List) entry.getValue();\n          String[] sarr = new String[l.size()];\n          for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) != null) sarr[i] = String.valueOf(l.get(i));\n          }\n          copy.put(entry.getKey(), sarr);\n        } else {\n          copy.put(entry.getKey(), String.valueOf(entry.getValue()));\n        }\n      } else {\n        copy.put(entry.getKey(), entry.getValue());\n      }\n    }\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"2330174b38007b9942205a2679db9ddffe35af89":["01ff1eeea394f76a66d8998b861d33d8546b8ca4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"01ff1eeea394f76a66d8998b861d33d8546b8ca4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c7207d1200ca5f52d4214da9c87a2cb93ce7564":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"a5296efc4b319f5647b606629c093a94b23692c6":["2330174b38007b9942205a2679db9ddffe35af89","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["2330174b38007b9942205a2679db9ddffe35af89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c7207d1200ca5f52d4214da9c87a2cb93ce7564"]},"commit2Childs":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["1c7207d1200ca5f52d4214da9c87a2cb93ce7564"],"2330174b38007b9942205a2679db9ddffe35af89":["a5296efc4b319f5647b606629c093a94b23692c6","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01ff1eeea394f76a66d8998b861d33d8546b8ca4"],"01ff1eeea394f76a66d8998b861d33d8546b8ca4":["2330174b38007b9942205a2679db9ddffe35af89"],"1c7207d1200ca5f52d4214da9c87a2cb93ce7564":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["75237075d8425856bf4bbf52a6be4f9162b8187d","a5296efc4b319f5647b606629c093a94b23692c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}