{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.logOnce(log,null,ex );\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","sourceOld":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.logOnce(log,null,ex );\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.logOnce(log,null,ex );\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","sourceOld":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.logOnce(log,null,ex );\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.logOnce(log,null,ex );\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","sourceOld":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.logOnce(log,null,ex );\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.log(log, null, ex);\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","sourceOld":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.logOnce(log,null,ex );\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e897244f15f49ebc415056ed2f135289e35eaf5","date":1328152412,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    String msg = null;\n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      msg = th.getMessage();\n      if (msg != null) break;\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.log(log, null, ex);\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n\n    res.sendError( code, msg + trace );\n  }\n\n","sourceOld":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.log(log, null, ex);\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d46584d4a299aaed53fdd79f1cd77f222aee1e","date":1331071171,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getErrorInfo(Throwable,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","sourceNew":"  protected int getErrorInfo(Throwable ex, NamedList info) {\n    int code=500;\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    String msg = null;\n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      msg = th.getMessage();\n      if (msg != null) break;\n    }\n    if(msg != null) {\n      info.add(\"msg\", msg);\n    }\n    \n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    info.add(\"code\", new Integer(code));\n    return code;\n  }\n\n","sourceOld":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    String msg = null;\n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      msg = th.getMessage();\n      if (msg != null) break;\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.log(log, null, ex);\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n\n    res.sendError( code, msg + trace );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","sourceNew":null,"sourceOld":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    String msg = null;\n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      msg = th.getMessage();\n      if (msg != null) break;\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.log(log, null, ex);\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n\n    res.sendError( code, msg + trace );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8d46584d4a299aaed53fdd79f1cd77f222aee1e":["7e897244f15f49ebc415056ed2f135289e35eaf5"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7e897244f15f49ebc415056ed2f135289e35eaf5","d8d46584d4a299aaed53fdd79f1cd77f222aee1e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e897244f15f49ebc415056ed2f135289e35eaf5":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d8d46584d4a299aaed53fdd79f1cd77f222aee1e"]},"commit2Childs":{"d8d46584d4a299aaed53fdd79f1cd77f222aee1e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7e897244f15f49ebc415056ed2f135289e35eaf5":["d8d46584d4a299aaed53fdd79f1cd77f222aee1e","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["7e897244f15f49ebc415056ed2f135289e35eaf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}