{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(BlockTermState).mjava","commits":[{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    StandardTermState state = (StandardTermState)_state;\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == df;\n    state.freqStart = freqStart;\n    state.proxStart = proxStart;\n    if (df >= skipMinimum) {\n      state.skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      state.skipOffset = -1;\n    }\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    StandardTermState state = (StandardTermState)_state;\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == df;\n    state.freqStart = freqStart;\n    state.proxStart = proxStart;\n    if (df >= skipMinimum) {\n      state.skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      state.skipOffset = -1;\n    }\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    StandardTermState state = (StandardTermState) _state;\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == df;\n    state.freqStart = freqStart;\n    state.proxStart = proxStart;\n    if (df >= skipMinimum) {\n      state.skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      state.skipOffset = -1;\n    }\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    StandardTermState state = (StandardTermState)_state;\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == df;\n    state.freqStart = freqStart;\n    state.proxStart = proxStart;\n    if (df >= skipMinimum) {\n      state.skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      state.skipOffset = -1;\n    }\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    StandardTermState state = (StandardTermState) _state;\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == df;\n    state.freqStart = freqStart;\n    state.proxStart = proxStart;\n    if (df >= skipMinimum) {\n      state.skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      state.skipOffset = -1;\n    }\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    StandardTermState state = (StandardTermState) _state;\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == df;\n    state.freqStart = freqStart;\n    state.proxStart = proxStart;\n    if (df >= skipMinimum) {\n      state.skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      state.skipOffset = -1;\n    }\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    StandardTermState state = (StandardTermState) _state;\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == df;\n    state.freqStart = freqStart;\n    state.proxStart = proxStart;\n    if (df >= skipMinimum) {\n      state.skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      state.skipOffset = -1;\n    }\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    StandardTermState state = (StandardTermState) _state;\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == df;\n    state.freqStart = freqStart;\n    state.proxStart = proxStart;\n    if (df >= skipMinimum) {\n      state.skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      state.skipOffset = -1;\n    }\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}