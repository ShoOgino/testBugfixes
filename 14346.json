{"path":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70790b11e79a0366b21b2cc5b82d03b6fddcef81","date":1364594206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a207624ce3e468bca1819861084438d936e3b1c","date":1367514967,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test relies on files actually being deleted\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869e42fbd9c52c4728652ba51faf7266b239a6f","date":1428140988,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test relies on files actually being deleted\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    startingGun.countDown();\n\n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test relies on files actually being deleted\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    startingGun.countDown();\n\n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test relies on files actually being deleted\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    startingGun.countDown();\n\n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    startingGun.countDown();\n\n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test relies on files actually being deleted\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    startingGun.countDown();\n\n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    startingGun.countDown();\n\n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test relies on files actually being deleted\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    startingGun.countDown();\n\n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    startingGun.countDown();\n\n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test relies on files actually being deleted\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    final SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    Thread[] threads = new Thread[10];\n    final IndexCommit[] snapshots = new IndexCommit[threads.length];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for (int i = 0; i < threads.length; i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            writer.addDocument(new Document());\n            writer.commit();\n            snapshots[finalI] = sdp.snapshot();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n\n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    startingGun.countDown();\n\n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (int i=0;i<threads.length;i++) {\n      sdp.release(snapshots[i]);\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b869e42fbd9c52c4728652ba51faf7266b239a6f":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8a207624ce3e468bca1819861084438d936e3b1c":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["b869e42fbd9c52c4728652ba51faf7266b239a6f","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["b869e42fbd9c52c4728652ba51faf7266b239a6f","b470f36a9372c97283360b1304eacbde22df6c0d"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b470f36a9372c97283360b1304eacbde22df6c0d":["b869e42fbd9c52c4728652ba51faf7266b239a6f","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b869e42fbd9c52c4728652ba51faf7266b239a6f"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["8a207624ce3e468bca1819861084438d936e3b1c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"b869e42fbd9c52c4728652ba51faf7266b239a6f":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["8a207624ce3e468bca1819861084438d936e3b1c"],"8a207624ce3e468bca1819861084438d936e3b1c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["b869e42fbd9c52c4728652ba51faf7266b239a6f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}