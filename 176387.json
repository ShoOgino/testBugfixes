{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#heapAdjust(int).mjava","commits":[{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#heapAdjust(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#heapAdjust(int).mjava","sourceNew":"  /** \n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  protected final void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /* The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  private void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#heapAdjust(int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  protected final void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#heapAdjust(int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  protected final void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","date":1400613895,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#heapAdjust(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#heapAdjust(int).mjava","sourceNew":"  /** \n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  protected final void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >>> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  protected final void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d","date":1400696679,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#heapAdjust(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#heapAdjust(int).mjava","sourceNew":"  /** \n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  protected final void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >>> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  protected final void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#heapAdjust(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#heapAdjust(int).mjava","sourceNew":"  /** \n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  protected final void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >>> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  protected final void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a74e723ad6f1491f36039f9fe6af13a530f8135d","date":1400774466,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#heapAdjust(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#heapAdjust(int).mjava","sourceNew":"  /** \n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  private void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >>> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  protected final void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >>> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","bugFix":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#heapAdjust(int).mjava","sourceNew":null,"sourceOld":"  /** \n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  private void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >>> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a74e723ad6f1491f36039f9fe6af13a530f8135d":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a74e723ad6f1491f36039f9fe6af13a530f8135d":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["aba371508186796cc6151d8223a5b4e16d02e26e","d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","fe33227f6805edab2036cbb80645cc4e2d1fa424","b7605579001505896d48b07160075a5c8b8e128e","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b7605579001505896d48b07160075a5c8b8e128e":[],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["a74e723ad6f1491f36039f9fe6af13a530f8135d","b7605579001505896d48b07160075a5c8b8e128e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}