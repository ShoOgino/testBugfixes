{"path":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource#createWeight(Map,IndexSearcher).mjava","commits":[{"id":"48ec45280e833399e5218bd5d65da29717b00be0","date":1309719777,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource#createWeight(Map,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void createWeight(Map context, IndexSearcher searcher) throws IOException {\n    long totalTermFreq = 0;\n    for (IndexReader.AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {\n      totalTermFreq += readerContext.reader.totalTermFreq(indexedField, indexedBytes);\n    }\n    final long ttf = totalTermFreq;\n    context.put(this, new LongDocValues(this) {\n      @Override\n      public long longVal(int doc) {\n        return ttf;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c960367698164ae9ca0ccf62d27d93c9c24462b1","date":1309878384,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource#createWeight(Map,IndexSearcher).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource#createWeight(Map,IndexSearcher).mjava","sourceNew":"  @Override\n  public void createWeight(Map context, IndexSearcher searcher) throws IOException {\n    long totalTermFreq = 0;\n    for (IndexReader.AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {\n      totalTermFreq += readerContext.reader.totalTermFreq(indexedField, indexedBytes);\n    }\n    final long ttf = Math.max(-1, totalTermFreq);  // we may have added up -1s if not supported\n    context.put(this, new LongDocValues(this) {\n      @Override\n      public long longVal(int doc) {\n        return ttf;\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void createWeight(Map context, IndexSearcher searcher) throws IOException {\n    long totalTermFreq = 0;\n    for (IndexReader.AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {\n      totalTermFreq += readerContext.reader.totalTermFreq(indexedField, indexedBytes);\n    }\n    final long ttf = totalTermFreq;\n    context.put(this, new LongDocValues(this) {\n      @Override\n      public long longVal(int doc) {\n        return ttf;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource#createWeight(Map,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void createWeight(Map context, IndexSearcher searcher) throws IOException {\n    long totalTermFreq = 0;\n    for (IndexReader.AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {\n      totalTermFreq += readerContext.reader.totalTermFreq(indexedField, indexedBytes);\n    }\n    final long ttf = Math.max(-1, totalTermFreq);  // we may have added up -1s if not supported\n    context.put(this, new LongDocValues(this) {\n      @Override\n      public long longVal(int doc) {\n        return ttf;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource#createWeight(Map,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void createWeight(Map context, IndexSearcher searcher) throws IOException {\n    long totalTermFreq = 0;\n    for (IndexReader.AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {\n      totalTermFreq += readerContext.reader.totalTermFreq(indexedField, indexedBytes);\n    }\n    final long ttf = Math.max(-1, totalTermFreq);  // we may have added up -1s if not supported\n    context.put(this, new LongDocValues(this) {\n      @Override\n      public long longVal(int doc) {\n        return ttf;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61e20f33ce8ff701576366fdb03955eded5f209b","date":1327852832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource#createWeight(Map,IndexSearcher).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource#createWeight(Map,IndexSearcher).mjava","sourceNew":"  @Override\n  public void createWeight(Map context, IndexSearcher searcher) throws IOException {\n    long totalTermFreq = 0;\n    for (AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {\n      totalTermFreq += readerContext.reader().totalTermFreq(indexedField, indexedBytes);\n    }\n    final long ttf = Math.max(-1, totalTermFreq);  // we may have added up -1s if not supported\n    context.put(this, new LongDocValues(this) {\n      @Override\n      public long longVal(int doc) {\n        return ttf;\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void createWeight(Map context, IndexSearcher searcher) throws IOException {\n    long totalTermFreq = 0;\n    for (IndexReader.AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {\n      totalTermFreq += readerContext.reader.totalTermFreq(indexedField, indexedBytes);\n    }\n    final long ttf = Math.max(-1, totalTermFreq);  // we may have added up -1s if not supported\n    context.put(this, new LongDocValues(this) {\n      @Override\n      public long longVal(int doc) {\n        return ttf;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource#createWeight(Map,IndexSearcher).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource#createWeight(Map,IndexSearcher).mjava","sourceNew":"  @Override\n  public void createWeight(Map context, IndexSearcher searcher) throws IOException {\n    long totalTermFreq = 0;\n    for (AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {\n      totalTermFreq += readerContext.reader().totalTermFreq(indexedField, indexedBytes);\n    }\n    final long ttf = Math.max(-1, totalTermFreq);  // we may have added up -1s if not supported\n    context.put(this, new LongDocValues(this) {\n      @Override\n      public long longVal(int doc) {\n        return ttf;\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void createWeight(Map context, IndexSearcher searcher) throws IOException {\n    long totalTermFreq = 0;\n    for (IndexReader.AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {\n      totalTermFreq += readerContext.reader.totalTermFreq(indexedField, indexedBytes);\n    }\n    final long ttf = Math.max(-1, totalTermFreq);  // we may have added up -1s if not supported\n    context.put(this, new LongDocValues(this) {\n      @Override\n      public long longVal(int doc) {\n        return ttf;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource#createWeight(Map,IndexSearcher).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource#createWeight(Map,IndexSearcher).mjava","sourceNew":"  @Override\n  public void createWeight(Map context, IndexSearcher searcher) throws IOException {\n    long totalTermFreq = 0;\n    for (AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {\n      totalTermFreq += readerContext.reader().totalTermFreq(indexedField, indexedBytes);\n    }\n    final long ttf = Math.max(-1, totalTermFreq);  // we may have added up -1s if not supported\n    context.put(this, new LongDocValues(this) {\n      @Override\n      public long longVal(int doc) {\n        return ttf;\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void createWeight(Map context, IndexSearcher searcher) throws IOException {\n    long totalTermFreq = 0;\n    for (AtomicReaderContext readerContext : searcher.getTopReaderContext().leaves()) {\n      totalTermFreq += readerContext.reader().totalTermFreq(indexedField, indexedBytes);\n    }\n    final long ttf = Math.max(-1, totalTermFreq);  // we may have added up -1s if not supported\n    context.put(this, new LongDocValues(this) {\n      @Override\n      public long longVal(int doc) {\n        return ttf;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"48ec45280e833399e5218bd5d65da29717b00be0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61e20f33ce8ff701576366fdb03955eded5f209b":["c960367698164ae9ca0ccf62d27d93c9c24462b1"],"c960367698164ae9ca0ccf62d27d93c9c24462b1":["48ec45280e833399e5218bd5d65da29717b00be0"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c960367698164ae9ca0ccf62d27d93c9c24462b1"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["c960367698164ae9ca0ccf62d27d93c9c24462b1","61e20f33ce8ff701576366fdb03955eded5f209b"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c960367698164ae9ca0ccf62d27d93c9c24462b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"48ec45280e833399e5218bd5d65da29717b00be0":["c960367698164ae9ca0ccf62d27d93c9c24462b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48ec45280e833399e5218bd5d65da29717b00be0","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"61e20f33ce8ff701576366fdb03955eded5f209b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"c960367698164ae9ca0ccf62d27d93c9c24462b1":["61e20f33ce8ff701576366fdb03955eded5f209b","d083e83f225b11e5fdd900e83d26ddb385b6955c","5cab9a86bd67202d20b6adc463008c8e982b070a","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}