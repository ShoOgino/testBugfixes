{"path":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":null,"sourceOld":"  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":"  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n    \n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.contains(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","6aedf81f068e430dec27d94310415cc6ff52731c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","6aedf81f068e430dec27d94310415cc6ff52731c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6aedf81f068e430dec27d94310415cc6ff52731c":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aedf81f068e430dec27d94310415cc6ff52731c"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["29ef99d61cda9641b6250bf9567329a6e65f901d","6aedf81f068e430dec27d94310415cc6ff52731c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}