{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest#testSuggesterCountForAllLookups().mjava","commits":[{"id":"fcc9c55e4967c7609df41756083be5652866a4d0","date":1450462037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest#testSuggesterCountForAllLookups().mjava","pathOld":"/dev/null","sourceNew":"  public void testSuggesterCountForAllLookups() throws IOException {\n\n\n    Input keys[] = new Input[]{\n        new Input(\"lend me your ears\", 1),\n        new Input(\"as you sow so shall you reap\", 1),\n    };\n\n    Path tempDir = createTempDir(\"BlendedInfixSuggesterTest\");\n    Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);\n\n    // BlenderType.LINEAR is used by default (remove position*10%)\n    BlendedInfixSuggester suggester = new BlendedInfixSuggester(newFSDirectory(tempDir), a);\n    suggester.build(new InputArrayIterator(keys));\n\n\n    String term = \"you\";\n\n    List<Lookup.LookupResult> responses = suggester.lookup(term, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Map) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Map) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Set) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Set) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, null, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, null, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    suggester.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4c46d3b0b6fdec16a2cae698e0407568f04f020","date":1502381512,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest#testSuggesterCountForAllLookups().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest#testSuggesterCountForAllLookups().mjava","sourceNew":"  public void testSuggesterCountForAllLookups() throws IOException {\n\n\n    Input keys[] = new Input[]{\n        new Input(\"lend me your ears\", 1),\n        new Input(\"as you sow so shall you reap\", 1),\n    };\n\n    Path tempDir = createTempDir(\"BlendedInfixSuggesterTest\");\n    Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);\n\n    // BlenderType.LINEAR is used by default (remove position*10%)\n    BlendedInfixSuggester suggester = new BlendedInfixSuggester(newFSDirectory(tempDir), a);\n    suggester.build(new InputArrayIterator(keys));\n\n\n    String term = \"you\";\n\n    List<Lookup.LookupResult> responses = suggester.lookup(term, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Map<BytesRef, BooleanClause.Occur>) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Map<BytesRef, BooleanClause.Occur>) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Set<BytesRef>) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Set<BytesRef>) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, null, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, null, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    suggester.close();\n\n  }\n\n","sourceOld":"  public void testSuggesterCountForAllLookups() throws IOException {\n\n\n    Input keys[] = new Input[]{\n        new Input(\"lend me your ears\", 1),\n        new Input(\"as you sow so shall you reap\", 1),\n    };\n\n    Path tempDir = createTempDir(\"BlendedInfixSuggesterTest\");\n    Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);\n\n    // BlenderType.LINEAR is used by default (remove position*10%)\n    BlendedInfixSuggester suggester = new BlendedInfixSuggester(newFSDirectory(tempDir), a);\n    suggester.build(new InputArrayIterator(keys));\n\n\n    String term = \"you\";\n\n    List<Lookup.LookupResult> responses = suggester.lookup(term, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Map) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Map) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Set) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Set) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, null, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, null, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    suggester.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e8eb794082b9cc37b6562c76814ec4a26b9b8b","date":1502501868,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest#testSuggesterCountForAllLookups().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest#testSuggesterCountForAllLookups().mjava","sourceNew":"  public void testSuggesterCountForAllLookups() throws IOException {\n\n\n    Input keys[] = new Input[]{\n        new Input(\"lend me your ears\", 1),\n        new Input(\"as you sow so shall you reap\", 1),\n    };\n\n    Path tempDir = createTempDir(\"BlendedInfixSuggesterTest\");\n    Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);\n\n    // BlenderType.LINEAR is used by default (remove position*10%)\n    BlendedInfixSuggester suggester = new BlendedInfixSuggester(newFSDirectory(tempDir), a);\n    suggester.build(new InputArrayIterator(keys));\n\n\n    String term = \"you\";\n\n    List<Lookup.LookupResult> responses = suggester.lookup(term, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Map<BytesRef, BooleanClause.Occur>) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Map<BytesRef, BooleanClause.Occur>) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Set<BytesRef>) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Set<BytesRef>) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, null, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, null, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    suggester.close();\n\n  }\n\n","sourceOld":"  public void testSuggesterCountForAllLookups() throws IOException {\n\n\n    Input keys[] = new Input[]{\n        new Input(\"lend me your ears\", 1),\n        new Input(\"as you sow so shall you reap\", 1),\n    };\n\n    Path tempDir = createTempDir(\"BlendedInfixSuggesterTest\");\n    Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);\n\n    // BlenderType.LINEAR is used by default (remove position*10%)\n    BlendedInfixSuggester suggester = new BlendedInfixSuggester(newFSDirectory(tempDir), a);\n    suggester.build(new InputArrayIterator(keys));\n\n\n    String term = \"you\";\n\n    List<Lookup.LookupResult> responses = suggester.lookup(term, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Map) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Map) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Set) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Set) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, null, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, null, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    suggester.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest#testSuggesterCountForAllLookups().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest#testSuggesterCountForAllLookups().mjava","sourceNew":"  public void testSuggesterCountForAllLookups() throws IOException {\n\n\n    Input keys[] = new Input[]{\n        new Input(\"lend me your ears\", 1),\n        new Input(\"as you sow so shall you reap\", 1),\n    };\n\n    Path tempDir = createTempDir(\"BlendedInfixSuggesterTest\");\n    Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);\n\n    // BlenderType.LINEAR is used by default (remove position*10%)\n    BlendedInfixSuggester suggester = new BlendedInfixSuggester(newFSDirectory(tempDir), a);\n    suggester.build(new InputArrayIterator(keys));\n\n\n    String term = \"you\";\n\n    List<Lookup.LookupResult> responses = suggester.lookup(term, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Map<BytesRef, BooleanClause.Occur>) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Map<BytesRef, BooleanClause.Occur>) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Set<BytesRef>) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Set<BytesRef>) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, null, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, null, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    suggester.close();\n\n  }\n\n","sourceOld":"  public void testSuggesterCountForAllLookups() throws IOException {\n\n\n    Input keys[] = new Input[]{\n        new Input(\"lend me your ears\", 1),\n        new Input(\"as you sow so shall you reap\", 1),\n    };\n\n    Path tempDir = createTempDir(\"BlendedInfixSuggesterTest\");\n    Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);\n\n    // BlenderType.LINEAR is used by default (remove position*10%)\n    BlendedInfixSuggester suggester = new BlendedInfixSuggester(newFSDirectory(tempDir), a);\n    suggester.build(new InputArrayIterator(keys));\n\n\n    String term = \"you\";\n\n    List<Lookup.LookupResult> responses = suggester.lookup(term, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Map) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Map) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (Set) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (Set) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, null, false, 1);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, null, false, 2);\n    assertEquals(2, responses.size());\n\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 1, false, false);\n    assertEquals(1, responses.size());\n\n    responses = suggester.lookup(term, (BooleanQuery) null, 2, false, false);\n    assertEquals(2, responses.size());\n\n\n    suggester.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fcc9c55e4967c7609df41756083be5652866a4d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4c46d3b0b6fdec16a2cae698e0407568f04f020":["fcc9c55e4967c7609df41756083be5652866a4d0"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["fcc9c55e4967c7609df41756083be5652866a4d0","19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["fcc9c55e4967c7609df41756083be5652866a4d0","b4c46d3b0b6fdec16a2cae698e0407568f04f020"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcc9c55e4967c7609df41756083be5652866a4d0"],"fcc9c55e4967c7609df41756083be5652866a4d0":["b4c46d3b0b6fdec16a2cae698e0407568f04f020","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"b4c46d3b0b6fdec16a2cae698e0407568f04f020":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}