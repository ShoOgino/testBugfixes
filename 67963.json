{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#partitionRange(int,Range).mjava","commits":[{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#partitionRange(int,Range).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int,Range).mjava","sourceNew":"  public List<Range> partitionRange(int partitions, Range range) {\n    return partitionRange(partitions, range.min, range.max);\n  }\n\n","sourceOld":"  public List<Range> partitionRange(int partitions, Range range) {\n    return partitionRange(partitions, range.min, range.max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#partitionRange(int,Range).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int,Range).mjava","sourceNew":"  public List<Range> partitionRange(int partitions, Range range) {\n    return partitionRange(partitions, range.min, range.max);\n  }\n\n","sourceOld":"  public List<Range> partitionRange(int partitions, Range range) {\n    return partitionRange(partitions, range.min, range.max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09f37c23448e2f162cd158c9a5f575d10ad19308","date":1355253672,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#partitionRange(int,Range).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#partitionRange(int,Range).mjava","sourceNew":"  /**\n   * Returns the range for each partition\n   */\n  public List<Range> partitionRange(int partitions, Range range) {\n    int min = range.min;\n    int max = range.max;\n\n    assert max >= min;\n    if (partitions == 0) return Collections.EMPTY_LIST;\n    long rangeSize = (long)max - (long)min;\n    long rangeStep = Math.max(1, rangeSize / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + rangeStep;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","sourceOld":"  public List<Range> partitionRange(int partitions, Range range) {\n    return partitionRange(partitions, range.min, range.max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#partitionRange(int,Range).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#partitionRange(int,Range).mjava","sourceNew":"  /**\n   * Returns the range for each partition\n   */\n  public List<Range> partitionRange(int partitions, Range range) {\n    int min = range.min;\n    int max = range.max;\n\n    assert max >= min;\n    if (partitions == 0) return Collections.EMPTY_LIST;\n    long rangeSize = (long)max - (long)min;\n    long rangeStep = Math.max(1, rangeSize / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + rangeStep;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","sourceOld":"  public List<Range> partitionRange(int partitions, Range range) {\n    return partitionRange(partitions, range.min, range.max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#partitionRange(int,Range).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#partitionRange(int,Range).mjava","sourceNew":"  /**\n   * Returns the range for each partition\n   */\n  public List<Range> partitionRange(int partitions, Range range) {\n    int min = range.min;\n    int max = range.max;\n\n    assert max >= min;\n    if (partitions == 0) return Collections.EMPTY_LIST;\n    long rangeSize = (long)max - (long)min;\n    long rangeStep = Math.max(1, rangeSize / partitions);\n\n    List<Range> ranges = new ArrayList<>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + rangeStep;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","sourceOld":"  /**\n   * Returns the range for each partition\n   */\n  public List<Range> partitionRange(int partitions, Range range) {\n    int min = range.min;\n    int max = range.max;\n\n    assert max >= min;\n    if (partitions == 0) return Collections.EMPTY_LIST;\n    long rangeSize = (long)max - (long)min;\n    long rangeStep = Math.max(1, rangeSize / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + rangeStep;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cac1f2920f8057198f04505797cbabf74dd9a97","date":1546884894,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#partitionRange(int,Range).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#partitionRange(int,Range).mjava","sourceNew":"  /**\n   * Split the range into partitions.\n   * @param partitions number of partitions\n   * @param range range to split\n   */\n  public List<Range> partitionRange(int partitions, Range range) {\n    return partitionRange(partitions, range, 0.0f);\n  }\n\n","sourceOld":"  /**\n   * Returns the range for each partition\n   */\n  public List<Range> partitionRange(int partitions, Range range) {\n    int min = range.min;\n    int max = range.max;\n\n    assert max >= min;\n    if (partitions == 0) return Collections.EMPTY_LIST;\n    long rangeSize = (long)max - (long)min;\n    long rangeStep = Math.max(1, rangeSize / partitions);\n\n    List<Range> ranges = new ArrayList<>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + rangeStep;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","09f37c23448e2f162cd158c9a5f575d10ad19308"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["09f37c23448e2f162cd158c9a5f575d10ad19308"],"7cac1f2920f8057198f04505797cbabf74dd9a97":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c5a558d54519c651068ddb202f03befefb1514a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5a558d54519c651068ddb202f03befefb1514a7"],"09f37c23448e2f162cd158c9a5f575d10ad19308":["c5a558d54519c651068ddb202f03befefb1514a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7cac1f2920f8057198f04505797cbabf74dd9a97"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7cac1f2920f8057198f04505797cbabf74dd9a97"],"7cac1f2920f8057198f04505797cbabf74dd9a97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","09f37c23448e2f162cd158c9a5f575d10ad19308"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027"],"09f37c23448e2f162cd158c9a5f575d10ad19308":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}