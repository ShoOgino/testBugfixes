{"path":"lucene/src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = name;\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = name;\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = name;\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = name;\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   *\n   * @deprecated Use {@link TextField} instead.\n   */ \n  @Deprecated\n  public Field(String name, Reader reader, TermVector termVector) {\n    this(name, reader, translateFieldType(Store.NO, Index.ANALYZED, termVector));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   *\n   * @deprecated Use {@link TextField} instead.\n   */ \n  @Deprecated\n  public Field(String name, Reader reader, TermVector termVector) {\n    this(name, reader, translateFieldType(Store.NO, Index.ANALYZED, termVector));\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   *\n   * @deprecated Use {@link TextField} instead.\n   */ \n  @Deprecated\n  public Field(String name, Reader reader, TermVector termVector) {\n    this(name, reader, translateFieldType(Store.NO, Index.ANALYZED, termVector));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["1509f151d7692d84fae414b2b799ac06ba60fcb4","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["fa0f44f887719e97183771e977cfc4bfb485b766"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}