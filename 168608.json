{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","commits":[{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) {\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      DocCollection coll = zkStateReader.getClusterState().getCollection(cd.getCollectionName());\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      if(cloudDesc.getShardId() == null) throw new RuntimeException(\"No shard id for :\"+ cd.toString());\n      Slice slice = coll.getSlice(cloudDesc.getShardId());\n      if(slice == null) throw new RuntimeException(\"Invalid slice : \"+cloudDesc.getShardId());\n      Replica replica = null;\n      if(cloudDesc.getCoreNodeName() !=null){\n        replica = slice.getReplica(cloudDesc.getCoreNodeName());\n      } else {\n        for (Replica r : slice.getReplicas()) {\n          if(cd.getName().equals(r.get(ZkStateReader.CORE_NAME_PROP)) && getBaseUrl().equals(r.get(ZkStateReader.BASE_URL_PROP))){\n            replica = r;\n            break;\n          }\n        }\n      }\n      if(replica == null){\n        throw new RuntimeException(\" No such replica in clusterstate \"+cd.toString());\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","257c5a036be540f6d88112374ab2a5c6c53e24b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"840fc95f31a25d020cd825e880018bcfa0bacc71","date":1393483822,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null;\n      if (cloudDesc.getShardId() == null) throw new SolrException(ErrorCode.SERVER_ERROR ,\"No shard id for :\" + cd);\n      long endTime = System.currentTimeMillis()+3000;\n      String errMessage= null;\n      for (; System.currentTimeMillis()<endTime; ) {\n        Thread.sleep(100);\n        errMessage = null;\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) return;\n      }\n      if(errMessage == null)  errMessage = \" no_such_replica in clusterstate ,replicaName :  \" + coreNodeName;\n      throw new SolrException(ErrorCode.SERVER_ERROR,errMessage + \"state : \"+ zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) {\n    if(!Overseer.isLegacy(zkStateReader.getClusterProps())){\n      DocCollection coll = zkStateReader.getClusterState().getCollection(cd.getCollectionName());\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      if(cloudDesc.getShardId() == null) throw new RuntimeException(\"No shard id for :\"+ cd.toString());\n      Slice slice = coll.getSlice(cloudDesc.getShardId());\n      if(slice == null) throw new RuntimeException(\"Invalid slice : \"+cloudDesc.getShardId());\n      Replica replica = null;\n      if(cloudDesc.getCoreNodeName() !=null){\n        replica = slice.getReplica(cloudDesc.getCoreNodeName());\n      } else {\n        for (Replica r : slice.getReplicas()) {\n          if(cd.getName().equals(r.get(ZkStateReader.CORE_NAME_PROP)) && getBaseUrl().equals(r.get(ZkStateReader.BASE_URL_PROP))){\n            replica = r;\n            break;\n          }\n        }\n      }\n      if(replica == null){\n        throw new RuntimeException(\" No such replica in clusterstate \"+cd.toString());\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":["74a3b28f105d19ccdb301cbe368d44680bdfb043","b775be0d772d22dbbfd73b9989b5f0b4e7ef5506","257c5a036be540f6d88112374ab2a5c6c53e24b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null;\n      if (cloudDesc.getShardId() == null) throw new SolrException(ErrorCode.SERVER_ERROR ,\"No shard id for :\" + cd);\n      long endTime = System.currentTimeMillis()+3000;\n      String errMessage= null;\n      for (; System.currentTimeMillis()<endTime; ) {\n        Thread.sleep(100);\n        errMessage = null;\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) return;\n      }\n      if(errMessage == null)  errMessage = \" no_such_replica in clusterstate ,replicaName :  \" + coreNodeName;\n      throw new SolrException(ErrorCode.SERVER_ERROR,errMessage + \"state : \"+ zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null;\n      if (cloudDesc.getShardId() == null) throw new SolrException(ErrorCode.SERVER_ERROR ,\"No shard id for :\" + cd);\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage= null;\n      for (; System.nanoTime()<endTime; ) {\n        Thread.sleep(100);\n        errMessage = null;\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) return;\n      }\n      if(errMessage == null)  errMessage = \" no_such_replica in clusterstate ,replicaName :  \" + coreNodeName;\n      throw new SolrException(ErrorCode.SERVER_ERROR,errMessage + \"state : \"+ zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null;\n      if (cloudDesc.getShardId() == null) throw new SolrException(ErrorCode.SERVER_ERROR ,\"No shard id for :\" + cd);\n      long endTime = System.currentTimeMillis()+3000;\n      String errMessage= null;\n      for (; System.currentTimeMillis()<endTime; ) {\n        Thread.sleep(100);\n        errMessage = null;\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) return;\n      }\n      if(errMessage == null)  errMessage = \" no_such_replica in clusterstate ,replicaName :  \" + coreNodeName;\n      throw new SolrException(ErrorCode.SERVER_ERROR,errMessage + \"state : \"+ zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["74a3b28f105d19ccdb301cbe368d44680bdfb043","257c5a036be540f6d88112374ab2a5c6c53e24b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a3b28f105d19ccdb301cbe368d44680bdfb043","date":1427214930,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null;\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR ,\"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \"+ zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null;\n      if (cloudDesc.getShardId() == null) throw new SolrException(ErrorCode.SERVER_ERROR ,\"No shard id for :\" + cd);\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage= null;\n      for (; System.nanoTime()<endTime; ) {\n        Thread.sleep(100);\n        errMessage = null;\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) return;\n      }\n      if(errMessage == null)  errMessage = \" no_such_replica in clusterstate ,replicaName :  \" + coreNodeName;\n      throw new SolrException(ErrorCode.SERVER_ERROR,errMessage + \"state : \"+ zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","bugFix":["840fc95f31a25d020cd825e880018bcfa0bacc71","fd5bc858b8426d40bbe90b94120ead37c77d7954"],"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","6ae3ad2b3d171060b5f8d2780f38b1dae608e02d","257c5a036be540f6d88112374ab2a5c6c53e24b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null;\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \" + zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null;\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR ,\"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \"+ zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["257c5a036be540f6d88112374ab2a5c6c53e24b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null;\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \" + zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null;\n      if (cloudDesc.getShardId() == null) throw new SolrException(ErrorCode.SERVER_ERROR ,\"No shard id for :\" + cd);\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage= null;\n      for (; System.nanoTime()<endTime; ) {\n        Thread.sleep(100);\n        errMessage = null;\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) return;\n      }\n      if(errMessage == null)  errMessage = \" no_such_replica in clusterstate ,replicaName :  \" + coreNodeName;\n      throw new SolrException(ErrorCode.SERVER_ERROR,errMessage + \"state : \"+ zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82733c4476e129ef5e2d1c9c2d8a8e755403b030","date":1449600554,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null : \"SolrCore: \" + cd.getName() + \" has no coreNodeName\";\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \" + zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null;\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \" + zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["257c5a036be540f6d88112374ab2a5c6c53e24b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null : \"SolrCore: \" + cd.getName() + \" has no coreNodeName\";\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \" + zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null : \"SolrCore: \" + cd.getName() + \" has no coreNodeName\";\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \" + zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null : \"SolrCore: \" + cd.getName() + \" has no coreNodeName\";\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \" + zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null : \"SolrCore: \" + cd.getName() + \" has no coreNodeName\";\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \" + zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null : \"SolrCore: \" + cd.getName() + \" has no coreNodeName\";\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \" + zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null : \"SolrCore: \" + cd.getName() + \" has no coreNodeName\";\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \" + zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"257c5a036be540f6d88112374ab2a5c6c53e24b5","date":1475585300,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      if (coreNodeName == null)\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return true;\n          }\n          errorMessage.set(\"coreNodeName \" + coreNodeName + \" exists, but does not match expected node or core name\");\n          return false;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null : \"SolrCore: \" + cd.getName() + \" has no coreNodeName\";\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \" + zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","bugFix":["840fc95f31a25d020cd825e880018bcfa0bacc71","fbcfc050b9f253136eaa5950b57248b2109eac11","74a3b28f105d19ccdb301cbe368d44680bdfb043","fd5bc858b8426d40bbe90b94120ead37c77d7954","8497bb4f9de61b5520423bd9af88ea11a6e109e7","82733c4476e129ef5e2d1c9c2d8a8e755403b030"],"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","6ae3ad2b3d171060b5f8d2780f38b1dae608e02d","309a1c4bae33ea2b471941641c152167f32bf118","b775be0d772d22dbbfd73b9989b5f0b4e7ef5506"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      if (coreNodeName == null)\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return true;\n          }\n          errorMessage.set(\"coreNodeName \" + coreNodeName + \" exists, but does not match expected node or core name\");\n          return false;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null : \"SolrCore: \" + cd.getName() + \" has no coreNodeName\";\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \" + zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      if (coreNodeName == null)\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return true;\n          }\n          errorMessage.set(\"coreNodeName \" + coreNodeName + \" exists, but does not match expected node or core name\");\n          return false;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      assert coreNodeName != null : \"SolrCore: \" + cd.getName() + \" has no coreNodeName\";\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for :\" + cd);\n      }\n      long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n      String errMessage = null;\n      while (System.nanoTime() < endTime) {\n        Slice slice = zkStateReader.getClusterState().getSlice(cd.getCollectionName(), cloudDesc.getShardId());\n        if (slice == null) {\n          errMessage = \"Invalid slice : \" + cloudDesc.getShardId();\n          continue;\n        }\n        if (slice.getReplica(coreNodeName) != null) {\n          Replica replica = slice.getReplica(coreNodeName);\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return;\n          } else {\n            errMessage = \"replica with coreNodeName \" + coreNodeName + \" exists but with a different name or base_url\";\n          }\n        }\n        Thread.sleep(100);\n      }\n      if (errMessage == null) {\n        errMessage = \"replica \" + coreNodeName + \" is not present in cluster state\";\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, errMessage + \". state : \" + zkStateReader.getClusterState().getCollection(cd.getCollectionName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579fab47a447cb68f742b3ea201e3398f84daaef","date":1489485666,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      if (coreNodeName == null)\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      if (coreNodeName == null)\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return true;\n          }\n          errorMessage.set(\"coreNodeName \" + coreNodeName + \" exists, but does not match expected node or core name\");\n          return false;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ae3ad2b3d171060b5f8d2780f38b1dae608e02d","date":1489651910,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      if (coreNodeName == null)\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      if (coreNodeName == null)\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return true;\n          }\n          errorMessage.set(\"coreNodeName \" + coreNodeName + \" exists, but does not match expected node or core name\");\n          return false;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","bugFix":["74a3b28f105d19ccdb301cbe368d44680bdfb043","257c5a036be540f6d88112374ab2a5c6c53e24b5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      if (coreNodeName == null)\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      if (coreNodeName == null)\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          String baseUrl = replica.getStr(BASE_URL_PROP);\n          String coreName = replica.getStr(CORE_NAME_PROP);\n          if (baseUrl.equals(this.baseURL) && coreName.equals(cd.getName())) {\n            return true;\n          }\n          errorMessage.set(\"coreNodeName \" + coreNodeName + \" exists, but does not match expected node or core name\");\n          return false;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b775be0d772d22dbbfd73b9989b5f0b4e7ef5506","date":1509763417,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String nodeName = cloudDesc.getCoreNodeName();\n      if (nodeName == null) {\n        if (cc.repairCoreProperty(cd, CoreDescriptor.CORE_NODE_NAME) == false) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n        nodeName = cloudDesc.getCoreNodeName();\n        // verify that the repair worked.\n        if (nodeName == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n      }\n      final String coreNodeName = nodeName;\n\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      if (coreNodeName == null)\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","bugFix":["840fc95f31a25d020cd825e880018bcfa0bacc71","257c5a036be540f6d88112374ab2a5c6c53e24b5"],"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String nodeName = cloudDesc.getCoreNodeName();\n      if (nodeName == null) {\n        if (cc.repairCoreProperty(cd, CoreDescriptor.CORE_NODE_NAME) == false) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n        nodeName = cloudDesc.getCoreNodeName();\n        // verify that the repair worked.\n        if (nodeName == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n      }\n      final String coreNodeName = nodeName;\n\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String coreNodeName = cloudDesc.getCoreNodeName();\n      if (coreNodeName == null)\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"309a1c4bae33ea2b471941641c152167f32bf118","date":1520301098,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String nodeName = cloudDesc.getCoreNodeName();\n      if (nodeName == null) {\n        if (cc.repairCoreProperty(cd, CoreDescriptor.CORE_NODE_NAME) == false) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n        nodeName = cloudDesc.getCoreNodeName();\n        // verify that the repair worked.\n        if (nodeName == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n      }\n      final String coreNodeName = nodeName;\n\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 10, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String nodeName = cloudDesc.getCoreNodeName();\n      if (nodeName == null) {\n        if (cc.repairCoreProperty(cd, CoreDescriptor.CORE_NODE_NAME) == false) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n        nodeName = cloudDesc.getCoreNodeName();\n        // verify that the repair worked.\n        if (nodeName == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n      }\n      final String coreNodeName = nodeName;\n\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 3, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","bugFix":["257c5a036be540f6d88112374ab2a5c6c53e24b5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f","date":1522415499,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException, NotInClusterStateException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String nodeName = cloudDesc.getCoreNodeName();\n      if (nodeName == null) {\n        if (cc.repairCoreProperty(cd, CoreDescriptor.CORE_NODE_NAME) == false) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n        nodeName = cloudDesc.getCoreNodeName();\n        // verify that the repair worked.\n        if (nodeName == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n      }\n      final String coreNodeName = nodeName;\n\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 10, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId() +\n                \", ignore the exception if the replica was deleted\");\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId() +\n              \", ignore the exception if the replica was deleted\";\n        throw new NotInClusterStateException(ErrorCode.SERVER_ERROR, error);\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String nodeName = cloudDesc.getCoreNodeName();\n      if (nodeName == null) {\n        if (cc.repairCoreProperty(cd, CoreDescriptor.CORE_NODE_NAME) == false) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n        nodeName = cloudDesc.getCoreNodeName();\n        // verify that the repair worked.\n        if (nodeName == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n      }\n      final String coreNodeName = nodeName;\n\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 10, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa5e39259dfd4a68287c824d3b7e1bc9097dc895","date":1522505041,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException, NotInClusterStateException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String nodeName = cloudDesc.getCoreNodeName();\n      if (nodeName == null) {\n        if (cc.repairCoreProperty(cd, CoreDescriptor.CORE_NODE_NAME) == false) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n        nodeName = cloudDesc.getCoreNodeName();\n        // verify that the repair worked.\n        if (nodeName == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n      }\n      final String coreNodeName = nodeName;\n\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 10, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId() +\n                \", ignore the exception if the replica was deleted\");\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId() +\n              \", ignore the exception if the replica was deleted\";\n        throw new NotInClusterStateException(ErrorCode.SERVER_ERROR, error);\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String nodeName = cloudDesc.getCoreNodeName();\n      if (nodeName == null) {\n        if (cc.repairCoreProperty(cd, CoreDescriptor.CORE_NODE_NAME) == false) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n        nodeName = cloudDesc.getCoreNodeName();\n        // verify that the repair worked.\n        if (nodeName == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n      }\n      final String coreNodeName = nodeName;\n\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 10, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId());\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"Replica \" + coreNodeName + \" is not present in cluster state\";\n        throw new SolrException(ErrorCode.SERVER_ERROR, error + \": \" + collectionState.get());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException, NotInClusterStateException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String nodeName = cloudDesc.getCoreNodeName();\n      if (nodeName == null) {\n        if (cc.repairCoreProperty(cd, CoreDescriptor.CORE_NODE_NAME) == false) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n        nodeName = cloudDesc.getCoreNodeName();\n        // verify that the repair worked.\n        if (nodeName == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n      }\n      final String coreNodeName = nodeName;\n\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 10, TimeUnit.SECONDS, (c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId() +\n                \", ignore the exception if the replica was deleted\");\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId() +\n              \", ignore the exception if the replica was deleted\";\n        throw new NotInClusterStateException(ErrorCode.SERVER_ERROR, error);\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException, NotInClusterStateException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String nodeName = cloudDesc.getCoreNodeName();\n      if (nodeName == null) {\n        if (cc.repairCoreProperty(cd, CoreDescriptor.CORE_NODE_NAME) == false) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n        nodeName = cloudDesc.getCoreNodeName();\n        // verify that the repair worked.\n        if (nodeName == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n      }\n      final String coreNodeName = nodeName;\n\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 10, TimeUnit.SECONDS, (n, c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId() +\n                \", ignore the exception if the replica was deleted\");\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId() +\n              \", ignore the exception if the replica was deleted\";\n        throw new NotInClusterStateException(ErrorCode.SERVER_ERROR, error);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkStateInZk(CoreDescriptor).mjava","sourceNew":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException, NotInClusterStateException {\n    CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n    String nodeName = cloudDesc.getCoreNodeName();\n    if (nodeName == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n    }\n    final String coreNodeName = nodeName;\n\n    if (cloudDesc.getShardId() == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n    }\n\n    AtomicReference<String> errorMessage = new AtomicReference<>();\n    AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n    try {\n      zkStateReader.waitForState(cd.getCollectionName(), 10, TimeUnit.SECONDS, (c) -> {\n        collectionState.set(c);\n        if (c == null)\n          return false;\n        Slice slice = c.getSlice(cloudDesc.getShardId());\n        if (slice == null) {\n          errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n          return false;\n        }\n        Replica replica = slice.getReplica(coreNodeName);\n        if (replica == null) {\n          errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId() +\n              \", ignore the exception if the replica was deleted\");\n          return false;\n        }\n        return true;\n      });\n    } catch (TimeoutException e) {\n      String error = errorMessage.get();\n      if (error == null)\n        error = \"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId() +\n            \", ignore the exception if the replica was deleted\";\n      throw new NotInClusterStateException(ErrorCode.SERVER_ERROR, error);\n    }\n  }\n\n","sourceOld":"  private void checkStateInZk(CoreDescriptor cd) throws InterruptedException, NotInClusterStateException {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      String nodeName = cloudDesc.getCoreNodeName();\n      if (nodeName == null) {\n        if (cc.repairCoreProperty(cd, CoreDescriptor.CORE_NODE_NAME) == false) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n        nodeName = cloudDesc.getCoreNodeName();\n        // verify that the repair worked.\n        if (nodeName == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No coreNodeName for \" + cd);\n        }\n      }\n      final String coreNodeName = nodeName;\n\n      if (cloudDesc.getShardId() == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"No shard id for \" + cd);\n      }\n\n      AtomicReference<String> errorMessage = new AtomicReference<>();\n      AtomicReference<DocCollection> collectionState = new AtomicReference<>();\n      try {\n        zkStateReader.waitForState(cd.getCollectionName(), 10, TimeUnit.SECONDS, (c) -> {\n          collectionState.set(c);\n          if (c == null)\n            return false;\n          Slice slice = c.getSlice(cloudDesc.getShardId());\n          if (slice == null) {\n            errorMessage.set(\"Invalid shard: \" + cloudDesc.getShardId());\n            return false;\n          }\n          Replica replica = slice.getReplica(coreNodeName);\n          if (replica == null) {\n            errorMessage.set(\"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId() +\n                \", ignore the exception if the replica was deleted\");\n            return false;\n          }\n          return true;\n        });\n      } catch (TimeoutException e) {\n        String error = errorMessage.get();\n        if (error == null)\n          error = \"coreNodeName \" + coreNodeName + \" does not exist in shard \" + cloudDesc.getShardId() +\n              \", ignore the exception if the replica was deleted\";\n        throw new NotInClusterStateException(ErrorCode.SERVER_ERROR, error);\n      }\n    }\n  }\n\n","bugFix":["74a3b28f105d19ccdb301cbe368d44680bdfb043","8497bb4f9de61b5520423bd9af88ea11a6e109e7","257c5a036be540f6d88112374ab2a5c6c53e24b5","b775be0d772d22dbbfd73b9989b5f0b4e7ef5506","115923bc88e5b1dc4bef049b1ded8486723052ed","7b366e7dd3172289251a86be96031af4002cd19c","4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f","579fab47a447cb68f742b3ea201e3398f84daaef"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["d470c8182e92b264680e34081b75e70a9f2b3c89","257c5a036be540f6d88112374ab2a5c6c53e24b5"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["579fab47a447cb68f742b3ea201e3398f84daaef","b775be0d772d22dbbfd73b9989b5f0b4e7ef5506"],"309a1c4bae33ea2b471941641c152167f32bf118":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"7b366e7dd3172289251a86be96031af4002cd19c":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"0ad30c6a479e764150a3316e57263319775f1df2":["82733c4476e129ef5e2d1c9c2d8a8e755403b030","115923bc88e5b1dc4bef049b1ded8486723052ed"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["309a1c4bae33ea2b471941641c152167f32bf118","4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","840fc95f31a25d020cd825e880018bcfa0bacc71"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["840fc95f31a25d020cd825e880018bcfa0bacc71"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["82733c4476e129ef5e2d1c9c2d8a8e755403b030","0ad30c6a479e764150a3316e57263319775f1df2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fd5bc858b8426d40bbe90b94120ead37c77d7954","fbcfc050b9f253136eaa5950b57248b2109eac11"],"579fab47a447cb68f742b3ea201e3398f84daaef":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab68488225b6a6c357dda72ed11dedca9914a192":["1967bed916cc89da82a1c2085f27976da6d08cbd","6ae3ad2b3d171060b5f8d2780f38b1dae608e02d"],"4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f":["309a1c4bae33ea2b471941641c152167f32bf118"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["7b366e7dd3172289251a86be96031af4002cd19c"],"74a3b28f105d19ccdb301cbe368d44680bdfb043":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"6ae3ad2b3d171060b5f8d2780f38b1dae608e02d":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"257c5a036be540f6d88112374ab2a5c6c53e24b5":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b775be0d772d22dbbfd73b9989b5f0b4e7ef5506":["579fab47a447cb68f742b3ea201e3398f84daaef"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["82733c4476e129ef5e2d1c9c2d8a8e755403b030","1967bed916cc89da82a1c2085f27976da6d08cbd"],"840fc95f31a25d020cd825e880018bcfa0bacc71":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["82733c4476e129ef5e2d1c9c2d8a8e755403b030"],"82733c4476e129ef5e2d1c9c2d8a8e755403b030":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["74a3b28f105d19ccdb301cbe368d44680bdfb043"]},"commit2Childs":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["579fab47a447cb68f742b3ea201e3398f84daaef","ab68488225b6a6c357dda72ed11dedca9914a192","6ae3ad2b3d171060b5f8d2780f38b1dae608e02d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["309a1c4bae33ea2b471941641c152167f32bf118"],"309a1c4bae33ea2b471941641c152167f32bf118":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895","4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f"],"7b366e7dd3172289251a86be96031af4002cd19c":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["7b366e7dd3172289251a86be96031af4002cd19c"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["1967bed916cc89da82a1c2085f27976da6d08cbd","257c5a036be540f6d88112374ab2a5c6c53e24b5"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74a3b28f105d19ccdb301cbe368d44680bdfb043"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"579fab47a447cb68f742b3ea201e3398f84daaef":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","b775be0d772d22dbbfd73b9989b5f0b4e7ef5506"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74a3b28f105d19ccdb301cbe368d44680bdfb043":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"6ae3ad2b3d171060b5f8d2780f38b1dae608e02d":["ab68488225b6a6c357dda72ed11dedca9914a192"],"257c5a036be540f6d88112374ab2a5c6c53e24b5":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"b775be0d772d22dbbfd73b9989b5f0b4e7ef5506":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"840fc95f31a25d020cd825e880018bcfa0bacc71":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","fd5bc858b8426d40bbe90b94120ead37c77d7954"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"82733c4476e129ef5e2d1c9c2d8a8e755403b030":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","115923bc88e5b1dc4bef049b1ded8486723052ed"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["840fc95f31a25d020cd825e880018bcfa0bacc71"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","82733c4476e129ef5e2d1c9c2d8a8e755403b030"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ab68488225b6a6c357dda72ed11dedca9914a192","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}