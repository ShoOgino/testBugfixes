{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Filter,Collector,QueryCommand,DelegatingCollector).mjava","commits":[{"id":"3219e7215437030592c42ca55b29e3f77e0d6808","date":1402349186,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Filter,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds the neccessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Filter luceneFilter,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, luceneFilter, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }        \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["93a1227030f8fcbaca95b0bb1bb2437b5c8a6e72"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f001da93ec624cbfbf3655c529836b5b1ec1aa46","date":1412885266,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Filter,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Filter,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the neccessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Filter luceneFilter,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, luceneFilter, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    } catch ( ExitableDirectoryReader.ExitingReaderException e) {\n      log.warn(\"Query: \" + query + \"; \" + e.getMessage());\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the neccessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Filter luceneFilter,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, luceneFilter, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Filter,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Filter,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the neccessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Filter luceneFilter,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, luceneFilter, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    } catch ( ExitableDirectoryReader.ExitingReaderException e) {\n      log.warn(\"Query: \" + query + \"; \" + e.getMessage());\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the neccessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Filter luceneFilter,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, luceneFilter, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","date":1419431639,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Filter,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Filter,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Filter luceneFilter,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, luceneFilter, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    } catch ( ExitableDirectoryReader.ExitingReaderException e) {\n      log.warn(\"Query: \" + query + \"; \" + e.getMessage());\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the neccessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Filter luceneFilter,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, luceneFilter, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    } catch ( ExitableDirectoryReader.ExitingReaderException e) {\n      log.warn(\"Query: \" + query + \"; \" + e.getMessage());\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Filter,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Filter,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Filter luceneFilter,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, luceneFilter, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Filter luceneFilter,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, luceneFilter, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    } catch ( ExitableDirectoryReader.ExitingReaderException e) {\n      log.warn(\"Query: \" + query + \"; \" + e.getMessage());\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":["93a1227030f8fcbaca95b0bb1bb2437b5c8a6e72"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Filter,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Filter luceneFilter,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, luceneFilter, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"55980207f1977bd1463465de1659b821347e2fa8":["3219e7215437030592c42ca55b29e3f77e0d6808","f001da93ec624cbfbf3655c529836b5b1ec1aa46"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"f001da93ec624cbfbf3655c529836b5b1ec1aa46":["3219e7215437030592c42ca55b29e3f77e0d6808"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3219e7215437030592c42ca55b29e3f77e0d6808":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["f001da93ec624cbfbf3655c529836b5b1ec1aa46"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"55980207f1977bd1463465de1659b821347e2fa8":[],"f001da93ec624cbfbf3655c529836b5b1ec1aa46":["55980207f1977bd1463465de1659b821347e2fa8","60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3219e7215437030592c42ca55b29e3f77e0d6808"],"3219e7215437030592c42ca55b29e3f77e0d6808":["55980207f1977bd1463465de1659b821347e2fa8","f001da93ec624cbfbf3655c529836b5b1ec1aa46"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}