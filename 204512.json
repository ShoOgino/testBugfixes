{"path":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","commits":[{"id":"653534f92e19662cbe285c9c01801afbe2247da3","date":1260576498,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n      segment = si.name;\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n      this.origInstance = origInstance;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION, readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, segment + \".\" + IndexFileNames.FIELD_INFOS_EXTENSION);\n\n        this.termsIndexDivisor = termsIndexDivisor;\n        TermInfosReader reader = new TermInfosReader(cfsDir, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n        if (termsIndexDivisor == -1) {\n          tisNoIndex = reader;\n        } else {\n          tis = reader;\n          tisNoIndex = null;\n        }\n\n        // make sure that all index files have been read or are kept open\n        // so that if an index update removes them we'll still have them\n        freqStream = cfsDir.openInput(segment + \".\" + IndexFileNames.FREQ_EXTENSION, readBufferSize);\n\n        if (fieldInfos.hasProx()) {\n          proxStream = cfsDir.openInput(segment + \".\" + IndexFileNames.PROX_EXTENSION, readBufferSize);\n        } else {\n          proxStream = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n    }\n\n","sourceOld":"    CoreReaders(Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n      segment = si.name;\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION, readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, segment + \".\" + IndexFileNames.FIELD_INFOS_EXTENSION);\n\n        this.termsIndexDivisor = termsIndexDivisor;\n        TermInfosReader reader = new TermInfosReader(cfsDir, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n        if (termsIndexDivisor == -1) {\n          tisNoIndex = reader;\n        } else {\n          tis = reader;\n          tisNoIndex = null;\n        }\n\n        // make sure that all index files have been read or are kept open\n        // so that if an index update removes them we'll still have them\n        freqStream = cfsDir.openInput(segment + \".\" + IndexFileNames.FREQ_EXTENSION, readBufferSize);\n\n        if (fieldInfos.hasProx()) {\n          proxStream = cfsDir.openInput(segment + \".\" + IndexFileNames.PROX_EXTENSION, readBufferSize);\n        } else {\n          proxStream = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1b4b275d20438f9c43fc042323055ac5e392ea5","date":1260817161,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n      segment = si.name;\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION, readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, segment + \".\" + IndexFileNames.FIELD_INFOS_EXTENSION);\n\n        this.termsIndexDivisor = termsIndexDivisor;\n        TermInfosReader reader = new TermInfosReader(cfsDir, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n        if (termsIndexDivisor == -1) {\n          tisNoIndex = reader;\n        } else {\n          tis = reader;\n          tisNoIndex = null;\n        }\n\n        // make sure that all index files have been read or are kept open\n        // so that if an index update removes them we'll still have them\n        freqStream = cfsDir.openInput(segment + \".\" + IndexFileNames.FREQ_EXTENSION, readBufferSize);\n\n        if (fieldInfos.hasProx()) {\n          proxStream = cfsDir.openInput(segment + \".\" + IndexFileNames.PROX_EXTENSION, readBufferSize);\n        } else {\n          proxStream = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n      segment = si.name;\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n      this.origInstance = origInstance;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION, readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, segment + \".\" + IndexFileNames.FIELD_INFOS_EXTENSION);\n\n        this.termsIndexDivisor = termsIndexDivisor;\n        TermInfosReader reader = new TermInfosReader(cfsDir, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n        if (termsIndexDivisor == -1) {\n          tisNoIndex = reader;\n        } else {\n          tis = reader;\n          tisNoIndex = null;\n        }\n\n        // make sure that all index files have been read or are kept open\n        // so that if an index update removes them we'll still have them\n        freqStream = cfsDir.openInput(segment + \".\" + IndexFileNames.FREQ_EXTENSION, readBufferSize);\n\n        if (fieldInfos.hasProx()) {\n          proxStream = cfsDir.openInput(segment + \".\" + IndexFileNames.PROX_EXTENSION, readBufferSize);\n        } else {\n          proxStream = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n    }\n\n","bugFix":["653534f92e19662cbe285c9c01801afbe2247da3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"775efee7f959e0dd3df7960b93767d9e00b78751","date":1267203159,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n      segment = si.name;\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n        TermInfosReader reader = new TermInfosReader(cfsDir, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n        if (termsIndexDivisor == -1) {\n          tisNoIndex = reader;\n        } else {\n          tis = reader;\n          tisNoIndex = null;\n        }\n\n        // make sure that all index files have been read or are kept open\n        // so that if an index update removes them we'll still have them\n        freqStream = cfsDir.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FREQ_EXTENSION), readBufferSize);\n\n        if (fieldInfos.hasProx()) {\n          proxStream = cfsDir.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.PROX_EXTENSION), readBufferSize);\n        } else {\n          proxStream = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n      segment = si.name;\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION, readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, segment + \".\" + IndexFileNames.FIELD_INFOS_EXTENSION);\n\n        this.termsIndexDivisor = termsIndexDivisor;\n        TermInfosReader reader = new TermInfosReader(cfsDir, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n        if (termsIndexDivisor == -1) {\n          tisNoIndex = reader;\n        } else {\n          tis = reader;\n          tisNoIndex = null;\n        }\n\n        // make sure that all index files have been read or are kept open\n        // so that if an index update removes them we'll still have them\n        freqStream = cfsDir.openInput(segment + \".\" + IndexFileNames.FREQ_EXTENSION, readBufferSize);\n\n        if (fieldInfos.hasProx()) {\n          proxStream = cfsDir.openInput(segment + \".\" + IndexFileNames.PROX_EXTENSION, readBufferSize);\n        } else {\n          proxStream = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n      segment = si.name;\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n        TermInfosReader reader = new TermInfosReader(cfsDir, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n        if (termsIndexDivisor == -1) {\n          tisNoIndex = reader;\n        } else {\n          tis = reader;\n          tisNoIndex = null;\n        }\n\n        // make sure that all index files have been read or are kept open\n        // so that if an index update removes them we'll still have them\n        freqStream = cfsDir.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FREQ_EXTENSION), readBufferSize);\n\n        if (fieldInfos.hasProx()) {\n          proxStream = cfsDir.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.PROX_EXTENSION), readBufferSize);\n        } else {\n          proxStream = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n      segment = si.name;\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n        TermInfosReader reader = new TermInfosReader(cfsDir, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n        if (termsIndexDivisor == -1) {\n          tisNoIndex = reader;\n        } else {\n          tis = reader;\n          tisNoIndex = null;\n        }\n\n        // make sure that all index files have been read or are kept open\n        // so that if an index update removes them we'll still have them\n        freqStream = cfsDir.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FREQ_EXTENSION), readBufferSize);\n\n        if (fieldInfos.hasProx()) {\n          proxStream = cfsDir.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.PROX_EXTENSION), readBufferSize);\n        } else {\n          proxStream = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"653534f92e19662cbe285c9c01801afbe2247da3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"775efee7f959e0dd3df7960b93767d9e00b78751":["b1b4b275d20438f9c43fc042323055ac5e392ea5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["775efee7f959e0dd3df7960b93767d9e00b78751"],"b1b4b275d20438f9c43fc042323055ac5e392ea5":["653534f92e19662cbe285c9c01801afbe2247da3"]},"commit2Childs":{"653534f92e19662cbe285c9c01801afbe2247da3":["b1b4b275d20438f9c43fc042323055ac5e392ea5"],"775efee7f959e0dd3df7960b93767d9e00b78751":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["653534f92e19662cbe285c9c01801afbe2247da3"],"b1b4b275d20438f9c43fc042323055ac5e392ea5":["775efee7f959e0dd3df7960b93767d9e00b78751"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}