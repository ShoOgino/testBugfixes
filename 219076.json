{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter#decompose().mjava","commits":[{"id":"1e15bea9339982eec538668b67ae252b28e0003e","date":1319539476,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter#decompose().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter#decomposeInternal(Token).mjava","sourceNew":"  @Override\n  protected void decompose() {\n    final int len = termAtt.length();\n    for (int i=0;i<=len-this.minSubwordSize;++i) {\n        CompoundToken longestMatchToken=null;\n        for (int j=this.minSubwordSize;j<=this.maxSubwordSize;++j) {\n            if(i+j>len) {\n                break;\n            }\n            if(dictionary.contains(termAtt.buffer(), i, j)) {\n                if (this.onlyLongestMatch) {\n                   if (longestMatchToken!=null) {\n                     if (longestMatchToken.txt.length()<j) {\n                       longestMatchToken=new CompoundToken(i,j);\n                     }\n                   } else {\n                     longestMatchToken=new CompoundToken(i,j);\n                   }\n                } else {\n                   tokens.add(new CompoundToken(i,j));\n                }\n            } \n        }\n        if (this.onlyLongestMatch && longestMatchToken!=null) {\n          tokens.add(longestMatchToken);\n        }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void decomposeInternal(final Token token) {\n    // Only words longer than minWordSize get processed\n    if (token.length() < this.minWordSize) {\n      return;\n    }\n    \n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.buffer());\n    \n    for (int i=0;i<=token.length()-this.minSubwordSize;++i) {\n        Token longestMatchToken=null;\n        for (int j=this.minSubwordSize;j<=this.maxSubwordSize;++j) {\n            if(i+j>token.length()) {\n                break;\n            }\n            if(dictionary.contains(lowerCaseTermBuffer, i, j)) {\n                if (this.onlyLongestMatch) {\n                   if (longestMatchToken!=null) {\n                     if (longestMatchToken.length()<j) {\n                       longestMatchToken=createToken(i,j,token);\n                     }\n                   } else {\n                     longestMatchToken=createToken(i,j,token);\n                   }\n                } else {\n                   tokens.add(createToken(i,j,token));\n                }\n            } \n        }\n        if (this.onlyLongestMatch && longestMatchToken!=null) {\n          tokens.add(longestMatchToken);\n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter#decompose().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter#decompose().mjava","sourceNew":"  @Override\n  protected void decompose() {\n    final int len = termAtt.length();\n    for (int i=0;i<=len-this.minSubwordSize;++i) {\n        CompoundToken longestMatchToken=null;\n        for (int j=this.minSubwordSize;j<=this.maxSubwordSize;++j) {\n            if(i+j>len) {\n                break;\n            }\n            if(dictionary.contains(termAtt.buffer(), i, j)) {\n                if (this.onlyLongestMatch) {\n                   if (longestMatchToken!=null) {\n                     if (longestMatchToken.txt.length()<j) {\n                       longestMatchToken=new CompoundToken(i,j);\n                     }\n                   } else {\n                     longestMatchToken=new CompoundToken(i,j);\n                   }\n                } else {\n                   tokens.add(new CompoundToken(i,j));\n                }\n            } \n        }\n        if (this.onlyLongestMatch && longestMatchToken!=null) {\n          tokens.add(longestMatchToken);\n        }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void decompose() {\n    final int len = termAtt.length();\n    for (int i=0;i<=len-this.minSubwordSize;++i) {\n        CompoundToken longestMatchToken=null;\n        for (int j=this.minSubwordSize;j<=this.maxSubwordSize;++j) {\n            if(i+j>len) {\n                break;\n            }\n            if(dictionary.contains(termAtt.buffer(), i, j)) {\n                if (this.onlyLongestMatch) {\n                   if (longestMatchToken!=null) {\n                     if (longestMatchToken.txt.length()<j) {\n                       longestMatchToken=new CompoundToken(i,j);\n                     }\n                   } else {\n                     longestMatchToken=new CompoundToken(i,j);\n                   }\n                } else {\n                   tokens.add(new CompoundToken(i,j));\n                }\n            } \n        }\n        if (this.onlyLongestMatch && longestMatchToken!=null) {\n          tokens.add(longestMatchToken);\n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1e15bea9339982eec538668b67ae252b28e0003e"],"1e15bea9339982eec538668b67ae252b28e0003e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e15bea9339982eec538668b67ae252b28e0003e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e15bea9339982eec538668b67ae252b28e0003e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}