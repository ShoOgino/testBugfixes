{"path":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testWithinDateLine().mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testWithinDateLine().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testWithinDateLine().mjava","sourceNew":"  public void testWithinDateLine() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Polygon indexPoly1 = new Polygon(\n        new double[] {-7.5d, 15d, 15d, 0d, -7.5d},\n        new double[] {-180d, -180d, -176d, -176d, -180d}\n    );\n\n    Polygon indexPoly2 = new Polygon(\n        new double[] {15d, -7.5d, -15d, -10d, 15d, 15d},\n        new double[] {180d, 180d, 176d, 174d, 176d, 180d}\n    );\n\n    Field[] fields = LatLonShape.createIndexableFields(\"test\", indexPoly1);\n    for (Field f : fields) {\n      doc.add(f);\n    }\n    fields = LatLonShape.createIndexableFields(\"test\", indexPoly2);\n    for (Field f : fields) {\n      doc.add(f);\n    }\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    ///// search //////\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Polygon[] searchPoly = new Polygon[] {\n        new Polygon(new double[] {-20d, 20d, 20d, -20d, -20d},\n            new double[] {-180d, -180d, -170d, -170d, -180d}),\n        new Polygon(new double[] {20d, -20d, -20d, 20d, 20d},\n            new double[] {180d, 180d, 170d, 170d, 180d})\n    };\n\n    Query q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.WITHIN, searchPoly);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.INTERSECTS, searchPoly);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.DISJOINT, searchPoly);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.CONTAINS, searchPoly);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.WITHIN, -20, 20, 170, -170);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.INTERSECTS, -20, 20, 170, -170);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.DISJOINT, -20, 20, 170, -170);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.CONTAINS, -20, 20, 170, -170);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testWithinDateLine() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n\n    Polygon indexPoly1 = new Polygon(\n        new double[] {-7.5d, 15d, 15d, 0d, -7.5d},\n        new double[] {-180d, -180d, -176d, -176d, -180d}\n    );\n\n    Polygon indexPoly2 = new Polygon(\n        new double[] {15d, -7.5d, -15d, -10d, 15d, 15d},\n        new double[] {180d, 180d, 176d, 174d, 176d, 180d}\n    );\n\n    Field[] fields = LatLonShape.createIndexableFields(\"test\", indexPoly1);\n    for (Field f : fields) {\n      doc.add(f);\n    }\n    fields = LatLonShape.createIndexableFields(\"test\", indexPoly2);\n    for (Field f : fields) {\n      doc.add(f);\n    }\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    ///// search //////\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Polygon[] searchPoly = new Polygon[] {\n        new Polygon(new double[] {-20d, 20d, 20d, -20d, -20d},\n            new double[] {-180d, -180d, -170d, -170d, -180d}),\n        new Polygon(new double[] {20d, -20d, -20d, 20d, 20d},\n            new double[] {180d, 180d, 170d, 170d, 180d})\n    };\n\n    Query q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.WITHIN, searchPoly);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.INTERSECTS, searchPoly);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.DISJOINT, searchPoly);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newPolygonQuery(\"test\", QueryRelation.CONTAINS, searchPoly);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.WITHIN, -20, 20, 170, -170);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.INTERSECTS, -20, 20, 170, -170);\n    assertEquals(1, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.DISJOINT, -20, 20, 170, -170);\n    assertEquals(0, searcher.count(q));\n\n    q = LatLonShape.newBoxQuery(\"test\", QueryRelation.CONTAINS, -20, 20, 170, -170);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}