{"path":"solr/src/java/org/apache/solr/analysis/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        currMap.submap = new CharArrayMap<SynonymMap>(1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        currMap.submap = new CharArrayMap<SynonymMap>(1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        currMap.submap = new CharArrayMap<SynonymMap>(1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        currMap.submap = new CharArrayMap<SynonymMap>(1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        currMap.submap = new CharArrayMap<SynonymMap>(1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c8b12bda3f5864b27e3e04df1be4f6736ec067a","date":1270088127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 2.9, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_29, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        currMap.submap = new CharArrayMap<SynonymMap>(1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b59603a30f81d2af70cd2033270521dc7c8ec626","date":1273513065,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 2.9, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_29, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 2.9, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_29, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b59603a30f81d2af70cd2033270521dc7c8ec626":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b59603a30f81d2af70cd2033270521dc7c8ec626"]},"commit2Childs":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["b59603a30f81d2af70cd2033270521dc7c8ec626"],"1da8d55113b689b06716246649de6f62430f15c0":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"b59603a30f81d2af70cd2033270521dc7c8ec626":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}