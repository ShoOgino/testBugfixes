{"path":"src/java/org/apache/lucene/index/TermsHash#shrinkFreePostings(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","commits":[{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#shrinkFreePostings(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#shrinkFreePostings(Map,SegmentWriteState).mjava","sourceNew":"  void shrinkFreePostings(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, SegmentWriteState state) {\n\n    assert postingsFreeCount == postingsAllocCount: Thread.currentThread().getName() + \": postingsFreeCount=\" + postingsFreeCount + \" postingsAllocCount=\" + postingsAllocCount + \" consumer=\" + consumer;\n\n    final int newSize = ArrayUtil.getShrinkSize(postingsFreeList.length, postingsAllocCount);\n    if (newSize != postingsFreeList.length) {\n      RawPostingList[] newArray = new RawPostingList[newSize];\n      System.arraycopy(postingsFreeList, 0, newArray, 0, postingsFreeCount);\n      postingsFreeList = newArray;\n    }\n  }\n\n","sourceOld":"  void shrinkFreePostings(Map threadsAndFields, SegmentWriteState state) {\n\n    assert postingsFreeCount == postingsAllocCount: Thread.currentThread().getName() + \": postingsFreeCount=\" + postingsFreeCount + \" postingsAllocCount=\" + postingsAllocCount + \" consumer=\" + consumer;\n\n    final int newSize = ArrayUtil.getShrinkSize(postingsFreeList.length, postingsAllocCount);\n    if (newSize != postingsFreeList.length) {\n      RawPostingList[] newArray = new RawPostingList[newSize];\n      System.arraycopy(postingsFreeList, 0, newArray, 0, postingsFreeCount);\n      postingsFreeList = newArray;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38c26570a4fd6cf0856801c977a2bc9c28a5424c","date":1264074890,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#shrinkFreePostings(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#shrinkFreePostings(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  void shrinkFreePostings(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, SegmentWriteState state) {\n\n    assert postingsFreeCount == postingsAllocCount: Thread.currentThread().getName() + \": postingsFreeCount=\" + postingsFreeCount + \" postingsAllocCount=\" + postingsAllocCount + \" consumer=\" + consumer;\n\n    final int newSize = ArrayUtil.getShrinkSize(postingsFreeList.length, postingsAllocCount, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n    if (newSize != postingsFreeList.length) {\n      RawPostingList[] newArray = new RawPostingList[newSize];\n      System.arraycopy(postingsFreeList, 0, newArray, 0, postingsFreeCount);\n      postingsFreeList = newArray;\n    }\n  }\n\n","sourceOld":"  void shrinkFreePostings(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, SegmentWriteState state) {\n\n    assert postingsFreeCount == postingsAllocCount: Thread.currentThread().getName() + \": postingsFreeCount=\" + postingsFreeCount + \" postingsAllocCount=\" + postingsAllocCount + \" consumer=\" + consumer;\n\n    final int newSize = ArrayUtil.getShrinkSize(postingsFreeList.length, postingsAllocCount);\n    if (newSize != postingsFreeList.length) {\n      RawPostingList[] newArray = new RawPostingList[newSize];\n      System.arraycopy(postingsFreeList, 0, newArray, 0, postingsFreeCount);\n      postingsFreeList = newArray;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#shrinkFreePostings(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#shrinkFreePostings(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  void shrinkFreePostings(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, SegmentWriteState state) {\n\n    assert postingsFreeCount == postingsAllocCount: Thread.currentThread().getName() + \": postingsFreeCount=\" + postingsFreeCount + \" postingsAllocCount=\" + postingsAllocCount + \" consumer=\" + consumer;\n\n    final int newSize = ArrayUtil.getShrinkSize(postingsFreeList.length, postingsAllocCount, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n    if (newSize != postingsFreeList.length) {\n      RawPostingList[] newArray = new RawPostingList[newSize];\n      System.arraycopy(postingsFreeList, 0, newArray, 0, postingsFreeCount);\n      postingsFreeList = newArray;\n    }\n  }\n\n","sourceOld":"  void shrinkFreePostings(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, SegmentWriteState state) {\n\n    assert postingsFreeCount == postingsAllocCount: Thread.currentThread().getName() + \": postingsFreeCount=\" + postingsFreeCount + \" postingsAllocCount=\" + postingsAllocCount + \" consumer=\" + consumer;\n\n    final int newSize = ArrayUtil.getShrinkSize(postingsFreeList.length, postingsAllocCount, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n    if (newSize != postingsFreeList.length) {\n      RawPostingList[] newArray = new RawPostingList[newSize];\n      System.arraycopy(postingsFreeList, 0, newArray, 0, postingsFreeCount);\n      postingsFreeList = newArray;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["60cdc0e643184821eb066795a8791cd82559f46e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60cdc0e643184821eb066795a8791cd82559f46e"],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}