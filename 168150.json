{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"fea36811326410bd8200ab06f9067dcea141d903","date":1493079557,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    if(streamExpressions.size() < 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting atleast 2 streams but found %d\",expression, streamExpressions.size()));\n    }\n\n    TupleStream stream = null;\n    List<CellStream> cellStreams = new ArrayList();\n\n    for(StreamExpression streamExpression : streamExpressions) {\n      TupleStream s = factory.constructStream(streamExpression);\n      if(s instanceof CellStream) {\n        cellStreams.add((CellStream)s);\n      } else {\n        if(stream == null) {\n          stream = s;\n        } else {\n          throw new IOException(\"Found more then one stream that was not a CellStream\");\n        }\n      }\n    }\n\n    init(stream, cellStreams);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","date":1493327009,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() != 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting 1 stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n\n","sourceOld":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    if(streamExpressions.size() < 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting atleast 2 streams but found %d\",expression, streamExpressions.size()));\n    }\n\n    TupleStream stream = null;\n    List<CellStream> cellStreams = new ArrayList();\n\n    for(StreamExpression streamExpression : streamExpressions) {\n      TupleStream s = factory.constructStream(streamExpression);\n      if(s instanceof CellStream) {\n        cellStreams.add((CellStream)s);\n      } else {\n        if(stream == null) {\n          stream = s;\n        } else {\n          throw new IOException(\"Found more then one stream that was not a CellStream\");\n        }\n      }\n    }\n\n    init(stream, cellStreams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() != 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting 1 stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a531253046f0e43934c21488b61a23f0875e143","date":1505870793,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    boolean echo = false;\n    String currentName = null;\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = true;\n        continue;\n      }\n\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echo) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n        }\n      }\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n\n","sourceOld":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() != 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting 1 stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    boolean echo = false;\n    String currentName = null;\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = true;\n        continue;\n      }\n\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echo) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n        }\n      }\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n\n","sourceOld":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() != 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting 1 stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6","date":1516045834,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    Set<String> echo = null;\n    boolean echoAll = false;\n    String currentName = null;\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = new HashSet();\n        String echoString = ((StreamExpressionNamedParameter) np).getParameter().toString().trim();\n        if(echoString.equalsIgnoreCase(\"true\")) {\n          echoAll = true;\n        } else {\n          String[] echoVars = echoString.split(\",\");\n          for (String echoVar : echoVars) {\n            echo.add(echoVar.trim());\n          }\n        }\n\n        continue;\n      }\n\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echoAll && echo == null) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          if(echoAll) {\n            tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n          } else {\n            if(echo.contains(name)) {\n              tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n            }\n          }\n        }\n      }\n\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n\n","sourceOld":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    boolean echo = false;\n    String currentName = null;\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = true;\n        continue;\n      }\n\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echo) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n        }\n      }\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    Set<String> echo = null;\n    boolean echoAll = false;\n    String currentName = null;\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = new HashSet();\n        String echoString = ((StreamExpressionNamedParameter) np).getParameter().toString().trim();\n        if(echoString.equalsIgnoreCase(\"true\")) {\n          echoAll = true;\n        } else {\n          String[] echoVars = echoString.split(\",\");\n          for (String echoVar : echoVars) {\n            echo.add(echoVar.trim());\n          }\n        }\n\n        continue;\n      }\n\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echoAll && echo == null) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          if(echoAll) {\n            tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n          } else {\n            if(echo.contains(name)) {\n              tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n            }\n          }\n        }\n      }\n\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n\n","sourceOld":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    boolean echo = false;\n    String currentName = null;\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = true;\n        continue;\n      }\n\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echo) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n        }\n      }\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc","date":1539269037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    Set<String> echo = null;\n    boolean echoAll = false;\n    String currentName = null;\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = new HashSet();\n        String echoString = ((StreamExpressionNamedParameter) np).getParameter().toString().trim();\n        if(echoString.equalsIgnoreCase(\"true\")) {\n          echoAll = true;\n        } else {\n          String[] echoVars = echoString.split(\",\");\n          for (String echoVar : echoVars) {\n            echo.add(echoVar.trim());\n          }\n        }\n\n        continue;\n      }\n\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n\n      if(param instanceof StreamExpressionValue) {\n        String paramValue = ((StreamExpressionValue) param).getValue();\n        letParams.put(name, factory.constructPrimitiveObject(paramValue));\n      } else if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echoAll && echo == null) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          if(echoAll) {\n            tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n          } else {\n            if(echo.contains(name)) {\n              tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n            }\n          }\n        }\n      }\n\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n\n","sourceOld":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    Set<String> echo = null;\n    boolean echoAll = false;\n    String currentName = null;\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = new HashSet();\n        String echoString = ((StreamExpressionNamedParameter) np).getParameter().toString().trim();\n        if(echoString.equalsIgnoreCase(\"true\")) {\n          echoAll = true;\n        } else {\n          String[] echoVars = echoString.split(\",\");\n          for (String echoVar : echoVars) {\n            echo.add(echoVar.trim());\n          }\n        }\n\n        continue;\n      }\n\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echoAll && echo == null) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          if(echoAll) {\n            tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n          } else {\n            if(echo.contains(name)) {\n              tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n            }\n          }\n        }\n      }\n\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#LetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    Set<String> echo = null;\n    boolean echoAll = false;\n    String currentName = null;\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = new HashSet();\n        String echoString = ((StreamExpressionNamedParameter) np).getParameter().toString().trim();\n        if(echoString.equalsIgnoreCase(\"true\")) {\n          echoAll = true;\n        } else {\n          String[] echoVars = echoString.split(\",\");\n          for (String echoVar : echoVars) {\n            echo.add(echoVar.trim());\n          }\n        }\n\n        continue;\n      }\n\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n\n      if(param instanceof StreamExpressionValue) {\n        String paramValue = ((StreamExpressionValue) param).getValue();\n        letParams.put(name, factory.constructPrimitiveObject(paramValue));\n      } else if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echoAll && echo == null) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          if(echoAll) {\n            tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n          } else {\n            if(echo.contains(name)) {\n              tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n            }\n          }\n        }\n      }\n\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n\n","sourceOld":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    Set<String> echo = null;\n    boolean echoAll = false;\n    String currentName = null;\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = new HashSet();\n        String echoString = ((StreamExpressionNamedParameter) np).getParameter().toString().trim();\n        if(echoString.equalsIgnoreCase(\"true\")) {\n          echoAll = true;\n        } else {\n          String[] echoVars = echoString.split(\",\");\n          for (String echoVar : echoVars) {\n            echo.add(echoVar.trim());\n          }\n        }\n\n        continue;\n      }\n\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n\n      if(param instanceof StreamExpressionValue) {\n        String paramValue = ((StreamExpressionValue) param).getValue();\n        letParams.put(name, factory.constructPrimitiveObject(paramValue));\n      } else if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echoAll && echo == null) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          if(echoAll) {\n            tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n          } else {\n            if(echo.contains(name)) {\n              tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n            }\n          }\n        }\n      }\n\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a531253046f0e43934c21488b61a23f0875e143":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["fea36811326410bd8200ab06f9067dcea141d903"],"b94236357aaa22b76c10629851fe4e376e0cea82":["8a531253046f0e43934c21488b61a23f0875e143","5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["e9017cf144952056066919f1ebc7897ff9bd71b1","8a531253046f0e43934c21488b61a23f0875e143"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fea36811326410bd8200ab06f9067dcea141d903":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["8a531253046f0e43934c21488b61a23f0875e143"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc"],"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"8a531253046f0e43934c21488b61a23f0875e143":["b94236357aaa22b76c10629851fe4e376e0cea82","6240b74b884c5587f2a4062dd27d6c32bf228889","5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["8a531253046f0e43934c21488b61a23f0875e143","e9017cf144952056066919f1ebc7897ff9bd71b1"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","fea36811326410bd8200ab06f9067dcea141d903"],"fea36811326410bd8200ab06f9067dcea141d903":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}