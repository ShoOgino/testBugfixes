{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase2().mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase2().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpecialCase2() throws Exception {\n    RegExp re = new RegExp(\".+\\u0775\");\n    String input = \"\\ufadc\\ufffd\\ub80b\\uda5a\\udc68\\uf234\\u0056\\uda5b\\udcc1\\ufffd\\ufffd\\u0775\";\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n\n    assertTrue(cra.run(input));\n    \n    byte[] bytes = input.getBytes(\"UTF-8\");\n    assertTrue(bra.run(bytes, 0, bytes.length)); // this one fails!\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase2().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase2().mjava","sourceNew":"  public void testSpecialCase2() throws Exception {\n    RegExp re = new RegExp(\".+\\u0775\");\n    String input = \"\\ufadc\\ufffd\\ub80b\\uda5a\\udc68\\uf234\\u0056\\uda5b\\udcc1\\ufffd\\ufffd\\u0775\";\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n\n    assertTrue(cra.run(input));\n    \n    byte[] bytes = input.getBytes(\"UTF-8\");\n    assertTrue(bra.run(bytes, 0, bytes.length)); // this one fails!\n  }\n\n","sourceOld":"  public void testSpecialCase2() throws Exception {\n    RegExp re = new RegExp(\".+\\u0775\");\n    String input = \"\\ufadc\\ufffd\\ub80b\\uda5a\\udc68\\uf234\\u0056\\uda5b\\udcc1\\ufffd\\ufffd\\u0775\";\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n\n    assertTrue(cra.run(input));\n    \n    byte[] bytes = input.getBytes(\"UTF-8\");\n    assertTrue(bra.run(bytes, 0, bytes.length)); // this one fails!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}