{"path":"lucene/core/src/java/org/apache/lucene/util/packed/Packed32#get(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed32#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/Packed32#get(int).mjava","sourceNew":"  /**\n   * @param index the position of the value.\n   * @return the value at the given index.\n   */\n  public long get(final int index) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n\n    final int base = bitPos * FAC_BITPOS;\n\n    return ((blocks[elementPos] << shifts[base]) >>> shifts[base+1]) |\n            ((blocks[elementPos+1] >>> shifts[base+2]) & readMasks[bitPos]);\n  }\n\n","sourceOld":"  /**\n   * @param index the position of the value.\n   * @return the value at the given index.\n   */\n  public long get(final int index) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n\n    final int base = bitPos * FAC_BITPOS;\n\n    return ((blocks[elementPos] << shifts[base]) >>> shifts[base+1]) |\n            ((blocks[elementPos+1] >>> shifts[base+2]) & readMasks[bitPos]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6ef1ac57615594df99b4d227449fa09de6c255f","date":1331046752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed32#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed32#get(int).mjava","sourceNew":"  /**\n   * @param index the position of the value.\n   * @return the value at the given index.\n   */\n  public long get(final int index) {\n    assert index >= 0 && index < size();\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n\n    final int base = bitPos * FAC_BITPOS;\n\n    return ((blocks[elementPos] << shifts[base]) >>> shifts[base+1]) |\n            ((blocks[elementPos+1] >>> shifts[base+2]) & readMasks[bitPos]);\n  }\n\n","sourceOld":"  /**\n   * @param index the position of the value.\n   * @return the value at the given index.\n   */\n  public long get(final int index) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n\n    final int base = bitPos * FAC_BITPOS;\n\n    return ((blocks[elementPos] << shifts[base]) >>> shifts[base+1]) |\n            ((blocks[elementPos+1] >>> shifts[base+2]) & readMasks[bitPos]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed32#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed32#get(int).mjava","sourceNew":"  /**\n   * @param index the position of the value.\n   * @return the value at the given index.\n   */\n  public long get(final int index) {\n    assert index >= 0 && index < size();\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n\n    final int base = bitPos * FAC_BITPOS;\n\n    return ((blocks[elementPos] << shifts[base]) >>> shifts[base+1]) |\n            ((blocks[elementPos+1] >>> shifts[base+2]) & readMasks[bitPos]);\n  }\n\n","sourceOld":"  /**\n   * @param index the position of the value.\n   * @return the value at the given index.\n   */\n  public long get(final int index) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n\n    final int base = bitPos * FAC_BITPOS;\n\n    return ((blocks[elementPos] << shifts[base]) >>> shifts[base+1]) |\n            ((blocks[elementPos+1] >>> shifts[base+2]) & readMasks[bitPos]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed32#get(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param index the position of the value.\n   * @return the value at the given index.\n   */\n  public long get(final int index) {\n    assert index >= 0 && index < size();\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n\n    final int base = bitPos * FAC_BITPOS;\n\n    return ((blocks[elementPos] << shifts[base]) >>> shifts[base+1]) |\n            ((blocks[elementPos+1] >>> shifts[base+2]) & readMasks[bitPos]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b6ef1ac57615594df99b4d227449fa09de6c255f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6ef1ac57615594df99b4d227449fa09de6c255f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["b6ef1ac57615594df99b4d227449fa09de6c255f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b6ef1ac57615594df99b4d227449fa09de6c255f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b6ef1ac57615594df99b4d227449fa09de6c255f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}