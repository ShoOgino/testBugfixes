{"path":"solr/core/src/java/org/apache/solr/handler/component/PhrasesIdentificationComponent#getMaxShingleSize(Analyzer).mjava","commits":[{"id":"0d1411e62d30c460b09c6f3643df82daa10a27cc","date":1536256256,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PhrasesIdentificationComponent#getMaxShingleSize(Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Helper method, public for testing purposes only.\n   * <p>\n   * Given an analyzer, inspects it to determine if:\n   * <ul>\n   *  <li>it is a {@link TokenizerChain}</li>\n   *  <li>it contains exactly one instance of {@link ShingleFilterFactory}</li>\n   * </ul>\n   * <p>\n   * If these these conditions are met, then this method returns the <code>maxShingleSize</code> \n   * in effect for this analyzer, otherwise returns -1.\n   * </p>\n   * \n   * @param analyzer An analyzer inspect\n   * @return <code>maxShingleSize</code> if available\n   * @lucene.internal\n   */\n  public static int getMaxShingleSize(Analyzer analyzer) {\n    if (!TokenizerChain.class.isInstance(analyzer)) {\n      return -1;\n    }\n    \n    final TokenFilterFactory[] factories = ((TokenizerChain) analyzer).getTokenFilterFactories();\n    if (0 == factories.length) {\n      return -1;\n    }\n    int result = -1;\n    for (TokenFilterFactory tff : factories) {\n      if (ShingleFilterFactory.class.isInstance(tff)) {\n        if (0 < result) {\n          // more then one shingle factory in our analyzer, which is weird, so make no assumptions...\n          return -1;\n        }\n        // would be nice if there was an easy way to just ask a factory for the effective value\n        // of an arguement...\n        final Map<String,String> args = tff.getOriginalArgs();\n        result = args.containsKey(\"maxShingleSize\")\n          ? Integer.parseInt(args.get(\"maxShingleSize\")) : ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE;\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d1411e62d30c460b09c6f3643df82daa10a27cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d1411e62d30c460b09c6f3643df82daa10a27cc"],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}