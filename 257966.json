{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = TermRangeFilter.newStringRange(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = TermRangeFilter.newStringRange(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(snq, Occur.MUST);\n        bq.add(TermRangeQuery.newStringRange(\"contents\", \"john\", \"john\", true, true), Occur.FILTER);\n\n        doSearching(bq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = TermRangeFilter.newStringRange(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(snq, Occur.MUST);\n        bq.add(TermRangeQuery.newStringRange(\"contents\", \"john\", \"john\", true, true), Occur.FILTER);\n\n        doSearching(bq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = TermRangeFilter.newStringRange(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(snq, Occur.MUST);\n        bq.add(TermRangeQuery.newStringRange(\"contents\", \"john\", \"john\", true, true), Occur.FILTER);\n\n        doSearching(bq.build());\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(snq, Occur.MUST);\n        bq.add(TermRangeQuery.newStringRange(\"contents\", \"john\", \"john\", true, true), Occur.FILTER);\n\n        doSearching(bq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2713584a660051cd646423be682771e3bbd99985"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2713584a660051cd646423be682771e3bbd99985"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2713584a660051cd646423be682771e3bbd99985":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}