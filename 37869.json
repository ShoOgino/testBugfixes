{"path":"src/test/org/apache/solr/analysis/LengthFilterTest#test().mjava","commits":[{"id":"fe8ae1ed027200f075b0de9f264776fa32c4862f","date":1207066219,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/LengthFilterTest#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    factory.init(args);\n    String[] test = {\"foo\", \"foobar\", \"super-duper-trooper\"};\n    String gold = \"foobar\";\n    String out = tsToString(factory.create(new IterTokenStream(test)));\n    assertEquals(gold.toString(), out);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/LengthFilterTest#test().mjava","pathOld":"src/test/org/apache/solr/analysis/LengthFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(test)));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" });\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    factory.init(args);\n    String[] test = {\"foo\", \"foobar\", \"super-duper-trooper\"};\n    String gold = \"foobar\";\n    String out = tsToString(factory.create(new IterTokenStream(test)));\n    assertEquals(gold.toString(), out);\n  }\n\n","bugFix":null,"bugIntro":["f714d3d16beb7d9cc74e7ae85c110a7976c62938"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/LengthFilterTest#test().mjava","pathOld":"src/test/org/apache/solr/analysis/LengthFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(test)));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" });\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(test)));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}