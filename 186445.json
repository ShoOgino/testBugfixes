{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","sourceNew":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n                        q = new ModifierQueryNode(q, mods);\n                }\n                {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n                        q = new ModifierQueryNode(q, mods);\n                }\n                {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f03d60547476e008d3d993cd26872c1157f19cf","date":1270899773,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","sourceNew":"// QueryNode Query(CharSequence field) :\r\n// {\r\n// List clauses = new ArrayList();\r\n//   List modifiers = new ArrayList();\r\n//   QueryNode q, firstQuery=null;\r\n//   ModifierQueryNode.Modifier mods;\r\n//   int conj;\r\n// }\r\n// {\r\n//   mods=Modifiers() q=Clause(field)\r\n//   {\r\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\r\n//     \r\n//     // do not create modifier nodes with MOD_NONE\r\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\r\n//    \t\tq = new ModifierQueryNode(q, mods);\r\n//    \t}\r\n//    \tclauses.add(q);\r\n//   }\r\n//   (\r\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\r\n//     { \r\n// \t    // do not create modifier nodes with MOD_NONE\r\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\r\n// \t   \t\tq = new ModifierQueryNode(q, mods);\r\n// \t   \t}\r\n// \t   \tclauses.add(q);\r\n// \t   \t//TODO: figure out what to do with AND and ORs\r\n//   }\r\n//   )*\r\n//     {\r\n//      if (clauses.size() == 1 && firstQuery != null)\r\n//         return firstQuery;\r\n//       else {\r\n//   \t\treturn new BooleanQueryNode(clauses);\r\n//       }\r\n//     }\r\n// }\r\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\r\n  QueryNode q;\r\n  ModifierQueryNode.Modifier mods;\r\n    mods = Modifiers();\r\n    q = Clause(field);\r\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\r\n                        q = new ModifierQueryNode(q, mods);\r\n                }\r\n                {if (true) return q;}\r\n    throw new Error(\"Missing return statement in function\");\r\n  }\r\n\n","sourceOld":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n                        q = new ModifierQueryNode(q, mods);\n                }\n                {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b","date":1270900166,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","sourceNew":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n                        q = new ModifierQueryNode(q, mods);\n                }\n                {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"// QueryNode Query(CharSequence field) :\r\n// {\r\n// List clauses = new ArrayList();\r\n//   List modifiers = new ArrayList();\r\n//   QueryNode q, firstQuery=null;\r\n//   ModifierQueryNode.Modifier mods;\r\n//   int conj;\r\n// }\r\n// {\r\n//   mods=Modifiers() q=Clause(field)\r\n//   {\r\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\r\n//     \r\n//     // do not create modifier nodes with MOD_NONE\r\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\r\n//    \t\tq = new ModifierQueryNode(q, mods);\r\n//    \t}\r\n//    \tclauses.add(q);\r\n//   }\r\n//   (\r\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\r\n//     { \r\n// \t    // do not create modifier nodes with MOD_NONE\r\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\r\n// \t   \t\tq = new ModifierQueryNode(q, mods);\r\n// \t   \t}\r\n// \t   \tclauses.add(q);\r\n// \t   \t//TODO: figure out what to do with AND and ORs\r\n//   }\r\n//   )*\r\n//     {\r\n//      if (clauses.size() == 1 && firstQuery != null)\r\n//         return firstQuery;\r\n//       else {\r\n//   \t\treturn new BooleanQueryNode(clauses);\r\n//       }\r\n//     }\r\n// }\r\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\r\n  QueryNode q;\r\n  ModifierQueryNode.Modifier mods;\r\n    mods = Modifiers();\r\n    q = Clause(field);\r\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\r\n                        q = new ModifierQueryNode(q, mods);\r\n                }\r\n                {if (true) return q;}\r\n    throw new Error(\"Missing return statement in function\");\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","sourceNew":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n                        q = new ModifierQueryNode(q, mods);\n                }\n                {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n                        q = new ModifierQueryNode(q, mods);\n                }\n                {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["1f03d60547476e008d3d993cd26872c1157f19cf"],"1f03d60547476e008d3d993cd26872c1157f19cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"1f03d60547476e008d3d993cd26872c1157f19cf":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f03d60547476e008d3d993cd26872c1157f19cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}