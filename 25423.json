{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#createTerm(int,String).mjava","commits":[{"id":"c8f14489323057ef6de92ba5ea2d0cfe6e34755f","date":1120167605,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#createTerm(int,String).mjava","pathOld":"/dev/null","sourceNew":"\t/** Returns a new Term object, minimizing String.intern() overheads. */\r\n\tprivate Term createTerm(int pos, String text) { \r\n\t\t// used by MemoryIndexReader.terms().term()\r\n\t\t// Assertion: sortFields has already been called before\r\n\t\tTerm[] templates = sortedTemplates;\r\n\t\tif (templates == null) { // not yet initialized?\r\n\t\t\ttemplates = new Term[sortedFields.length];\r\n\t\t\tsortedTemplates = templates;\r\n\t\t}\r\n\t\tif (templates[pos] == null) { // not yet cached?\r\n\t\t\tString fieldName = (String) sortedFields[pos].getKey();\r\n\t\t\ttemplates[pos] = new Term(fieldName, \"\");\r\n\t\t}\r\n\t\t\r\n\t\treturn templates[pos].createTerm(text);\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35dd40ede4dd66fa47506858c4a073d295c5a76e","date":1133587328,"type":4,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#createTerm(int,String).mjava","sourceNew":null,"sourceOld":"\t/** Returns a new Term object, minimizing String.intern() overheads. */\r\n\tprivate Term createTerm(int pos, String text) { \r\n\t\t// used by MemoryIndexReader.terms().term()\r\n\t\t// Assertion: sortFields has already been called before\r\n\t\tTerm[] templates = sortedTemplates;\r\n\t\tif (templates == null) { // not yet initialized?\r\n\t\t\ttemplates = new Term[sortedFields.length];\r\n\t\t\tsortedTemplates = templates;\r\n\t\t}\r\n\t\tif (templates[pos] == null) { // not yet cached?\r\n\t\t\tString fieldName = (String) sortedFields[pos].getKey();\r\n\t\t\ttemplates[pos] = new Term(fieldName, \"\");\r\n\t\t}\r\n\t\t\r\n\t\treturn templates[pos].createTerm(text);\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35dd40ede4dd66fa47506858c4a073d295c5a76e"]},"commit2Childs":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}