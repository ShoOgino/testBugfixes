{"path":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","sourceNew":"      @Override\n      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry<String,ArrayIntList>[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public String[] getTerms() {\n          String[] terms = new String[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions(sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(String term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(String[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return sortedTerms[index].getValue().toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","sourceOld":"      @Override\n      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry<String,ArrayIntList>[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public String[] getTerms() {\n          String[] terms = new String[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions(sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(String term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(String[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return sortedTerms[index].getValue().toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","sourceNew":"      @Override\n      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry<BytesRef,ArrayIntList>[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public BytesRef[] getTerms() {\n          BytesRef[] terms = new BytesRef[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions(sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(BytesRef term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(BytesRef[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return sortedTerms[index].getValue().toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","sourceOld":"      @Override\n      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry<String,ArrayIntList>[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public String[] getTerms() {\n          String[] terms = new String[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions(sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(String term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(String[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return sortedTerms[index].getValue().toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","sourceNew":"      @Override\n      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry<BytesRef,ArrayIntList>[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public BytesRef[] getTerms() {\n          BytesRef[] terms = new BytesRef[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions(sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(BytesRef term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(BytesRef[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return sortedTerms[index].getValue().toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","sourceOld":"      @Override\n      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry<String,ArrayIntList>[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public String[] getTerms() {\n          String[] terms = new String[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions(sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(String term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(String[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return sortedTerms[index].getValue().toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","sourceNew":null,"sourceOld":"      @Override\n      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry<BytesRef,ArrayIntList>[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public BytesRef[] getTerms() {\n          BytesRef[] terms = new BytesRef[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions(sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(BytesRef term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(BytesRef[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return sortedTerms[index].getValue().toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["3cc749c053615f5871f3b95715fe292f34e70a53","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}