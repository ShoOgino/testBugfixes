{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createExpression(String,Map[String,AnalyticsValueStream],String,String[]).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createExpression(String,Map[String,AnalyticsValueStream],String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createExpression(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                                String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression;\n    expressionStr = expressionStr.trim();\n    \n    boolean isField = false;\n    try {\n      // Try to make a constant value\n      expression = constantCreator.apply(expressionStr);\n    } catch (SolrException e1) {\n      // Not a constant\n      // If the expression has parens, it is an expression otherwise it is a field\n      if (!expressionStr.contains(\"(\")) {\n        try {\n          // Try to make a field out of it\n          expression = createField(schema.getField(expressionStr));\n          isField = true;\n        } catch (SolrException e2) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The following is not a field, constant or function : \" + expressionStr); \n        }  \n      } else {\n        // Must be a function\n        expression = createFunction(expressionStr, varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n    }\n\n    // Try to use an already made expression instead of the new one.\n    // This will decrease the amount of collection needed to be done.\n    if (expressions.containsKey(expression.getExpressionStr())) {\n      expression = expressions.get(expression.getExpressionStr());\n      // If this is a grouped expression, make sure that the reduction info for the expression is included in the grouped reduction manager.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION && isGrouped) {\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          groupedCollectors.put(collector.getExpressionStr(), collector);\n          return collector;\n        });\n      }\n    }\n    else {\n      expressions.put(expression.getExpressionStr(), expression);\n      // Make sure that the reduction info for the expression is included in the reduction manager and grouped reduction manager if necessary.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION) {\n        reductionFunctions.put(expression.getExpressionStr(), (ReductionFunction)expression);\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          String collectorStr = collector.getExpressionStr();\n          ReductionDataCollector<?> usedCollector = collectors.get(collectorStr);\n          if (usedCollector == null) {\n            usedCollector = collector;\n            collectors.put(collectorStr, collector);\n          }\n          if (isGrouped) {\n            groupedCollectors.put(collectorStr, usedCollector);\n          }\n          return usedCollector;\n        });\n      }\n      // Add the field info to the reduction manager\n      if (isField) {\n        fields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n      }\n    }\n    // If this is a grouped expression, make sure that the field info is included in the grouped reduction manager.\n    if (isField && isGrouped) {\n      groupedFields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n    }\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createExpression(String,Map[String,AnalyticsValueStream],String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createExpression(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                                String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression;\n    expressionStr = expressionStr.trim();\n    \n    boolean isField = false;\n    try {\n      // Try to make a constant value\n      expression = constantCreator.apply(expressionStr);\n    } catch (SolrException e1) {\n      // Not a constant\n      // If the expression has parens, it is an expression otherwise it is a field\n      if (!expressionStr.contains(\"(\")) {\n        try {\n          // Try to make a field out of it\n          expression = createField(schema.getField(expressionStr));\n          isField = true;\n        } catch (SolrException e2) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The following is not a field, constant or function : \" + expressionStr); \n        }  \n      } else {\n        // Must be a function\n        expression = createFunction(expressionStr, varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n    }\n\n    // Try to use an already made expression instead of the new one.\n    // This will decrease the amount of collection needed to be done.\n    if (expressions.containsKey(expression.getExpressionStr())) {\n      expression = expressions.get(expression.getExpressionStr());\n      // If this is a grouped expression, make sure that the reduction info for the expression is included in the grouped reduction manager.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION && isGrouped) {\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          groupedCollectors.put(collector.getExpressionStr(), collector);\n          return collector;\n        });\n      }\n    }\n    else {\n      expressions.put(expression.getExpressionStr(), expression);\n      // Make sure that the reduction info for the expression is included in the reduction manager and grouped reduction manager if necessary.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION) {\n        reductionFunctions.put(expression.getExpressionStr(), (ReductionFunction)expression);\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          String collectorStr = collector.getExpressionStr();\n          ReductionDataCollector<?> usedCollector = collectors.get(collectorStr);\n          if (usedCollector == null) {\n            usedCollector = collector;\n            collectors.put(collectorStr, collector);\n          }\n          if (isGrouped) {\n            groupedCollectors.put(collectorStr, usedCollector);\n          }\n          return usedCollector;\n        });\n      }\n      // Add the field info to the reduction manager\n      if (isField) {\n        fields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n      }\n    }\n    // If this is a grouped expression, make sure that the field info is included in the grouped reduction manager.\n    if (isField && isGrouped) {\n      groupedFields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n    }\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createExpression(String,Map[String,AnalyticsValueStream],String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createExpression(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                                String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression;\n    expressionStr = expressionStr.trim();\n    \n    boolean isField = false;\n    try {\n      // Try to make a constant value\n      expression = constantCreator.apply(expressionStr);\n    } catch (SolrException e1) {\n      // Not a constant\n      // If the expression has parens, it is an expression otherwise it is a field\n      if (!expressionStr.contains(\"(\")) {\n        try {\n          // Try to make a field out of it\n          expression = createField(schema.getField(expressionStr));\n          isField = true;\n        } catch (SolrException e2) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The following is not a field, constant or function : \" + expressionStr); \n        }  \n      } else {\n        // Must be a function\n        expression = createFunction(expressionStr, varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n    }\n\n    // Try to use an already made expression instead of the new one.\n    // This will decrease the amount of collection needed to be done.\n    if (expressions.containsKey(expression.getExpressionStr())) {\n      expression = expressions.get(expression.getExpressionStr());\n      // If this is a grouped expression, make sure that the reduction info for the expression is included in the grouped reduction manager.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION && isGrouped) {\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          groupedCollectors.put(collector.getExpressionStr(), collector);\n          return collector;\n        });\n      }\n    }\n    else {\n      expressions.put(expression.getExpressionStr(), expression);\n      // Make sure that the reduction info for the expression is included in the reduction manager and grouped reduction manager if necessary.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION) {\n        reductionFunctions.put(expression.getExpressionStr(), (ReductionFunction)expression);\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          String collectorStr = collector.getExpressionStr();\n          ReductionDataCollector<?> usedCollector = collectors.get(collectorStr);\n          if (usedCollector == null) {\n            usedCollector = collector;\n            collectors.put(collectorStr, collector);\n          }\n          if (isGrouped) {\n            groupedCollectors.put(collectorStr, usedCollector);\n          }\n          return usedCollector;\n        });\n      }\n      // Add the field info to the reduction manager\n      if (isField) {\n        fields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n      }\n    }\n    // If this is a grouped expression, make sure that the field info is included in the grouped reduction manager.\n    if (isField && isGrouped) {\n      groupedFields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n    }\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createExpression(String,Map[String,AnalyticsValueStream],String,String[]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createExpression(String,Map[String,AnalyticsValueStream],String,String[]).mjava","sourceNew":"  /**\n   * Create an expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createExpression(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                                String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression;\n    expressionStr = expressionStr.trim();\n    \n    boolean isField = false;\n    try {\n      // Try to make a constant value\n      expression = constantCreator.apply(expressionStr);\n    } catch (SolrException e1) {\n      // Not a constant\n      // If the expression has parens, it is an expression otherwise it is a field\n      if (!expressionStr.contains(\"(\")) {\n        // Try to make a field out of it\n        expression = createField(schema.getField(expressionStr));\n        isField = true;\n      } else {\n        // Must be a function\n        expression = createFunction(expressionStr, varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n    }\n\n    // Try to use an already made expression instead of the new one.\n    // This will decrease the amount of collection needed to be done.\n    if (expressions.containsKey(expression.getExpressionStr())) {\n      expression = expressions.get(expression.getExpressionStr());\n      // If this is a grouped expression, make sure that the reduction info for the expression is included in the grouped reduction manager.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION && isGrouped) {\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          groupedCollectors.put(collector.getExpressionStr(), collector);\n          return collector;\n        });\n      }\n    }\n    else {\n      expressions.put(expression.getExpressionStr(), expression);\n      // Make sure that the reduction info for the expression is included in the reduction manager and grouped reduction manager if necessary.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION) {\n        reductionFunctions.put(expression.getExpressionStr(), (ReductionFunction)expression);\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          String collectorStr = collector.getExpressionStr();\n          ReductionDataCollector<?> usedCollector = collectors.get(collectorStr);\n          if (usedCollector == null) {\n            usedCollector = collector;\n            collectors.put(collectorStr, collector);\n          }\n          if (isGrouped) {\n            groupedCollectors.put(collectorStr, usedCollector);\n          }\n          return usedCollector;\n        });\n      }\n      // Add the field info to the reduction manager\n      if (isField) {\n        fields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n      }\n    }\n    // If this is a grouped expression, make sure that the field info is included in the grouped reduction manager.\n    if (isField && isGrouped) {\n      groupedFields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n    }\n    return expression;\n  }\n\n","sourceOld":"  /**\n   * Create an expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createExpression(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                                String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression;\n    expressionStr = expressionStr.trim();\n    \n    boolean isField = false;\n    try {\n      // Try to make a constant value\n      expression = constantCreator.apply(expressionStr);\n    } catch (SolrException e1) {\n      // Not a constant\n      // If the expression has parens, it is an expression otherwise it is a field\n      if (!expressionStr.contains(\"(\")) {\n        try {\n          // Try to make a field out of it\n          expression = createField(schema.getField(expressionStr));\n          isField = true;\n        } catch (SolrException e2) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The following is not a field, constant or function : \" + expressionStr); \n        }  \n      } else {\n        // Must be a function\n        expression = createFunction(expressionStr, varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n    }\n\n    // Try to use an already made expression instead of the new one.\n    // This will decrease the amount of collection needed to be done.\n    if (expressions.containsKey(expression.getExpressionStr())) {\n      expression = expressions.get(expression.getExpressionStr());\n      // If this is a grouped expression, make sure that the reduction info for the expression is included in the grouped reduction manager.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION && isGrouped) {\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          groupedCollectors.put(collector.getExpressionStr(), collector);\n          return collector;\n        });\n      }\n    }\n    else {\n      expressions.put(expression.getExpressionStr(), expression);\n      // Make sure that the reduction info for the expression is included in the reduction manager and grouped reduction manager if necessary.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION) {\n        reductionFunctions.put(expression.getExpressionStr(), (ReductionFunction)expression);\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          String collectorStr = collector.getExpressionStr();\n          ReductionDataCollector<?> usedCollector = collectors.get(collectorStr);\n          if (usedCollector == null) {\n            usedCollector = collector;\n            collectors.put(collectorStr, collector);\n          }\n          if (isGrouped) {\n            groupedCollectors.put(collectorStr, usedCollector);\n          }\n          return usedCollector;\n        });\n      }\n      // Add the field info to the reduction manager\n      if (isField) {\n        fields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n      }\n    }\n    // If this is a grouped expression, make sure that the field info is included in the grouped reduction manager.\n    if (isField && isGrouped) {\n      groupedFields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n    }\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createExpression(String,Map[String,AnalyticsValueStream],String,String[]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createExpression(String,Map[String,AnalyticsValueStream],String,String[]).mjava","sourceNew":"  /**\n   * Create an expression from the given expression string, with the given variable function information.\n   *\n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createExpression(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                                String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression;\n    expressionStr = expressionStr.trim();\n\n    boolean isField = false;\n    try {\n      // Try to make a constant value\n      expression = constantCreator.apply(expressionStr);\n    } catch (SolrException e1) {\n      // Not a constant\n      // If the expression has parens, it is an expression otherwise it is a field\n      if (!expressionStr.contains(\"(\")) {\n        // Try to make a field out of it\n        expression = createField(schema.getField(expressionStr));\n        isField = true;\n      } else {\n        // Must be a function\n        expression = createFunction(expressionStr, varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n    }\n\n    // Try to use an already made expression instead of the new one.\n    // This will decrease the amount of collection needed to be done.\n    if (expressions.containsKey(expression.getExpressionStr())) {\n      expression = expressions.get(expression.getExpressionStr());\n      // If this is a grouped expression, make sure that the reduction info for the expression is included in the grouped reduction manager.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION && isGrouped) {\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          groupedCollectors.put(collector.getExpressionStr(), collector);\n          return collector;\n        });\n      }\n    }\n    else {\n      expressions.put(expression.getExpressionStr(), expression);\n      // Make sure that the reduction info for the expression is included in the reduction manager and grouped reduction manager if necessary.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION) {\n        reductionFunctions.put(expression.getExpressionStr(), (ReductionFunction)expression);\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          String collectorStr = collector.getExpressionStr();\n          ReductionDataCollector<?> usedCollector = collectors.get(collectorStr);\n          if (usedCollector == null) {\n            usedCollector = collector;\n            collectors.put(collectorStr, collector);\n          }\n          if (isGrouped) {\n            groupedCollectors.put(collectorStr, usedCollector);\n          }\n          return usedCollector;\n        });\n      }\n      // Add the field info to the reduction manager\n      if (isField) {\n        fields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n      }\n    }\n    // If this is a grouped expression, make sure that the field info is included in the grouped reduction manager.\n    if (isField && isGrouped) {\n      groupedFields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n    }\n    return expression;\n  }\n\n","sourceOld":"  /**\n   * Create an expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createExpression(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                                String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression;\n    expressionStr = expressionStr.trim();\n    \n    boolean isField = false;\n    try {\n      // Try to make a constant value\n      expression = constantCreator.apply(expressionStr);\n    } catch (SolrException e1) {\n      // Not a constant\n      // If the expression has parens, it is an expression otherwise it is a field\n      if (!expressionStr.contains(\"(\")) {\n        // Try to make a field out of it\n        expression = createField(schema.getField(expressionStr));\n        isField = true;\n      } else {\n        // Must be a function\n        expression = createFunction(expressionStr, varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n    }\n\n    // Try to use an already made expression instead of the new one.\n    // This will decrease the amount of collection needed to be done.\n    if (expressions.containsKey(expression.getExpressionStr())) {\n      expression = expressions.get(expression.getExpressionStr());\n      // If this is a grouped expression, make sure that the reduction info for the expression is included in the grouped reduction manager.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION && isGrouped) {\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          groupedCollectors.put(collector.getExpressionStr(), collector);\n          return collector;\n        });\n      }\n    }\n    else {\n      expressions.put(expression.getExpressionStr(), expression);\n      // Make sure that the reduction info for the expression is included in the reduction manager and grouped reduction manager if necessary.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION) {\n        reductionFunctions.put(expression.getExpressionStr(), (ReductionFunction)expression);\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          String collectorStr = collector.getExpressionStr();\n          ReductionDataCollector<?> usedCollector = collectors.get(collectorStr);\n          if (usedCollector == null) {\n            usedCollector = collector;\n            collectors.put(collectorStr, collector);\n          }\n          if (isGrouped) {\n            groupedCollectors.put(collectorStr, usedCollector);\n          }\n          return usedCollector;\n        });\n      }\n      // Add the field info to the reduction manager\n      if (isField) {\n        fields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n      }\n    }\n    // If this is a grouped expression, make sure that the field info is included in the grouped reduction manager.\n    if (isField && isGrouped) {\n      groupedFields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n    }\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createExpression(String,Map[String,AnalyticsValueStream],String,String[]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createExpression(String,Map[String,AnalyticsValueStream],String,String[]).mjava","sourceNew":"  /**\n   * Create an expression from the given expression string, with the given variable function information.\n   *\n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createExpression(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                                String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression;\n    expressionStr = expressionStr.trim();\n\n    boolean isField = false;\n    try {\n      // Try to make a constant value\n      expression = constantCreator.apply(expressionStr);\n    } catch (SolrException e1) {\n      // Not a constant\n      // If the expression has parens, it is an expression otherwise it is a field\n      if (!expressionStr.contains(\"(\")) {\n        // Try to make a field out of it\n        expression = createField(schema.getField(expressionStr));\n        isField = true;\n      } else {\n        // Must be a function\n        expression = createFunction(expressionStr, varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n    }\n\n    // Try to use an already made expression instead of the new one.\n    // This will decrease the amount of collection needed to be done.\n    if (expressions.containsKey(expression.getExpressionStr())) {\n      expression = expressions.get(expression.getExpressionStr());\n      // If this is a grouped expression, make sure that the reduction info for the expression is included in the grouped reduction manager.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION && isGrouped) {\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          groupedCollectors.put(collector.getExpressionStr(), collector);\n          return collector;\n        });\n      }\n    }\n    else {\n      expressions.put(expression.getExpressionStr(), expression);\n      // Make sure that the reduction info for the expression is included in the reduction manager and grouped reduction manager if necessary.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION) {\n        reductionFunctions.put(expression.getExpressionStr(), (ReductionFunction)expression);\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          String collectorStr = collector.getExpressionStr();\n          ReductionDataCollector<?> usedCollector = collectors.get(collectorStr);\n          if (usedCollector == null) {\n            usedCollector = collector;\n            collectors.put(collectorStr, collector);\n          }\n          if (isGrouped) {\n            groupedCollectors.put(collectorStr, usedCollector);\n          }\n          return usedCollector;\n        });\n      }\n      // Add the field info to the reduction manager\n      if (isField) {\n        fields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n      }\n    }\n    // If this is a grouped expression, make sure that the field info is included in the grouped reduction manager.\n    if (isField && isGrouped) {\n      groupedFields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n    }\n    return expression;\n  }\n\n","sourceOld":"  /**\n   * Create an expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createExpression(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                                String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression;\n    expressionStr = expressionStr.trim();\n    \n    boolean isField = false;\n    try {\n      // Try to make a constant value\n      expression = constantCreator.apply(expressionStr);\n    } catch (SolrException e1) {\n      // Not a constant\n      // If the expression has parens, it is an expression otherwise it is a field\n      if (!expressionStr.contains(\"(\")) {\n        // Try to make a field out of it\n        expression = createField(schema.getField(expressionStr));\n        isField = true;\n      } else {\n        // Must be a function\n        expression = createFunction(expressionStr, varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n    }\n\n    // Try to use an already made expression instead of the new one.\n    // This will decrease the amount of collection needed to be done.\n    if (expressions.containsKey(expression.getExpressionStr())) {\n      expression = expressions.get(expression.getExpressionStr());\n      // If this is a grouped expression, make sure that the reduction info for the expression is included in the grouped reduction manager.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION && isGrouped) {\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          groupedCollectors.put(collector.getExpressionStr(), collector);\n          return collector;\n        });\n      }\n    }\n    else {\n      expressions.put(expression.getExpressionStr(), expression);\n      // Make sure that the reduction info for the expression is included in the reduction manager and grouped reduction manager if necessary.\n      if (expression.getExpressionType() == ExpressionType.REDUCTION) {\n        reductionFunctions.put(expression.getExpressionStr(), (ReductionFunction)expression);\n        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {\n          String collectorStr = collector.getExpressionStr();\n          ReductionDataCollector<?> usedCollector = collectors.get(collectorStr);\n          if (usedCollector == null) {\n            usedCollector = collector;\n            collectors.put(collectorStr, collector);\n          }\n          if (isGrouped) {\n            groupedCollectors.put(collectorStr, usedCollector);\n          }\n          return usedCollector;\n        });\n      }\n      // Add the field info to the reduction manager\n      if (isField) {\n        fields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n      }\n    }\n    // If this is a grouped expression, make sure that the field info is included in the grouped reduction manager.\n    if (isField && isGrouped) {\n      groupedFields.put(expression.getExpressionStr(), (AnalyticsField)expression);\n    }\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}