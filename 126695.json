{"path":"lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#addTail(int,BytesRef,int,int).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#addTail(int,BytesRef,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private BytesRef addTail(int state, BytesRef term, int idx, int leadLabel) {\n\n    // Find biggest transition that's < label\n    // TODO: use binary search here\n    Transition maxTransition = null;\n    for (Transition transition : sortedTransitions[state]) {\n      if (transition.min < leadLabel) {\n        maxTransition = transition;\n      }\n    }\n\n    assert maxTransition != null;\n\n    // Append floorLabel\n    final int floorLabel;\n    if (maxTransition.max > leadLabel-1) {\n      floorLabel = leadLabel-1;\n    } else {\n      floorLabel = maxTransition.max;\n    }\n    if (idx >= term.bytes.length) {\n      term.grow(1+idx);\n    }\n    //if (DEBUG) System.out.println(\"  add floorLabel=\" + (char) floorLabel + \" idx=\" + idx);\n    term.bytes[idx] = (byte) floorLabel;\n\n    state = maxTransition.to.getNumber();\n    idx++;\n\n    // Push down to last accept state\n    while (true) {\n      Transition[] transitions = sortedTransitions[state];\n      if (transitions.length == 0) {\n        assert runAutomaton.isAccept(state);\n        term.length = idx;\n        //if (DEBUG) System.out.println(\"  return \" + term.utf8ToString());\n        return term;\n      } else {\n        // We are pushing \"top\" -- so get last label of\n        // last transition:\n        assert transitions.length != 0;\n        Transition lastTransition = transitions[transitions.length-1];\n        if (idx >= term.bytes.length) {\n          term.grow(1+idx);\n        }\n        //if (DEBUG) System.out.println(\"  push maxLabel=\" + (char) lastTransition.max + \" idx=\" + idx);\n        term.bytes[idx] = (byte) lastTransition.max;\n        state = lastTransition.to.getNumber();\n        idx++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#addTail(int,BytesRef,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#addTail(int,BytesRef,int,int).mjava","sourceNew":"  private BytesRef addTail(int state, BytesRef term, int idx, int leadLabel) {\n\n    // Find biggest transition that's < label\n    // TODO: use binary search here\n    Transition maxTransition = null;\n    for (Transition transition : sortedTransitions[state]) {\n      if (transition.min < leadLabel) {\n        maxTransition = transition;\n      }\n    }\n\n    assert maxTransition != null;\n\n    // Append floorLabel\n    final int floorLabel;\n    if (maxTransition.max > leadLabel-1) {\n      floorLabel = leadLabel-1;\n    } else {\n      floorLabel = maxTransition.max;\n    }\n    if (idx >= term.bytes.length) {\n      term.grow(1+idx);\n    }\n    //if (DEBUG) System.out.println(\"  add floorLabel=\" + (char) floorLabel + \" idx=\" + idx);\n    term.bytes[idx] = (byte) floorLabel;\n\n    state = maxTransition.to.getNumber();\n    idx++;\n\n    // Push down to last accept state\n    while (true) {\n      Transition[] transitions = sortedTransitions[state];\n      if (transitions.length == 0) {\n        assert runAutomaton.isAccept(state);\n        term.length = idx;\n        //if (DEBUG) System.out.println(\"  return \" + term.utf8ToString());\n        return term;\n      } else {\n        // We are pushing \"top\" -- so get last label of\n        // last transition:\n        assert transitions.length != 0;\n        Transition lastTransition = transitions[transitions.length-1];\n        if (idx >= term.bytes.length) {\n          term.grow(1+idx);\n        }\n        //if (DEBUG) System.out.println(\"  push maxLabel=\" + (char) lastTransition.max + \" idx=\" + idx);\n        term.bytes[idx] = (byte) lastTransition.max;\n        state = lastTransition.to.getNumber();\n        idx++;\n      }\n    }\n  }\n\n","sourceOld":"  private BytesRef addTail(int state, BytesRef term, int idx, int leadLabel) {\n\n    // Find biggest transition that's < label\n    // TODO: use binary search here\n    Transition maxTransition = null;\n    for (Transition transition : sortedTransitions[state]) {\n      if (transition.min < leadLabel) {\n        maxTransition = transition;\n      }\n    }\n\n    assert maxTransition != null;\n\n    // Append floorLabel\n    final int floorLabel;\n    if (maxTransition.max > leadLabel-1) {\n      floorLabel = leadLabel-1;\n    } else {\n      floorLabel = maxTransition.max;\n    }\n    if (idx >= term.bytes.length) {\n      term.grow(1+idx);\n    }\n    //if (DEBUG) System.out.println(\"  add floorLabel=\" + (char) floorLabel + \" idx=\" + idx);\n    term.bytes[idx] = (byte) floorLabel;\n\n    state = maxTransition.to.getNumber();\n    idx++;\n\n    // Push down to last accept state\n    while (true) {\n      Transition[] transitions = sortedTransitions[state];\n      if (transitions.length == 0) {\n        assert runAutomaton.isAccept(state);\n        term.length = idx;\n        //if (DEBUG) System.out.println(\"  return \" + term.utf8ToString());\n        return term;\n      } else {\n        // We are pushing \"top\" -- so get last label of\n        // last transition:\n        assert transitions.length != 0;\n        Transition lastTransition = transitions[transitions.length-1];\n        if (idx >= term.bytes.length) {\n          term.grow(1+idx);\n        }\n        //if (DEBUG) System.out.println(\"  push maxLabel=\" + (char) lastTransition.max + \" idx=\" + idx);\n        term.bytes[idx] = (byte) lastTransition.max;\n        state = lastTransition.to.getNumber();\n        idx++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}