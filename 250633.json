{"path":"src/java/org/apache/solr/core/SolrCore#registerSearcher(RefCounted[SolrIndexSearcher]).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#registerSearcher(RefCounted[SolrIndexSearcher]).mjava","pathOld":"/dev/null","sourceNew":"  // Take control of newSearcherHolder (which should have a reference count of at\n  // least 1 already.  If the caller wishes to use the newSearcherHolder directly\n  // after registering it, then they should increment the reference count *before*\n  // calling this method.\n  //\n  // onDeckSearchers will also be decremented (it should have been incremented\n  // as a result of opening a new searcher).\n  private void registerSearcher(RefCounted<SolrIndexSearcher> newSearcherHolder) throws IOException {\n    synchronized (searcherLock) {\n      try {\n        if (_searcher != null) {\n          _searcher.decref();   // dec refcount for this._searcher\n          _searcher=null;\n        }\n\n        _searcher = newSearcherHolder;\n        SolrIndexSearcher newSearcher = newSearcherHolder.get();\n\n        SolrInfoRegistry.getRegistry().put(\"currentSearcher\", newSearcher);\n        newSearcher.register(); // register subitems (caches)\n        log.info(\"Registered new searcher \" + newSearcher);\n\n      } catch (Throwable e) {\n        log(e);\n      } finally {\n        // wake up anyone waiting for a searcher\n        // even in the face of errors.\n        onDeckSearchers--;\n        searcherLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45c3e698a8e53992ec65256740810a101c52247d","date":1140729061,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#registerSearcher(RefCounted[SolrIndexSearcher]).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#registerSearcher(RefCounted[SolrIndexSearcher]).mjava","sourceNew":"  // Take control of newSearcherHolder (which should have a reference count of at\n  // least 1 already.  If the caller wishes to use the newSearcherHolder directly\n  // after registering it, then they should increment the reference count *before*\n  // calling this method.\n  //\n  // onDeckSearchers will also be decremented (it should have been incremented\n  // as a result of opening a new searcher).\n  private void registerSearcher(RefCounted<SolrIndexSearcher> newSearcherHolder) throws IOException {\n    synchronized (searcherLock) {\n      try {\n        if (_searcher != null) {\n          _searcher.decref();   // dec refcount for this._searcher\n          _searcher=null;\n        }\n\n        _searcher = newSearcherHolder;\n        SolrIndexSearcher newSearcher = newSearcherHolder.get();\n\n        newSearcher.register(); // register subitems (caches)\n        log.info(\"Registered new searcher \" + newSearcher);\n\n      } catch (Throwable e) {\n        log(e);\n      } finally {\n        // wake up anyone waiting for a searcher\n        // even in the face of errors.\n        onDeckSearchers--;\n        searcherLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  // Take control of newSearcherHolder (which should have a reference count of at\n  // least 1 already.  If the caller wishes to use the newSearcherHolder directly\n  // after registering it, then they should increment the reference count *before*\n  // calling this method.\n  //\n  // onDeckSearchers will also be decremented (it should have been incremented\n  // as a result of opening a new searcher).\n  private void registerSearcher(RefCounted<SolrIndexSearcher> newSearcherHolder) throws IOException {\n    synchronized (searcherLock) {\n      try {\n        if (_searcher != null) {\n          _searcher.decref();   // dec refcount for this._searcher\n          _searcher=null;\n        }\n\n        _searcher = newSearcherHolder;\n        SolrIndexSearcher newSearcher = newSearcherHolder.get();\n\n        SolrInfoRegistry.getRegistry().put(\"currentSearcher\", newSearcher);\n        newSearcher.register(); // register subitems (caches)\n        log.info(\"Registered new searcher \" + newSearcher);\n\n      } catch (Throwable e) {\n        log(e);\n      } finally {\n        // wake up anyone waiting for a searcher\n        // even in the face of errors.\n        onDeckSearchers--;\n        searcherLock.notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#registerSearcher(RefCounted[SolrIndexSearcher]).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#registerSearcher(RefCounted[SolrIndexSearcher]).mjava","sourceNew":"  // Take control of newSearcherHolder (which should have a reference count of at\n  // least 1 already.  If the caller wishes to use the newSearcherHolder directly\n  // after registering it, then they should increment the reference count *before*\n  // calling this method.\n  //\n  // onDeckSearchers will also be decremented (it should have been incremented\n  // as a result of opening a new searcher).\n  private void registerSearcher(RefCounted<SolrIndexSearcher> newSearcherHolder) throws IOException {\n    synchronized (searcherLock) {\n      try {\n        if (_searcher != null) {\n          _searcher.decref();   // dec refcount for this._searcher\n          _searcher=null;\n        }\n\n        _searcher = newSearcherHolder;\n        SolrIndexSearcher newSearcher = newSearcherHolder.get();\n\n        newSearcher.register(); // register subitems (caches)\n        log.info(\"[\"+name+\"] Registered new searcher \" + newSearcher);\n\n      } catch (Throwable e) {\n        log(e);\n      } finally {\n        // wake up anyone waiting for a searcher\n        // even in the face of errors.\n        onDeckSearchers--;\n        searcherLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  // Take control of newSearcherHolder (which should have a reference count of at\n  // least 1 already.  If the caller wishes to use the newSearcherHolder directly\n  // after registering it, then they should increment the reference count *before*\n  // calling this method.\n  //\n  // onDeckSearchers will also be decremented (it should have been incremented\n  // as a result of opening a new searcher).\n  private void registerSearcher(RefCounted<SolrIndexSearcher> newSearcherHolder) throws IOException {\n    synchronized (searcherLock) {\n      try {\n        if (_searcher != null) {\n          _searcher.decref();   // dec refcount for this._searcher\n          _searcher=null;\n        }\n\n        _searcher = newSearcherHolder;\n        SolrIndexSearcher newSearcher = newSearcherHolder.get();\n\n        newSearcher.register(); // register subitems (caches)\n        log.info(\"Registered new searcher \" + newSearcher);\n\n      } catch (Throwable e) {\n        log(e);\n      } finally {\n        // wake up anyone waiting for a searcher\n        // even in the face of errors.\n        onDeckSearchers--;\n        searcherLock.notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b46f0ccfb6b63c307ea901d48482630e3689042c","date":1198805331,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#registerSearcher(RefCounted[SolrIndexSearcher]).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#registerSearcher(RefCounted[SolrIndexSearcher]).mjava","sourceNew":"  // Take control of newSearcherHolder (which should have a reference count of at\n  // least 1 already.  If the caller wishes to use the newSearcherHolder directly\n  // after registering it, then they should increment the reference count *before*\n  // calling this method.\n  //\n  // onDeckSearchers will also be decremented (it should have been incremented\n  // as a result of opening a new searcher).\n  private void registerSearcher(RefCounted<SolrIndexSearcher> newSearcherHolder) throws IOException {\n    synchronized (searcherLock) {\n      try {\n        if (_searcher != null) {\n          _searcher.decref();   // dec refcount for this._searcher\n          _searcher=null;\n        }\n\n        _searcher = newSearcherHolder;\n        SolrIndexSearcher newSearcher = newSearcherHolder.get();\n\n        newSearcher.register(); // register subitems (caches)\n        log.info(logid+\"Registered new searcher \" + newSearcher);\n\n      } catch (Throwable e) {\n        log(e);\n      } finally {\n        // wake up anyone waiting for a searcher\n        // even in the face of errors.\n        onDeckSearchers--;\n        searcherLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  // Take control of newSearcherHolder (which should have a reference count of at\n  // least 1 already.  If the caller wishes to use the newSearcherHolder directly\n  // after registering it, then they should increment the reference count *before*\n  // calling this method.\n  //\n  // onDeckSearchers will also be decremented (it should have been incremented\n  // as a result of opening a new searcher).\n  private void registerSearcher(RefCounted<SolrIndexSearcher> newSearcherHolder) throws IOException {\n    synchronized (searcherLock) {\n      try {\n        if (_searcher != null) {\n          _searcher.decref();   // dec refcount for this._searcher\n          _searcher=null;\n        }\n\n        _searcher = newSearcherHolder;\n        SolrIndexSearcher newSearcher = newSearcherHolder.get();\n\n        newSearcher.register(); // register subitems (caches)\n        log.info(\"[\"+name+\"] Registered new searcher \" + newSearcher);\n\n      } catch (Throwable e) {\n        log(e);\n      } finally {\n        // wake up anyone waiting for a searcher\n        // even in the face of errors.\n        onDeckSearchers--;\n        searcherLock.notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#registerSearcher(RefCounted[SolrIndexSearcher]).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#registerSearcher(RefCounted[SolrIndexSearcher]).mjava","sourceNew":"  // Take control of newSearcherHolder (which should have a reference count of at\n  // least 1 already.  If the caller wishes to use the newSearcherHolder directly\n  // after registering it, then they should increment the reference count *before*\n  // calling this method.\n  //\n  // onDeckSearchers will also be decremented (it should have been incremented\n  // as a result of opening a new searcher).\n  private void registerSearcher(RefCounted<SolrIndexSearcher> newSearcherHolder) throws IOException {\n    synchronized (searcherLock) {\n      try {\n        if (_searcher != null) {\n          _searcher.decref();   // dec refcount for this._searcher\n          _searcher=null;\n        }\n\n        _searcher = newSearcherHolder;\n        SolrIndexSearcher newSearcher = newSearcherHolder.get();\n\n        newSearcher.register(); // register subitems (caches)\n        log.info(logid+\"Registered new searcher \" + newSearcher);\n\n      } catch (Throwable e) {\n        log(e);\n      } finally {\n        // wake up anyone waiting for a searcher\n        // even in the face of errors.\n        onDeckSearchers--;\n        searcherLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  // Take control of newSearcherHolder (which should have a reference count of at\n  // least 1 already.  If the caller wishes to use the newSearcherHolder directly\n  // after registering it, then they should increment the reference count *before*\n  // calling this method.\n  //\n  // onDeckSearchers will also be decremented (it should have been incremented\n  // as a result of opening a new searcher).\n  private void registerSearcher(RefCounted<SolrIndexSearcher> newSearcherHolder) throws IOException {\n    synchronized (searcherLock) {\n      try {\n        if (_searcher != null) {\n          _searcher.decref();   // dec refcount for this._searcher\n          _searcher=null;\n        }\n\n        _searcher = newSearcherHolder;\n        SolrIndexSearcher newSearcher = newSearcherHolder.get();\n\n        newSearcher.register(); // register subitems (caches)\n        log.info(logid+\"Registered new searcher \" + newSearcher);\n\n      } catch (Throwable e) {\n        log(e);\n      } finally {\n        // wake up anyone waiting for a searcher\n        // even in the face of errors.\n        onDeckSearchers--;\n        searcherLock.notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"45c3e698a8e53992ec65256740810a101c52247d":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["45c3e698a8e53992ec65256740810a101c52247d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"b46f0ccfb6b63c307ea901d48482630e3689042c":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["45c3e698a8e53992ec65256740810a101c52247d"],"45c3e698a8e53992ec65256740810a101c52247d":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"b46f0ccfb6b63c307ea901d48482630e3689042c":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}