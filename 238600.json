{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#componentRelateTriangle(double,double,double,double,double,double).mjava","commits":[{"id":"f1277bce5122ddd82fb8cce58045ae85df0714a4","date":1549639178,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#componentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected PointValues.Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    return tree.relateTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["dffcd36f1a87df1300807d9580eb05aa37726397"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dffcd36f1a87df1300807d9580eb05aa37726397","date":1552376454,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#componentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected PointValues.Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n    return PointValues.Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected PointValues.Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    return tree.relateTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","bugFix":["f1277bce5122ddd82fb8cce58045ae85df0714a4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e81e0b2df18b157319eed7be0ffb5d585a34b7c","date":1552378734,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#componentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    //check if line is inside triangle\n    if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected PointValues.Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n    return PointValues.Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc005279ab64cbf458ccef2ada610bc1a04b6139","date":1554992856,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#componentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: check if point lies on any line segment\n      if (isPointOnLine(tree, ax, ay)) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    } else if (ax == cx && ay == cy) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(ax, ay, bx, by)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true ||\n        tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      // indexed \"triangle\" is a triangle:\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    //check if line is inside triangle\n    if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"701716831075c9cebeadee735fc34d1679dff0c7","date":1555343036,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#componentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: check if point lies on any line segment\n      if (isPointOnLine(tree, ax, ay)) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    } else if ((ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(ax, ay, bx, by)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true ||\n        tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      // indexed \"triangle\" is a triangle:\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: check if point lies on any line segment\n      if (isPointOnLine(tree, ax, ay)) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    } else if (ax == cx && ay == cy) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(ax, ay, bx, by)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true ||\n        tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      // indexed \"triangle\" is a triangle:\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: check if point lies on any line segment\n      if (tree.isPointOnLine(ax, ay)) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    } else if ((ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, ax, ay, bx, by)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if ((ax == bx && ay == by)) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, ax, ay, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true ||\n        tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy)) {\n      // indexed \"triangle\" is a triangle:\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: check if point lies on any line segment\n      if (isPointOnLine(tree, ax, ay)) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    } else if ((ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(ax, ay, bx, by)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true ||\n        tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      // indexed \"triangle\" is a triangle:\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":["908e262be655c65579ec6d94f228d47b663da975"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: check if point lies on any line segment\n      if (isPointOnLine(tree, ax, ay)) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    } else if ((ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(ax, ay, bx, by)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true ||\n        tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      // indexed \"triangle\" is a triangle:\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["701716831075c9cebeadee735fc34d1679dff0c7"],"701716831075c9cebeadee735fc34d1679dff0c7":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"1e81e0b2df18b157319eed7be0ffb5d585a34b7c":["dffcd36f1a87df1300807d9580eb05aa37726397"],"dffcd36f1a87df1300807d9580eb05aa37726397":["f1277bce5122ddd82fb8cce58045ae85df0714a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["1e81e0b2df18b157319eed7be0ffb5d585a34b7c"],"f1277bce5122ddd82fb8cce58045ae85df0714a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["701716831075c9cebeadee735fc34d1679dff0c7","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"701716831075c9cebeadee735fc34d1679dff0c7":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"1e81e0b2df18b157319eed7be0ffb5d585a34b7c":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"dffcd36f1a87df1300807d9580eb05aa37726397":["1e81e0b2df18b157319eed7be0ffb5d585a34b7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1277bce5122ddd82fb8cce58045ae85df0714a4"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["701716831075c9cebeadee735fc34d1679dff0c7"],"f1277bce5122ddd82fb8cce58045ae85df0714a4":["dffcd36f1a87df1300807d9580eb05aa37726397"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}