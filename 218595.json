{"path":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","commits":[{"id":"794fe0ed6f3caaed28017d0c5107bc5a071e276b","date":1115750983,"type":0,"author":"David Spencer","isMerge":false,"pathNew":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Convenience routine to make it easy to return the most interesting words in a document.\n\t * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\n\t * @param r the source document\n\t * @return the most interesting words in the document\n\t *\n\t * @see #retrieveTerms(java.io.Reader)\n\t * @see #setMaxQueryTerms\n\t */\n\tpublic String[] retrieveInterestingTerms( Reader r) throws IOException {\n\t\tArrayList al = new ArrayList( maxQueryTerms);\n\t\tPriorityQueue pq = retrieveTerms( r);\n\t\tObject cur;\n\t\twhile (((cur = pq.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\n\t\t}\n\t\tString[] res = new String[ al.size()];\n\t\treturn (String[]) al.toArray( res);\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cdb8fe8387c97b2e4d95cfea5e57c1b1a0cef95","date":1115752228,"type":3,"author":"David Spencer","isMerge":false,"pathNew":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","pathOld":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","sourceNew":"\t/**\n\t * Convenience routine to make it easy to return the most interesting words in a document.\n\t * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\n\t * @param r the source document\n\t * @return the most interesting words in the document\n\t *\n\t * @see #retrieveTerms(java.io.Reader)\n\t * @see #setMaxQueryTerms\n\t */\n\tpublic String[] retrieveInterestingTerms( Reader r) throws IOException {\n\t\tArrayList al = new ArrayList( maxQueryTerms);\n\t\tPriorityQueue pq = retrieveTerms( r);\n\t\tObject cur;\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n\t\t// we just want to return the top words\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\n            Object[] ar = (Object[]) cur;\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\n\t\t}\n\t\tString[] res = new String[ al.size()];\n\t\treturn (String[]) al.toArray( res);\n\t}\n\n","sourceOld":"\t/**\n\t * Convenience routine to make it easy to return the most interesting words in a document.\n\t * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\n\t * @param r the source document\n\t * @return the most interesting words in the document\n\t *\n\t * @see #retrieveTerms(java.io.Reader)\n\t * @see #setMaxQueryTerms\n\t */\n\tpublic String[] retrieveInterestingTerms( Reader r) throws IOException {\n\t\tArrayList al = new ArrayList( maxQueryTerms);\n\t\tPriorityQueue pq = retrieveTerms( r);\n\t\tObject cur;\n\t\twhile (((cur = pq.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\n\t\t}\n\t\tString[] res = new String[ al.size()];\n\t\treturn (String[]) al.toArray( res);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f49ac1854a94b947e36bbdaffa355cb7707aa768","date":1164746802,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * Convenience routine to make it easy to return the most interesting words in a document.\n\t * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\n\t * @param r the source document\n\t * @return the most interesting words in the document\n\t *\n\t * @see #retrieveTerms(java.io.Reader)\n\t * @see #setMaxQueryTerms\n\t */\n\tpublic String[] retrieveInterestingTerms( Reader r) throws IOException {\n\t\tArrayList al = new ArrayList( maxQueryTerms);\n\t\tPriorityQueue pq = retrieveTerms( r);\n\t\tObject cur;\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n\t\t// we just want to return the top words\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\n            Object[] ar = (Object[]) cur;\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\n\t\t}\n\t\tString[] res = new String[ al.size()];\n\t\treturn (String[]) al.toArray( res);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f49ac1854a94b947e36bbdaffa355cb7707aa768":["1cdb8fe8387c97b2e4d95cfea5e57c1b1a0cef95"],"794fe0ed6f3caaed28017d0c5107bc5a071e276b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cdb8fe8387c97b2e4d95cfea5e57c1b1a0cef95":["794fe0ed6f3caaed28017d0c5107bc5a071e276b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f49ac1854a94b947e36bbdaffa355cb7707aa768"]},"commit2Childs":{"f49ac1854a94b947e36bbdaffa355cb7707aa768":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"794fe0ed6f3caaed28017d0c5107bc5a071e276b":["1cdb8fe8387c97b2e4d95cfea5e57c1b1a0cef95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["794fe0ed6f3caaed28017d0c5107bc5a071e276b"],"1cdb8fe8387c97b2e4d95cfea5e57c1b1a0cef95":["f49ac1854a94b947e36bbdaffa355cb7707aa768"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}