{"path":"src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery#testNoPayload().mjava","commits":[{"id":"d6b0d3878b50401a76f5239a2c4a8391fced796f","date":1189270648,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery#testNoPayload().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoPayload() throws Exception {\n    BoostingTermQuery q1 = new BoostingTermQuery(new Term(\"noPayLoad\", \"zero\"));\n    BoostingTermQuery q2 = new BoostingTermQuery(new Term(\"noPayLoad\", \"foo\"));\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    //assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, \"noPayLoad\", searcher, results);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b6b238af60d31e039294cb26e9e927546a619206"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6b238af60d31e039294cb26e9e927546a619206","date":1213244110,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery#testNoPayload().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery#testNoPayload().mjava","sourceNew":"  public void testNoPayload() throws Exception {\n    BoostingTermQuery q1 = new BoostingTermQuery(new Term(\"noPayLoad\", \"zero\"));\n    BoostingTermQuery q2 = new BoostingTermQuery(new Term(\"noPayLoad\", \"foo\"));\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, \"noPayLoad\", searcher, results);\n  }\n\n","sourceOld":"  public void testNoPayload() throws Exception {\n    BoostingTermQuery q1 = new BoostingTermQuery(new Term(\"noPayLoad\", \"zero\"));\n    BoostingTermQuery q2 = new BoostingTermQuery(new Term(\"noPayLoad\", \"foo\"));\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    //assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, \"noPayLoad\", searcher, results);\n  }\n\n","bugFix":["d6b0d3878b50401a76f5239a2c4a8391fced796f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5947db4de866f035b932f219674c03562d904e","date":1219248396,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery#testNoPayload().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery#testNoPayload().mjava","sourceNew":"  public void testNoPayload() throws Exception {\n    BoostingTermQuery q1 = new BoostingTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"));\n    BoostingTermQuery q2 = new BoostingTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"));\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","sourceOld":"  public void testNoPayload() throws Exception {\n    BoostingTermQuery q1 = new BoostingTermQuery(new Term(\"noPayLoad\", \"zero\"));\n    BoostingTermQuery q2 = new BoostingTermQuery(new Term(\"noPayLoad\", \"foo\"));\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, \"noPayLoad\", searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery#testNoPayload().mjava","sourceNew":null,"sourceOld":"  public void testNoPayload() throws Exception {\n    BoostingTermQuery q1 = new BoostingTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"));\n    BoostingTermQuery q2 = new BoostingTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"));\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery#testNoPayload().mjava","sourceNew":null,"sourceOld":"  public void testNoPayload() throws Exception {\n    BoostingTermQuery q1 = new BoostingTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"));\n    BoostingTermQuery q2 = new BoostingTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"));\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6b238af60d31e039294cb26e9e927546a619206":["d6b0d3878b50401a76f5239a2c4a8391fced796f"],"d6b0d3878b50401a76f5239a2c4a8391fced796f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["fd5947db4de866f035b932f219674c03562d904e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["fd5947db4de866f035b932f219674c03562d904e","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"fd5947db4de866f035b932f219674c03562d904e":["b6b238af60d31e039294cb26e9e927546a619206"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"b6b238af60d31e039294cb26e9e927546a619206":["fd5947db4de866f035b932f219674c03562d904e"],"d6b0d3878b50401a76f5239a2c4a8391fced796f":["b6b238af60d31e039294cb26e9e927546a619206"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6b0d3878b50401a76f5239a2c4a8391fced796f"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fd5947db4de866f035b932f219674c03562d904e":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}