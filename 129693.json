{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#addSystemVariableFunction(String,String,String).mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#addSystemVariableFunction(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a variable function that will be treated like a system function.\n   * \n   * @param functionName the function's name\n   * @param functionParams the comma separated and ordered parameters of the function (e.g. {@code \"a,b\"} )\n   * @param returnSignature the return signature of the variable function (e.g. {@code div(sum(a,b),count(b))} )\n   * @return this factory, to easily chain function adds\n   * @throws SolrException if the name of the function is not unique or the syntax of either signature is incorrect\n   */\n  public ExpressionFactory addSystemVariableFunction(final String functionName, final String functionParams, final String returnSignature) throws SolrException {\n    return addVariableFunction(functionName, \n                               Arrays.stream(functionParams.split(\",\")).map(param -> param.trim()).toArray(size -> new String[size]),\n                               returnSignature,\n                               systemVariableFunctions);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#addSystemVariableFunction(String,String,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#addSystemVariableFunction(String,String,String).mjava","sourceNew":"  /**\n   * Add a variable function that will be treated like a system function.\n   *\n   * @param functionName the function's name\n   * @param functionParams the comma separated and ordered parameters of the function (e.g. {@code \"a,b\"} )\n   * @param returnSignature the return signature of the variable function (e.g. {@code div(sum(a,b),count(b))} )\n   * @return this factory, to easily chain function adds\n   * @throws SolrException if the name of the function is not unique or the syntax of either signature is incorrect\n   */\n  public ExpressionFactory addSystemVariableFunction(final String functionName, final String functionParams, final String returnSignature) throws SolrException {\n    return addVariableFunction(functionName,\n                               Arrays.stream(functionParams.split(\",\")).map(param -> param.trim()).toArray(size -> new String[size]),\n                               returnSignature,\n                               systemVariableFunctions);\n  }\n\n","sourceOld":"  /**\n   * Add a variable function that will be treated like a system function.\n   * \n   * @param functionName the function's name\n   * @param functionParams the comma separated and ordered parameters of the function (e.g. {@code \"a,b\"} )\n   * @param returnSignature the return signature of the variable function (e.g. {@code div(sum(a,b),count(b))} )\n   * @return this factory, to easily chain function adds\n   * @throws SolrException if the name of the function is not unique or the syntax of either signature is incorrect\n   */\n  public ExpressionFactory addSystemVariableFunction(final String functionName, final String functionParams, final String returnSignature) throws SolrException {\n    return addVariableFunction(functionName, \n                               Arrays.stream(functionParams.split(\",\")).map(param -> param.trim()).toArray(size -> new String[size]),\n                               returnSignature,\n                               systemVariableFunctions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#addSystemVariableFunction(String,String,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#addSystemVariableFunction(String,String,String).mjava","sourceNew":"  /**\n   * Add a variable function that will be treated like a system function.\n   *\n   * @param functionName the function's name\n   * @param functionParams the comma separated and ordered parameters of the function (e.g. {@code \"a,b\"} )\n   * @param returnSignature the return signature of the variable function (e.g. {@code div(sum(a,b),count(b))} )\n   * @return this factory, to easily chain function adds\n   * @throws SolrException if the name of the function is not unique or the syntax of either signature is incorrect\n   */\n  public ExpressionFactory addSystemVariableFunction(final String functionName, final String functionParams, final String returnSignature) throws SolrException {\n    return addVariableFunction(functionName,\n                               Arrays.stream(functionParams.split(\",\")).map(param -> param.trim()).toArray(size -> new String[size]),\n                               returnSignature,\n                               systemVariableFunctions);\n  }\n\n","sourceOld":"  /**\n   * Add a variable function that will be treated like a system function.\n   * \n   * @param functionName the function's name\n   * @param functionParams the comma separated and ordered parameters of the function (e.g. {@code \"a,b\"} )\n   * @param returnSignature the return signature of the variable function (e.g. {@code div(sum(a,b),count(b))} )\n   * @return this factory, to easily chain function adds\n   * @throws SolrException if the name of the function is not unique or the syntax of either signature is incorrect\n   */\n  public ExpressionFactory addSystemVariableFunction(final String functionName, final String functionParams, final String returnSignature) throws SolrException {\n    return addVariableFunction(functionName, \n                               Arrays.stream(functionParams.split(\",\")).map(param -> param.trim()).toArray(size -> new String[size]),\n                               returnSignature,\n                               systemVariableFunctions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}