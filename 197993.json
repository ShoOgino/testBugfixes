{"path":"src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","commits":[{"id":"1ee41a444cd904f922cebbaa1d52c166447e46d7","date":1260989504,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","pathOld":"/dev/null","sourceNew":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    return writer.getReader();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    return writer.getReader();\n  }\n\n","sourceOld":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    return writer.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ee41a444cd904f922cebbaa1d52c166447e46d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1ee41a444cd904f922cebbaa1d52c166447e46d7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ee41a444cd904f922cebbaa1d52c166447e46d7"],"1ee41a444cd904f922cebbaa1d52c166447e46d7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}