{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","sourceNew":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestDocIdSet#testNullDocIdSet().mjava","sourceNew":null,"sourceOld":"  public void testNullDocIdSet() throws Exception {\n    // Tests that if a Filter produces a null DocIdSet, which is given to\n    // IndexSearcher, everything works fine. This came up in LUCENE-1754.\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n    // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        return null;\n      }\n    };\n    \n    Assert.assertEquals(0, searcher.search(new MatchAllDocsQuery(), f, 10).totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}