{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(ReaderContext).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n        \n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n        \n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n        \n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n        \n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n        \n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","date":1310159023,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00743482822ec0841b0344a37944b666e6a0228d","date":1313588663,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16843358872ed92ba92888ab99df297550b9a36a":["868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"00743482822ec0841b0344a37944b666e6a0228d":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00743482822ec0841b0344a37944b666e6a0228d"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"16843358872ed92ba92888ab99df297550b9a36a":[],"00743482822ec0841b0344a37944b666e6a0228d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["16843358872ed92ba92888ab99df297550b9a36a"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["00743482822ec0841b0344a37944b666e6a0228d"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}