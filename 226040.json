{"path":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom, false);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom, false);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom);\n      queuedBottom = null;\n    }\n    \n\n    BytesRef term;\n\n    // while loop because we skip short terms even if they are within the specified edit distance (see the NOTE in FuzzyQuery class javadocs)\n    while (true) {\n\n      term = actualEnum.next();\n      if (term == null) {\n        // end\n        break;\n      }\n\n      int ed = maxEdits;\n      \n      // we know the outer DFA always matches.\n      // now compute exact edit distance\n      while (ed > 0) {\n        if (matches(term, ed - 1)) {\n          ed--;\n        } else {\n          break;\n        }\n      }\n      \n      if (ed == 0) { // exact match\n        boostAtt.setBoost(1.0F);\n        break;\n      } else {\n        final int codePointCount = UnicodeUtil.codePointCount(term);\n        int minTermLength = Math.min(codePointCount, termLength);\n\n        // only accept a matching term if it's longer than the edit distance:\n        if (minTermLength > ed) {\n          float similarity = 1.0f - (float) ed / (float) minTermLength;\n          boostAtt.setBoost(similarity);\n          break;\n        }\n      }\n    }\n      \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n\n      // We must delay bottomChanged until the next next() call otherwise we mess up docFreq(), etc., for the current term:\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom, false);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom);\n      queuedBottom = null;\n    }\n    \n\n    BytesRef term;\n\n    // while loop because we skip short terms even if they are within the specified edit distance (see the NOTE in FuzzyQuery class javadocs)\n    while (true) {\n\n      term = actualEnum.next();\n      if (term == null) {\n        // end\n        break;\n      }\n\n      int ed = maxEdits;\n      \n      // we know the outer DFA always matches.\n      // now compute exact edit distance\n      while (ed > 0) {\n        if (matches(term, ed - 1)) {\n          ed--;\n        } else {\n          break;\n        }\n      }\n      \n      if (ed == 0) { // exact match\n        boostAtt.setBoost(1.0F);\n        break;\n      } else {\n        final int codePointCount = UnicodeUtil.codePointCount(term);\n        int minTermLength = Math.min(codePointCount, termLength);\n\n        // only accept a matching term if it's longer than the edit distance:\n        if (minTermLength > ed) {\n          float similarity = 1.0f - (float) ed / (float) minTermLength;\n          boostAtt.setBoost(similarity);\n          break;\n        }\n      }\n    }\n      \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n\n      // We must delay bottomChanged until the next next() call otherwise we mess up docFreq(), etc., for the current term:\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom, false);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d3dec8619cc5a67c810bd49ad697d0170a32637","date":1473965066,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom);\n      queuedBottom = null;\n    }\n    \n\n    BytesRef term;\n\n    term = actualEnum.next();\n    if (term == null) {\n      // end\n      return null;\n    }\n\n    int ed = maxEdits;\n      \n    // we know the outer DFA always matches.\n    // now compute exact edit distance\n    while (ed > 0) {\n      if (matches(term, ed - 1)) {\n        ed--;\n      } else {\n        break;\n      }\n    }\n      \n    if (ed == 0) { // exact match\n      boostAtt.setBoost(1.0F);\n    } else {\n      final int codePointCount = UnicodeUtil.codePointCount(term);\n      int minTermLength = Math.min(codePointCount, termLength);\n\n      float similarity = 1.0f - (float) ed / (float) minTermLength;\n      boostAtt.setBoost(similarity);\n    }\n      \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n\n      // We must delay bottomChanged until the next next() call otherwise we mess up docFreq(), etc., for the current term:\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom);\n      queuedBottom = null;\n    }\n    \n\n    BytesRef term;\n\n    // while loop because we skip short terms even if they are within the specified edit distance (see the NOTE in FuzzyQuery class javadocs)\n    while (true) {\n\n      term = actualEnum.next();\n      if (term == null) {\n        // end\n        break;\n      }\n\n      int ed = maxEdits;\n      \n      // we know the outer DFA always matches.\n      // now compute exact edit distance\n      while (ed > 0) {\n        if (matches(term, ed - 1)) {\n          ed--;\n        } else {\n          break;\n        }\n      }\n      \n      if (ed == 0) { // exact match\n        boostAtt.setBoost(1.0F);\n        break;\n      } else {\n        final int codePointCount = UnicodeUtil.codePointCount(term);\n        int minTermLength = Math.min(codePointCount, termLength);\n\n        // only accept a matching term if it's longer than the edit distance:\n        if (minTermLength > ed) {\n          float similarity = 1.0f - (float) ed / (float) minTermLength;\n          boostAtt.setBoost(similarity);\n          break;\n        }\n      }\n    }\n      \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n\n      // We must delay bottomChanged until the next next() call otherwise we mess up docFreq(), etc., for the current term:\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom);\n      queuedBottom = null;\n    }\n    \n\n    BytesRef term;\n\n    term = actualEnum.next();\n    if (term == null) {\n      // end\n      return null;\n    }\n\n    int ed = maxEdits;\n      \n    // we know the outer DFA always matches.\n    // now compute exact edit distance\n    while (ed > 0) {\n      if (matches(term, ed - 1)) {\n        ed--;\n      } else {\n        break;\n      }\n    }\n      \n    if (ed == 0) { // exact match\n      boostAtt.setBoost(1.0F);\n    } else {\n      final int codePointCount = UnicodeUtil.codePointCount(term);\n      int minTermLength = Math.min(codePointCount, termLength);\n\n      float similarity = 1.0f - (float) ed / (float) minTermLength;\n      boostAtt.setBoost(similarity);\n    }\n      \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n\n      // We must delay bottomChanged until the next next() call otherwise we mess up docFreq(), etc., for the current term:\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom, false);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom);\n      queuedBottom = null;\n    }\n    \n\n    BytesRef term;\n\n    term = actualEnum.next();\n    if (term == null) {\n      // end\n      return null;\n    }\n\n    int ed = maxEdits;\n      \n    // we know the outer DFA always matches.\n    // now compute exact edit distance\n    while (ed > 0) {\n      if (matches(term, ed - 1)) {\n        ed--;\n      } else {\n        break;\n      }\n    }\n      \n    if (ed == 0) { // exact match\n      boostAtt.setBoost(1.0F);\n    } else {\n      final int codePointCount = UnicodeUtil.codePointCount(term);\n      int minTermLength = Math.min(codePointCount, termLength);\n\n      float similarity = 1.0f - (float) ed / (float) minTermLength;\n      boostAtt.setBoost(similarity);\n    }\n      \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n\n      // We must delay bottomChanged until the next next() call otherwise we mess up docFreq(), etc., for the current term:\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom, false);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6","date":1588847334,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom);\n      queuedBottom = null;\n    }\n    \n\n    BytesRef term;\n\n    term = actualEnum.next();\n    if (term == null) {\n      // end\n      return null;\n    }\n\n    int ed = maxEdits;\n      \n    // we know the outer DFA always matches.\n    // now compute exact edit distance\n    while (ed > 0) {\n      if (matches(term, ed - 1)) {\n        ed--;\n      } else {\n        break;\n      }\n    }\n      \n    if (ed == 0) { // exact match\n      boostAtt.setBoost(1.0F);\n    } else {\n      final int codePointCount = UnicodeUtil.codePointCount(term);\n      int minTermLength = Math.min(codePointCount, termLength);\n\n      float similarity = 1.0f - (float) ed / (float) minTermLength;\n      boostAtt.setBoost(similarity);\n    }\n      \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (bottom != this.bottom || bottomTerm != this.bottomTerm) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n\n      // We must delay bottomChanged until the next next() call otherwise we mess up docFreq(), etc., for the current term:\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom);\n      queuedBottom = null;\n    }\n    \n\n    BytesRef term;\n\n    term = actualEnum.next();\n    if (term == null) {\n      // end\n      return null;\n    }\n\n    int ed = maxEdits;\n      \n    // we know the outer DFA always matches.\n    // now compute exact edit distance\n    while (ed > 0) {\n      if (matches(term, ed - 1)) {\n        ed--;\n      } else {\n        break;\n      }\n    }\n      \n    if (ed == 0) { // exact match\n      boostAtt.setBoost(1.0F);\n    } else {\n      final int codePointCount = UnicodeUtil.codePointCount(term);\n      int minTermLength = Math.min(codePointCount, termLength);\n\n      float similarity = 1.0f - (float) ed / (float) minTermLength;\n      boostAtt.setBoost(similarity);\n    }\n      \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n\n      // We must delay bottomChanged until the next next() call otherwise we mess up docFreq(), etc., for the current term:\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d3dec8619cc5a67c810bd49ad697d0170a32637":["89424def13674ea17829b41c5883c54ecc31a132"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7d3dec8619cc5a67c810bd49ad697d0170a32637"],"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad855e2f1f69c5e330d1027a5d54f8814e47a0d6"],"89424def13674ea17829b41c5883c54ecc31a132":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"]},"commit2Childs":{"7d3dec8619cc5a67c810bd49ad697d0170a32637":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ad855e2f1f69c5e330d1027a5d54f8814e47a0d6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["7d3dec8619cc5a67c810bd49ad697d0170a32637"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}