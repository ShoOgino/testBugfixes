{"path":"lucene/src/test/org/apache/lucene/index/TestWordlistLoader#testSnowballListLoading().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestWordlistLoader#testSnowballListLoading().mjava","pathOld":"src/test/org/apache/lucene/index/TestWordlistLoader#testSnowballListLoading().mjava","sourceNew":"  /**\n   * Test stopwords in snowball format\n   */\n  public void testSnowballListLoading() throws IOException {\n    String s = \n      \"|comment\\n\" + // commented line\n      \" |comment\\n\" + // commented line with leading whitespace\n      \"\\n\" + // blank line\n      \"  \\t\\n\" + // line with only whitespace\n      \" |comment | comment\\n\" + // commented line with comment\n      \"ONE\\n\" + // stopword, in uppercase\n      \"   two   \\n\" + // stopword with leading/trailing space\n      \" three   four five \\n\" + // multiple stopwords\n      \"six seven | comment\\n\"; //multiple stopwords + comment\n    Set<String> wordset = WordlistLoader.getSnowballWordSet(new StringReader(s));\n    assertEquals(7, wordset.size());\n    assertTrue(wordset.contains(\"ONE\"));\n    assertTrue(wordset.contains(\"two\"));\n    assertTrue(wordset.contains(\"three\"));\n    assertTrue(wordset.contains(\"four\"));\n    assertTrue(wordset.contains(\"five\"));\n    assertTrue(wordset.contains(\"six\"));\n    assertTrue(wordset.contains(\"seven\"));\n  }\n\n","sourceOld":"  /**\n   * Test stopwords in snowball format\n   */\n  public void testSnowballListLoading() throws IOException {\n    String s = \n      \"|comment\\n\" + // commented line\n      \" |comment\\n\" + // commented line with leading whitespace\n      \"\\n\" + // blank line\n      \"  \\t\\n\" + // line with only whitespace\n      \" |comment | comment\\n\" + // commented line with comment\n      \"ONE\\n\" + // stopword, in uppercase\n      \"   two   \\n\" + // stopword with leading/trailing space\n      \" three   four five \\n\" + // multiple stopwords\n      \"six seven | comment\\n\"; //multiple stopwords + comment\n    Set<String> wordset = WordlistLoader.getSnowballWordSet(new StringReader(s));\n    assertEquals(7, wordset.size());\n    assertTrue(wordset.contains(\"ONE\"));\n    assertTrue(wordset.contains(\"two\"));\n    assertTrue(wordset.contains(\"three\"));\n    assertTrue(wordset.contains(\"four\"));\n    assertTrue(wordset.contains(\"five\"));\n    assertTrue(wordset.contains(\"six\"));\n    assertTrue(wordset.contains(\"seven\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestWordlistLoader#testSnowballListLoading().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestWordlistLoader#testSnowballListLoading().mjava","sourceNew":"  /**\n   * Test stopwords in snowball format\n   */\n  public void testSnowballListLoading() throws IOException {\n    String s = \n      \"|comment\\n\" + // commented line\n      \" |comment\\n\" + // commented line with leading whitespace\n      \"\\n\" + // blank line\n      \"  \\t\\n\" + // line with only whitespace\n      \" |comment | comment\\n\" + // commented line with comment\n      \"ONE\\n\" + // stopword, in uppercase\n      \"   two   \\n\" + // stopword with leading/trailing space\n      \" three   four five \\n\" + // multiple stopwords\n      \"six seven | comment\\n\"; //multiple stopwords + comment\n    Set<String> wordset = WordlistLoader.getSnowballWordSet(new StringReader(s));\n    assertEquals(7, wordset.size());\n    assertTrue(wordset.contains(\"ONE\"));\n    assertTrue(wordset.contains(\"two\"));\n    assertTrue(wordset.contains(\"three\"));\n    assertTrue(wordset.contains(\"four\"));\n    assertTrue(wordset.contains(\"five\"));\n    assertTrue(wordset.contains(\"six\"));\n    assertTrue(wordset.contains(\"seven\"));\n  }\n\n","sourceOld":"  /**\n   * Test stopwords in snowball format\n   */\n  public void testSnowballListLoading() throws IOException {\n    String s = \n      \"|comment\\n\" + // commented line\n      \" |comment\\n\" + // commented line with leading whitespace\n      \"\\n\" + // blank line\n      \"  \\t\\n\" + // line with only whitespace\n      \" |comment | comment\\n\" + // commented line with comment\n      \"ONE\\n\" + // stopword, in uppercase\n      \"   two   \\n\" + // stopword with leading/trailing space\n      \" three   four five \\n\" + // multiple stopwords\n      \"six seven | comment\\n\"; //multiple stopwords + comment\n    Set<String> wordset = WordlistLoader.getSnowballWordSet(new StringReader(s));\n    assertEquals(7, wordset.size());\n    assertTrue(wordset.contains(\"ONE\"));\n    assertTrue(wordset.contains(\"two\"));\n    assertTrue(wordset.contains(\"three\"));\n    assertTrue(wordset.contains(\"four\"));\n    assertTrue(wordset.contains(\"five\"));\n    assertTrue(wordset.contains(\"six\"));\n    assertTrue(wordset.contains(\"seven\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}