{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"/dev/null","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"/dev/null","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true, Float.POSITIVE_INFINITY);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true, Float.POSITIVE_INFINITY);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true, Float.POSITIVE_INFINITY);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true, Float.POSITIVE_INFINITY);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c9d00c591703058371b3dc36f4957a6f24ca302","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f740a4cb7f5949ddb40a1647671c4a997223312","date":1569677340,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bc01c08f760b01798eb64e249a74352e24b56cd","date":1569836714,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    if (!(queryCache.cachedQueries().equals(Collections.emptyList()))) {\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red)))) {\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(green, red)))) {\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red, blue)))) {\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    }\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    if (!(queryCache.cachedQueries().equals(Collections.emptyList()))) {\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red)))) {\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(green, red)))) {\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red, blue)))) {\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    }\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"906d4da7e00f8453a5a024fe1ee92d6b14c0627f","date":1570006475,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    if (!(queryCache.cachedQueries().equals(Collections.emptyList()))) {\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red)))) {\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(green, red)))) {\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red, blue)))) {\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    }\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    if (!(queryCache.cachedQueries().equals(Collections.emptyList()))) {\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red)))) {\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(green, red)))) {\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red, blue)))) {\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    }\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    if (!(queryCache.cachedQueries().equals(Collections.emptyList()))) {\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red)))) {\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(green, red)))) {\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red, blue)))) {\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    }\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    if (!(queryCache.cachedQueries().equals(Collections.emptyList()))) {\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red)))) {\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(green, red)))) {\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red, blue)))) {\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    }\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUEviction().mjava","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true, Float.POSITIVE_INFINITY);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    if (!(queryCache.cachedQueries().equals(Collections.emptyList()))) {\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red)))) {\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(green, red)))) {\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red, blue)))) {\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    }\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    if (!(queryCache.cachedQueries().equals(Collections.emptyList()))) {\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red)))) {\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(green, red)))) {\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red, blue)))) {\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    }\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["9bc01c08f760b01798eb64e249a74352e24b56cd"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"aac61ee5b4492f174e60bd54939aba9539906edf":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bc01c08f760b01798eb64e249a74352e24b56cd":["6f740a4cb7f5949ddb40a1647671c4a997223312"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["aac61ee5b4492f174e60bd54939aba9539906edf"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["aac61ee5b4492f174e60bd54939aba9539906edf","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"6f740a4cb7f5949ddb40a1647671c4a997223312":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["6c9d00c591703058371b3dc36f4957a6f24ca302","9bc01c08f760b01798eb64e249a74352e24b56cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"b0b597c65628ca9e73913a07e81691f8229bae35":["4b9f74021389e2b32ee750fa5a24281c87951ec3","906d4da7e00f8453a5a024fe1ee92d6b14c0627f"]},"commit2Childs":{"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5","b0b597c65628ca9e73913a07e81691f8229bae35"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"aac61ee5b4492f174e60bd54939aba9539906edf":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["aac61ee5b4492f174e60bd54939aba9539906edf","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["6f740a4cb7f5949ddb40a1647671c4a997223312","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"9bc01c08f760b01798eb64e249a74352e24b56cd":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"6f740a4cb7f5949ddb40a1647671c4a997223312":["9bc01c08f760b01798eb64e249a74352e24b56cd"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}