{"path":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed) {\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.YES));\n      } else {\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n      }\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                false,\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n         false,\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      \n      doc.add(f);\n    }\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed) {\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.YES));\n      } else {\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n      }\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                false,\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n         false,\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      \n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed) {\n        doc.add(new Field(fi.name, uncompress(b), Field.Store.YES));\n      } else {\n        doc.add(new Field(fi.name, b, Field.Store.YES));\n      }\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                false,\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n         false,\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      \n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}