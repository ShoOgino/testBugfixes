{"path":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","sourceNew":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = BasicAutomata.makeString(\"do\");\n    pfx.expandSingleton(); // expand singleton representation for testing\n    Automaton prefixAutomaton = BasicOperations.concatenate(pfx, BasicAutomata\n        .makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertTrue(aq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","sourceOld":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = BasicAutomata.makeString(\"do\");\n    pfx.expandSingleton(); // expand singleton representation for testing\n    Automaton prefixAutomaton = BasicOperations.concatenate(pfx, BasicAutomata\n        .makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertTrue(aq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","sourceNew":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    LightAutomaton pfx = BasicAutomata.makeStringLight(\"do\");\n    LightAutomaton prefixAutomaton = BasicOperations.concatenateLight(pfx, BasicAutomata.makeAnyStringLight());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertTrue(aq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","sourceOld":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = BasicAutomata.makeString(\"do\");\n    pfx.expandSingleton(); // expand singleton representation for testing\n    Automaton prefixAutomaton = BasicOperations.concatenate(pfx, BasicAutomata\n        .makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertTrue(aq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","sourceNew":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = Automata.makeString(\"do\");\n    Automaton prefixAutomaton = Operations.concatenate(pfx, Automata.makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertTrue(aq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","sourceOld":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    LightAutomaton pfx = BasicAutomata.makeStringLight(\"do\");\n    LightAutomaton prefixAutomaton = BasicOperations.concatenateLight(pfx, BasicAutomata.makeAnyStringLight());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertTrue(aq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","sourceNew":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = Automata.makeString(\"do\");\n    Automaton prefixAutomaton = Operations.concatenate(pfx, Automata.makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertTrue(aq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","sourceOld":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = BasicAutomata.makeString(\"do\");\n    pfx.expandSingleton(); // expand singleton representation for testing\n    Automaton prefixAutomaton = BasicOperations.concatenate(pfx, BasicAutomata\n        .makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertTrue(aq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0088660bdc1c051f58fbc38626d61ccf22dfd3e0","date":1427444574,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","sourceNew":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = Automata.makeString(\"do\");\n    Automaton prefixAutomaton = Operations.concatenate(pfx, Automata.makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","sourceOld":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = Automata.makeString(\"do\");\n    Automaton prefixAutomaton = Operations.concatenate(pfx, Automata.makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertTrue(aq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","sourceNew":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = Automata.makeString(\"do\");\n    Automaton prefixAutomaton = Operations.concatenate(pfx, Automata.makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","sourceOld":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = Automata.makeString(\"do\");\n    Automaton prefixAutomaton = Operations.concatenate(pfx, Automata.makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertTrue(aq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","sourceNew":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = Automata.makeString(\"do\");\n    Automaton prefixAutomaton = Operations.concatenate(pfx, Automata.makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","sourceOld":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = Automata.makeString(\"do\");\n    Automaton prefixAutomaton = Operations.concatenate(pfx, Automata.makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testRewritePrefix().mjava","sourceNew":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = Automata.makeString(\"do\");\n    Automaton prefixAutomaton = Operations.concatenate(pfx, Automata.makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","sourceOld":"  /**\n   * Test that rewriting to a prefix query works as expected, preserves\n   * MultiTermQuery semantics.\n   */\n  public void testRewritePrefix() throws IOException {\n    Automaton pfx = Automata.makeString(\"do\");\n    Automaton prefixAutomaton = Operations.concatenate(pfx, Automata.makeAnyString());\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), prefixAutomaton);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertEquals(3, automatonQueryNrHits(aq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["5c84485629d80d203608e8975a1139de9933cc38","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3e8715d826e588419327562287d5d6a8040d63d6"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e8715d826e588419327562287d5d6a8040d63d6":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3e8715d826e588419327562287d5d6a8040d63d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"5c84485629d80d203608e8975a1139de9933cc38":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}