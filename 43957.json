{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","commits":[{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","pathOld":"/dev/null","sourceNew":"    public synchronized void initWritableLiveDocs() {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = new BitVector(info.docCount);\n          liveDocs.setAll();\n        } else {\n          liveDocs = (BitVector) liveDocs.clone();\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7","date":1326996651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","sourceNew":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = info.getCodec().liveDocsFormat().newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocs.clone();\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","sourceOld":"    public synchronized void initWritableLiveDocs() {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = new BitVector(info.docCount);\n          liveDocs.setAll();\n        } else {\n          liveDocs = (BitVector) liveDocs.clone();\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c242113cb03b9c717863e1c1390c2f9350abc01b","date":1327761258,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","sourceNew":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        LiveDocsFormat liveDocsFormat = info.getCodec().liveDocsFormat();\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = liveDocsFormat.newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","sourceOld":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = info.getCodec().liveDocsFormat().newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocs.clone();\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","sourceNew":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        LiveDocsFormat liveDocsFormat = info.getCodec().liveDocsFormat();\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = liveDocsFormat.newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","sourceOld":"    public synchronized void initWritableLiveDocs() {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = new BitVector(info.docCount);\n          liveDocs.setAll();\n        } else {\n          liveDocs = (BitVector) liveDocs.clone();\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","sourceNew":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        LiveDocsFormat liveDocsFormat = info.getCodec().liveDocsFormat();\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = liveDocsFormat.newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","sourceOld":"    public synchronized void initWritableLiveDocs() {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = new BitVector(info.docCount);\n          liveDocs.setAll();\n        } else {\n          liveDocs = (BitVector) liveDocs.clone();\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","sourceNew":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        LiveDocsFormat liveDocsFormat = info.getCodec().liveDocsFormat();\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = liveDocsFormat.newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","sourceOld":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        LiveDocsFormat liveDocsFormat = info.getCodec().liveDocsFormat();\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = liveDocsFormat.newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"c242113cb03b9c717863e1c1390c2f9350abc01b":["ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["9ce667c6d3400b22523701c549c0d35e26da8b46","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["9ce667c6d3400b22523701c549c0d35e26da8b46","c242113cb03b9c717863e1c1390c2f9350abc01b"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7":["c242113cb03b9c717863e1c1390c2f9350abc01b"],"c242113cb03b9c717863e1c1390c2f9350abc01b":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}