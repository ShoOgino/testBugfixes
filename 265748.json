{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloorArrayDirectAddressing(FST.Arc[T],int,FST.BytesReader).mjava","commits":[{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloorArrayDirectAddressing(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"/dev/null","sourceNew":"  private FST.Arc<T> doSeekFloorArrayDirectAddressing(FST.Arc<T> arc, int targetLabel, FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label, with presence bits to compute the actual arc offset.\n\n    int targetIndex = targetLabel - arc.firstLabel();\n    if (targetIndex < 0) {\n      // Before first arc.\n      return backtrackToFloorArc(arc, targetLabel, in);\n   } else if (targetIndex >= arc.numArcs()) {\n      // After last arc.\n      fst.readArcByDirectAddressing(arc, in, arc.numArcs() - 1);\n      assert arc.label() < targetLabel;\n      assert arc.isLast();\n      pushLast();\n      return null;\n    } else {\n      // Within label range.\n      if (arc.bitTable().isBitSet(targetIndex)) {\n        fst.readArcByDirectAddressing(arc, in, targetIndex);\n        assert arc.label() == targetLabel;\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // Scan backwards to find a floor arc.\n      int floorIndex = arc.bitTable().previousBitSet(targetIndex);\n      assert floorIndex != -1;\n      fst.readArcByDirectAddressing(arc, in, floorIndex);\n      assert arc.label() < targetLabel;\n      assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n      pushLast();\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloorArrayDirectAddressing(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloorArrayDirectAddressing(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":"  private FST.Arc<T> doSeekFloorArrayDirectAddressing(FST.Arc<T> arc, int targetLabel, FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label, with presence bits to compute the actual arc offset.\n\n    int targetIndex = targetLabel - arc.firstLabel();\n    if (targetIndex < 0) {\n      // Before first arc.\n      return backtrackToFloorArc(arc, targetLabel, in);\n   } else if (targetIndex >= arc.numArcs()) {\n      // After last arc.\n      fst.readLastArcByDirectAddressing(arc, in);\n      assert arc.label() < targetLabel;\n      assert arc.isLast();\n      pushLast();\n      return null;\n    } else {\n      // Within label range.\n      if (BitTable.isBitSet(targetIndex, arc, in)) {\n        fst.readArcByDirectAddressing(arc, in, targetIndex);\n        assert arc.label() == targetLabel;\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // Scan backwards to find a floor arc.\n      int floorIndex = BitTable.previousBitSet(targetIndex, arc, in);\n      assert floorIndex != -1;\n      fst.readArcByDirectAddressing(arc, in, floorIndex);\n      assert arc.label() < targetLabel;\n      assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n      pushLast();\n      return null;\n    }\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekFloorArrayDirectAddressing(FST.Arc<T> arc, int targetLabel, FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label, with presence bits to compute the actual arc offset.\n\n    int targetIndex = targetLabel - arc.firstLabel();\n    if (targetIndex < 0) {\n      // Before first arc.\n      return backtrackToFloorArc(arc, targetLabel, in);\n   } else if (targetIndex >= arc.numArcs()) {\n      // After last arc.\n      fst.readArcByDirectAddressing(arc, in, arc.numArcs() - 1);\n      assert arc.label() < targetLabel;\n      assert arc.isLast();\n      pushLast();\n      return null;\n    } else {\n      // Within label range.\n      if (arc.bitTable().isBitSet(targetIndex)) {\n        fst.readArcByDirectAddressing(arc, in, targetIndex);\n        assert arc.label() == targetLabel;\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // Scan backwards to find a floor arc.\n      int floorIndex = arc.bitTable().previousBitSet(targetIndex);\n      assert floorIndex != -1;\n      fst.readArcByDirectAddressing(arc, in, floorIndex);\n      assert arc.label() < targetLabel;\n      assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n      pushLast();\n      return null;\n    }\n  }\n\n","bugFix":["71d31a7d5773508492505519bb5230b87c8937ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["71d31a7d5773508492505519bb5230b87c8937ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"]},"commit2Childs":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71d31a7d5773508492505519bb5230b87c8937ad"],"71d31a7d5773508492505519bb5230b87c8937ad":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}