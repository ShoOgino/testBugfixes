{"path":"src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","commits":[{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (doFlush(flushDocStores) && triggerMerge)\n      maybeMerge();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2586f96f60332eb97ecd2934b0763791462568b2":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2586f96f60332eb97ecd2934b0763791462568b2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["2586f96f60332eb97ecd2934b0763791462568b2"],"2586f96f60332eb97ecd2934b0763791462568b2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}