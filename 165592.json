{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain.TermFacet#toJSONFacetParamValue().mjava","commits":[{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain.TermFacet#toJSONFacetParamValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.TermFacet#toJSONFacetParamValue().mjava","sourceNew":"    /**\n     * recursively generates the <code>json.facet</code> param value to use for testing this facet\n     */\n    private CharSequence toJSONFacetParamValue() {\n      final String limitStr = (null == limit) ? \"\" : (\", limit:\" + limit);\n      final String overrequestStr = (null == overrequest) ? \"\" : (\", overrequest:\" + overrequest);\n      final String refineStr = (null == refine) ? \"\" : \", refine:\" + refine;\n      final StringBuilder sb = new StringBuilder(\"{ type:terms, field:\" + field + limitStr + overrequestStr + refineStr);\n      if (! subFacets.isEmpty()) {\n        sb.append(\", facet:\");\n        sb.append(toJSONFacetParamValue(subFacets));\n      }\n      if (null != domain) {\n        CharSequence ds = domain.toJSONFacetParamValue();\n        if (null != ds) {\n          sb.append(\", \").append(ds);\n        }\n      }\n      sb.append(\"}\");\n      return sb;\n    }\n\n","sourceOld":"    /**\n     * recursively generates the <code>json.facet</code> param value to use for testing this facet\n     */\n    private CharSequence toJSONFacetParamValue() {\n      final String limitStr = (null == limit) ? \"\" : (\", limit:\" + limit);\n      final String overrequestStr = (null == overrequest) ? \"\" : (\", overrequest:\" + overrequest);\n      final String refineStr = (null == refine) ? \"\" : \", refine:\" + refine;\n      final StringBuilder sb = new StringBuilder(\"{ type:terms, field:\" + field + limitStr + overrequestStr + refineStr);\n      if (! subFacets.isEmpty()) {\n        sb.append(\", facet:\");\n        sb.append(toJSONFacetParamValue(subFacets));\n      }\n      if (null != domain) {\n        CharSequence ds = domain.toJSONFacetParamValue();\n        if (null != ds) {\n          sb.append(\", \").append(ds);\n        }\n      }\n      sb.append(\"}\");\n      return sb;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}