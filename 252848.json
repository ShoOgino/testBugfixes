{"path":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","commits":[{"id":"f49913255caac6bc43c9945f6adccf132425b931","date":1093898702,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store whether <code>value</code> should be stored in the index\n   * @param index whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector whether Term Vector info should be stored\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n      if (name == null)\n         throw new IllegalArgumentException(\"name cannot be null\");\n      if (value == null)\n        throw new IllegalArgumentException(\"value cannot be null\");\n      if (index == Index.NO && store == Store.NO)\n        throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n            + \"is neither indexed nor stored\");\n      if (index == Index.NO && termVector != TermVector.NO)\n        throw new IllegalArgumentException(\"cannot store term vector information \"\n            + \"for a field that is not indexed\");\n\n      this.name = name.intern();        // field names are interned\n      this.stringValue = value;\n      if (store == Store.YES)\n        this.isStored = true;\n      else if (store == Store.NO)\n        this.isStored = false;\n      else\n        throw new IllegalArgumentException(\"unknown store parameter \" + store);\n      \n      if (index == Index.NO) {\n        this.isIndexed = false;\n        this.isTokenized = false;\n      } else if (index == Index.TOKENIZED) {\n        this.isIndexed = true;\n        this.isTokenized = true;\n      } else if (index == Index.UN_TOKENIZED) {\n        this.isIndexed = true;\n        this.isTokenized = false;\n      } else {\n        throw new IllegalArgumentException(\"unknown index parameter \" + index);\n      }\n\n      if (termVector == TermVector.NO) {\n        this.storeTermVector = false;\n      } else if (termVector == TermVector.YES) {\n        this.storeTermVector = true;\n      } else {\n        throw new IllegalArgumentException(\"unknown termVector parameter \" + termVector);\n      }\n}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e251d4a1720e4102605e45e256f41288c7fab045","date":1093898902,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store whether <code>value</code> should be stored in the index\n   * @param index whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector whether Term Vector info should be stored\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n      if (name == null)\n         throw new NullPointerException(\"name cannot be null\");\n      if (value == null)\n        throw new NullPointerException(\"value cannot be null\");\n      if (index == Index.NO && store == Store.NO)\n        throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n            + \"is neither indexed nor stored\");\n      if (index == Index.NO && termVector != TermVector.NO)\n        throw new IllegalArgumentException(\"cannot store term vector information \"\n            + \"for a field that is not indexed\");\n\n      this.name = name.intern();        // field names are interned\n      this.stringValue = value;\n      if (store == Store.YES)\n        this.isStored = true;\n      else if (store == Store.NO)\n        this.isStored = false;\n      else\n        throw new IllegalArgumentException(\"unknown store parameter \" + store);\n      \n      if (index == Index.NO) {\n        this.isIndexed = false;\n        this.isTokenized = false;\n      } else if (index == Index.TOKENIZED) {\n        this.isIndexed = true;\n        this.isTokenized = true;\n      } else if (index == Index.UN_TOKENIZED) {\n        this.isIndexed = true;\n        this.isTokenized = false;\n      } else {\n        throw new IllegalArgumentException(\"unknown index parameter \" + index);\n      }\n\n      if (termVector == TermVector.NO) {\n        this.storeTermVector = false;\n      } else if (termVector == TermVector.YES) {\n        this.storeTermVector = true;\n      } else {\n        throw new IllegalArgumentException(\"unknown termVector parameter \" + termVector);\n      }\n}\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store whether <code>value</code> should be stored in the index\n   * @param index whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector whether Term Vector info should be stored\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n      if (name == null)\n         throw new IllegalArgumentException(\"name cannot be null\");\n      if (value == null)\n        throw new IllegalArgumentException(\"value cannot be null\");\n      if (index == Index.NO && store == Store.NO)\n        throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n            + \"is neither indexed nor stored\");\n      if (index == Index.NO && termVector != TermVector.NO)\n        throw new IllegalArgumentException(\"cannot store term vector information \"\n            + \"for a field that is not indexed\");\n\n      this.name = name.intern();        // field names are interned\n      this.stringValue = value;\n      if (store == Store.YES)\n        this.isStored = true;\n      else if (store == Store.NO)\n        this.isStored = false;\n      else\n        throw new IllegalArgumentException(\"unknown store parameter \" + store);\n      \n      if (index == Index.NO) {\n        this.isIndexed = false;\n        this.isTokenized = false;\n      } else if (index == Index.TOKENIZED) {\n        this.isIndexed = true;\n        this.isTokenized = true;\n      } else if (index == Index.UN_TOKENIZED) {\n        this.isIndexed = true;\n        this.isTokenized = false;\n      } else {\n        throw new IllegalArgumentException(\"unknown index parameter \" + index);\n      }\n\n      if (termVector == TermVector.NO) {\n        this.storeTermVector = false;\n      } else if (termVector == TermVector.YES) {\n        this.storeTermVector = true;\n      } else {\n        throw new IllegalArgumentException(\"unknown termVector parameter \" + termVector);\n      }\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de1b6a0d783df025fde1688ad90fa19587631b4e","date":1094070708,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n\n    this.name = name.intern();        // field names are interned\n    this.stringValue = value;\n\n    if (store == Store.YES)\n      this.isStored = true;\n    else if (store == Store.NO)\n      this.isStored = false;\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Index.TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.UN_TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store whether <code>value</code> should be stored in the index\n   * @param index whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector whether Term Vector info should be stored\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n      if (name == null)\n         throw new NullPointerException(\"name cannot be null\");\n      if (value == null)\n        throw new NullPointerException(\"value cannot be null\");\n      if (index == Index.NO && store == Store.NO)\n        throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n            + \"is neither indexed nor stored\");\n      if (index == Index.NO && termVector != TermVector.NO)\n        throw new IllegalArgumentException(\"cannot store term vector information \"\n            + \"for a field that is not indexed\");\n\n      this.name = name.intern();        // field names are interned\n      this.stringValue = value;\n      if (store == Store.YES)\n        this.isStored = true;\n      else if (store == Store.NO)\n        this.isStored = false;\n      else\n        throw new IllegalArgumentException(\"unknown store parameter \" + store);\n      \n      if (index == Index.NO) {\n        this.isIndexed = false;\n        this.isTokenized = false;\n      } else if (index == Index.TOKENIZED) {\n        this.isIndexed = true;\n        this.isTokenized = true;\n      } else if (index == Index.UN_TOKENIZED) {\n        this.isIndexed = true;\n        this.isTokenized = false;\n      } else {\n        throw new IllegalArgumentException(\"unknown index parameter \" + index);\n      }\n\n      if (termVector == TermVector.NO) {\n        this.storeTermVector = false;\n      } else if (termVector == TermVector.YES) {\n        this.storeTermVector = true;\n      } else {\n        throw new IllegalArgumentException(\"unknown termVector parameter \" + termVector);\n      }\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3d038c41e70424a134ef69a524f3cc0fb40d854","date":1096548028,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = value;\n\n    if (store == Store.YES)\n      this.isStored = true;\n    else if (store == Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Store.NO)\n      this.isStored = false;\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Index.TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.UN_TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n\n    this.name = name.intern();        // field names are interned\n    this.stringValue = value;\n\n    if (store == Store.YES)\n      this.isStored = true;\n    else if (store == Store.NO)\n      this.isStored = false;\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Index.TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.UN_TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = value;\n\n    if (store == Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Index.TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.UN_TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n    \n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = value;\n\n    if (store == Store.YES)\n      this.isStored = true;\n    else if (store == Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Store.NO)\n      this.isStored = false;\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Index.TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.UN_TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950f3c7592cb559e2534e5089c78833250e156a3","date":1130557968,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = value;\n\n    if (store == Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Index.TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.UN_TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Index.NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n    \n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = value;\n\n    if (store == Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Index.TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.UN_TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n    \n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8482ef0a4b29eca062efa772b3cb216a47995ced","date":1147564235,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = value;\n\n    if (store == Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Index.TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.UN_TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Index.NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n    \n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = value;\n\n    if (store == Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Index.TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.UN_TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Index.NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n    \n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = value;\n\n    if (store == Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Index.ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.NOT_ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Index.NOT_ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else if (index == Index.ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n    \n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = value;\n\n    if (store == Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Index.TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.UN_TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Index.NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n    \n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f6b4065cdaf7d1be530c926dc327494bee4ffa","date":1239273470,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = value;\n\n    if (store == Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n      this.omitTermFreqAndPositions = false;\n      this.omitNorms = true;\n    } else if (index == Index.ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.NOT_ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Index.NOT_ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else if (index == Index.ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n    \n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = value;\n\n    if (store == Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Index.ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.NOT_ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Index.NOT_ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else if (index == Index.ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n    \n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b07c96634c26a70c1ddde2bf4a3b64a6ea8886b","date":1239653248,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n\t  this(name, true, value, store, index, termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (value == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (name.length() == 0 && value.length() == 0)\n      throw new IllegalArgumentException(\"name and value cannot both be empty\");\n    if (index == Index.NO && store == Store.NO)\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n         + \"is neither indexed nor stored\");\n    if (index == Index.NO && termVector != TermVector.NO)\n      throw new IllegalArgumentException(\"cannot store term vector information \"\n         + \"for a field that is not indexed\");\n          \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = value;\n\n    if (store == Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n   \n    if (index == Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n      this.omitTermFreqAndPositions = false;\n      this.omitNorms = true;\n    } else if (index == Index.ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Index.NOT_ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Index.NOT_ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else if (index == Index.ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n    \n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    this(name, true, value, store, index, termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n\t  this(name, true, value, store, index, termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,Store,Index,TermVector).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a field by specifying its name, value and how it will\n   * be saved in the index.\n   * \n   * @param name The name of the field\n   * @param value The string to process\n   * @param store Whether <code>value</code> should be stored in the index\n   * @param index Whether the field should be indexed, and if so, if it should\n   *  be tokenized before indexing \n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or value is <code>null</code>\n   * @throws IllegalArgumentException in any of the following situations:\n   * <ul> \n   *  <li>the field is neither stored nor indexed</li> \n   *  <li>the field is not indexed but termVector is <code>TermVector.YES</code></li>\n   * </ul> \n   */ \n  public Field(String name, String value, Store store, Index index, TermVector termVector) {\n    this(name, true, value, store, index, termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e251d4a1720e4102605e45e256f41288c7fab045":["f49913255caac6bc43c9945f6adccf132425b931"],"950f3c7592cb559e2534e5089c78833250e156a3":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9b07c96634c26a70c1ddde2bf4a3b64a6ea8886b"],"de1b6a0d783df025fde1688ad90fa19587631b4e":["e251d4a1720e4102605e45e256f41288c7fab045"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["8482ef0a4b29eca062efa772b3cb216a47995ced"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["b3d038c41e70424a134ef69a524f3cc0fb40d854"],"b3d038c41e70424a134ef69a524f3cc0fb40d854":["de1b6a0d783df025fde1688ad90fa19587631b4e"],"f49913255caac6bc43c9945f6adccf132425b931":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b07c96634c26a70c1ddde2bf4a3b64a6ea8886b":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8482ef0a4b29eca062efa772b3cb216a47995ced":["950f3c7592cb559e2534e5089c78833250e156a3"]},"commit2Childs":{"e251d4a1720e4102605e45e256f41288c7fab045":["de1b6a0d783df025fde1688ad90fa19587631b4e"],"950f3c7592cb559e2534e5089c78833250e156a3":["8482ef0a4b29eca062efa772b3cb216a47995ced"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"de1b6a0d783df025fde1688ad90fa19587631b4e":["b3d038c41e70424a134ef69a524f3cc0fb40d854"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["950f3c7592cb559e2534e5089c78833250e156a3"],"b3d038c41e70424a134ef69a524f3cc0fb40d854":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"f49913255caac6bc43c9945f6adccf132425b931":["e251d4a1720e4102605e45e256f41288c7fab045"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f49913255caac6bc43c9945f6adccf132425b931"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["9b07c96634c26a70c1ddde2bf4a3b64a6ea8886b"],"9b07c96634c26a70c1ddde2bf4a3b64a6ea8886b":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8482ef0a4b29eca062efa772b3cb216a47995ced":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}