{"path":"src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","pathOld":"/dev/null","sourceNew":"  // append fields from storedFieldReaders\n  public Document document(int n, FieldSelector fieldSelector) throws IOException {\n    Document result = new Document();\n    for (int i = 0; i < storedFieldReaders.size(); i++) {\n      IndexReader reader = (IndexReader)storedFieldReaders.get(i);\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Iterator it = ((Collection) readerToFields.get(reader)).iterator();\n        while (it.hasNext())\n          if (fieldSelector.accept((String)it.next())!=FieldSelectorResult.NO_LOAD) {\n            include = true;\n            break;\n          }\n      }\n      if (include) {\n        Enumeration fields = reader.document(n, fieldSelector).fields();\n        while (fields.hasMoreElements()) {\n          result.add((Fieldable)fields.nextElement());\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c205cd73e4706c6feceba2eed84d820ec83e0850","date":1164584418,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","sourceNew":"  // append fields from storedFieldReaders\n  public Document document(int n, FieldSelector fieldSelector) throws IOException {\n    Document result = new Document();\n    for (int i = 0; i < storedFieldReaders.size(); i++) {\n      IndexReader reader = (IndexReader)storedFieldReaders.get(i);\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Iterator it = ((Collection) readerToFields.get(reader)).iterator();\n        while (it.hasNext())\n          if (fieldSelector.accept((String)it.next())!=FieldSelectorResult.NO_LOAD) {\n            include = true;\n            break;\n          }\n      }\n      if (include) {\n        Iterator fieldIterator = reader.document(n, fieldSelector).getFields().iterator();\n        while (fieldIterator.hasNext()) {\n          result.add((Fieldable)fieldIterator.next());\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  // append fields from storedFieldReaders\n  public Document document(int n, FieldSelector fieldSelector) throws IOException {\n    Document result = new Document();\n    for (int i = 0; i < storedFieldReaders.size(); i++) {\n      IndexReader reader = (IndexReader)storedFieldReaders.get(i);\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Iterator it = ((Collection) readerToFields.get(reader)).iterator();\n        while (it.hasNext())\n          if (fieldSelector.accept((String)it.next())!=FieldSelectorResult.NO_LOAD) {\n            include = true;\n            break;\n          }\n      }\n      if (include) {\n        Enumeration fields = reader.document(n, fieldSelector).fields();\n        while (fields.hasMoreElements()) {\n          result.add((Fieldable)fields.nextElement());\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","sourceNew":"  // append fields from storedFieldReaders\n  public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    Document result = new Document();\n    for (int i = 0; i < storedFieldReaders.size(); i++) {\n      IndexReader reader = (IndexReader)storedFieldReaders.get(i);\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Iterator it = ((Collection) readerToFields.get(reader)).iterator();\n        while (it.hasNext())\n          if (fieldSelector.accept((String)it.next())!=FieldSelectorResult.NO_LOAD) {\n            include = true;\n            break;\n          }\n      }\n      if (include) {\n        Iterator fieldIterator = reader.document(n, fieldSelector).getFields().iterator();\n        while (fieldIterator.hasNext()) {\n          result.add((Fieldable)fieldIterator.next());\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  // append fields from storedFieldReaders\n  public Document document(int n, FieldSelector fieldSelector) throws IOException {\n    Document result = new Document();\n    for (int i = 0; i < storedFieldReaders.size(); i++) {\n      IndexReader reader = (IndexReader)storedFieldReaders.get(i);\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Iterator it = ((Collection) readerToFields.get(reader)).iterator();\n        while (it.hasNext())\n          if (fieldSelector.accept((String)it.next())!=FieldSelectorResult.NO_LOAD) {\n            include = true;\n            break;\n          }\n      }\n      if (include) {\n        Iterator fieldIterator = reader.document(n, fieldSelector).getFields().iterator();\n        while (fieldIterator.hasNext()) {\n          result.add((Fieldable)fieldIterator.next());\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","sourceNew":"  // append fields from storedFieldReaders\n  public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    ensureOpen();\n    Document result = new Document();\n    for (int i = 0; i < storedFieldReaders.size(); i++) {\n      IndexReader reader = (IndexReader)storedFieldReaders.get(i);\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Iterator it = ((Collection) readerToFields.get(reader)).iterator();\n        while (it.hasNext())\n          if (fieldSelector.accept((String)it.next())!=FieldSelectorResult.NO_LOAD) {\n            include = true;\n            break;\n          }\n      }\n      if (include) {\n        Iterator fieldIterator = reader.document(n, fieldSelector).getFields().iterator();\n        while (fieldIterator.hasNext()) {\n          result.add((Fieldable)fieldIterator.next());\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  // append fields from storedFieldReaders\n  public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    Document result = new Document();\n    for (int i = 0; i < storedFieldReaders.size(); i++) {\n      IndexReader reader = (IndexReader)storedFieldReaders.get(i);\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Iterator it = ((Collection) readerToFields.get(reader)).iterator();\n        while (it.hasNext())\n          if (fieldSelector.accept((String)it.next())!=FieldSelectorResult.NO_LOAD) {\n            include = true;\n            break;\n          }\n      }\n      if (include) {\n        Iterator fieldIterator = reader.document(n, fieldSelector).getFields().iterator();\n        while (fieldIterator.hasNext()) {\n          result.add((Fieldable)fieldIterator.next());\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","sourceNew":"  // append fields from storedFieldReaders\n  public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    ensureOpen();\n    Document result = new Document();\n    for (final IndexReader reader: storedFieldReaders) {\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Collection<String> fields = readerToFields.get(reader);\n        for (final String field : fields)\n          if (fieldSelector.accept(field) != FieldSelectorResult.NO_LOAD) {\n            include = true;\n            break;\n          }\n      }\n      if (include) {\n        List<Fieldable> fields = reader.document(n, fieldSelector).getFields();\n        for (Fieldable field : fields) {\n          result.add(field);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  // append fields from storedFieldReaders\n  public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    ensureOpen();\n    Document result = new Document();\n    for (int i = 0; i < storedFieldReaders.size(); i++) {\n      IndexReader reader = (IndexReader)storedFieldReaders.get(i);\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Iterator it = ((Collection) readerToFields.get(reader)).iterator();\n        while (it.hasNext())\n          if (fieldSelector.accept((String)it.next())!=FieldSelectorResult.NO_LOAD) {\n            include = true;\n            break;\n          }\n      }\n      if (include) {\n        Iterator fieldIterator = reader.document(n, fieldSelector).getFields().iterator();\n        while (fieldIterator.hasNext()) {\n          result.add((Fieldable)fieldIterator.next());\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","sourceNew":"  // append fields from storedFieldReaders\n  @Override\n  public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    ensureOpen();\n    Document result = new Document();\n    for (final IndexReader reader: storedFieldReaders) {\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Collection<String> fields = readerToFields.get(reader);\n        for (final String field : fields)\n          if (fieldSelector.accept(field) != FieldSelectorResult.NO_LOAD) {\n            include = true;\n            break;\n          }\n      }\n      if (include) {\n        List<Fieldable> fields = reader.document(n, fieldSelector).getFields();\n        for (Fieldable field : fields) {\n          result.add(field);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  // append fields from storedFieldReaders\n  public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    ensureOpen();\n    Document result = new Document();\n    for (final IndexReader reader: storedFieldReaders) {\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Collection<String> fields = readerToFields.get(reader);\n        for (final String field : fields)\n          if (fieldSelector.accept(field) != FieldSelectorResult.NO_LOAD) {\n            include = true;\n            break;\n          }\n      }\n      if (include) {\n        List<Fieldable> fields = reader.document(n, fieldSelector).getFields();\n        for (Fieldable field : fields) {\n          result.add(field);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#document(int,FieldSelector).mjava","sourceNew":"  // append fields from storedFieldReaders\n  @Override\n  public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    ensureOpen();\n    Document result = new Document();\n    for (final IndexReader reader: storedFieldReaders) {\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Collection<String> fields = readerToFields.get(reader);\n        for (final String field : fields)\n          if (fieldSelector.accept(field) != FieldSelectorResult.NO_LOAD) {\n            include = true;\n            break;\n          }\n      }\n      if (include) {\n        List<Fieldable> fields = reader.document(n, fieldSelector).getFields();\n        for (Fieldable field : fields) {\n          result.add(field);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  // append fields from storedFieldReaders\n  @Override\n  public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    ensureOpen();\n    Document result = new Document();\n    for (final IndexReader reader: storedFieldReaders) {\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Collection<String> fields = readerToFields.get(reader);\n        for (final String field : fields)\n          if (fieldSelector.accept(field) != FieldSelectorResult.NO_LOAD) {\n            include = true;\n            break;\n          }\n      }\n      if (include) {\n        List<Fieldable> fields = reader.document(n, fieldSelector).getFields();\n        for (Fieldable field : fields) {\n          result.add(field);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["1b54a9bc667895a2095a886184bf69a3179e63df"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"1b54a9bc667895a2095a886184bf69a3179e63df":["c205cd73e4706c6feceba2eed84d820ec83e0850"],"8a9e385641d717e641408d8fbbc62be8fc766357":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"c205cd73e4706c6feceba2eed84d820ec83e0850":["12d40284fd9481f79444bc63bc5d13847caddd3d"]},"commit2Childs":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"1b54a9bc667895a2095a886184bf69a3179e63df":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["c205cd73e4706c6feceba2eed84d820ec83e0850"],"c205cd73e4706c6feceba2eed84d820ec83e0850":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}