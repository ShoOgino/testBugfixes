{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","commits":[{"id":"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","date":1492510959,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String  clusterState) {\n    return new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n          Map<String, Object> result = new LinkedHashMap<>();\n          keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n          return result;\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return nodeValues.keySet();\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return getReplicaDetails(node, clusterState);\n        }\n\n      };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String  clusterState) {\n    return new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n          Map<String, Object> result = new LinkedHashMap<>();\n          keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n          return result;\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return nodeValues.keySet();\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return getReplicaDetails(node, clusterState);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String  clusterState) {\n    return new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          Map<String, Object> result = new LinkedHashMap<>();\n          tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n          return result;\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return nodeValues.keySet();\n        }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n\n      @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return getReplicaDetails(node, clusterState);\n        }\n\n      };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String  clusterState) {\n    return new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n          Map<String, Object> result = new LinkedHashMap<>();\n          keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n          return result;\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return nodeValues.keySet();\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return getReplicaDetails(node, clusterState);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String  clusterState) {\n    return new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          Map<String, Object> result = new LinkedHashMap<>();\n          tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n          return result;\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return nodeValues.keySet();\n        }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n\n      @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return getReplicaDetails(node, clusterState);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"/dev/null","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"/dev/null","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d1f7b3f5e5e45b15b9649564c72301c248de1b8","date":1498557572,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8","e4848fb683db0790f2847173af06e2ad2d03328e"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86fff6c123a5a1d38adb665dd045347219798da9":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["86fff6c123a5a1d38adb665dd045347219798da9"],"e4848fb683db0790f2847173af06e2ad2d03328e":["74aea047dff7f7c38a2d766827bd20d356f98c6a"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e4848fb683db0790f2847173af06e2ad2d03328e"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"86fff6c123a5a1d38adb665dd045347219798da9":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["86fff6c123a5a1d38adb665dd045347219798da9"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}