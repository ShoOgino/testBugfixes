{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testSingleChunkExceptions().mjava","commits":[{"id":"046829b17e246624c179b94d5a20cb53fa945e87","date":1367880720,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testSingleChunkExceptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleChunkExceptions() {\n    boolean ex = false;\n    String termStr = \"the*tre\";\n      \n    Analyzer stopsAnalyzer = new MockAnalyzer\n        (random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    try {\n      String q = parseWithAnalyzingQueryParser(termStr, stopsAnalyzer, true);     \n    } catch (ParseException e){\n      if (e.getMessage().contains(\"returned nothing\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have returned nothing\", true, ex);\n    ex = false;\n     \n    AnalyzingQueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, FIELD, a);\n    try{\n      qp.analyzeSingleChunk(FIELD, \"\", \"not a single chunk\");\n    } catch (ParseException e){\n      if (e.getMessage().contains(\"multiple terms\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have produced multiple terms\", true, ex);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testSingleChunkExceptions().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testSingleChunkExceptions().mjava","sourceNew":"  public void testSingleChunkExceptions() {\n    boolean ex = false;\n    String termStr = \"the*tre\";\n      \n    Analyzer stopsAnalyzer = new MockAnalyzer\n        (random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    try {\n      String q = parseWithAnalyzingQueryParser(termStr, stopsAnalyzer, true);     \n    } catch (ParseException e){\n      if (e.getMessage().contains(\"returned nothing\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have returned nothing\", true, ex);\n    ex = false;\n     \n    AnalyzingQueryParser qp = new AnalyzingQueryParser(FIELD, a);\n    try{\n      qp.analyzeSingleChunk(FIELD, \"\", \"not a single chunk\");\n    } catch (ParseException e){\n      if (e.getMessage().contains(\"multiple terms\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have produced multiple terms\", true, ex);\n  }\n\n","sourceOld":"  public void testSingleChunkExceptions() {\n    boolean ex = false;\n    String termStr = \"the*tre\";\n      \n    Analyzer stopsAnalyzer = new MockAnalyzer\n        (random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    try {\n      String q = parseWithAnalyzingQueryParser(termStr, stopsAnalyzer, true);     \n    } catch (ParseException e){\n      if (e.getMessage().contains(\"returned nothing\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have returned nothing\", true, ex);\n    ex = false;\n     \n    AnalyzingQueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, FIELD, a);\n    try{\n      qp.analyzeSingleChunk(FIELD, \"\", \"not a single chunk\");\n    } catch (ParseException e){\n      if (e.getMessage().contains(\"multiple terms\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have produced multiple terms\", true, ex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testSingleChunkExceptions().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testSingleChunkExceptions().mjava","sourceNew":"  public void testSingleChunkExceptions() {\n    boolean ex = false;\n    String termStr = \"the*tre\";\n      \n    Analyzer stopsAnalyzer = new MockAnalyzer\n        (random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    try {\n      String q = parseWithAnalyzingQueryParser(termStr, stopsAnalyzer, true);     \n    } catch (ParseException e){\n      if (e.getMessage().contains(\"returned nothing\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have returned nothing\", true, ex);\n    ex = false;\n     \n    AnalyzingQueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, FIELD, a);\n    try{\n      qp.analyzeSingleChunk(FIELD, \"\", \"not a single chunk\");\n    } catch (ParseException e){\n      if (e.getMessage().contains(\"multiple terms\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have produced multiple terms\", true, ex);\n  }\n\n","sourceOld":"  public void testSingleChunkExceptions() {\n    boolean ex = false;\n    String termStr = \"the*tre\";\n      \n    Analyzer stopsAnalyzer = new MockAnalyzer\n        (random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    try {\n      String q = parseWithAnalyzingQueryParser(termStr, stopsAnalyzer, true);     \n    } catch (ParseException e){\n      if (e.getMessage().contains(\"returned nothing\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have returned nothing\", true, ex);\n    ex = false;\n     \n    AnalyzingQueryParser qp = new AnalyzingQueryParser(FIELD, a);\n    try{\n      qp.analyzeSingleChunk(FIELD, \"\", \"not a single chunk\");\n    } catch (ParseException e){\n      if (e.getMessage().contains(\"multiple terms\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have produced multiple terms\", true, ex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testSingleChunkExceptions().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testSingleChunkExceptions().mjava","sourceNew":"  public void testSingleChunkExceptions() {\n    boolean ex = false;\n    String termStr = \"the*tre\";\n      \n    Analyzer stopsAnalyzer = new MockAnalyzer\n        (random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    try {\n      String q = parseWithAnalyzingQueryParser(termStr, stopsAnalyzer, true);     \n    } catch (ParseException e){\n      if (e.getMessage().contains(\"returned nothing\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have returned nothing\", true, ex);\n    ex = false;\n     \n    AnalyzingQueryParser qp = new AnalyzingQueryParser(FIELD, a);\n    try{\n      qp.analyzeSingleChunk(FIELD, \"\", \"not a single chunk\");\n    } catch (ParseException e){\n      if (e.getMessage().contains(\"multiple terms\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have produced multiple terms\", true, ex);\n  }\n\n","sourceOld":"  public void testSingleChunkExceptions() {\n    boolean ex = false;\n    String termStr = \"the*tre\";\n      \n    Analyzer stopsAnalyzer = new MockAnalyzer\n        (random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    try {\n      String q = parseWithAnalyzingQueryParser(termStr, stopsAnalyzer, true);     \n    } catch (ParseException e){\n      if (e.getMessage().contains(\"returned nothing\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have returned nothing\", true, ex);\n    ex = false;\n     \n    AnalyzingQueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, FIELD, a);\n    try{\n      qp.analyzeSingleChunk(FIELD, \"\", \"not a single chunk\");\n    } catch (ParseException e){\n      if (e.getMessage().contains(\"multiple terms\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have produced multiple terms\", true, ex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testSingleChunkExceptions().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testSingleChunkExceptions().mjava","sourceNew":"  public void testSingleChunkExceptions() {\n    String termStr = \"the*tre\";\n      \n    Analyzer stopsAnalyzer = new MockAnalyzer\n        (random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      parseWithAnalyzingQueryParser(termStr, stopsAnalyzer, true);\n    });\n    assertTrue(expected.getMessage().contains(\"returned nothing\"));\n     \n    AnalyzingQueryParser qp = new AnalyzingQueryParser(FIELD, a);\n    expected = expectThrows(ParseException.class, () -> {\n      qp.analyzeSingleChunk(FIELD, \"\", \"not a single chunk\");\n    });\n    assertTrue(expected.getMessage().contains(\"multiple terms\"));\n  }\n\n","sourceOld":"  public void testSingleChunkExceptions() {\n    boolean ex = false;\n    String termStr = \"the*tre\";\n      \n    Analyzer stopsAnalyzer = new MockAnalyzer\n        (random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    try {\n      String q = parseWithAnalyzingQueryParser(termStr, stopsAnalyzer, true);     \n    } catch (ParseException e){\n      if (e.getMessage().contains(\"returned nothing\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have returned nothing\", true, ex);\n    ex = false;\n     \n    AnalyzingQueryParser qp = new AnalyzingQueryParser(FIELD, a);\n    try{\n      qp.analyzeSingleChunk(FIELD, \"\", \"not a single chunk\");\n    } catch (ParseException e){\n      if (e.getMessage().contains(\"multiple terms\")){\n        ex = true;\n      }\n    }\n    assertEquals(\"Should have produced multiple terms\", true, ex);\n  }\n\n","bugFix":["046829b17e246624c179b94d5a20cb53fa945e87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testSingleChunkExceptions().mjava","sourceNew":null,"sourceOld":"  public void testSingleChunkExceptions() {\n    String termStr = \"the*tre\";\n      \n    Analyzer stopsAnalyzer = new MockAnalyzer\n        (random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      parseWithAnalyzingQueryParser(termStr, stopsAnalyzer, true);\n    });\n    assertTrue(expected.getMessage().contains(\"returned nothing\"));\n     \n    AnalyzingQueryParser qp = new AnalyzingQueryParser(FIELD, a);\n    expected = expectThrows(ParseException.class, () -> {\n      qp.analyzeSingleChunk(FIELD, \"\", \"not a single chunk\");\n    });\n    assertTrue(expected.getMessage().contains(\"multiple terms\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testSingleChunkExceptions().mjava","sourceNew":null,"sourceOld":"  public void testSingleChunkExceptions() {\n    String termStr = \"the*tre\";\n      \n    Analyzer stopsAnalyzer = new MockAnalyzer\n        (random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      parseWithAnalyzingQueryParser(termStr, stopsAnalyzer, true);\n    });\n    assertTrue(expected.getMessage().contains(\"returned nothing\"));\n     \n    AnalyzingQueryParser qp = new AnalyzingQueryParser(FIELD, a);\n    expected = expectThrows(ParseException.class, () -> {\n      qp.analyzeSingleChunk(FIELD, \"\", \"not a single chunk\");\n    });\n    assertTrue(expected.getMessage().contains(\"multiple terms\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["046829b17e246624c179b94d5a20cb53fa945e87"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ea4107f60b9f95623c16025c9c247412ff809092":["05fe562aa248790944d43cdd478f512572835ba0"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"],"046829b17e246624c179b94d5a20cb53fa945e87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["046829b17e246624c179b94d5a20cb53fa945e87"],"05fe562aa248790944d43cdd478f512572835ba0":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"046829b17e246624c179b94d5a20cb53fa945e87":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}