{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/InactiveMarkersPlanAction#process(TriggerEvent,ActionContext).mjava","commits":[{"id":"f7fb1186f5b61e0b74289e6786df8cbecfa471bc","date":1545308188,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/InactiveMarkersPlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.trace(\"-- {} cleaning markers\", getName());\n    // use epoch time to track this across JVMs and nodes\n    long currentTimeNs = cloudManager.getTimeSource().getEpochTimeNs();\n    Map<String, Object> results = new LinkedHashMap<>();\n    Set<String> cleanedUp = new TreeSet<>();\n    cleanupMarkers(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, currentTimeNs, cleanedUp);\n    if (!cleanedUp.isEmpty()) {\n      results.put(\"nodeAdded\", cleanedUp);\n      cleanedUp = new TreeSet<>();\n    }\n    cleanupMarkers(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, currentTimeNs, cleanedUp);\n    if (!cleanedUp.isEmpty()) {\n      results.put(\"nodeLost\", cleanedUp);\n    }\n    if (!results.isEmpty()) {\n      context.getProperties().put(getName(), results);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/InactiveMarkersPlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/InactiveMarkersPlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    if (log.isTraceEnabled()) {\n      log.trace(\"-- {} cleaning markers\", getName());\n    }\n    // use epoch time to track this across JVMs and nodes\n    long currentTimeNs = cloudManager.getTimeSource().getEpochTimeNs();\n    Map<String, Object> results = new LinkedHashMap<>();\n    Set<String> cleanedUp = new TreeSet<>();\n    cleanupMarkers(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, currentTimeNs, cleanedUp);\n    if (!cleanedUp.isEmpty()) {\n      results.put(\"nodeAdded\", cleanedUp);\n      cleanedUp = new TreeSet<>();\n    }\n    cleanupMarkers(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, currentTimeNs, cleanedUp);\n    if (!cleanedUp.isEmpty()) {\n      results.put(\"nodeLost\", cleanedUp);\n    }\n    if (!results.isEmpty()) {\n      context.getProperties().put(getName(), results);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.trace(\"-- {} cleaning markers\", getName());\n    // use epoch time to track this across JVMs and nodes\n    long currentTimeNs = cloudManager.getTimeSource().getEpochTimeNs();\n    Map<String, Object> results = new LinkedHashMap<>();\n    Set<String> cleanedUp = new TreeSet<>();\n    cleanupMarkers(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, currentTimeNs, cleanedUp);\n    if (!cleanedUp.isEmpty()) {\n      results.put(\"nodeAdded\", cleanedUp);\n      cleanedUp = new TreeSet<>();\n    }\n    cleanupMarkers(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, currentTimeNs, cleanedUp);\n    if (!cleanedUp.isEmpty()) {\n      results.put(\"nodeLost\", cleanedUp);\n    }\n    if (!results.isEmpty()) {\n      context.getProperties().put(getName(), results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/InactiveMarkersPlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    if (log.isTraceEnabled()) {\n      log.trace(\"-- {} cleaning markers\", getName());\n    }\n    // use epoch time to track this across JVMs and nodes\n    long currentTimeNs = cloudManager.getTimeSource().getEpochTimeNs();\n    Map<String, Object> results = new LinkedHashMap<>();\n    Set<String> cleanedUp = new TreeSet<>();\n    cleanupMarkers(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, currentTimeNs, cleanedUp);\n    if (!cleanedUp.isEmpty()) {\n      results.put(\"nodeAdded\", cleanedUp);\n      cleanedUp = new TreeSet<>();\n    }\n    cleanupMarkers(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, currentTimeNs, cleanedUp);\n    if (!cleanedUp.isEmpty()) {\n      results.put(\"nodeLost\", cleanedUp);\n    }\n    if (!results.isEmpty()) {\n      context.getProperties().put(getName(), results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["e35f2dde06b35aa9904949a3a93fabd090371077"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}