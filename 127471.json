{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","commits":[{"id":"8b4d567cfa76681fe80b621fd74a673d7db7937b","date":1494979945,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12cb83a3f761dc612e1ece020f46e1886fc2550e","date":1495722768,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12cb83a3f761dc612e1ece020f46e1886fc2550e":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b4d567cfa76681fe80b621fd74a673d7db7937b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b4d567cfa76681fe80b621fd74a673d7db7937b"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","12cb83a3f761dc612e1ece020f46e1886fc2550e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"12cb83a3f761dc612e1ece020f46e1886fc2550e":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b4d567cfa76681fe80b621fd74a673d7db7937b","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"8b4d567cfa76681fe80b621fd74a673d7db7937b":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["12cb83a3f761dc612e1ece020f46e1886fc2550e","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}