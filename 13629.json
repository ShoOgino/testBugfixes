{"path":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#nextDoc().mjava","commits":[{"id":"34960be55e437a6c96fe66046bf22d33346059f6","date":1363980156,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while(true) {\n      // to remove current doc, call next() on all subScorers on current doc within heap\n      while (subScorers[0].docID() == doc) {\n        if (subScorers[0].nextDoc() != NO_MORE_DOCS) {\n          minheapAdjust(0);\n        } else {\n          minheapRemoveRoot();\n          numScorers--;\n          if (numScorers < mm) {\n            return doc = NO_MORE_DOCS;\n          }\n        }\n      }\n\n      evaluateSmallestDocInHeap();\n\n      if (nrMatchers >= mm) { // doc satisfies mm constraint\n        break;\n      }\n    }\n    return doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"681329f0d8aa847be84b952db62031b9c15f96c5","date":1364143277,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#nextDoc().mjava","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while (true) {\n      // to remove current doc, call next() on all subScorers on current doc within heap\n      while (subScorers[0].docID() == doc) {\n        if (subScorers[0].nextDoc() != NO_MORE_DOCS) {\n          minheapSiftDown(0);\n        } else {\n          minheapRemoveRoot();\n          numScorers--;\n          if (numScorers < mm) {\n            return doc = NO_MORE_DOCS;\n          }\n        }\n        //assert minheapCheck();\n      }\n\n      evaluateSmallestDocInHeap();\n\n      if (nrMatchers >= mm) { // doc satisfies mm constraint\n        break;\n      }\n    }\n    return doc;\n  }\n\n","sourceOld":"  @Override\n  public int nextDoc() throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while(true) {\n      // to remove current doc, call next() on all subScorers on current doc within heap\n      while (subScorers[0].docID() == doc) {\n        if (subScorers[0].nextDoc() != NO_MORE_DOCS) {\n          minheapAdjust(0);\n        } else {\n          minheapRemoveRoot();\n          numScorers--;\n          if (numScorers < mm) {\n            return doc = NO_MORE_DOCS;\n          }\n        }\n      }\n\n      evaluateSmallestDocInHeap();\n\n      if (nrMatchers >= mm) { // doc satisfies mm constraint\n        break;\n      }\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#nextDoc().mjava","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    // We are moving to the next doc ID, so scorers in 'lead' need to go in\n    // 'tail'. If there is not enough space in 'tail', then we take the least\n    // costly scorers and advance them.\n    for (ScorerWrapper s = lead; s != null; s = s.next) {\n      final ScorerWrapper evicted = insertTailWithOverFlow(s);\n      if (evicted != null) {\n        if (evicted.doc == doc) {\n          evicted.doc = evicted.scorer.nextDoc();\n        } else {\n          evicted.doc = evicted.scorer.advance(doc + 1);\n        }\n        head.add(evicted);\n      }\n    }\n\n    setDocAndFreq();\n    return doNext();\n  }\n\n","sourceOld":"  @Override\n  public int nextDoc() throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while (true) {\n      // to remove current doc, call next() on all subScorers on current doc within heap\n      while (subScorers[0].docID() == doc) {\n        if (subScorers[0].nextDoc() != NO_MORE_DOCS) {\n          minheapSiftDown(0);\n        } else {\n          minheapRemoveRoot();\n          numScorers--;\n          if (numScorers < mm) {\n            return doc = NO_MORE_DOCS;\n          }\n        }\n        //assert minheapCheck();\n      }\n\n      evaluateSmallestDocInHeap();\n\n      if (nrMatchers >= mm) { // doc satisfies mm constraint\n        break;\n      }\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7","date":1429852340,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#nextDoc().mjava","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    // We are moving to the next doc ID, so scorers in 'lead' need to go in\n    // 'tail'. If there is not enough space in 'tail', then we take the least\n    // costly scorers and advance them.\n    for (DisiWrapper<Scorer> s = lead; s != null; s = s.next) {\n      final DisiWrapper<Scorer> evicted = insertTailWithOverFlow(s);\n      if (evicted != null) {\n        if (evicted.doc == doc) {\n          evicted.doc = evicted.iterator.nextDoc();\n        } else {\n          evicted.doc = evicted.iterator.advance(doc + 1);\n        }\n        head.add(evicted);\n      }\n    }\n\n    setDocAndFreq();\n    return doNext();\n  }\n\n","sourceOld":"  @Override\n  public int nextDoc() throws IOException {\n    // We are moving to the next doc ID, so scorers in 'lead' need to go in\n    // 'tail'. If there is not enough space in 'tail', then we take the least\n    // costly scorers and advance them.\n    for (ScorerWrapper s = lead; s != null; s = s.next) {\n      final ScorerWrapper evicted = insertTailWithOverFlow(s);\n      if (evicted != null) {\n        if (evicted.doc == doc) {\n          evicted.doc = evicted.scorer.nextDoc();\n        } else {\n          evicted.doc = evicted.scorer.advance(doc + 1);\n        }\n        head.add(evicted);\n      }\n    }\n\n    setDocAndFreq();\n    return doNext();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#nextDoc().mjava","sourceNew":null,"sourceOld":"  @Override\n  public int nextDoc() throws IOException {\n    // We are moving to the next doc ID, so scorers in 'lead' need to go in\n    // 'tail'. If there is not enough space in 'tail', then we take the least\n    // costly scorers and advance them.\n    for (DisiWrapper<Scorer> s = lead; s != null; s = s.next) {\n      final DisiWrapper<Scorer> evicted = insertTailWithOverFlow(s);\n      if (evicted != null) {\n        if (evicted.doc == doc) {\n          evicted.doc = evicted.iterator.nextDoc();\n        } else {\n          evicted.doc = evicted.iterator.advance(doc + 1);\n        }\n        head.add(evicted);\n      }\n    }\n\n    setDocAndFreq();\n    return doNext();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["681329f0d8aa847be84b952db62031b9c15f96c5"],"34960be55e437a6c96fe66046bf22d33346059f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"681329f0d8aa847be84b952db62031b9c15f96c5":["34960be55e437a6c96fe66046bf22d33346059f6"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"34960be55e437a6c96fe66046bf22d33346059f6":["681329f0d8aa847be84b952db62031b9c15f96c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34960be55e437a6c96fe66046bf22d33346059f6"],"681329f0d8aa847be84b952db62031b9c15f96c5":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}