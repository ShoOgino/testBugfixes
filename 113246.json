{"path":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.add(clone);\n      }\n      \n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.add(clone);\n      }\n      \n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5bf508bfc98425280b4bb708ab724f718705c9d","date":1332973345,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public MMapIndexInput clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.add(clone);\n      }\n      \n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.add(clone);\n      }\n      \n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e721522f9692a64e877e34a4467f58dbeba866eb","date":1340444282,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public MMapIndexInput clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      this.clones.put(clone, Boolean.TRUE);\n      \n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public MMapIndexInput clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.add(clone);\n      }\n      \n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public MMapIndexInput clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      this.clones.put(clone, Boolean.TRUE);\n      \n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public MMapIndexInput clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.add(clone);\n      }\n      \n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":null,"sourceOld":"    @Override\n    public MMapIndexInput clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      this.clones.put(clone, Boolean.TRUE);\n      \n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["e721522f9692a64e877e34a4467f58dbeba866eb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["f5bf508bfc98425280b4bb708ab724f718705c9d","e721522f9692a64e877e34a4467f58dbeba866eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e721522f9692a64e877e34a4467f58dbeba866eb":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"]},"commit2Childs":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e721522f9692a64e877e34a4467f58dbeba866eb":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["fe33227f6805edab2036cbb80645cc4e2d1fa424","e721522f9692a64e877e34a4467f58dbeba866eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}