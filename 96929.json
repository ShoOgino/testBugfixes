{"path":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#checkSegmentsInExpectations(IndexWriter,List[String],boolean).mjava","commits":[{"id":"56fb5e4e4b239474721e13b4cd9542ea2d215451","date":1529091182,"type":0,"author":"Erick","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#checkSegmentsInExpectations(IndexWriter,List[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  void checkSegmentsInExpectations(IndexWriter w, List<String> segNamesBefore, boolean twoMayHaveBeenMerged) {\n\n    List<String> segNamesAfter = getSegmentNames(w);\n\n    if (twoMayHaveBeenMerged == false || segNamesAfter.size() == segNamesBefore.size()) {\n      if (segNamesAfter.size() != segNamesBefore.size()) {\n        fail(\"Segment lists different sizes!: \" + segNamesBefore.toString() + \" After list: \" + segNamesAfter.toString());\n      }\n\n      if (segNamesAfter.containsAll(segNamesBefore) == false) {\n        fail(\"Segment lists should be identical: \" + segNamesBefore.toString() + \" After list: \" + segNamesAfter.toString());\n      }\n      return;\n    }\n\n    // forceMerge merged a tiny segment into a not-quite-max-sized segment so check that:\n    // Two segments in the before list have been merged into one segment in the after list.\n    if (segNamesAfter.size() != segNamesBefore.size() - 1) {\n      fail(\"forceMerge didn't merge a small and large segment into one segment as expected: \"\n          + segNamesBefore.toString() + \" After list: \" + segNamesAfter.toString());\n    }\n\n\n    // There shold be exactly two segments in the before not in after and one in after not in before.\n    List<String> testBefore = new ArrayList<>(segNamesBefore);\n    List<String> testAfter = new ArrayList<>(segNamesAfter);\n\n    testBefore.removeAll(segNamesAfter);\n    testAfter.removeAll(segNamesBefore);\n\n    if (testBefore.size() != 2 || testAfter.size() != 1) {\n      fail(\"Segment lists different sizes!: \" + segNamesBefore.toString() + \" After list: \" + segNamesAfter.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#checkSegmentsInExpectations(IndexWriter,List[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  void checkSegmentsInExpectations(IndexWriter w, List<String> segNamesBefore, boolean twoMayHaveBeenMerged) {\n\n    List<String> segNamesAfter = getSegmentNames(w);\n\n    if (twoMayHaveBeenMerged == false || segNamesAfter.size() == segNamesBefore.size()) {\n      if (segNamesAfter.size() != segNamesBefore.size()) {\n        fail(\"Segment lists different sizes!: \" + segNamesBefore.toString() + \" After list: \" + segNamesAfter.toString());\n      }\n\n      if (segNamesAfter.containsAll(segNamesBefore) == false) {\n        fail(\"Segment lists should be identical: \" + segNamesBefore.toString() + \" After list: \" + segNamesAfter.toString());\n      }\n      return;\n    }\n\n    // forceMerge merged a tiny segment into a not-quite-max-sized segment so check that:\n    // Two segments in the before list have been merged into one segment in the after list.\n    if (segNamesAfter.size() != segNamesBefore.size() - 1) {\n      fail(\"forceMerge didn't merge a small and large segment into one segment as expected: \"\n          + segNamesBefore.toString() + \" After list: \" + segNamesAfter.toString());\n    }\n\n\n    // There shold be exactly two segments in the before not in after and one in after not in before.\n    List<String> testBefore = new ArrayList<>(segNamesBefore);\n    List<String> testAfter = new ArrayList<>(segNamesAfter);\n\n    testBefore.removeAll(segNamesAfter);\n    testAfter.removeAll(segNamesBefore);\n\n    if (testBefore.size() != 2 || testAfter.size() != 1) {\n      fail(\"Segment lists different sizes!: \" + segNamesBefore.toString() + \" After list: \" + segNamesAfter.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#checkSegmentsInExpectations(IndexWriter,List[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  void checkSegmentsInExpectations(IndexWriter w, List<String> segNamesBefore, boolean twoMayHaveBeenMerged) {\n\n    List<String> segNamesAfter = getSegmentNames(w);\n\n    if (twoMayHaveBeenMerged == false || segNamesAfter.size() == segNamesBefore.size()) {\n      if (segNamesAfter.size() != segNamesBefore.size()) {\n        fail(\"Segment lists different sizes!: \" + segNamesBefore.toString() + \" After list: \" + segNamesAfter.toString());\n      }\n\n      if (segNamesAfter.containsAll(segNamesBefore) == false) {\n        fail(\"Segment lists should be identical: \" + segNamesBefore.toString() + \" After list: \" + segNamesAfter.toString());\n      }\n      return;\n    }\n\n    // forceMerge merged a tiny segment into a not-quite-max-sized segment so check that:\n    // Two segments in the before list have been merged into one segment in the after list.\n    if (segNamesAfter.size() != segNamesBefore.size() - 1) {\n      fail(\"forceMerge didn't merge a small and large segment into one segment as expected: \"\n          + segNamesBefore.toString() + \" After list: \" + segNamesAfter.toString());\n    }\n\n\n    // There shold be exactly two segments in the before not in after and one in after not in before.\n    List<String> testBefore = new ArrayList<>(segNamesBefore);\n    List<String> testAfter = new ArrayList<>(segNamesAfter);\n\n    testBefore.removeAll(segNamesAfter);\n    testAfter.removeAll(segNamesBefore);\n\n    if (testBefore.size() != 2 || testAfter.size() != 1) {\n      fail(\"Segment lists different sizes!: \" + segNamesBefore.toString() + \" After list: \" + segNamesAfter.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56fb5e4e4b239474721e13b4cd9542ea2d215451"],"56fb5e4e4b239474721e13b4cd9542ea2d215451":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56fb5e4e4b239474721e13b4cd9542ea2d215451"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56fb5e4e4b239474721e13b4cd9542ea2d215451"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"56fb5e4e4b239474721e13b4cd9542ea2d215451":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","56fb5e4e4b239474721e13b4cd9542ea2d215451","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}