{"path":"solr/core/src/test/org/apache/solr/cloud/MockSolrSource#makeSimpleMock(Overseer,ZkStateReader,SolrZkClient).mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MockSolrSource#makeSimpleMock(Overseer,ZkStateReader,SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  public static ZkController makeSimpleMock(Overseer overseer, ZkStateReader reader, SolrZkClient zkClient) {\n    ZkController zkControllerMock = mock(ZkController.class);\n    if (overseer == null) overseer = mock(Overseer.class);\n    \n\n    if (reader != null && zkClient == null) {\n      zkClient = reader.getZkClient();\n    } else {\n      if (zkClient == null) {\n      }\n      reader = mock(ZkStateReader.class);\n      when(reader.getZkClient()).thenReturn(zkClient);\n    }\n     \n    \n    when(zkControllerMock.getOverseer()).thenReturn(overseer);\n    when(zkControllerMock.getZkStateReader()).thenReturn(reader);\n    when(zkControllerMock.getZkClient()).thenReturn(zkClient);\n    when(zkControllerMock.getOverseer()).thenReturn(overseer);\n    return (ZkController) zkControllerMock;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MockSolrSource#makeSimpleMock(Overseer,ZkStateReader,SolrZkClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MockSolrSource#makeSimpleMock(Overseer,ZkStateReader,SolrZkClient).mjava","sourceNew":"  public static ZkController makeSimpleMock(Overseer overseer, ZkStateReader reader, SolrZkClient zkClient) {\n    ZkController zkControllerMock = mock(ZkController.class);\n    if (overseer == null) overseer = mock(Overseer.class);\n    \n\n    if (reader != null && zkClient == null) {\n      zkClient = reader.getZkClient();\n    } else {\n      if (zkClient == null) {\n      }\n      reader = mock(ZkStateReader.class);\n      when(reader.getZkClient()).thenReturn(zkClient);\n    }\n     \n    \n    when(zkControllerMock.getOverseer()).thenReturn(overseer);\n    when(zkControllerMock.getZkStateReader()).thenReturn(reader);\n    when(zkControllerMock.getZkClient()).thenReturn(zkClient);\n    when(zkControllerMock.getOverseer()).thenReturn(overseer);\n    return zkControllerMock;\n  }\n\n","sourceOld":"  public static ZkController makeSimpleMock(Overseer overseer, ZkStateReader reader, SolrZkClient zkClient) {\n    ZkController zkControllerMock = mock(ZkController.class);\n    if (overseer == null) overseer = mock(Overseer.class);\n    \n\n    if (reader != null && zkClient == null) {\n      zkClient = reader.getZkClient();\n    } else {\n      if (zkClient == null) {\n      }\n      reader = mock(ZkStateReader.class);\n      when(reader.getZkClient()).thenReturn(zkClient);\n    }\n     \n    \n    when(zkControllerMock.getOverseer()).thenReturn(overseer);\n    when(zkControllerMock.getZkStateReader()).thenReturn(reader);\n    when(zkControllerMock.getZkClient()).thenReturn(zkClient);\n    when(zkControllerMock.getOverseer()).thenReturn(overseer);\n    return (ZkController) zkControllerMock;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}