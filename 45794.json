{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestInternals(String,String[]).mjava","commits":[{"id":"0ff61c2e5ce6b1f26a271d9d454206db1917d628","date":1491505661,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestInternals(String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestInternals(String field, String[] values) throws IOException {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    IndexReader ir;\n    RefCounted<SolrIndexSearcher> ref = null;\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    boolean ignoredField = !(sf.indexed() || sf.stored() || sf.hasDocValues());\n    try {\n      ref = h.getCore().getSearcher();\n      SolrIndexSearcher searcher = ref.get(); \n      ir = searcher.getIndexReader();\n      if (sf.indexed()) {\n        assertEquals(\"Field \" + field + \" should have point values\", 10, PointValues.size(ir, field));\n      } else {\n        assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n      }\n      if (ignoredField) {\n        assertTrue(\"Field \" + field + \" should not have docValues\",\n            DocValues.getSortedNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getSorted(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getBinary(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      } else {\n        if (sf.hasDocValues()) {\n          if (sf.multiValued()) {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getSortedNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          } else {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          }\n        } else {\n          expectThrows(IllegalStateException.class, ()->DocValues.getSortedNumeric(searcher.getSlowAtomicReader(), field));\n          expectThrows(IllegalStateException.class, ()->DocValues.getNumeric(searcher.getSlowAtomicReader(), field));\n        }\n        expectThrows(IllegalStateException.class, ()->DocValues.getSorted(searcher.getSlowAtomicReader(), field));\n        expectThrows(IllegalStateException.class, ()->DocValues.getBinary(searcher.getSlowAtomicReader(), field));\n      }\n      for (LeafReaderContext leave:ir.leaves()) {\n        LeafReader reader = leave.reader();\n        for (int i = 0; i < reader.numDocs(); i++) {\n          Document doc = reader.document(i, Collections.singleton(field));\n          if (sf.stored()) {\n            assertNotNull(doc.get(field));\n          } else {\n            assertNull(doc.get(field));\n          }\n        }\n      }\n    } finally {\n      ref.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ea0ee17420c742b9dc8481e32da40c9a45ff1a1","79900e89f08cc17c4bcf49789dd61a2236ee7840"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ea0ee17420c742b9dc8481e32da40c9a45ff1a1","date":1491599485,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestInternals(String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestInternals(String,String[]).mjava","sourceNew":"  private void doTestInternals(String field, String[] values) throws IOException {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    IndexReader ir;\n    RefCounted<SolrIndexSearcher> ref = null;\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    boolean ignoredField = !(sf.indexed() || sf.stored() || sf.hasDocValues());\n    try {\n      ref = h.getCore().getSearcher();\n      SolrIndexSearcher searcher = ref.get(); \n      ir = searcher.getIndexReader();\n      if (sf.indexed()) {\n        assertEquals(\"Field \" + field + \" should have point values\", 10, PointValues.size(ir, field));\n      } else {\n        assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n      }\n      if (ignoredField) {\n        assertTrue(\"Field \" + field + \" should not have docValues\",\n            DocValues.getSortedNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getSorted(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getBinary(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      } else {\n        if (sf.hasDocValues()) {\n          if (sf.multiValued()) {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getSortedNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          } else {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          }\n        } else {\n          expectThrows(IllegalStateException.class, ()->DocValues.getSortedNumeric(searcher.getSlowAtomicReader(), field));\n          expectThrows(IllegalStateException.class, ()->DocValues.getNumeric(searcher.getSlowAtomicReader(), field));\n        }\n        expectThrows(IllegalStateException.class, ()->DocValues.getSorted(searcher.getSlowAtomicReader(), field));\n        expectThrows(IllegalStateException.class, ()->DocValues.getBinary(searcher.getSlowAtomicReader(), field));\n      }\n      for (LeafReaderContext leave:ir.leaves()) {\n        LeafReader reader = leave.reader();\n        for (int i = 0; i < reader.numDocs(); i++) {\n          Document doc = reader.document(i);\n          if (sf.stored()) {\n            assertNotNull(\"Field \" + field + \" not found. Doc: \" + doc, doc.get(field));\n          } else {\n            assertNull(doc.get(field));\n          }\n        }\n      }\n    } finally {\n      ref.decref();\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  private void doTestInternals(String field, String[] values) throws IOException {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    IndexReader ir;\n    RefCounted<SolrIndexSearcher> ref = null;\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    boolean ignoredField = !(sf.indexed() || sf.stored() || sf.hasDocValues());\n    try {\n      ref = h.getCore().getSearcher();\n      SolrIndexSearcher searcher = ref.get(); \n      ir = searcher.getIndexReader();\n      if (sf.indexed()) {\n        assertEquals(\"Field \" + field + \" should have point values\", 10, PointValues.size(ir, field));\n      } else {\n        assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n      }\n      if (ignoredField) {\n        assertTrue(\"Field \" + field + \" should not have docValues\",\n            DocValues.getSortedNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getSorted(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getBinary(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      } else {\n        if (sf.hasDocValues()) {\n          if (sf.multiValued()) {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getSortedNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          } else {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          }\n        } else {\n          expectThrows(IllegalStateException.class, ()->DocValues.getSortedNumeric(searcher.getSlowAtomicReader(), field));\n          expectThrows(IllegalStateException.class, ()->DocValues.getNumeric(searcher.getSlowAtomicReader(), field));\n        }\n        expectThrows(IllegalStateException.class, ()->DocValues.getSorted(searcher.getSlowAtomicReader(), field));\n        expectThrows(IllegalStateException.class, ()->DocValues.getBinary(searcher.getSlowAtomicReader(), field));\n      }\n      for (LeafReaderContext leave:ir.leaves()) {\n        LeafReader reader = leave.reader();\n        for (int i = 0; i < reader.numDocs(); i++) {\n          Document doc = reader.document(i, Collections.singleton(field));\n          if (sf.stored()) {\n            assertNotNull(doc.get(field));\n          } else {\n            assertNull(doc.get(field));\n          }\n        }\n      }\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79900e89f08cc17c4bcf49789dd61a2236ee7840","date":1492541915,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestInternals(String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestInternals(String,String[]).mjava","sourceNew":"  private void doTestInternals(String field, String[] values) throws IOException {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    IndexReader ir;\n    RefCounted<SolrIndexSearcher> ref = null;\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    boolean ignoredField = !(sf.indexed() || sf.stored() || sf.hasDocValues());\n    try {\n      ref = h.getCore().getSearcher();\n      SolrIndexSearcher searcher = ref.get(); \n      ir = searcher.getIndexReader();\n      // our own SlowCompositeReader to check DocValues on disk w/o the UninvertingReader added by SolrIndexSearcher\n      final LeafReader leafReaderForCheckingDVs = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      \n      if (sf.indexed()) {\n        assertEquals(\"Field \" + field + \" should have point values\", 10, PointValues.size(ir, field));\n      } else {\n        assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n      }\n      if (ignoredField) {\n        assertTrue(\"Field \" + field + \" should not have docValues\",\n            DocValues.getSortedNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getSorted(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getBinary(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      } else {\n        if (sf.hasDocValues()) {\n          if (sf.multiValued()) {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getSortedNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          } else {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          }\n        } else {\n          expectThrows(IllegalStateException.class, ()->DocValues.getSortedNumeric(leafReaderForCheckingDVs, field));\n          expectThrows(IllegalStateException.class, ()->DocValues.getNumeric(leafReaderForCheckingDVs, field));\n        }\n        expectThrows(IllegalStateException.class, ()->DocValues.getSorted(leafReaderForCheckingDVs, field));\n        expectThrows(IllegalStateException.class, ()->DocValues.getBinary(leafReaderForCheckingDVs, field));\n      }\n      for (LeafReaderContext leave:ir.leaves()) {\n        LeafReader reader = leave.reader();\n        for (int i = 0; i < reader.numDocs(); i++) {\n          Document doc = reader.document(i);\n          if (sf.stored()) {\n            assertNotNull(\"Field \" + field + \" not found. Doc: \" + doc, doc.get(field));\n          } else {\n            assertNull(doc.get(field));\n          }\n        }\n      }\n    } finally {\n      ref.decref();\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  private void doTestInternals(String field, String[] values) throws IOException {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    IndexReader ir;\n    RefCounted<SolrIndexSearcher> ref = null;\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    boolean ignoredField = !(sf.indexed() || sf.stored() || sf.hasDocValues());\n    try {\n      ref = h.getCore().getSearcher();\n      SolrIndexSearcher searcher = ref.get(); \n      ir = searcher.getIndexReader();\n      if (sf.indexed()) {\n        assertEquals(\"Field \" + field + \" should have point values\", 10, PointValues.size(ir, field));\n      } else {\n        assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n      }\n      if (ignoredField) {\n        assertTrue(\"Field \" + field + \" should not have docValues\",\n            DocValues.getSortedNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getSorted(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getBinary(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      } else {\n        if (sf.hasDocValues()) {\n          if (sf.multiValued()) {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getSortedNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          } else {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getNumeric(searcher.getSlowAtomicReader(), field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          }\n        } else {\n          expectThrows(IllegalStateException.class, ()->DocValues.getSortedNumeric(searcher.getSlowAtomicReader(), field));\n          expectThrows(IllegalStateException.class, ()->DocValues.getNumeric(searcher.getSlowAtomicReader(), field));\n        }\n        expectThrows(IllegalStateException.class, ()->DocValues.getSorted(searcher.getSlowAtomicReader(), field));\n        expectThrows(IllegalStateException.class, ()->DocValues.getBinary(searcher.getSlowAtomicReader(), field));\n      }\n      for (LeafReaderContext leave:ir.leaves()) {\n        LeafReader reader = leave.reader();\n        for (int i = 0; i < reader.numDocs(); i++) {\n          Document doc = reader.document(i);\n          if (sf.stored()) {\n            assertNotNull(\"Field \" + field + \" not found. Doc: \" + doc, doc.get(field));\n          } else {\n            assertNull(doc.get(field));\n          }\n        }\n      }\n    } finally {\n      ref.decref();\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestInternals(String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestInternals(String field, String[] values) throws IOException {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    IndexReader ir;\n    RefCounted<SolrIndexSearcher> ref = null;\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    boolean ignoredField = !(sf.indexed() || sf.stored() || sf.hasDocValues());\n    try {\n      ref = h.getCore().getSearcher();\n      SolrIndexSearcher searcher = ref.get(); \n      ir = searcher.getIndexReader();\n      // our own SlowCompositeReader to check DocValues on disk w/o the UninvertingReader added by SolrIndexSearcher\n      final LeafReader leafReaderForCheckingDVs = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      \n      if (sf.indexed()) {\n        assertEquals(\"Field \" + field + \" should have point values\", 10, PointValues.size(ir, field));\n      } else {\n        assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n      }\n      if (ignoredField) {\n        assertTrue(\"Field \" + field + \" should not have docValues\",\n            DocValues.getSortedNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getSorted(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getBinary(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      } else {\n        if (sf.hasDocValues()) {\n          if (sf.multiValued()) {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getSortedNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          } else {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          }\n        } else {\n          expectThrows(IllegalStateException.class, ()->DocValues.getSortedNumeric(leafReaderForCheckingDVs, field));\n          expectThrows(IllegalStateException.class, ()->DocValues.getNumeric(leafReaderForCheckingDVs, field));\n        }\n        expectThrows(IllegalStateException.class, ()->DocValues.getSorted(leafReaderForCheckingDVs, field));\n        expectThrows(IllegalStateException.class, ()->DocValues.getBinary(leafReaderForCheckingDVs, field));\n      }\n      for (LeafReaderContext leave:ir.leaves()) {\n        LeafReader reader = leave.reader();\n        for (int i = 0; i < reader.numDocs(); i++) {\n          Document doc = reader.document(i);\n          if (sf.stored()) {\n            assertNotNull(\"Field \" + field + \" not found. Doc: \" + doc, doc.get(field));\n          } else {\n            assertNull(doc.get(field));\n          }\n        }\n      }\n    } finally {\n      ref.decref();\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestInternals(String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestInternals(String,String[]).mjava","sourceNew":"  private void doTestInternals(String field, String[] values) throws IOException {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    boolean ignoredField = !(sf.indexed() || sf.stored() || sf.hasDocValues());\n    h.getCore().withSearcher(searcher -> {\n      DirectoryReader ir = searcher.getIndexReader();\n      // our own SlowCompositeReader to check DocValues on disk w/o the UninvertingReader added by SolrIndexSearcher\n      final LeafReader leafReaderForCheckingDVs = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      \n      if (sf.indexed()) {\n        assertEquals(\"Field \" + field + \" should have point values\", 10, PointValues.size(ir, field));\n      } else {\n        assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n      }\n      if (ignoredField) {\n        assertTrue(\"Field \" + field + \" should not have docValues\",\n            DocValues.getSortedNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getSorted(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getBinary(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      } else {\n        if (sf.hasDocValues()) {\n          if (sf.multiValued()) {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getSortedNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          } else {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          }\n        } else {\n          expectThrows(IllegalStateException.class, ()->DocValues.getSortedNumeric(leafReaderForCheckingDVs, field));\n          expectThrows(IllegalStateException.class, ()->DocValues.getNumeric(leafReaderForCheckingDVs, field));\n        }\n        expectThrows(IllegalStateException.class, ()->DocValues.getSorted(leafReaderForCheckingDVs, field));\n        expectThrows(IllegalStateException.class, ()->DocValues.getBinary(leafReaderForCheckingDVs, field));\n      }\n      for (LeafReaderContext leave:ir.leaves()) {\n        LeafReader reader = leave.reader();\n        for (int i = 0; i < reader.numDocs(); i++) {\n          Document doc = reader.document(i);\n          if (sf.stored()) {\n            assertNotNull(\"Field \" + field + \" not found. Doc: \" + doc, doc.get(field));\n          } else {\n            assertNull(doc.get(field));\n          }\n        }\n      }\n      return null;\n    });\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  private void doTestInternals(String field, String[] values) throws IOException {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    IndexReader ir;\n    RefCounted<SolrIndexSearcher> ref = null;\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    boolean ignoredField = !(sf.indexed() || sf.stored() || sf.hasDocValues());\n    try {\n      ref = h.getCore().getSearcher();\n      SolrIndexSearcher searcher = ref.get(); \n      ir = searcher.getIndexReader();\n      // our own SlowCompositeReader to check DocValues on disk w/o the UninvertingReader added by SolrIndexSearcher\n      final LeafReader leafReaderForCheckingDVs = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      \n      if (sf.indexed()) {\n        assertEquals(\"Field \" + field + \" should have point values\", 10, PointValues.size(ir, field));\n      } else {\n        assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n      }\n      if (ignoredField) {\n        assertTrue(\"Field \" + field + \" should not have docValues\",\n            DocValues.getSortedNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getSorted(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getBinary(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      } else {\n        if (sf.hasDocValues()) {\n          if (sf.multiValued()) {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getSortedNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          } else {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          }\n        } else {\n          expectThrows(IllegalStateException.class, ()->DocValues.getSortedNumeric(leafReaderForCheckingDVs, field));\n          expectThrows(IllegalStateException.class, ()->DocValues.getNumeric(leafReaderForCheckingDVs, field));\n        }\n        expectThrows(IllegalStateException.class, ()->DocValues.getSorted(leafReaderForCheckingDVs, field));\n        expectThrows(IllegalStateException.class, ()->DocValues.getBinary(leafReaderForCheckingDVs, field));\n      }\n      for (LeafReaderContext leave:ir.leaves()) {\n        LeafReader reader = leave.reader();\n        for (int i = 0; i < reader.numDocs(); i++) {\n          Document doc = reader.document(i);\n          if (sf.stored()) {\n            assertNotNull(\"Field \" + field + \" not found. Doc: \" + doc, doc.get(field));\n          } else {\n            assertNull(doc.get(field));\n          }\n        }\n      }\n    } finally {\n      ref.decref();\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestInternals(String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestInternals(String,String[]).mjava","sourceNew":"  private void doTestInternals(String field, String[] values) throws IOException {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    boolean ignoredField = !(sf.indexed() || sf.stored() || sf.hasDocValues());\n    h.getCore().withSearcher(searcher -> {\n      DirectoryReader ir = searcher.getIndexReader();\n      // our own SlowCompositeReader to check DocValues on disk w/o the UninvertingReader added by SolrIndexSearcher\n      final LeafReader leafReaderForCheckingDVs = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      \n      if (sf.indexed()) {\n        assertEquals(\"Field \" + field + \" should have point values\", 10, PointValues.size(ir, field));\n      } else {\n        assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n      }\n      if (ignoredField) {\n        assertTrue(\"Field \" + field + \" should not have docValues\",\n            DocValues.getSortedNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getSorted(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getBinary(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      } else {\n        if (sf.hasDocValues()) {\n          if (sf.multiValued()) {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getSortedNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          } else {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          }\n        } else {\n          expectThrows(IllegalStateException.class, ()->DocValues.getSortedNumeric(leafReaderForCheckingDVs, field));\n          expectThrows(IllegalStateException.class, ()->DocValues.getNumeric(leafReaderForCheckingDVs, field));\n        }\n        expectThrows(IllegalStateException.class, ()->DocValues.getSorted(leafReaderForCheckingDVs, field));\n        expectThrows(IllegalStateException.class, ()->DocValues.getBinary(leafReaderForCheckingDVs, field));\n      }\n      for (LeafReaderContext leave:ir.leaves()) {\n        LeafReader reader = leave.reader();\n        for (int i = 0; i < reader.numDocs(); i++) {\n          Document doc = reader.document(i);\n          if (sf.stored()) {\n            assertNotNull(\"Field \" + field + \" not found. Doc: \" + doc, doc.get(field));\n          } else {\n            assertNull(doc.get(field));\n          }\n        }\n      }\n      return null;\n    });\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  private void doTestInternals(String field, String[] values) throws IOException {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    IndexReader ir;\n    RefCounted<SolrIndexSearcher> ref = null;\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    boolean ignoredField = !(sf.indexed() || sf.stored() || sf.hasDocValues());\n    try {\n      ref = h.getCore().getSearcher();\n      SolrIndexSearcher searcher = ref.get(); \n      ir = searcher.getIndexReader();\n      // our own SlowCompositeReader to check DocValues on disk w/o the UninvertingReader added by SolrIndexSearcher\n      final LeafReader leafReaderForCheckingDVs = SlowCompositeReaderWrapper.wrap(searcher.getRawReader());\n      \n      if (sf.indexed()) {\n        assertEquals(\"Field \" + field + \" should have point values\", 10, PointValues.size(ir, field));\n      } else {\n        assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n      }\n      if (ignoredField) {\n        assertTrue(\"Field \" + field + \" should not have docValues\",\n            DocValues.getSortedNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getSorted(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(\"Field \" + field + \" should not have docValues\", \n            DocValues.getBinary(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      } else {\n        if (sf.hasDocValues()) {\n          if (sf.multiValued()) {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getSortedNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          } else {\n            assertFalse(\"Field \" + field + \" should have docValues\", \n                DocValues.getNumeric(leafReaderForCheckingDVs, field).nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n          }\n        } else {\n          expectThrows(IllegalStateException.class, ()->DocValues.getSortedNumeric(leafReaderForCheckingDVs, field));\n          expectThrows(IllegalStateException.class, ()->DocValues.getNumeric(leafReaderForCheckingDVs, field));\n        }\n        expectThrows(IllegalStateException.class, ()->DocValues.getSorted(leafReaderForCheckingDVs, field));\n        expectThrows(IllegalStateException.class, ()->DocValues.getBinary(leafReaderForCheckingDVs, field));\n      }\n      for (LeafReaderContext leave:ir.leaves()) {\n        LeafReader reader = leave.reader();\n        for (int i = 0; i < reader.numDocs(); i++) {\n          Document doc = reader.document(i);\n          if (sf.stored()) {\n            assertNotNull(\"Field \" + field + \" not found. Doc: \" + doc, doc.get(field));\n          } else {\n            assertNull(doc.get(field));\n          }\n        }\n      }\n    } finally {\n      ref.decref();\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ea0ee17420c742b9dc8481e32da40c9a45ff1a1":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["5ea0ee17420c742b9dc8481e32da40c9a45ff1a1"],"4ab833f2b623042c834458d4cbcad05073a93793":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["79900e89f08cc17c4bcf49789dd61a2236ee7840","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"5ea0ee17420c742b9dc8481e32da40c9a45ff1a1":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["5ea0ee17420c742b9dc8481e32da40c9a45ff1a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}