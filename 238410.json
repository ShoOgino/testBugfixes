{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3","date":1423125371,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\", \"lowerfilt1\", \"x\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\", \"lowerfilt1\", \"x\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\", \"lowerfilt1\", \"x\");\n    index(id, \"4\", \"lowerfilt\", \"ford\", \"lowerfilt1\", \"x\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\", \"lowerfilt1\", \"x\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\", \"lowerfilt1\", \"x\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\", \"lowerfilt1\", \"x\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\", \"lowerfilt1\", \"x\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\", \"lowerfilt1\", \"x\");\n    index(id, \"10\", \"lowerfilt\", \"blue\", \"lowerfilt1\", \"x\");\n    index(id, \"12\", \"lowerfilt\", \"glue\", \"lowerfilt1\", \"x\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\", \"lowerfilt1\", \"y\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\", \"lowerfilt1\", \"y\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    // let's query by specifying multiple mlt.fl as comma-separated values\n    QueryResponse response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1,lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    Map<String, Long> idVsMLTCount = new HashMap<>();\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      SolrDocumentList docList = (SolrDocumentList) entry.getValue();\n      idVsMLTCount.put(entry.getKey(), docList.getNumFound());\n    }\n\n    // let's query by specifying multiple mlt.fl as multiple request parameters\n    response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      String key = entry.getKey();\n      Long expected = idVsMLTCount.get(key);\n      Long actual = ((SolrDocumentList) entry.getValue()).getNumFound();\n      assertEquals(\"MLT mismatch for id=\" + key, expected, actual);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n  }\n\n","bugFix":["b38d50314a7281b1ef90bfb3bb0bc91a38f0078f","98ef9d9ecf768191e0c139463409e9297f8367de"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\", \"lowerfilt1\", \"x\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\", \"lowerfilt1\", \"x\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\", \"lowerfilt1\", \"x\");\n    index(id, \"4\", \"lowerfilt\", \"ford\", \"lowerfilt1\", \"x\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\", \"lowerfilt1\", \"x\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\", \"lowerfilt1\", \"x\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\", \"lowerfilt1\", \"x\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\", \"lowerfilt1\", \"x\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\", \"lowerfilt1\", \"x\");\n    index(id, \"10\", \"lowerfilt\", \"blue\", \"lowerfilt1\", \"x\");\n    index(id, \"12\", \"lowerfilt\", \"glue\", \"lowerfilt1\", \"x\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\", \"lowerfilt1\", \"y\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\", \"lowerfilt1\", \"y\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    // let's query by specifying multiple mlt.fl as comma-separated values\n    QueryResponse response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1,lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    Map<String, Long> idVsMLTCount = new HashMap<>();\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      SolrDocumentList docList = (SolrDocumentList) entry.getValue();\n      idVsMLTCount.put(entry.getKey(), docList.getNumFound());\n    }\n\n    // let's query by specifying multiple mlt.fl as multiple request parameters\n    response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      String key = entry.getKey();\n      Long expected = idVsMLTCount.get(key);\n      Long actual = ((SolrDocumentList) entry.getValue()).getNumFound();\n      assertEquals(\"MLT mismatch for id=\" + key, expected, actual);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\", \"lowerfilt1\", \"x\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\", \"lowerfilt1\", \"x\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\", \"lowerfilt1\", \"x\");\n    index(id, \"4\", \"lowerfilt\", \"ford\", \"lowerfilt1\", \"x\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\", \"lowerfilt1\", \"x\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\", \"lowerfilt1\", \"x\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\", \"lowerfilt1\", \"x\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\", \"lowerfilt1\", \"x\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\", \"lowerfilt1\", \"x\");\n    index(id, \"10\", \"lowerfilt\", \"blue\", \"lowerfilt1\", \"x\");\n    index(id, \"12\", \"lowerfilt\", \"glue\", \"lowerfilt1\", \"x\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\", \"lowerfilt1\", \"y\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\", \"lowerfilt1\", \"y\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    // let's query by specifying multiple mlt.fl as comma-separated values\n    QueryResponse response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1,lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    Map<String, Long> idVsMLTCount = new HashMap<>();\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      SolrDocumentList docList = (SolrDocumentList) entry.getValue();\n      idVsMLTCount.put(entry.getKey(), docList.getNumFound());\n    }\n\n    // let's query by specifying multiple mlt.fl as multiple request parameters\n    response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      String key = entry.getKey();\n      Long expected = idVsMLTCount.get(key);\n      Long actual = ((SolrDocumentList) entry.getValue()).getNumFound();\n      assertEquals(\"MLT mismatch for id=\" + key, expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\", \"lowerfilt1\", \"x\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\", \"lowerfilt1\", \"x\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\", \"lowerfilt1\", \"x\");\n    index(id, \"4\", \"lowerfilt\", \"ford\", \"lowerfilt1\", \"x\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\", \"lowerfilt1\", \"x\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\", \"lowerfilt1\", \"x\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\", \"lowerfilt1\", \"x\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\", \"lowerfilt1\", \"x\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\", \"lowerfilt1\", \"x\");\n    index(id, \"10\", \"lowerfilt\", \"blue\", \"lowerfilt1\", \"x\");\n    index(id, \"12\", \"lowerfilt\", \"glue\", \"lowerfilt1\", \"x\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\", \"lowerfilt1\", \"y\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\", \"lowerfilt1\", \"y\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    // let's query by specifying multiple mlt.fl as comma-separated values\n    QueryResponse response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1,lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    Map<String, Long> idVsMLTCount = new HashMap<>();\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      SolrDocumentList docList = (SolrDocumentList) entry.getValue();\n      idVsMLTCount.put(entry.getKey(), docList.getNumFound());\n    }\n\n    // let's query by specifying multiple mlt.fl as multiple request parameters\n    response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      String key = entry.getKey();\n      Long expected = idVsMLTCount.get(key);\n      Long actual = ((SolrDocumentList) entry.getValue()).getNumFound();\n      assertEquals(\"MLT mismatch for id=\" + key, expected, actual);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\", \"lowerfilt1\", \"x\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\", \"lowerfilt1\", \"x\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\", \"lowerfilt1\", \"x\");\n    index(id, \"4\", \"lowerfilt\", \"ford\", \"lowerfilt1\", \"x\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\", \"lowerfilt1\", \"x\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\", \"lowerfilt1\", \"x\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\", \"lowerfilt1\", \"x\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\", \"lowerfilt1\", \"x\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\", \"lowerfilt1\", \"x\");\n    index(id, \"10\", \"lowerfilt\", \"blue\", \"lowerfilt1\", \"x\");\n    index(id, \"12\", \"lowerfilt\", \"glue\", \"lowerfilt1\", \"x\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\", \"lowerfilt1\", \"y\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\", \"lowerfilt1\", \"y\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    // let's query by specifying multiple mlt.fl as comma-separated values\n    QueryResponse response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1,lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    Map<String, Long> idVsMLTCount = new HashMap<>();\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      SolrDocumentList docList = (SolrDocumentList) entry.getValue();\n      idVsMLTCount.put(entry.getKey(), docList.getNumFound());\n    }\n\n    // let's query by specifying multiple mlt.fl as multiple request parameters\n    response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      String key = entry.getKey();\n      Long expected = idVsMLTCount.get(key);\n      Long actual = ((SolrDocumentList) entry.getValue()).getNumFound();\n      assertEquals(\"MLT mismatch for id=\" + key, expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\", \"lowerfilt1\", \"x\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\", \"lowerfilt1\", \"x\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\", \"lowerfilt1\", \"x\");\n    index(id, \"4\", \"lowerfilt\", \"ford\", \"lowerfilt1\", \"x\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\", \"lowerfilt1\", \"x\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\", \"lowerfilt1\", \"x\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\", \"lowerfilt1\", \"x\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\", \"lowerfilt1\", \"x\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\", \"lowerfilt1\", \"x\");\n    index(id, \"10\", \"lowerfilt\", \"blue\", \"lowerfilt1\", \"x\");\n    index(id, \"12\", \"lowerfilt\", \"glue\", \"lowerfilt1\", \"x\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\", \"lowerfilt1\", \"y\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\", \"lowerfilt1\", \"y\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    // let's query by specifying multiple mlt.fl as comma-separated values\n    QueryResponse response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1,lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    Map<String, Long> idVsMLTCount = new HashMap<>();\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      SolrDocumentList docList = (SolrDocumentList) entry.getValue();\n      idVsMLTCount.put(entry.getKey(), docList.getNumFound());\n    }\n\n    // let's query by specifying multiple mlt.fl as multiple request parameters\n    response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      String key = entry.getKey();\n      Long expected = idVsMLTCount.get(key);\n      Long actual = ((SolrDocumentList) entry.getValue()).getNumFound();\n      assertEquals(\"MLT mismatch for id=\" + key, expected, actual);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\", \"lowerfilt1\", \"x\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\", \"lowerfilt1\", \"x\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\", \"lowerfilt1\", \"x\");\n    index(id, \"4\", \"lowerfilt\", \"ford\", \"lowerfilt1\", \"x\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\", \"lowerfilt1\", \"x\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\", \"lowerfilt1\", \"x\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\", \"lowerfilt1\", \"x\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\", \"lowerfilt1\", \"x\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\", \"lowerfilt1\", \"x\");\n    index(id, \"10\", \"lowerfilt\", \"blue\", \"lowerfilt1\", \"x\");\n    index(id, \"12\", \"lowerfilt\", \"glue\", \"lowerfilt1\", \"x\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\", \"lowerfilt1\", \"y\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\", \"lowerfilt1\", \"y\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    // let's query by specifying multiple mlt.fl as comma-separated values\n    QueryResponse response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1,lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    Map<String, Long> idVsMLTCount = new HashMap<>();\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      SolrDocumentList docList = (SolrDocumentList) entry.getValue();\n      idVsMLTCount.put(entry.getKey(), docList.getNumFound());\n    }\n\n    // let's query by specifying multiple mlt.fl as multiple request parameters\n    response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      String key = entry.getKey();\n      Long expected = idVsMLTCount.get(key);\n      Long actual = ((SolrDocumentList) entry.getValue()).getNumFound();\n      assertEquals(\"MLT mismatch for id=\" + key, expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\", \"lowerfilt1\", \"x\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\", \"lowerfilt1\", \"x\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\", \"lowerfilt1\", \"x\");\n    index(id, \"4\", \"lowerfilt\", \"ford\", \"lowerfilt1\", \"x\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\", \"lowerfilt1\", \"x\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\", \"lowerfilt1\", \"x\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\", \"lowerfilt1\", \"x\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\", \"lowerfilt1\", \"x\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\", \"lowerfilt1\", \"x\");\n    index(id, \"10\", \"lowerfilt\", \"blue\", \"lowerfilt1\", \"x\");\n    index(id, \"12\", \"lowerfilt\", \"glue\", \"lowerfilt1\", \"x\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\", \"lowerfilt1\", \"y\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\", \"lowerfilt1\", \"y\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    // let's query by specifying multiple mlt.fl as comma-separated values\n    QueryResponse response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1,lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    Map<String, Long> idVsMLTCount = new HashMap<>();\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      SolrDocumentList docList = (SolrDocumentList) entry.getValue();\n      idVsMLTCount.put(entry.getKey(), docList.getNumFound());\n    }\n\n    // let's query by specifying multiple mlt.fl as multiple request parameters\n    response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      String key = entry.getKey();\n      Long expected = idVsMLTCount.get(key);\n      Long actual = ((SolrDocumentList) entry.getValue()).getNumFound();\n      assertEquals(\"MLT mismatch for id=\" + key, expected, actual);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\", \"lowerfilt1\", \"x\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\", \"lowerfilt1\", \"x\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\", \"lowerfilt1\", \"x\");\n    index(id, \"4\", \"lowerfilt\", \"ford\", \"lowerfilt1\", \"x\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\", \"lowerfilt1\", \"x\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\", \"lowerfilt1\", \"x\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\", \"lowerfilt1\", \"x\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\", \"lowerfilt1\", \"x\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\", \"lowerfilt1\", \"x\");\n    index(id, \"10\", \"lowerfilt\", \"blue\", \"lowerfilt1\", \"x\");\n    index(id, \"12\", \"lowerfilt\", \"glue\", \"lowerfilt1\", \"x\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\", \"lowerfilt1\", \"y\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\", \"lowerfilt1\", \"y\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    // let's query by specifying multiple mlt.fl as comma-separated values\n    QueryResponse response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1,lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    Map<String, Long> idVsMLTCount = new HashMap<>();\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      SolrDocumentList docList = (SolrDocumentList) entry.getValue();\n      idVsMLTCount.put(entry.getKey(), docList.getNumFound());\n    }\n\n    // let's query by specifying multiple mlt.fl as multiple request parameters\n    response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      String key = entry.getKey();\n      Long expected = idVsMLTCount.get(key);\n      Long actual = ((SolrDocumentList) entry.getValue()).getNumFound();\n      assertEquals(\"MLT mismatch for id=\" + key, expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\", \"lowerfilt1\", \"x\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\", \"lowerfilt1\", \"x\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\", \"lowerfilt1\", \"x\");\n    index(id, \"4\", \"lowerfilt\", \"ford\", \"lowerfilt1\", \"x\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\", \"lowerfilt1\", \"x\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\", \"lowerfilt1\", \"x\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\", \"lowerfilt1\", \"x\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\", \"lowerfilt1\", \"x\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\", \"lowerfilt1\", \"x\");\n    index(id, \"10\", \"lowerfilt\", \"blue\", \"lowerfilt1\", \"x\");\n    index(id, \"12\", \"lowerfilt\", \"glue\", \"lowerfilt1\", \"x\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\", \"lowerfilt1\", \"y\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\", \"lowerfilt1\", \"y\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    // let's query by specifying multiple mlt.fl as comma-separated values\n    QueryResponse response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1,lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    Map<String, Long> idVsMLTCount = new HashMap<>();\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      SolrDocumentList docList = (SolrDocumentList) entry.getValue();\n      idVsMLTCount.put(entry.getKey(), docList.getNumFound());\n    }\n\n    // let's query by specifying multiple mlt.fl as multiple request parameters\n    response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      String key = entry.getKey();\n      Long expected = idVsMLTCount.get(key);\n      Long actual = ((SolrDocumentList) entry.getValue()).getNumFound();\n      assertEquals(\"MLT mismatch for id=\" + key, expected, actual);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\", \"lowerfilt1\", \"x\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\", \"lowerfilt1\", \"x\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\", \"lowerfilt1\", \"x\");\n    index(id, \"4\", \"lowerfilt\", \"ford\", \"lowerfilt1\", \"x\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\", \"lowerfilt1\", \"x\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\", \"lowerfilt1\", \"x\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\", \"lowerfilt1\", \"x\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\", \"lowerfilt1\", \"x\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\", \"lowerfilt1\", \"x\");\n    index(id, \"10\", \"lowerfilt\", \"blue\", \"lowerfilt1\", \"x\");\n    index(id, \"12\", \"lowerfilt\", \"glue\", \"lowerfilt1\", \"x\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\", \"lowerfilt1\", \"y\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\", \"lowerfilt1\", \"y\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    // let's query by specifying multiple mlt.fl as comma-separated values\n    QueryResponse response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1,lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    Map<String, Long> idVsMLTCount = new HashMap<>();\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      SolrDocumentList docList = (SolrDocumentList) entry.getValue();\n      idVsMLTCount.put(entry.getKey(), docList.getNumFound());\n    }\n\n    // let's query by specifying multiple mlt.fl as multiple request parameters\n    response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      String key = entry.getKey();\n      Long expected = idVsMLTCount.get(key);\n      Long actual = ((SolrDocumentList) entry.getValue()).getNumFound();\n      assertEquals(\"MLT mismatch for id=\" + key, expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedMLTComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  @SuppressWarnings({\"unchecked\"})\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\", \"lowerfilt1\", \"x\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\", \"lowerfilt1\", \"x\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\", \"lowerfilt1\", \"x\");\n    index(id, \"4\", \"lowerfilt\", \"ford\", \"lowerfilt1\", \"x\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\", \"lowerfilt1\", \"x\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\", \"lowerfilt1\", \"x\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\", \"lowerfilt1\", \"x\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\", \"lowerfilt1\", \"x\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\", \"lowerfilt1\", \"x\");\n    index(id, \"10\", \"lowerfilt\", \"blue\", \"lowerfilt1\", \"x\");\n    index(id, \"12\", \"lowerfilt\", \"glue\", \"lowerfilt1\", \"x\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\", \"lowerfilt1\", \"y\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\", \"lowerfilt1\", \"y\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    // let's query by specifying multiple mlt.fl as comma-separated values\n    QueryResponse response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1,lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    Map<String, Long> idVsMLTCount = new HashMap<>();\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      SolrDocumentList docList = (SolrDocumentList) entry.getValue();\n      idVsMLTCount.put(entry.getKey(), docList.getNumFound());\n    }\n\n    // let's query by specifying multiple mlt.fl as multiple request parameters\n    response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      String key = entry.getKey();\n      Long expected = idVsMLTCount.get(key);\n      Long actual = ((SolrDocumentList) entry.getValue()).getNumFound();\n      assertEquals(\"MLT mismatch for id=\" + key, expected, actual);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\", \"lowerfilt1\", \"x\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\", \"lowerfilt1\", \"x\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\", \"lowerfilt1\", \"x\");\n    index(id, \"4\", \"lowerfilt\", \"ford\", \"lowerfilt1\", \"x\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\", \"lowerfilt1\", \"x\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\", \"lowerfilt1\", \"x\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren moon or the moon and moon moon shine and the moon but moon was good foxes too\", \"lowerfilt1\", \"x\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\", \"lowerfilt1\", \"x\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy big and large brown dogs.\", \"lowerfilt1\", \"x\");\n    index(id, \"10\", \"lowerfilt\", \"blue\", \"lowerfilt1\", \"x\");\n    index(id, \"12\", \"lowerfilt\", \"glue\", \"lowerfilt1\", \"x\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"15\", \"lowerfilt\", \"The fat red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"16\", \"lowerfilt\", \"The slim red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped moon over the lazy brown dogs moon. Of course moon. Foxes and moon come back to the foxes and moon\", \"lowerfilt1\", \"y\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"19\", \"lowerfilt\", \"The hose red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"21\", \"lowerfilt\", \"The court red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"24\", \"lowerfilt\", \"The file red fox jumped over the lazy brown dogs.\", \"lowerfilt1\", \"y\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\", \"lowerfilt1\", \"y\");\n    \n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the mlt results\n    handle.put(\"response\", SKIP);\n    \n    // currently distrib mlt is sorting by score (even though it's not really comparable across shards)\n    // so it may not match the sort of single shard mlt\n    handle.put(\"17\", UNORDERED);\n    \n    query(\"q\", \"match_none\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    query(\"q\", \"lowerfilt:sonata\", \"mlt\", \"true\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    \n    handle.put(\"24\", UNORDERED);\n    handle.put(\"23\", UNORDERED);\n    handle.put(\"22\", UNORDERED);\n    handle.put(\"21\", UNORDERED);\n    handle.put(\"20\", UNORDERED);\n    handle.put(\"19\", UNORDERED);\n    handle.put(\"18\", UNORDERED);\n    handle.put(\"17\", UNORDERED);\n    handle.put(\"16\", UNORDERED);\n    handle.put(\"15\", UNORDERED);\n    handle.put(\"14\", UNORDERED);\n    handle.put(\"13\", UNORDERED);\n    handle.put(\"7\", UNORDERED);\n    \n    // keep in mind that MLT params influence stats that are calulated\n    // per shard - because of this, depending on params, distrib and single\n    // shard queries will not match.\n    \n    // because distrib and single node do not currently sort exactly the same,\n    // we ask for an mlt.count of 20 to ensure both include all results\n    \n    query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    query(\"q\", \"lowerfilt:the red fox\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    \n    query(\"q\", \"lowerfilt:blue moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 1,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n\n    // let's query by specifying multiple mlt.fl as comma-separated values\n    QueryResponse response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1,lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    Map<String, Long> idVsMLTCount = new HashMap<>();\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      SolrDocumentList docList = (SolrDocumentList) entry.getValue();\n      idVsMLTCount.put(entry.getKey(), docList.getNumFound());\n    }\n\n    // let's query by specifying multiple mlt.fl as multiple request parameters\n    response = query(\"q\", \"lowerfilt:moon\", \"fl\", id, MoreLikeThisParams.MIN_TERM_FREQ, 2,\n        MoreLikeThisParams.MIN_DOC_FREQ, 1, \"sort\", \"id_i1 desc\", \"mlt\", \"true\",\n        \"mlt.fl\", \"lowerfilt1\", \"mlt.fl\", \"lowerfilt\", \"qt\", requestHandlerName, \"shards.qt\",\n        requestHandlerName, \"mlt.count\", \"20\");\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    for (Map.Entry<String, Object> entry : moreLikeThis) {\n      String key = entry.getKey();\n      Long expected = idVsMLTCount.get(key);\n      Long actual = ((SolrDocumentList) entry.getValue()).getNumFound();\n      assertEquals(\"MLT mismatch for id=\" + key, expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["28288370235ed02234a64753cdbf0c6ec096304a"],"273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3":["abb23fcc2461782ab204e61213240feb77d355aa"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"28288370235ed02234a64753cdbf0c6ec096304a":["273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"]},"commit2Childs":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"abb23fcc2461782ab204e61213240feb77d355aa":["273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["e98520789adb1d5ad05afb4956eca0944a929688"],"28288370235ed02234a64753cdbf0c6ec096304a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}