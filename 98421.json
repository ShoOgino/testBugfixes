{"path":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat#writeLiveDocs(MutableBits,Directory,SegmentInfo,IOContext).mjava","commits":[{"id":"012ab4f9f96ebd12a6a9e44314cdb1a54171b83e","date":1327075235,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat#writeLiveDocs(MutableBits,Directory,SegmentInfo,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeLiveDocs(MutableBits bits, Directory dir, SegmentInfo info, IOContext context) throws IOException {\n    BitSet set = ((SimpleTextBits) bits).bits;\n    int size = bits.length();\n    BytesRef scratch = new BytesRef();\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(info.name, LIVEDOCS_EXTENSION, info.getDelGen());\n    IndexOutput out = null;\n    boolean success = false;\n    try {\n      out = dir.createOutput(fileName, context);\n      SimpleTextUtil.write(out, SIZE);\n      SimpleTextUtil.write(out, Integer.toString(size), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (int i = set.nextSetBit(0); i >= 0; i=set.nextSetBit(i + 1)) { \n        SimpleTextUtil.write(out, DOC);\n        SimpleTextUtil.write(out, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      \n      SimpleTextUtil.write(out, END);\n      SimpleTextUtil.writeNewline(out);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n        IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3df3d3a3cd2806a8405b2b8ecbb73d62fd2a60e4","date":1327162691,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat#writeLiveDocs(MutableBits,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat#writeLiveDocs(MutableBits,Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Override\n  public void writeLiveDocs(MutableBits bits, Directory dir, SegmentInfo info, IOContext context) throws IOException {\n    BitSet set = ((SimpleTextBits) bits).bits;\n    int size = bits.length();\n    BytesRef scratch = new BytesRef();\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(info.name, LIVEDOCS_EXTENSION, info.getDelGen());\n    IndexOutput out = null;\n    boolean success = false;\n    try {\n      out = dir.createOutput(fileName, context);\n      SimpleTextUtil.write(out, SIZE);\n      SimpleTextUtil.write(out, Integer.toString(size), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (int i = set.nextSetBit(0); i >= 0; i=set.nextSetBit(i + 1)) { \n        SimpleTextUtil.write(out, DOC);\n        SimpleTextUtil.write(out, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      \n      SimpleTextUtil.write(out, END);\n      SimpleTextUtil.writeNewline(out);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeLiveDocs(MutableBits bits, Directory dir, SegmentInfo info, IOContext context) throws IOException {\n    BitSet set = ((SimpleTextBits) bits).bits;\n    int size = bits.length();\n    BytesRef scratch = new BytesRef();\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(info.name, LIVEDOCS_EXTENSION, info.getDelGen());\n    IndexOutput out = null;\n    boolean success = false;\n    try {\n      out = dir.createOutput(fileName, context);\n      SimpleTextUtil.write(out, SIZE);\n      SimpleTextUtil.write(out, Integer.toString(size), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (int i = set.nextSetBit(0); i >= 0; i=set.nextSetBit(i + 1)) { \n        SimpleTextUtil.write(out, DOC);\n        SimpleTextUtil.write(out, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      \n      SimpleTextUtil.write(out, END);\n      SimpleTextUtil.writeNewline(out);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n        IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat#writeLiveDocs(MutableBits,Directory,SegmentInfo,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeLiveDocs(MutableBits bits, Directory dir, SegmentInfo info, IOContext context) throws IOException {\n    BitSet set = ((SimpleTextBits) bits).bits;\n    int size = bits.length();\n    BytesRef scratch = new BytesRef();\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(info.name, LIVEDOCS_EXTENSION, info.getDelGen());\n    IndexOutput out = null;\n    boolean success = false;\n    try {\n      out = dir.createOutput(fileName, context);\n      SimpleTextUtil.write(out, SIZE);\n      SimpleTextUtil.write(out, Integer.toString(size), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (int i = set.nextSetBit(0); i >= 0; i=set.nextSetBit(i + 1)) { \n        SimpleTextUtil.write(out, DOC);\n        SimpleTextUtil.write(out, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      \n      SimpleTextUtil.write(out, END);\n      SimpleTextUtil.writeNewline(out);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat#writeLiveDocs(MutableBits,Directory,SegmentInfo,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeLiveDocs(MutableBits bits, Directory dir, SegmentInfo info, IOContext context) throws IOException {\n    BitSet set = ((SimpleTextBits) bits).bits;\n    int size = bits.length();\n    BytesRef scratch = new BytesRef();\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(info.name, LIVEDOCS_EXTENSION, info.getDelGen());\n    IndexOutput out = null;\n    boolean success = false;\n    try {\n      out = dir.createOutput(fileName, context);\n      SimpleTextUtil.write(out, SIZE);\n      SimpleTextUtil.write(out, Integer.toString(size), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (int i = set.nextSetBit(0); i >= 0; i=set.nextSetBit(i + 1)) { \n        SimpleTextUtil.write(out, DOC);\n        SimpleTextUtil.write(out, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      \n      SimpleTextUtil.write(out, END);\n      SimpleTextUtil.writeNewline(out);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat#writeLiveDocs(MutableBits,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat#writeLiveDocs(MutableBits,Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Override\n  public void writeLiveDocs(MutableBits bits, Directory dir, SegmentInfo info, IOContext context) throws IOException {\n    BitSet set = ((SimpleTextBits) bits).bits;\n    int size = bits.length();\n    BytesRef scratch = new BytesRef();\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(info.name, LIVEDOCS_EXTENSION, info.getDelGen());\n    IndexOutput out = null;\n    boolean success = false;\n    try {\n      out = dir.createOutput(fileName, context);\n      SimpleTextUtil.write(out, SIZE);\n      SimpleTextUtil.write(out, Integer.toString(size), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (int i = set.nextSetBit(0); i >= 0; i=set.nextSetBit(i + 1)) { \n        SimpleTextUtil.write(out, DOC);\n        SimpleTextUtil.write(out, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      \n      SimpleTextUtil.write(out, END);\n      SimpleTextUtil.writeNewline(out);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeLiveDocs(MutableBits bits, Directory dir, SegmentInfo info, IOContext context) throws IOException {\n    BitSet set = ((SimpleTextBits) bits).bits;\n    int size = bits.length();\n    BytesRef scratch = new BytesRef();\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(info.name, LIVEDOCS_EXTENSION, info.getDelGen());\n    IndexOutput out = null;\n    boolean success = false;\n    try {\n      out = dir.createOutput(fileName, context);\n      SimpleTextUtil.write(out, SIZE);\n      SimpleTextUtil.write(out, Integer.toString(size), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (int i = set.nextSetBit(0); i >= 0; i=set.nextSetBit(i + 1)) { \n        SimpleTextUtil.write(out, DOC);\n        SimpleTextUtil.write(out, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      \n      SimpleTextUtil.write(out, END);\n      SimpleTextUtil.writeNewline(out);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"012ab4f9f96ebd12a6a9e44314cdb1a54171b83e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"3df3d3a3cd2806a8405b2b8ecbb73d62fd2a60e4":["012ab4f9f96ebd12a6a9e44314cdb1a54171b83e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3df3d3a3cd2806a8405b2b8ecbb73d62fd2a60e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"012ab4f9f96ebd12a6a9e44314cdb1a54171b83e":["3df3d3a3cd2806a8405b2b8ecbb73d62fd2a60e4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3df3d3a3cd2806a8405b2b8ecbb73d62fd2a60e4":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["012ab4f9f96ebd12a6a9e44314cdb1a54171b83e","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}