{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/MultiContentWriterRequest#detect(Object).mjava","commits":[{"id":"7b6c193737882b94fcb01749c75371bf7d7d4c93","date":1539067480,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/MultiContentWriterRequest#detect(Object).mjava","pathOld":"/dev/null","sourceNew":"  public static String detect(Object o) throws IOException {\n    Reader rdr = null;\n    byte[] bytes = null;\n    if (o instanceof byte[]) bytes = (byte[]) o;\n    else if (o instanceof ByteBuffer) bytes = ((ByteBuffer) o).array();\n    rdr = new InputStreamReader(new ByteArrayInputStream(bytes));\n    String detectedContentType = null;\n    for (;;) {\n      int ch = rdr.read();\n      if (Character.isWhitespace(ch)) {\n        continue;\n      }\n      int nextChar = -1;\n      // first non-whitespace chars\n      if (ch == '#'                         // single line comment\n          || (ch == '/' && ((nextChar = rdr.read()) == '/' || nextChar == '*'))  // single line or multi-line comment\n          || (ch == '{' || ch == '[')       // start of JSON object\n          )\n      {\n        detectedContentType = \"application/json\";\n      } else if (ch == '<') {\n        detectedContentType = \"text/xml\";\n      }\n      break;\n    }\n    return detectedContentType;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32b4172207658551cbc6af4a4c544b37a4214569","date":1539087429,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/MultiContentWriterRequest#detect(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/MultiContentWriterRequest#detect(Object).mjava","sourceNew":"  public static String detect(Object o) throws IOException {\n    Reader rdr = null;\n    byte[] bytes = null;\n    if (o instanceof byte[]) bytes = (byte[]) o;\n    else if (o instanceof ByteBuffer) bytes = ((ByteBuffer) o).array();\n    rdr = new InputStreamReader(new ByteArrayInputStream(bytes), UTF_8);\n    String detectedContentType = null;\n    for (;;) {\n      int ch = rdr.read();\n      if (Character.isWhitespace(ch)) {\n        continue;\n      }\n      int nextChar = -1;\n      // first non-whitespace chars\n      if (ch == '#'                         // single line comment\n          || (ch == '/' && ((nextChar = rdr.read()) == '/' || nextChar == '*'))  // single line or multi-line comment\n          || (ch == '{' || ch == '[')       // start of JSON object\n          )\n      {\n        detectedContentType = \"application/json\";\n      } else if (ch == '<') {\n        detectedContentType = \"text/xml\";\n      }\n      break;\n    }\n    return detectedContentType;\n  }\n\n","sourceOld":"  public static String detect(Object o) throws IOException {\n    Reader rdr = null;\n    byte[] bytes = null;\n    if (o instanceof byte[]) bytes = (byte[]) o;\n    else if (o instanceof ByteBuffer) bytes = ((ByteBuffer) o).array();\n    rdr = new InputStreamReader(new ByteArrayInputStream(bytes));\n    String detectedContentType = null;\n    for (;;) {\n      int ch = rdr.read();\n      if (Character.isWhitespace(ch)) {\n        continue;\n      }\n      int nextChar = -1;\n      // first non-whitespace chars\n      if (ch == '#'                         // single line comment\n          || (ch == '/' && ((nextChar = rdr.read()) == '/' || nextChar == '*'))  // single line or multi-line comment\n          || (ch == '{' || ch == '[')       // start of JSON object\n          )\n      {\n        detectedContentType = \"application/json\";\n      } else if (ch == '<') {\n        detectedContentType = \"text/xml\";\n      }\n      break;\n    }\n    return detectedContentType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b6c193737882b94fcb01749c75371bf7d7d4c93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32b4172207658551cbc6af4a4c544b37a4214569":["7b6c193737882b94fcb01749c75371bf7d7d4c93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["32b4172207658551cbc6af4a4c544b37a4214569"]},"commit2Childs":{"7b6c193737882b94fcb01749c75371bf7d7d4c93":["32b4172207658551cbc6af4a4c544b37a4214569"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b6c193737882b94fcb01749c75371bf7d7d4c93"],"32b4172207658551cbc6af4a4c544b37a4214569":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}