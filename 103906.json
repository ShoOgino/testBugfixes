{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","commits":[{"id":"76f7066a3ec6e68e257b01dd46edbbdd3530690a","date":1358805020,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"/dev/null","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      field.fieldInfo = fieldInfo;\n      //System.out.println(\"  field=\" + fieldName);\n\n      // nocommit hack hack hack!!:\n      DocValuesType dvType = ext.equals(\"len\") ? DocValuesType.NUMERIC : fieldInfo.getDocValuesType();\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33b99b59f252327c7208ef3c400d3b71b08ebeed","date":1358805858,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      field.fieldInfo = fieldInfo;\n      //System.out.println(\"  field=\" + fieldName);\n\n      // nocommit hack hack hack!!:\n      DocValuesType dvType = ext.equals(\"len\") ? DocValuesType.NUMERIC : fieldInfo.getDocValuesType();\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"/dev/null","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf56f19cb16e01bf1fff28f2f9c2852990087fc4","date":1361056159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    // System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" file=\" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    //System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" ext=\" + ext);\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n      FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n      assert fieldInfo != null;\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    // System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" file=\" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.get().equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.get().utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.get().utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.get().utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    // System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" file=\" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","bugFix":["76f7066a3ec6e68e257b01dd46edbbdd3530690a","33b99b59f252327c7208ef3c400d3b71b08ebeed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    // System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" file=\" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.get().equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.get().utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.get().utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != DocValuesType.NO;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.get().utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    // System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" file=\" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.get().equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.get().utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.get().utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != null;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.get().utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    // System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" file=\" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.get().equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.get().utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.get().utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != DocValuesType.NONE;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.get().utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    // System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" file=\" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.get().equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.get().utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.get().utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != DocValuesType.NO;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.get().utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    // System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" file=\" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.maxDoc();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.get().equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.get().utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.get().utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != DocValuesType.NONE;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.get().utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    // System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" file=\" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.get().equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.get().utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.get().utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != DocValuesType.NONE;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.get().utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    // System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" file=\" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.maxDoc();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.get().equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.get().utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.get().utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != DocValuesType.NONE;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.get().utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    // System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" file=\" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.get().equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.get().utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.get().utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != DocValuesType.NONE;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.get().utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","sourceNew":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    // System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" file=\" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.maxDoc();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.get().equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.get().utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.get().utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != DocValuesType.NONE;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.get().utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","sourceOld":"  public SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n    // System.out.println(\"dir=\" + state.directory + \" seg=\" + state.segmentInfo.name + \" file=\" + IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext));\n    data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n    maxDoc = state.segmentInfo.getDocCount();\n    while(true) {\n      readLine();\n      //System.out.println(\"READ field=\" + scratch.utf8ToString());\n      if (scratch.get().equals(END)) {\n        break;\n      }\n      assert startsWith(FIELD) : scratch.get().utf8ToString();\n      String fieldName = stripPrefix(FIELD);\n      //System.out.println(\"  field=\" + fieldName);\n\n      OneField field = new OneField();\n      fields.put(fieldName, field);\n\n      readLine();\n      assert startsWith(TYPE) : scratch.get().utf8ToString();\n\n      DocValuesType dvType = DocValuesType.valueOf(stripPrefix(TYPE));\n      assert dvType != DocValuesType.NONE;\n      if (dvType == DocValuesType.NUMERIC) {\n        readLine();\n        assert startsWith(MINVALUE): \"got \" + scratch.get().utf8ToString() + \" field=\" + fieldName + \" ext=\" + ext;\n        field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (1+field.pattern.length()+2) * maxDoc);\n      } else if (dvType == DocValuesType.BINARY) {\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength+2) * maxDoc);\n      } else if (dvType == DocValuesType.SORTED || dvType == DocValuesType.SORTED_SET) {\n        readLine();\n        assert startsWith(NUMVALUES);\n        field.numValues = Long.parseLong(stripPrefix(NUMVALUES));\n        readLine();\n        assert startsWith(MAXLENGTH);\n        field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n        readLine();\n        assert startsWith(PATTERN);\n        field.pattern = stripPrefix(PATTERN);\n        readLine();\n        assert startsWith(ORDPATTERN);\n        field.ordPattern = stripPrefix(ORDPATTERN);\n        field.dataStartFilePointer = data.getFilePointer();\n        data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n      } else {\n        throw new AssertionError();\n      }\n    }\n\n    // We should only be called from above if at least one\n    // field has DVs:\n    assert !fields.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"33b99b59f252327c7208ef3c400d3b71b08ebeed":["76f7066a3ec6e68e257b01dd46edbbdd3530690a"],"76f7066a3ec6e68e257b01dd46edbbdd3530690a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["ddbb72a33557d2b5bc22ee95daf3281c43560502","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"b0267c69e2456a3477a1ad785723f2135da3117e":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"bf56f19cb16e01bf1fff28f2f9c2852990087fc4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["ddbb72a33557d2b5bc22ee95daf3281c43560502","9faa42f41b6adb98daf009cf99a4ee239189e469"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","bf56f19cb16e01bf1fff28f2f9c2852990087fc4"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f95ce1375367b92d411a06175eab3915fe93c6bc","b0267c69e2456a3477a1ad785723f2135da3117e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33b99b59f252327c7208ef3c400d3b71b08ebeed"],"b06445ae1731e049327712db0454e5643ca9b7fe":["f95ce1375367b92d411a06175eab3915fe93c6bc","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b0267c69e2456a3477a1ad785723f2135da3117e"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"33b99b59f252327c7208ef3c400d3b71b08ebeed":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"76f7066a3ec6e68e257b01dd46edbbdd3530690a":["33b99b59f252327c7208ef3c400d3b71b08ebeed"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"bf56f19cb16e01bf1fff28f2f9c2852990087fc4":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["e072d0b1fc19e0533d8ce432eed245196bca6fde","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["bf56f19cb16e01bf1fff28f2f9c2852990087fc4","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["76f7066a3ec6e68e257b01dd46edbbdd3530690a","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}