{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      omitTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      if (omitTF) {\n        freq = 1;\n      }\n      storePayloads = fieldInfo.storePayloads;\n      this.liveDocs = liveDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n\n      skipped = false;\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      omitTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      if (omitTF) {\n        freq = 1;\n      }\n      storePayloads = fieldInfo.storePayloads;\n      this.liveDocs = liveDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n\n      skipped = false;\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed947d41796fd2096684c439e8a9b69aac940cf","date":1321538339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      omitTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      if (omitTF) {\n        freq = 1;\n      }\n      storePayloads = fieldInfo.storePayloads;\n      this.liveDocs = liveDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n\n      skipped = false;\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      omitTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      if (omitTF) {\n        freq = 1;\n      }\n      storePayloads = fieldInfo.storePayloads;\n      this.liveDocs = liveDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n\n      skipped = false;\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      omitTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      if (omitTF) {\n        freq = 1;\n        Arrays.fill(freqs, 1);\n      }\n      \n      storePayloads = fieldInfo.storePayloads;\n      this.liveDocs = liveDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      omitTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      if (omitTF) {\n        freq = 1;\n      }\n      storePayloads = fieldInfo.storePayloads;\n      this.liveDocs = liveDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n\n      skipped = false;\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      indexOmitsTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.storePayloads;\n      this.liveDocs = liveDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      omitTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      if (omitTF) {\n        freq = 1;\n        Arrays.fill(freqs, 1);\n      }\n      \n      storePayloads = fieldInfo.storePayloads;\n      this.liveDocs = liveDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      indexOmitsTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.storePayloads;\n      this.liveDocs = liveDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      omitTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      if (omitTF) {\n        freq = 1;\n        Arrays.fill(freqs, 1);\n      }\n      \n      storePayloads = fieldInfo.storePayloads;\n      this.liveDocs = liveDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1","date":1324025015,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.storePayloads;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      indexOmitsTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.storePayloads;\n      this.liveDocs = liveDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["7b91922b55d15444d554721b352861d028eb8278"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["0445bcd8433e331f296f5502fc089b336cbac3a6","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}