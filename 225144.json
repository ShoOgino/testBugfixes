{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","commits":[{"id":"0eff89b16ebd0046c839c5d02ee44500be5c7886","date":1355766557,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    System.setProperty(\"solr.xml.persist\", \"true\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    System.setProperty(\"solr.xml.persist\", \"true\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a82d855abc18f7ee3e1ec359d8f256c8c86977a","date":1381347960,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","sourceNew":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    if (secondConfigSet ) {\n      String zkHost = zkServer.getZkHost();\n      String zkAddress = zkServer.getZkAddress();\n      SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n      zkClient.makePath(\"/solr\", false, true);\n      zkClient.close();\n\n      zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n      File solrhome = new File(TEST_HOME());\n      \n      // for now, always upload the config and schema to the canonical names\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.xml\", \"solrconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"schema.xml\", \"schema.xml\");\n\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"stopwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"protwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"currency.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"open-exchange-rates.json\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"old_synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"elevate.xml\");\n      zkClient.close();\n    }\n    \n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    System.setProperty(\"solr.xml.persist\", \"true\");\n  }\n\n","sourceOld":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    System.setProperty(\"solr.xml.persist\", \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcb5de84d260a8919bf0f2d4d180df543a2ad07a","date":1381378233,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","sourceNew":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    useJettyDataDir = false;\n    \n    oldStyleSolrXml = random().nextBoolean();\n    if (oldStyleSolrXml) {\n      System.err.println(\"Using old style solr.xml\");\n    } else {\n      System.err.println(\"Using new style solr.xml\");\n    }\n    if (secondConfigSet ) {\n      String zkHost = zkServer.getZkHost();\n      String zkAddress = zkServer.getZkAddress();\n      SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n      zkClient.makePath(\"/solr\", false, true);\n      zkClient.close();\n\n      zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n      File solrhome = new File(TEST_HOME());\n      \n      // for now, always upload the config and schema to the canonical names\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.xml\", \"solrconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"schema.xml\", \"schema.xml\");\n\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"stopwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"protwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"currency.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"open-exchange-rates.json\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"old_synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"elevate.xml\");\n      zkClient.close();\n    }\n    \n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    System.setProperty(\"solr.xml.persist\", \"true\");\n  }\n\n","sourceOld":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    if (secondConfigSet ) {\n      String zkHost = zkServer.getZkHost();\n      String zkAddress = zkServer.getZkAddress();\n      SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n      zkClient.makePath(\"/solr\", false, true);\n      zkClient.close();\n\n      zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n      File solrhome = new File(TEST_HOME());\n      \n      // for now, always upload the config and schema to the canonical names\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.xml\", \"solrconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"schema.xml\", \"schema.xml\");\n\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"stopwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"protwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"currency.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"open-exchange-rates.json\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"old_synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"elevate.xml\");\n      zkClient.close();\n    }\n    \n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    System.setProperty(\"solr.xml.persist\", \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3a46663789411cdf016145a96a40cf861798ae3","date":1395119088,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","sourceNew":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    useJettyDataDir = false;\n    \n    oldStyleSolrXml = random().nextBoolean();\n    if (oldStyleSolrXml) {\n      System.err.println(\"Using old style solr.xml\");\n    } else {\n      System.err.println(\"Using new style solr.xml\");\n    }\n    if (secondConfigSet ) {\n      String zkHost = zkServer.getZkHost();\n      String zkAddress = zkServer.getZkAddress();\n      SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n      zkClient.makePath(\"/solr\", false, true);\n      zkClient.close();\n\n      zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n      File solrhome = new File(TEST_HOME());\n      \n      // for now, always upload the config and schema to the canonical names\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.xml\", \"solrconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"schema.xml\", \"schema.xml\");\n\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"stopwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"protwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"currency.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"open-exchange-rates.json\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"old_synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"elevate.xml\");\n      zkClient.close();\n    }\n    \n    System.setProperty(NUM_SLICES, Integer.toString(sliceCount));\n    System.setProperty(\"solr.xml.persist\", \"true\");\n  }\n\n","sourceOld":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    useJettyDataDir = false;\n    \n    oldStyleSolrXml = random().nextBoolean();\n    if (oldStyleSolrXml) {\n      System.err.println(\"Using old style solr.xml\");\n    } else {\n      System.err.println(\"Using new style solr.xml\");\n    }\n    if (secondConfigSet ) {\n      String zkHost = zkServer.getZkHost();\n      String zkAddress = zkServer.getZkAddress();\n      SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n      zkClient.makePath(\"/solr\", false, true);\n      zkClient.close();\n\n      zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n      File solrhome = new File(TEST_HOME());\n      \n      // for now, always upload the config and schema to the canonical names\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.xml\", \"solrconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"schema.xml\", \"schema.xml\");\n\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"stopwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"protwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"currency.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"open-exchange-rates.json\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"old_synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"elevate.xml\");\n      zkClient.close();\n    }\n    \n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    System.setProperty(\"solr.xml.persist\", \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"963b0a9b072593721af39e1d9b815fba17e88e7f","date":1395120846,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","sourceNew":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    useJettyDataDir = false;\n    \n    oldStyleSolrXml = random().nextBoolean();\n    if (oldStyleSolrXml) {\n      System.err.println(\"Using old style solr.xml\");\n    } else {\n      System.err.println(\"Using new style solr.xml\");\n    }\n    if (secondConfigSet ) {\n      String zkHost = zkServer.getZkHost();\n      String zkAddress = zkServer.getZkAddress();\n      SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n      zkClient.makePath(\"/solr\", false, true);\n      zkClient.close();\n\n      zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n      File solrhome = new File(TEST_HOME());\n      \n      // for now, always upload the config and schema to the canonical names\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.xml\", \"solrconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"schema.xml\", \"schema.xml\");\n\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"stopwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"protwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"currency.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"open-exchange-rates.json\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"old_synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"elevate.xml\");\n      zkClient.close();\n    }\n    \n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    System.setProperty(\"solr.xml.persist\", \"true\");\n  }\n\n","sourceOld":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    useJettyDataDir = false;\n    \n    oldStyleSolrXml = random().nextBoolean();\n    if (oldStyleSolrXml) {\n      System.err.println(\"Using old style solr.xml\");\n    } else {\n      System.err.println(\"Using new style solr.xml\");\n    }\n    if (secondConfigSet ) {\n      String zkHost = zkServer.getZkHost();\n      String zkAddress = zkServer.getZkAddress();\n      SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n      zkClient.makePath(\"/solr\", false, true);\n      zkClient.close();\n\n      zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n      File solrhome = new File(TEST_HOME());\n      \n      // for now, always upload the config and schema to the canonical names\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.xml\", \"solrconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"schema.xml\", \"schema.xml\");\n\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"stopwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"protwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"currency.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"open-exchange-rates.json\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"old_synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"elevate.xml\");\n      zkClient.close();\n    }\n    \n    System.setProperty(NUM_SLICES, Integer.toString(sliceCount));\n    System.setProperty(\"solr.xml.persist\", \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09b27950df257fe510dc26996204186904daef69","date":1408969108,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","sourceNew":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    useJettyDataDir = false;\n    \n    oldStyleSolrXml = random().nextBoolean();\n    if (oldStyleSolrXml) {\n      System.err.println(\"Using old style solr.xml\");\n    } else {\n      System.err.println(\"Using new style solr.xml\");\n    }\n    if (secondConfigSet ) {\n      String zkHost = zkServer.getZkHost();\n      String zkAddress = zkServer.getZkAddress();\n      SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n      zkClient.makePath(\"/solr\", false, true);\n      zkClient.close();\n\n      zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n      File solrhome = new File(TEST_HOME());\n      \n      // for now, always upload the config and schema to the canonical names\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, getCloudSolrConfig(), \"solrconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"schema.xml\", \"schema.xml\");\n\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"stopwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"protwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"currency.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"open-exchange-rates.json\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"old_synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"elevate.xml\");\n      zkClient.close();\n    }\n    \n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    System.setProperty(\"solr.xml.persist\", \"true\");\n  }\n\n","sourceOld":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    useJettyDataDir = false;\n    \n    oldStyleSolrXml = random().nextBoolean();\n    if (oldStyleSolrXml) {\n      System.err.println(\"Using old style solr.xml\");\n    } else {\n      System.err.println(\"Using new style solr.xml\");\n    }\n    if (secondConfigSet ) {\n      String zkHost = zkServer.getZkHost();\n      String zkAddress = zkServer.getZkAddress();\n      SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n      zkClient.makePath(\"/solr\", false, true);\n      zkClient.close();\n\n      zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n      File solrhome = new File(TEST_HOME());\n      \n      // for now, always upload the config and schema to the canonical names\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.xml\", \"solrconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"schema.xml\", \"schema.xml\");\n\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"stopwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"protwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"currency.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"open-exchange-rates.json\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"old_synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"elevate.xml\");\n      zkClient.close();\n    }\n    \n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    System.setProperty(\"solr.xml.persist\", \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","sourceNew":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    useJettyDataDir = false;\n\n    if (secondConfigSet ) {\n      String zkHost = zkServer.getZkHost();\n      String zkAddress = zkServer.getZkAddress();\n      SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n      zkClient.makePath(\"/solr\", false, true);\n      zkClient.close();\n\n      zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n      File solrhome = new File(TEST_HOME());\n      \n      // for now, always upload the config and schema to the canonical names\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, getCloudSolrConfig(), \"solrconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"schema.xml\", \"schema.xml\");\n\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"stopwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"protwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"currency.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"open-exchange-rates.json\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"old_synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"elevate.xml\");\n      zkClient.close();\n    }\n    \n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n\n  }\n\n","sourceOld":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    useJettyDataDir = false;\n    \n    oldStyleSolrXml = random().nextBoolean();\n    if (oldStyleSolrXml) {\n      System.err.println(\"Using old style solr.xml\");\n    } else {\n      System.err.println(\"Using new style solr.xml\");\n    }\n    if (secondConfigSet ) {\n      String zkHost = zkServer.getZkHost();\n      String zkAddress = zkServer.getZkAddress();\n      SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n      zkClient.makePath(\"/solr\", false, true);\n      zkClient.close();\n\n      zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n      File solrhome = new File(TEST_HOME());\n      \n      // for now, always upload the config and schema to the canonical names\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, getCloudSolrConfig(), \"solrconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"schema.xml\", \"schema.xml\");\n\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"stopwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"protwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"currency.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"open-exchange-rates.json\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"old_synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"elevate.xml\");\n      zkClient.close();\n    }\n    \n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    System.setProperty(\"solr.xml.persist\", \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#distribSetUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    \n    useJettyDataDir = false;\n\n    if (secondConfigSet ) {\n      String zkHost = zkServer.getZkHost();\n      String zkAddress = zkServer.getZkAddress();\n      SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n      zkClient.makePath(\"/solr\", false, true);\n      zkClient.close();\n\n      zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n      File solrhome = new File(TEST_HOME());\n      \n      // for now, always upload the config and schema to the canonical names\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, getCloudSolrConfig(), \"solrconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"schema.xml\", \"schema.xml\");\n\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"stopwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"protwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"currency.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"open-exchange-rates.json\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"old_synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"elevate.xml\");\n      zkClient.close();\n    }\n    \n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n\n  }\n\n","sourceOld":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    useJettyDataDir = false;\n\n    if (secondConfigSet ) {\n      String zkHost = zkServer.getZkHost();\n      String zkAddress = zkServer.getZkAddress();\n      SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n      zkClient.makePath(\"/solr\", false, true);\n      zkClient.close();\n\n      zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n      File solrhome = new File(TEST_HOME());\n      \n      // for now, always upload the config and schema to the canonical names\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, getCloudSolrConfig(), \"solrconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"schema.xml\", \"schema.xml\");\n\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"stopwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"protwords.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"currency.xml\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"open-exchange-rates.json\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"old_synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"synonyms.txt\");\n      AbstractZkTestCase.putConfig(\"conf2\", zkClient, solrhome, \"elevate.xml\");\n      zkClient.close();\n    }\n    \n    System.setProperty(\"numShards\", Integer.toString(sliceCount));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"963b0a9b072593721af39e1d9b815fba17e88e7f":["d3a46663789411cdf016145a96a40cf861798ae3"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"dcb5de84d260a8919bf0f2d4d180df543a2ad07a":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"d3a46663789411cdf016145a96a40cf861798ae3":["dcb5de84d260a8919bf0f2d4d180df543a2ad07a"],"abb23fcc2461782ab204e61213240feb77d355aa":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"09b27950df257fe510dc26996204186904daef69":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["09b27950df257fe510dc26996204186904daef69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["0eff89b16ebd0046c839c5d02ee44500be5c7886"]},"commit2Childs":{"963b0a9b072593721af39e1d9b815fba17e88e7f":["09b27950df257fe510dc26996204186904daef69"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"dcb5de84d260a8919bf0f2d4d180df543a2ad07a":["d3a46663789411cdf016145a96a40cf861798ae3"],"d3a46663789411cdf016145a96a40cf861798ae3":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09b27950df257fe510dc26996204186904daef69":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["abb23fcc2461782ab204e61213240feb77d355aa"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["dcb5de84d260a8919bf0f2d4d180df543a2ad07a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}