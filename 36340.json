{"path":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","sourceNew":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","sourceOld":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c6939c02640b94d1bf6d450ec81236a35acce0d","date":1275435666,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","sourceNew":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    System.out.println(\"HANDLE \" + exc);\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","sourceOld":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7baf21dd9c88e35afc51c717bd3f68cc3b1657","date":1276249863,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","sourceNew":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","sourceOld":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    System.out.println(\"HANDLE \" + exc);\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","sourceNew":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","sourceOld":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    System.out.println(\"HANDLE \" + exc);\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","sourceNew":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","sourceOld":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c6939c02640b94d1bf6d450ec81236a35acce0d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3a7baf21dd9c88e35afc51c717bd3f68cc3b1657"],"3a7baf21dd9c88e35afc51c717bd3f68cc3b1657":["2c6939c02640b94d1bf6d450ec81236a35acce0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["2c6939c02640b94d1bf6d450ec81236a35acce0d","3a7baf21dd9c88e35afc51c717bd3f68cc3b1657"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2c6939c02640b94d1bf6d450ec81236a35acce0d":["3a7baf21dd9c88e35afc51c717bd3f68cc3b1657","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7baf21dd9c88e35afc51c717bd3f68cc3b1657":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2c6939c02640b94d1bf6d450ec81236a35acce0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}