{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","commits":[{"id":"22c400c38732e4cee017b09622fb10e5c55b04b8","date":1334921975,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/BasicHttpSolrServerTest#testConnectionRefused().mjava","sourceNew":"  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + unusedPort\n        + \"/solr\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assertTrue(e.getMessage().contains(\"refused\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + unusedPort\n        + \"/solr\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assertTrue(e.getMessage().contains(\"refused\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2425308ebcd91b538a601df94ae1551ccaab2bb","date":1340702883,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","sourceNew":"  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + unusedPort\n        + \"/solr\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assertTrue(e.getMessage().contains(\"refused\"));\n    }\n    server.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + unusedPort\n        + \"/solr\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assertTrue(e.getMessage().contains(\"refused\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","sourceNew":"  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + unusedPort\n        + \"/solr\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assertTrue(e.getMessage().contains(\"refused\"));\n    }\n    server.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + unusedPort\n        + \"/solr\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assertTrue(e.getMessage().contains(\"refused\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de810f9548d4d2ed106366c11154c19d99a0c82","date":1356569337,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","sourceNew":"  // what is this actually testing? this test WILL randomly fail.\n  // not a good unit test!\n  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + unusedPort\n        + \"/solr\");\n    server.setConnectionTimeout(500);\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assumeFalse(\"blackholed!\", e.getMessage().contains(\"IOException occured when talking to server\"));\n      assertTrue(e.getMessage().contains(\"refused\"));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + unusedPort\n        + \"/solr\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assertTrue(e.getMessage().contains(\"refused\"));\n    }\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","sourceNew":"  // what is this actually testing? this test WILL randomly fail.\n  // not a good unit test!\n  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + unusedPort\n        + \"/solr\");\n    server.setConnectionTimeout(500);\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assumeFalse(\"blackholed!\", e.getMessage().contains(\"IOException occured when talking to server\"));\n      assertTrue(e.getMessage().contains(\"refused\"));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + unusedPort\n        + \"/solr\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assertTrue(e.getMessage().contains(\"refused\"));\n    }\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","sourceNew":"  // what is this actually testing? this test WILL randomly fail.\n  // not a good unit test!\n  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(\"http\" + (isSSLMode() ? \"s\" : \"\") + \"://127.0.0.1:\" + unusedPort\n        + \"/solr\");\n    server.setConnectionTimeout(500);\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assumeFalse(\"blackholed!\", e.getMessage().contains(\"IOException occured when talking to server\"));\n      assertTrue(e.getMessage().contains(\"refused\"));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  // what is this actually testing? this test WILL randomly fail.\n  // not a good unit test!\n  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + unusedPort\n        + \"/solr\");\n    server.setConnectionTimeout(500);\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assumeFalse(\"blackholed!\", e.getMessage().contains(\"IOException occured when talking to server\"));\n      assertTrue(e.getMessage().contains(\"refused\"));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ec897f0eb789ef9536a8130d1cdb9337ef108a","date":1392217884,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","sourceNew":"  // what is this actually testing? this test WILL randomly fail.\n  // not a good unit test!\n  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(buildUrl(unusedPort, \"/solr\"));\n    server.setConnectionTimeout(500);\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assumeFalse(\"blackholed!\", e.getMessage().contains(\"IOException occured when talking to server\"));\n      assertTrue(e.getMessage().contains(\"refused\"));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  // what is this actually testing? this test WILL randomly fail.\n  // not a good unit test!\n  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(\"http\" + (isSSLMode() ? \"s\" : \"\") + \"://127.0.0.1:\" + unusedPort\n        + \"/solr\");\n    server.setConnectionTimeout(500);\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assumeFalse(\"blackholed!\", e.getMessage().contains(\"IOException occured when talking to server\"));\n      assertTrue(e.getMessage().contains(\"refused\"));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f20219c73997dabfdc3d201dc3032dfdeefd002b","date":1392854781,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testConnectionRefused().mjava","sourceNew":null,"sourceOld":"  // what is this actually testing? this test WILL randomly fail.\n  // not a good unit test!\n  @Test\n  public void testConnectionRefused() throws MalformedURLException {\n    int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port\n                                       // it might not be unused anymore\n    HttpSolrServer server = new HttpSolrServer(buildUrl(unusedPort, \"/solr\"));\n    server.setConnectionTimeout(500);\n    SolrQuery q = new SolrQuery(\"*:*\");\n    try {\n      QueryResponse response = server.query(q);\n      fail(\"Should have thrown an exception.\");\n    } catch (SolrServerException e) {\n      assumeFalse(\"blackholed!\", e.getMessage().contains(\"IOException occured when talking to server\"));\n      assertTrue(e.getMessage().contains(\"refused\"));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["f2425308ebcd91b538a601df94ae1551ccaab2bb","5de810f9548d4d2ed106366c11154c19d99a0c82"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["5de810f9548d4d2ed106366c11154c19d99a0c82"],"22c400c38732e4cee017b09622fb10e5c55b04b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["22c400c38732e4cee017b09622fb10e5c55b04b8","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f20219c73997dabfdc3d201dc3032dfdeefd002b":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"5de810f9548d4d2ed106366c11154c19d99a0c82":["f2425308ebcd91b538a601df94ae1551ccaab2bb"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["22c400c38732e4cee017b09622fb10e5c55b04b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f20219c73997dabfdc3d201dc3032dfdeefd002b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"22c400c38732e4cee017b09622fb10e5c55b04b8":["fe33227f6805edab2036cbb80645cc4e2d1fa424","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22c400c38732e4cee017b09622fb10e5c55b04b8"],"f20219c73997dabfdc3d201dc3032dfdeefd002b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5de810f9548d4d2ed106366c11154c19d99a0c82":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["f20219c73997dabfdc3d201dc3032dfdeefd002b"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","5de810f9548d4d2ed106366c11154c19d99a0c82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}