{"path":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#load(String).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#load(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads a resource from storage; the default implementation makes\n   * the assumption that the data is stored as UTF-8 encoded text, \n   * such as JSON. This method should be overridden if that assumption\n   * is invalid. \n   */\n  public Object load(String resourceId) throws IOException {\n    String storedResourceId = getStoredResourceId(resourceId);\n    \n    log.info(\"Reading {} using {}\", storedResourceId, storageIO.getInfo());\n    \n    InputStream inputStream = storageIO.openInputStream(storedResourceId);\n    if (inputStream == null) {\n      return null;\n    }\n    Object parsed = null;\n    InputStreamReader reader = null;\n    try {\n      reader = new InputStreamReader(inputStream, UTF_8);\n      parsed = parseText(reader, resourceId);\n    } finally {\n      if (reader != null) {\n        try {\n          reader.close();\n        } catch (Exception ignore){}\n      }\n    }\n    \n    String objectType = (parsed != null) ? parsed.getClass().getSimpleName() : \"null\"; \n    log.info(String.format(Locale.ROOT, \"Loaded %s at path %s using %s\",\n                                        objectType, storedResourceId, storageIO.getInfo()));\n    \n    return parsed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d62172dd2fc1195c7e475550ac394a9948a18ae","date":1474974102,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#load(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#load(String).mjava","sourceNew":"  /**\n   * Loads a resource from storage; the default implementation makes\n   * the assumption that the data is stored as UTF-8 encoded text, \n   * such as JSON. This method should be overridden if that assumption\n   * is invalid. \n   */\n  public Object load(String resourceId) throws IOException {\n    String storedResourceId = getStoredResourceId(resourceId);\n    \n    log.debug(\"Reading {} using {}\", storedResourceId, storageIO.getInfo());\n    \n    InputStream inputStream = storageIO.openInputStream(storedResourceId);\n    if (inputStream == null) {\n      return null;\n    }\n    Object parsed = null;\n    InputStreamReader reader = null;\n    try {\n      reader = new InputStreamReader(inputStream, UTF_8);\n      parsed = parseText(reader, resourceId);\n    } finally {\n      if (reader != null) {\n        try {\n          reader.close();\n        } catch (Exception ignore){}\n      }\n    }\n    \n    String objectType = (parsed != null) ? parsed.getClass().getSimpleName() : \"null\"; \n    log.info(String.format(Locale.ROOT, \"Loaded %s at path %s using %s\",\n                                        objectType, storedResourceId, storageIO.getInfo()));\n    \n    return parsed;\n  }\n\n","sourceOld":"  /**\n   * Loads a resource from storage; the default implementation makes\n   * the assumption that the data is stored as UTF-8 encoded text, \n   * such as JSON. This method should be overridden if that assumption\n   * is invalid. \n   */\n  public Object load(String resourceId) throws IOException {\n    String storedResourceId = getStoredResourceId(resourceId);\n    \n    log.info(\"Reading {} using {}\", storedResourceId, storageIO.getInfo());\n    \n    InputStream inputStream = storageIO.openInputStream(storedResourceId);\n    if (inputStream == null) {\n      return null;\n    }\n    Object parsed = null;\n    InputStreamReader reader = null;\n    try {\n      reader = new InputStreamReader(inputStream, UTF_8);\n      parsed = parseText(reader, resourceId);\n    } finally {\n      if (reader != null) {\n        try {\n          reader.close();\n        } catch (Exception ignore){}\n      }\n    }\n    \n    String objectType = (parsed != null) ? parsed.getClass().getSimpleName() : \"null\"; \n    log.info(String.format(Locale.ROOT, \"Loaded %s at path %s using %s\",\n                                        objectType, storedResourceId, storageIO.getInfo()));\n    \n    return parsed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#load(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#load(String).mjava","sourceNew":"  /**\n   * Loads a resource from storage; the default implementation makes\n   * the assumption that the data is stored as UTF-8 encoded text, \n   * such as JSON. This method should be overridden if that assumption\n   * is invalid. \n   */\n  public Object load(String resourceId) throws IOException {\n    String storedResourceId = getStoredResourceId(resourceId);\n    \n    log.debug(\"Reading {} using {}\", storedResourceId, storageIO.getInfo());\n    \n    InputStream inputStream = storageIO.openInputStream(storedResourceId);\n    if (inputStream == null) {\n      return null;\n    }\n    Object parsed = null;\n    InputStreamReader reader = null;\n    try {\n      reader = new InputStreamReader(inputStream, UTF_8);\n      parsed = parseText(reader, resourceId);\n    } finally {\n      if (reader != null) {\n        try {\n          reader.close();\n        } catch (Exception ignore){}\n      }\n    }\n    \n    String objectType = (parsed != null) ? parsed.getClass().getSimpleName() : \"null\"; \n    log.info(String.format(Locale.ROOT, \"Loaded %s at path %s using %s\",\n                                        objectType, storedResourceId, storageIO.getInfo()));\n    \n    return parsed;\n  }\n\n","sourceOld":"  /**\n   * Loads a resource from storage; the default implementation makes\n   * the assumption that the data is stored as UTF-8 encoded text, \n   * such as JSON. This method should be overridden if that assumption\n   * is invalid. \n   */\n  public Object load(String resourceId) throws IOException {\n    String storedResourceId = getStoredResourceId(resourceId);\n    \n    log.info(\"Reading {} using {}\", storedResourceId, storageIO.getInfo());\n    \n    InputStream inputStream = storageIO.openInputStream(storedResourceId);\n    if (inputStream == null) {\n      return null;\n    }\n    Object parsed = null;\n    InputStreamReader reader = null;\n    try {\n      reader = new InputStreamReader(inputStream, UTF_8);\n      parsed = parseText(reader, resourceId);\n    } finally {\n      if (reader != null) {\n        try {\n          reader.close();\n        } catch (Exception ignore){}\n      }\n    }\n    \n    String objectType = (parsed != null) ? parsed.getClass().getSimpleName() : \"null\"; \n    log.info(String.format(Locale.ROOT, \"Loaded %s at path %s using %s\",\n                                        objectType, storedResourceId, storageIO.getInfo()));\n    \n    return parsed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#load(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#load(String).mjava","sourceNew":"  /**\n   * Loads a resource from storage; the default implementation makes\n   * the assumption that the data is stored as UTF-8 encoded text, \n   * such as JSON. This method should be overridden if that assumption\n   * is invalid. \n   */\n  public Object load(String resourceId) throws IOException {\n    String storedResourceId = getStoredResourceId(resourceId);\n    \n    log.debug(\"Reading {} using {}\", storedResourceId, storageIO.getInfo());\n    \n    InputStream inputStream = storageIO.openInputStream(storedResourceId);\n    if (inputStream == null) {\n      return null;\n    }\n    Object parsed = null;\n    InputStreamReader reader = null;\n    try {\n      reader = new InputStreamReader(inputStream, UTF_8);\n      parsed = parseText(reader, resourceId);\n    } finally {\n      if (reader != null) {\n        try {\n          reader.close();\n        } catch (Exception ignore){}\n      }\n    }\n    \n    String objectType = (parsed != null) ? parsed.getClass().getSimpleName() : \"null\"; \n    log.info(String.format(Locale.ROOT, \"Loaded %s at path %s using %s\",\n                                        objectType, storedResourceId, storageIO.getInfo()));\n    \n    return parsed;\n  }\n\n","sourceOld":"  /**\n   * Loads a resource from storage; the default implementation makes\n   * the assumption that the data is stored as UTF-8 encoded text, \n   * such as JSON. This method should be overridden if that assumption\n   * is invalid. \n   */\n  public Object load(String resourceId) throws IOException {\n    String storedResourceId = getStoredResourceId(resourceId);\n    \n    log.info(\"Reading {} using {}\", storedResourceId, storageIO.getInfo());\n    \n    InputStream inputStream = storageIO.openInputStream(storedResourceId);\n    if (inputStream == null) {\n      return null;\n    }\n    Object parsed = null;\n    InputStreamReader reader = null;\n    try {\n      reader = new InputStreamReader(inputStream, UTF_8);\n      parsed = parseText(reader, resourceId);\n    } finally {\n      if (reader != null) {\n        try {\n          reader.close();\n        } catch (Exception ignore){}\n      }\n    }\n    \n    String objectType = (parsed != null) ? parsed.getClass().getSimpleName() : \"null\"; \n    log.info(String.format(Locale.ROOT, \"Loaded %s at path %s using %s\",\n                                        objectType, storedResourceId, storageIO.getInfo()));\n    \n    return parsed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d1071f88e3697a2eb3ed682c527f5c35859bad0","date":1565425271,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#load(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#load(String).mjava","sourceNew":"  /**\n   * Loads a resource from storage; the default implementation makes\n   * the assumption that the data is stored as UTF-8 encoded text, \n   * such as JSON. This method should be overridden if that assumption\n   * is invalid. \n   */\n  public Object load(String resourceId) throws IOException {\n    String storedResourceId = getStoredResourceId(resourceId);\n    \n    log.debug(\"Reading {} using {}\", storedResourceId, storageIO.getInfo());\n    \n    InputStream inputStream = storageIO.openInputStream(storedResourceId);\n    if (inputStream == null) {\n      return null;\n    }\n    Object parsed;\n    try (InputStreamReader reader = new InputStreamReader(inputStream, UTF_8)) {\n      parsed = parseText(reader, resourceId);\n    }\n    \n    String objectType = (parsed != null) ? parsed.getClass().getSimpleName() : \"null\"; \n    log.info(String.format(Locale.ROOT, \"Loaded %s at path %s using %s\",\n                                        objectType, storedResourceId, storageIO.getInfo()));\n    \n    return parsed;\n  }\n\n","sourceOld":"  /**\n   * Loads a resource from storage; the default implementation makes\n   * the assumption that the data is stored as UTF-8 encoded text, \n   * such as JSON. This method should be overridden if that assumption\n   * is invalid. \n   */\n  public Object load(String resourceId) throws IOException {\n    String storedResourceId = getStoredResourceId(resourceId);\n    \n    log.debug(\"Reading {} using {}\", storedResourceId, storageIO.getInfo());\n    \n    InputStream inputStream = storageIO.openInputStream(storedResourceId);\n    if (inputStream == null) {\n      return null;\n    }\n    Object parsed = null;\n    InputStreamReader reader = null;\n    try {\n      reader = new InputStreamReader(inputStream, UTF_8);\n      parsed = parseText(reader, resourceId);\n    } finally {\n      if (reader != null) {\n        try {\n          reader.close();\n        } catch (Exception ignore){}\n      }\n    }\n    \n    String objectType = (parsed != null) ? parsed.getClass().getSimpleName() : \"null\"; \n    log.info(String.format(Locale.ROOT, \"Loaded %s at path %s using %s\",\n                                        objectType, storedResourceId, storageIO.getInfo()));\n    \n    return parsed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#load(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#load(String).mjava","sourceNew":"  /**\n   * Loads a resource from storage; the default implementation makes\n   * the assumption that the data is stored as UTF-8 encoded text, \n   * such as JSON. This method should be overridden if that assumption\n   * is invalid. \n   */\n  public Object load(String resourceId) throws IOException {\n    String storedResourceId = getStoredResourceId(resourceId);\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Reading {} using {}\", storedResourceId, storageIO.getInfo());\n    }\n    \n    InputStream inputStream = storageIO.openInputStream(storedResourceId);\n    if (inputStream == null) {\n      return null;\n    }\n    Object parsed;\n    try (InputStreamReader reader = new InputStreamReader(inputStream, UTF_8)) {\n      parsed = parseText(reader, resourceId);\n    }\n    \n    String objectType = (parsed != null) ? parsed.getClass().getSimpleName() : \"null\";\n    if (log.isInfoEnabled()) {\n      log.info(String.format(Locale.ROOT, \"Loaded %s at path %s using %s\",\n          objectType, storedResourceId, storageIO.getInfo()));\n    }\n    \n    return parsed;\n  }\n\n","sourceOld":"  /**\n   * Loads a resource from storage; the default implementation makes\n   * the assumption that the data is stored as UTF-8 encoded text, \n   * such as JSON. This method should be overridden if that assumption\n   * is invalid. \n   */\n  public Object load(String resourceId) throws IOException {\n    String storedResourceId = getStoredResourceId(resourceId);\n    \n    log.debug(\"Reading {} using {}\", storedResourceId, storageIO.getInfo());\n    \n    InputStream inputStream = storageIO.openInputStream(storedResourceId);\n    if (inputStream == null) {\n      return null;\n    }\n    Object parsed;\n    try (InputStreamReader reader = new InputStreamReader(inputStream, UTF_8)) {\n      parsed = parseText(reader, resourceId);\n    }\n    \n    String objectType = (parsed != null) ? parsed.getClass().getSimpleName() : \"null\"; \n    log.info(String.format(Locale.ROOT, \"Loaded %s at path %s using %s\",\n                                        objectType, storedResourceId, storageIO.getInfo()));\n    \n    return parsed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d62172dd2fc1195c7e475550ac394a9948a18ae":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"140be51d03394488536f4aacedace29f9b318347":["0d1071f88e3697a2eb3ed682c527f5c35859bad0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d","0d62172dd2fc1195c7e475550ac394a9948a18ae"],"0d1071f88e3697a2eb3ed682c527f5c35859bad0":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"0d62172dd2fc1195c7e475550ac394a9948a18ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["0d62172dd2fc1195c7e475550ac394a9948a18ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0d1071f88e3697a2eb3ed682c527f5c35859bad0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0d1071f88e3697a2eb3ed682c527f5c35859bad0":["140be51d03394488536f4aacedace29f9b318347"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}