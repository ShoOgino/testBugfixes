{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/FastTaxonomyFacetCounts#count(List[MatchingDocs]).mjava","commits":[{"id":"798b82b2c9877fae10a0a7d2025c05cac832bda2","date":1384710991,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FastTaxonomyFacetCounts#count(List[MatchingDocs]).mjava","pathOld":"/dev/null","sourceNew":"  private final void count(List<MatchingDocs> matchingDocs) throws IOException {\n    //System.out.println(\"count matchingDocs=\" + matchingDocs + \" facetsField=\" + facetsFieldName);\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(facetsFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      BytesRef scratch = new BytesRef();\n      //System.out.println(\"count seg=\" + hits.context.reader());\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        //System.out.println(\"  doc=\" + doc);\n        dv.get(doc, scratch);\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int ord = 0;\n        int offset = scratch.offset;\n        int prev = 0;\n        while (offset < end) {\n          byte b = bytes[offset++];\n          if (b >= 0) {\n            prev = ord = ((ord << 7) | b) + prev;\n            assert ord < counts.length: \"ord=\" + ord + \" vs maxOrd=\" + counts.length;\n            ++counts[ord];\n            ord = 0;\n          } else {\n            ord = (ord << 7) | (b & 0x7F);\n          }\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : facetsConfig.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // facetsConfig but never indexed:\n        if (dimRootOrd > 0) {\n          counts[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18edd2e3f5560087a37442fa424cbbed7c295ebc","date":1384813900,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FastTaxonomyFacetCounts#count(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FastTaxonomyFacetCounts#count(List[MatchingDocs]).mjava","sourceNew":"  private final void count(List<MatchingDocs> matchingDocs) throws IOException {\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(indexFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      BytesRef scratch = new BytesRef();\n      //System.out.println(\"count seg=\" + hits.context.reader());\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        //System.out.println(\"  doc=\" + doc);\n        dv.get(doc, scratch);\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int ord = 0;\n        int offset = scratch.offset;\n        int prev = 0;\n        while (offset < end) {\n          byte b = bytes[offset++];\n          if (b >= 0) {\n            prev = ord = ((ord << 7) | b) + prev;\n            assert ord < counts.length: \"ord=\" + ord + \" vs maxOrd=\" + counts.length;\n            ++counts[ord];\n            ord = 0;\n          } else {\n            ord = (ord << 7) | (b & 0x7F);\n          }\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          counts[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private final void count(List<MatchingDocs> matchingDocs) throws IOException {\n    //System.out.println(\"count matchingDocs=\" + matchingDocs + \" facetsField=\" + facetsFieldName);\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(facetsFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      BytesRef scratch = new BytesRef();\n      //System.out.println(\"count seg=\" + hits.context.reader());\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        //System.out.println(\"  doc=\" + doc);\n        dv.get(doc, scratch);\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int ord = 0;\n        int offset = scratch.offset;\n        int prev = 0;\n        while (offset < end) {\n          byte b = bytes[offset++];\n          if (b >= 0) {\n            prev = ord = ((ord << 7) | b) + prev;\n            assert ord < counts.length: \"ord=\" + ord + \" vs maxOrd=\" + counts.length;\n            ++counts[ord];\n            ord = 0;\n          } else {\n            ord = (ord << 7) | (b & 0x7F);\n          }\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : facetsConfig.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // facetsConfig but never indexed:\n        if (dimRootOrd > 0) {\n          counts[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f5022544a8fc895776356d1b35a4b46d05945c","date":1385063323,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FastTaxonomyFacetCounts#count(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FastTaxonomyFacetCounts#count(List[MatchingDocs]).mjava","sourceNew":"  private final void count(List<MatchingDocs> matchingDocs) throws IOException {\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(indexFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      BytesRef scratch = new BytesRef();\n      //System.out.println(\"count seg=\" + hits.context.reader());\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        //System.out.println(\"  doc=\" + doc);\n        dv.get(doc, scratch);\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int ord = 0;\n        int offset = scratch.offset;\n        int prev = 0;\n        while (offset < end) {\n          byte b = bytes[offset++];\n          if (b >= 0) {\n            prev = ord = ((ord << 7) | b) + prev;\n            assert ord < counts.length: \"ord=\" + ord + \" vs maxOrd=\" + counts.length;\n            //System.out.println(\"    ord=\" + ord);\n            ++counts[ord];\n            ord = 0;\n          } else {\n            ord = (ord << 7) | (b & 0x7F);\n          }\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          counts[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private final void count(List<MatchingDocs> matchingDocs) throws IOException {\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(indexFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      BytesRef scratch = new BytesRef();\n      //System.out.println(\"count seg=\" + hits.context.reader());\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        //System.out.println(\"  doc=\" + doc);\n        dv.get(doc, scratch);\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int ord = 0;\n        int offset = scratch.offset;\n        int prev = 0;\n        while (offset < end) {\n          byte b = bytes[offset++];\n          if (b >= 0) {\n            prev = ord = ((ord << 7) | b) + prev;\n            assert ord < counts.length: \"ord=\" + ord + \" vs maxOrd=\" + counts.length;\n            ++counts[ord];\n            ord = 0;\n          } else {\n            ord = (ord << 7) | (b & 0x7F);\n          }\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          counts[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FastTaxonomyFacetCounts#count(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FastTaxonomyFacetCounts#count(List[MatchingDocs]).mjava","sourceNew":"  private final void count(List<MatchingDocs> matchingDocs) throws IOException {\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(indexFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      BytesRef scratch = new BytesRef();\n      //System.out.println(\"count seg=\" + hits.context.reader());\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        //System.out.println(\"  doc=\" + doc);\n        dv.get(doc, scratch);\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int ord = 0;\n        int offset = scratch.offset;\n        int prev = 0;\n        while (offset < end) {\n          byte b = bytes[offset++];\n          if (b >= 0) {\n            prev = ord = ((ord << 7) | b) + prev;\n            assert ord < counts.length: \"ord=\" + ord + \" vs maxOrd=\" + counts.length;\n            //System.out.println(\"    ord=\" + ord);\n            ++counts[ord];\n            ord = 0;\n          } else {\n            ord = (ord << 7) | (b & 0x7F);\n          }\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          counts[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private final void count(List<MatchingDocs> matchingDocs) throws IOException {\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(indexFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      BytesRef scratch = new BytesRef();\n      //System.out.println(\"count seg=\" + hits.context.reader());\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        //System.out.println(\"  doc=\" + doc);\n        dv.get(doc, scratch);\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int ord = 0;\n        int offset = scratch.offset;\n        int prev = 0;\n        while (offset < end) {\n          byte b = bytes[offset++];\n          if (b >= 0) {\n            prev = ord = ((ord << 7) | b) + prev;\n            assert ord < counts.length: \"ord=\" + ord + \" vs maxOrd=\" + counts.length;\n            //System.out.println(\"    ord=\" + ord);\n            ++counts[ord];\n            ord = 0;\n          } else {\n            ord = (ord << 7) | (b & 0x7F);\n          }\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          counts[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19f5022544a8fc895776356d1b35a4b46d05945c":["18edd2e3f5560087a37442fa424cbbed7c295ebc"],"18edd2e3f5560087a37442fa424cbbed7c295ebc":["798b82b2c9877fae10a0a7d2025c05cac832bda2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"798b82b2c9877fae10a0a7d2025c05cac832bda2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"21d36d0db865f7b84026b447bec653469a6e66df":["19f5022544a8fc895776356d1b35a4b46d05945c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"19f5022544a8fc895776356d1b35a4b46d05945c":["21d36d0db865f7b84026b447bec653469a6e66df"],"18edd2e3f5560087a37442fa424cbbed7c295ebc":["19f5022544a8fc895776356d1b35a4b46d05945c"],"798b82b2c9877fae10a0a7d2025c05cac832bda2":["18edd2e3f5560087a37442fa424cbbed7c295ebc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["798b82b2c9877fae10a0a7d2025c05cac832bda2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}