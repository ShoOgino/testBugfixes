{"path":"lucene/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","commits":[{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    IndexReader open = new SlowMultiReaderWrapper(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","5a3b1d1827232fee926b12cd22842daa4e39cd68"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"386d1b0dcb065f1bfc494b1407cb41c536b95485","date":1327848512,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    IndexReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    IndexReader open = new SlowMultiReaderWrapper(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af906d697b0a05f75caf94b03a28adb76579c66","date":1327856985,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    AtomicIndexReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    IndexReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    AtomicIndexReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    IndexReader open = new SlowMultiReaderWrapper(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5af906d697b0a05f75caf94b03a28adb76579c66":["386d1b0dcb065f1bfc494b1407cb41c536b95485"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5af906d697b0a05f75caf94b03a28adb76579c66"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9e8d5a6ffbfa3405d234a87c833741eabed98d13","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5af906d697b0a05f75caf94b03a28adb76579c66":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["386d1b0dcb065f1bfc494b1407cb41c536b95485","5cab9a86bd67202d20b6adc463008c8e982b070a"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["5af906d697b0a05f75caf94b03a28adb76579c66"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}