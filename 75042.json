{"path":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder#readDictionaryFile(String,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder#readDictionaryFile(String,String).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder#readDictionaryFile(String,String).mjava","sourceNew":"  public UnknownDictionaryWriter readDictionaryFile(String filename, String encoding)\n      throws IOException {\n    UnknownDictionaryWriter dictionary = new UnknownDictionaryWriter(5 * 1024 * 1024);\n    \n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(encoding);\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    dictionary.put(CSVUtil.parse(NGRAM_DICTIONARY_ENTRY));\n    \n    List<String[]> lines = new ArrayList<String[]>();\n    String line = null;\n    while ((line = lineReader.readLine()) != null) {\n      // note: unk.def only has 10 fields, it simplifies the writer to just append empty reading and pronunciation,\n      // even though the unknown dictionary returns hardcoded null here.\n      final String[] parsed = CSVUtil.parse(line + \",*,*\"); // Probably we don't need to validate entry\n      lines.add(parsed);\n    }\n    \n    Collections.sort(lines, new Comparator<String[]>() {\n      public int compare(String[] left, String[] right) {\n        int leftId = CharacterDefinition.lookupCharacterClass(left[0]);\n        int rightId = CharacterDefinition.lookupCharacterClass(right[0]);\n        return leftId - rightId;\n      }\n    });\n    \n    for (String[] entry : lines) {\n      dictionary.put(entry);\n    }\n    \n    return dictionary;\n  }\n\n","sourceOld":"  public UnknownDictionaryWriter readDictionaryFile(String filename, String encoding)\n      throws IOException {\n    UnknownDictionaryWriter dictionary = new UnknownDictionaryWriter(5 * 1024 * 1024);\n    \n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(encoding);\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    dictionary.put(CSVUtil.parse(NGRAM_DICTIONARY_ENTRY));\n    \n    List<String[]> lines = new ArrayList<String[]>();\n    String line = null;\n    while ((line = lineReader.readLine()) != null) {\n      // note: unk.def only has 10 fields, it simplifies the writer to just append empty reading and pronunciation,\n      // even though the unknown dictionary returns hardcoded null here.\n      final String[] parsed = CSVUtil.parse(line + \",*,*\"); // Probably we don't need to validate entry\n      lines.add(parsed);\n    }\n    \n    Collections.sort(lines, new Comparator<String[]>() {\n      public int compare(String[] left, String[] right) {\n        int leftId = CharacterDefinition.lookupCharacterClass(left[0]);\n        int rightId = CharacterDefinition.lookupCharacterClass(right[0]);\n        return leftId - rightId;\n      }\n    });\n    \n    for (String[] entry : lines) {\n      dictionary.put(entry);\n    }\n    \n    return dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder#readDictionaryFile(String,String).mjava","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder#readDictionaryFile(String,String).mjava","sourceNew":"  public UnknownDictionaryWriter readDictionaryFile(String filename, String encoding)\n      throws IOException {\n    UnknownDictionaryWriter dictionary = new UnknownDictionaryWriter(5 * 1024 * 1024);\n    \n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(encoding);\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    dictionary.put(CSVUtil.parse(NGRAM_DICTIONARY_ENTRY));\n    \n    List<String[]> lines = new ArrayList<>();\n    String line = null;\n    while ((line = lineReader.readLine()) != null) {\n      // note: unk.def only has 10 fields, it simplifies the writer to just append empty reading and pronunciation,\n      // even though the unknown dictionary returns hardcoded null here.\n      final String[] parsed = CSVUtil.parse(line + \",*,*\"); // Probably we don't need to validate entry\n      lines.add(parsed);\n    }\n    \n    Collections.sort(lines, new Comparator<String[]>() {\n      public int compare(String[] left, String[] right) {\n        int leftId = CharacterDefinition.lookupCharacterClass(left[0]);\n        int rightId = CharacterDefinition.lookupCharacterClass(right[0]);\n        return leftId - rightId;\n      }\n    });\n    \n    for (String[] entry : lines) {\n      dictionary.put(entry);\n    }\n    \n    return dictionary;\n  }\n\n","sourceOld":"  public UnknownDictionaryWriter readDictionaryFile(String filename, String encoding)\n      throws IOException {\n    UnknownDictionaryWriter dictionary = new UnknownDictionaryWriter(5 * 1024 * 1024);\n    \n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(encoding);\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    dictionary.put(CSVUtil.parse(NGRAM_DICTIONARY_ENTRY));\n    \n    List<String[]> lines = new ArrayList<String[]>();\n    String line = null;\n    while ((line = lineReader.readLine()) != null) {\n      // note: unk.def only has 10 fields, it simplifies the writer to just append empty reading and pronunciation,\n      // even though the unknown dictionary returns hardcoded null here.\n      final String[] parsed = CSVUtil.parse(line + \",*,*\"); // Probably we don't need to validate entry\n      lines.add(parsed);\n    }\n    \n    Collections.sort(lines, new Comparator<String[]>() {\n      public int compare(String[] left, String[] right) {\n        int leftId = CharacterDefinition.lookupCharacterClass(left[0]);\n        int rightId = CharacterDefinition.lookupCharacterClass(right[0]);\n        return leftId - rightId;\n      }\n    });\n    \n    for (String[] entry : lines) {\n      dictionary.put(entry);\n    }\n    \n    return dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05feb7eb5e91cb64742ce32b2ca3f02433530446","date":1561602840,"type":4,"author":"Michael Sokolov","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder#readDictionaryFile(String,String).mjava","sourceNew":null,"sourceOld":"  public UnknownDictionaryWriter readDictionaryFile(String filename, String encoding)\n      throws IOException {\n    UnknownDictionaryWriter dictionary = new UnknownDictionaryWriter(5 * 1024 * 1024);\n    \n    FileInputStream inputStream = new FileInputStream(filename);\n    Charset cs = Charset.forName(encoding);\n    CharsetDecoder decoder = cs.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    dictionary.put(CSVUtil.parse(NGRAM_DICTIONARY_ENTRY));\n    \n    List<String[]> lines = new ArrayList<>();\n    String line = null;\n    while ((line = lineReader.readLine()) != null) {\n      // note: unk.def only has 10 fields, it simplifies the writer to just append empty reading and pronunciation,\n      // even though the unknown dictionary returns hardcoded null here.\n      final String[] parsed = CSVUtil.parse(line + \",*,*\"); // Probably we don't need to validate entry\n      lines.add(parsed);\n    }\n    \n    Collections.sort(lines, new Comparator<String[]>() {\n      public int compare(String[] left, String[] right) {\n        int leftId = CharacterDefinition.lookupCharacterClass(left[0]);\n        int rightId = CharacterDefinition.lookupCharacterClass(right[0]);\n        return leftId - rightId;\n      }\n    });\n    \n    for (String[] entry : lines) {\n      dictionary.put(entry);\n    }\n    \n    return dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05feb7eb5e91cb64742ce32b2ca3f02433530446"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["05feb7eb5e91cb64742ce32b2ca3f02433530446"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}