{"path":"src/test/org/apache/solr/util/TestCharArrayMap#testMethods().mjava","commits":[{"id":"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac","date":1201149698,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestCharArrayMap#testMethods().mjava","pathOld":"/dev/null","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(2,false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n    assertEquals(cm, hm);\n    hm.put(\"baz\", 3);\n    assertFalse(hm.equals(cm));\n    assertFalse(cm.equals(hm));\n    assertTrue(cm.equals(cm));\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n\n    Iterator<Map.Entry<String,Integer>> iter1 = cm.entrySet().iterator();\n    int n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<String,Integer> entry = iter1.next();\n      String key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(hm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.clear();\n    assertEquals(0, cm.size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/TestCharArrayMap#testMethods().mjava","pathOld":"src/test/org/apache/solr/util/TestCharArrayMap#testMethods().mjava","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(2,false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n    assertEquals(cm, hm);\n    hm.put(\"baz\", 3);\n    assertFalse(hm.equals(cm));\n    assertFalse(cm.equals(hm));\n    assertTrue(cm.equals(cm));\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n\n    Iterator<Map.Entry<String,Integer>> iter1 = cm.entrySet().iterator();\n    int n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<String,Integer> entry = iter1.next();\n      String key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(hm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.clear();\n    assertEquals(0, cm.size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(2,false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n    assertEquals(cm, hm);\n    hm.put(\"baz\", 3);\n    assertFalse(hm.equals(cm));\n    assertFalse(cm.equals(hm));\n    assertTrue(cm.equals(cm));\n    cm.putAll(hm);\n    assertEquals(hm, cm);\n\n    Iterator<Map.Entry<String,Integer>> iter1 = cm.entrySet().iterator();\n    int n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<String,Integer> entry = iter1.next();\n      String key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(hm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.clear();\n    assertEquals(0, cm.size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}