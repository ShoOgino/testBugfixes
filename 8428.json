{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","commits":[{"id":"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","date":1492510959,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"conditions:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    session.applyRules();\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    System.out.printf(Utils.toJSONString(Utils.getDeepCopy(session.toMap(new LinkedHashMap<>()), 8)));\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    Map operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"conditions:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    session.applyRules();\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    System.out.printf(Utils.toJSONString(Utils.getDeepCopy(session.toMap(new LinkedHashMap<>()), 8)));\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    Map operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    Map operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"conditions:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    session.applyRules();\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    System.out.printf(Utils.toJSONString(Utils.getDeepCopy(session.toMap(new LinkedHashMap<>()), 8)));\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    Map operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c51a42fa59b8539f35fd21ba7d88ee912af931d","date":1493700805,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    Map operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heap:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    operation = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"node5\").getOperation();\n    assertEquals(\"node5\", operation.get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    Map operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d14f4b04a5c752272b2f79fd6684fee8dff2808","date":1494821985,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heap:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    operation = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation()\n        .getParams();\n    assertEquals(\"node5\", operation.get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    Map operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heap:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    operation = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"node5\").getOperation();\n    assertEquals(\"node5\", operation.get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fca549db64ee4c87a83a94e7c224506fa20d396","date":1495433449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    /*Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");*/\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heap:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heap:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    operation = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation()\n        .getParams();\n    assertEquals(\"node5\", operation.get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e51d8822006000d3ecacfb03d22c3a5ee0251bc9","date":1495517642,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue( violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.val)));\n    assertTrue( violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.name)));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.op == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.name))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heap:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    /*Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");*/\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heap:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09d06843c166c033fc611df4ce71e33731bc1ad1","date":1495531684,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue( violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.val)));\n    assertTrue( violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.name)));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.op == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.name))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue( violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.val)));\n    assertTrue( violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.name)));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.op == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.name))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heap:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.val)));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.name)));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.op == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.name))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue( violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.val)));\n    assertTrue( violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.name)));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.op == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.name))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"/dev/null","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.val)));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.name)));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.op == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.name))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.val)));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.name)));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.op == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.name))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.val)));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.name)));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.op == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.name))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"/dev/null","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.val)));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.name)));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.op == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.name))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.val)));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.name)));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.op == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.name))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.val)));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.name)));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.op == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.name))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.val)));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.name)));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.op == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.name))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.val)));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.name)));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.op == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.name))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["98f11c416d30e556e0004a9a84960702d12d35b1","e4848fb683db0790f2847173af06e2ad2d03328e"],"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["86fff6c123a5a1d38adb665dd045347219798da9"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"86fff6c123a5a1d38adb665dd045347219798da9":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["09d06843c166c033fc611df4ce71e33731bc1ad1"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"e4848fb683db0790f2847173af06e2ad2d03328e":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["e51d8822006000d3ecacfb03d22c3a5ee0251bc9"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e51d8822006000d3ecacfb03d22c3a5ee0251bc9":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98f11c416d30e556e0004a9a84960702d12d35b1":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["e4848fb683db0790f2847173af06e2ad2d03328e","98f11c416d30e556e0004a9a84960702d12d35b1"],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["e51d8822006000d3ecacfb03d22c3a5ee0251bc9"],"86fff6c123a5a1d38adb665dd045347219798da9":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e51d8822006000d3ecacfb03d22c3a5ee0251bc9":["09d06843c166c033fc611df4ce71e33731bc1ad1"],"98f11c416d30e556e0004a9a84960702d12d35b1":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["86fff6c123a5a1d38adb665dd045347219798da9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}