{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testRandomTopDocs().mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testRandomTopDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        doc.add(new StringField(\"foo\", Integer.toString(start + j), Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      assertTopDocsEquals(collector1.topDocs(), collector2.topDocs());\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      assertTopDocsEquals(collector1.topDocs(), collector2.topDocs());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f2c13220a828a78007cedb364e22dd8986ed650","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testRandomTopDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testRandomTopDocs().mjava","sourceNew":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        doc.add(new StringField(\"foo\", Integer.toString(start + j), Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      assertTopDocsEquals(collector1.topDocs(), collector2.topDocs());\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      assertTopDocsEquals(collector1.topDocs(), collector2.topDocs());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testRandomTopDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testRandomTopDocs().mjava","sourceNew":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testRandomTopDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#testRandomTopDocs().mjava","sourceNew":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = TEST_NIGHTLY ? atLeast(128 * 8 * 8 * 3) : atLeast(500); // at night, make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        int freq = TestUtil.nextInt(random(), 1, 1 << random().nextInt(3));\n        for (int k = 0; k < freq; ++k) {\n          doc.add(new TextField(\"foo\", Integer.toString(start + j), Store.NO));\n        }\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 15; ++iter) {\n      Query query = new TermQuery(new Term(\"foo\", Integer.toString(iter)));\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n      int filterTerm = random().nextInt(15);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, 1); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["622a708571e534680618b3c5e0c28ac539a47776"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f2c13220a828a78007cedb364e22dd8986ed650":["622a708571e534680618b3c5e0c28ac539a47776"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["2f2c13220a828a78007cedb364e22dd8986ed650"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["2f2c13220a828a78007cedb364e22dd8986ed650"],"2f2c13220a828a78007cedb364e22dd8986ed650":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["71da933d30aea361ccc224d6544c451cbf49916d"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}