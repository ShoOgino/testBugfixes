{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(\n            TEST_VERSION_CURRENT))) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(\n            TEST_VERSION_CURRENT))) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(\n            TEST_VERSION_CURRENT))) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(),\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory(random);\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(),\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory(random);\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List<Throwable> thrown = new ArrayList<Throwable>();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["1f653cfcf159baeaafe5d01682a911e95bba4012","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["85a883878c0af761245ab048babc63d099f835f3","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85a883878c0af761245ab048babc63d099f835f3":[],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}