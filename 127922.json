{"path":"backwards/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"/dev/null","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\");\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\");\n        assertTrue(isCSIndexInputOpen(one));\n\n        IndexInput two = (IndexInput) one.clone();\n        assertTrue(isCSIndexInputOpen(two));\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n        assertTrue(\"Only close when cr is closed\", isCSIndexInputOpen(one));\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n        assertFalse(\"Now closed one\", isCSIndexInputOpen(one));\n        assertFalse(\"Now closed two\", isCSIndexInputOpen(two));\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\");\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\");\n        assertTrue(isCSIndexInputOpen(one));\n\n        IndexInput two = (IndexInput) one.clone();\n        assertTrue(isCSIndexInputOpen(two));\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n        assertTrue(\"Only close when cr is closed\", isCSIndexInputOpen(one));\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n        assertFalse(\"Now closed one\", isCSIndexInputOpen(one));\n        assertFalse(\"Now closed two\", isCSIndexInputOpen(two));\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\");\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\");\n        assertTrue(isCSIndexInputOpen(one));\n\n        IndexInput two = (IndexInput) one.clone();\n        assertTrue(isCSIndexInputOpen(two));\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n        assertTrue(\"Only close when cr is closed\", isCSIndexInputOpen(one));\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n        assertFalse(\"Now closed one\", isCSIndexInputOpen(one));\n        assertFalse(\"Now closed two\", isCSIndexInputOpen(two));\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}