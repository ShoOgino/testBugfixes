{"path":"src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","commits":[{"id":"7d6b8491b15b391062b53404b4af3c8f18924090","date":1193061194,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"/dev/null","sourceNew":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      System.out.println(\"Done test \"+i);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e1720d203cff791bcdef2bae580cf24e8906b4d8","97c30bd1b976a5291cf9c0ca2773c5c46e936a7b","9274621789ce990dbfef455dabdf026bb3184821","9274621789ce990dbfef455dabdf026bb3184821","9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"72ec6c7587d2da4bfac762c58d0d6b8552d2102d","date":1221688171,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      System.out.println(\"Done test \"+i);\n    }\n\n  }\n\n","sourceOld":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      System.out.println(\"Done test \"+i);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["97c30bd1b976a5291cf9c0ca2773c5c46e936a7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1720d203cff791bcdef2bae580cf24e8906b4d8","date":1240608665,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      System.out.println(\"Done test \"+i);\n    }\n  }\n\n","sourceOld":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      System.out.println(\"Done test \"+i);\n    }\n\n  }\n\n","bugFix":["7d6b8491b15b391062b53404b4af3c8f18924090"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      System.out.println(\"Done test \"+i);\n    }\n  }\n\n","sourceOld":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      System.out.println(\"Done test \"+i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e1720d203cff791bcdef2bae580cf24e8906b4d8":["72ec6c7587d2da4bfac762c58d0d6b8552d2102d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7d6b8491b15b391062b53404b4af3c8f18924090":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["e1720d203cff791bcdef2bae580cf24e8906b4d8"],"72ec6c7587d2da4bfac762c58d0d6b8552d2102d":["7d6b8491b15b391062b53404b4af3c8f18924090"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e1720d203cff791bcdef2bae580cf24e8906b4d8":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7d6b8491b15b391062b53404b4af3c8f18924090"],"7d6b8491b15b391062b53404b4af3c8f18924090":["72ec6c7587d2da4bfac762c58d0d6b8552d2102d"],"72ec6c7587d2da4bfac762c58d0d6b8552d2102d":["e1720d203cff791bcdef2bae580cf24e8906b4d8"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}