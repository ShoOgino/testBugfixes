{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#trimToSize().mjava","commits":[{"id":"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a","date":1210940570,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#trimToSize().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Each node stores a character (splitchar) which is part of some key(s). In a\n   * compressed branch (one that only contain a single string key) the trailer\n   * of the key which is not already in nodes is stored externally in the kv\n   * array. As items are inserted, key substrings decrease. Some substrings may\n   * completely disappear when the whole branch is totally decompressed. The\n   * tree is traversed to find the key substrings actually used. In addition,\n   * duplicate substrings are removed using a map (implemented with a\n   * TernaryTree!).\n   * \n   */\n  public void trimToSize() {\n    // first balance the tree for best performance\n    balance();\n\n    // redimension the node arrays\n    redimNodeArrays(freenode);\n\n    // ok, compact kv array\n    CharVector kx = new CharVector();\n    kx.alloc(1);\n    TernaryTree map = new TernaryTree();\n    compact(kx, map, root);\n    kv = kx;\n    kv.trimToSize();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#trimToSize().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#trimToSize().mjava","sourceNew":"  /**\n   * Each node stores a character (splitchar) which is part of some key(s). In a\n   * compressed branch (one that only contain a single string key) the trailer\n   * of the key which is not already in nodes is stored externally in the kv\n   * array. As items are inserted, key substrings decrease. Some substrings may\n   * completely disappear when the whole branch is totally decompressed. The\n   * tree is traversed to find the key substrings actually used. In addition,\n   * duplicate substrings are removed using a map (implemented with a\n   * TernaryTree!).\n   * \n   */\n  public void trimToSize() {\n    // first balance the tree for best performance\n    balance();\n\n    // redimension the node arrays\n    redimNodeArrays(freenode);\n\n    // ok, compact kv array\n    CharVector kx = new CharVector();\n    kx.alloc(1);\n    TernaryTree map = new TernaryTree();\n    compact(kx, map, root);\n    kv = kx;\n    kv.trimToSize();\n  }\n\n","sourceOld":"  /**\n   * Each node stores a character (splitchar) which is part of some key(s). In a\n   * compressed branch (one that only contain a single string key) the trailer\n   * of the key which is not already in nodes is stored externally in the kv\n   * array. As items are inserted, key substrings decrease. Some substrings may\n   * completely disappear when the whole branch is totally decompressed. The\n   * tree is traversed to find the key substrings actually used. In addition,\n   * duplicate substrings are removed using a map (implemented with a\n   * TernaryTree!).\n   * \n   */\n  public void trimToSize() {\n    // first balance the tree for best performance\n    balance();\n\n    // redimension the node arrays\n    redimNodeArrays(freenode);\n\n    // ok, compact kv array\n    CharVector kx = new CharVector();\n    kx.alloc(1);\n    TernaryTree map = new TernaryTree();\n    compact(kx, map, root);\n    kv = kx;\n    kv.trimToSize();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}