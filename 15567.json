{"path":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/UsingSolrJRefGuideExamplesTest#queryWithRawSolrParamsExample().mjava","commits":[{"id":"a01fff746a2b2ca68b2c1d03f4ede309970631bd","date":1509049505,"type":0,"author":"Cassandra Targett","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/UsingSolrJRefGuideExamplesTest#queryWithRawSolrParamsExample().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void queryWithRawSolrParamsExample() throws Exception {\n    // tag::solrj-query-with-raw-solrparams[]\n    final SolrClient client = getSolrClient();\n\n    final Map<String, String> queryParamMap = new HashMap<String, String>();\n    queryParamMap.put(\"q\", \"*:*\");\n    queryParamMap.put(\"fl\", \"id, name\");\n    MapSolrParams queryParams = new MapSolrParams(queryParamMap);\n\n    final QueryResponse response = client.query(\"techproducts\", queryParams);\n    final SolrDocumentList documents = response.getResults();\n\n    assertEquals(NUM_INDEXED_DOCUMENTS, documents.getNumFound());\n    for(SolrDocument document : documents) {\n      assertTrue(document.getFieldNames().contains(\"id\"));\n      assertTrue(document.getFieldNames().contains(\"name\"));\n    }\n    // end::solrj-query-with-raw-solrparams[]\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45ce9d6e2476f4de0ab905ae2c8d3178cc468bc8","date":1513039141,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/UsingSolrJRefGuideExamplesTest#queryWithRawSolrParamsExample().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/UsingSolrJRefGuideExamplesTest#queryWithRawSolrParamsExample().mjava","sourceNew":"  @Test\n  public void queryWithRawSolrParamsExample() throws Exception {\n    expectLine(\"Found 3 documents\");\n    expectLine(\"id: 1; name: Fitbit Alta\");\n    expectLine(\"id: 2; name: Sony Walkman\");\n    expectLine(\"id: 3; name: Garmin GPS\");\n    \n    // tag::solrj-query-with-raw-solrparams[]\n    final SolrClient client = getSolrClient();\n\n    final Map<String, String> queryParamMap = new HashMap<String, String>();\n    queryParamMap.put(\"q\", \"*:*\");\n    queryParamMap.put(\"fl\", \"id, name\");\n    queryParamMap.put(\"sort\", \"id asc\");\n    MapSolrParams queryParams = new MapSolrParams(queryParamMap);\n\n    final QueryResponse response = client.query(\"techproducts\", queryParams);\n    final SolrDocumentList documents = response.getResults();\n\n    print(\"Found \" + documents.getNumFound() + \" documents\");\n    for(SolrDocument document : documents) {\n      final String id = (String) document.getFirstValue(\"id\");\n      final String name = (String) document.getFirstValue(\"name\");\n      \n      print(\"id: \" + id + \"; name: \" + name);\n    }\n    // end::solrj-query-with-raw-solrparams[]\n  }\n\n","sourceOld":"  @Test\n  public void queryWithRawSolrParamsExample() throws Exception {\n    // tag::solrj-query-with-raw-solrparams[]\n    final SolrClient client = getSolrClient();\n\n    final Map<String, String> queryParamMap = new HashMap<String, String>();\n    queryParamMap.put(\"q\", \"*:*\");\n    queryParamMap.put(\"fl\", \"id, name\");\n    MapSolrParams queryParams = new MapSolrParams(queryParamMap);\n\n    final QueryResponse response = client.query(\"techproducts\", queryParams);\n    final SolrDocumentList documents = response.getResults();\n\n    assertEquals(NUM_INDEXED_DOCUMENTS, documents.getNumFound());\n    for(SolrDocument document : documents) {\n      assertTrue(document.getFieldNames().contains(\"id\"));\n      assertTrue(document.getFieldNames().contains(\"name\"));\n    }\n    // end::solrj-query-with-raw-solrparams[]\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"927e6deec13723e5fd6fb8f1e0457e8597dae15e","date":1513167013,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/UsingSolrJRefGuideExamplesTest#queryWithRawSolrParamsExample().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/UsingSolrJRefGuideExamplesTest#queryWithRawSolrParamsExample().mjava","sourceNew":"  @Test\n  public void queryWithRawSolrParamsExample() throws Exception {\n    expectLine(\"Found 3 documents\");\n    expectLine(\"id: 1; name: Fitbit Alta\");\n    expectLine(\"id: 2; name: Sony Walkman\");\n    expectLine(\"id: 3; name: Garmin GPS\");\n    \n    // tag::solrj-query-with-raw-solrparams[]\n    final SolrClient client = getSolrClient();\n\n    final Map<String, String> queryParamMap = new HashMap<String, String>();\n    queryParamMap.put(\"q\", \"*:*\");\n    queryParamMap.put(\"fl\", \"id, name\");\n    queryParamMap.put(\"sort\", \"id asc\");\n    MapSolrParams queryParams = new MapSolrParams(queryParamMap);\n\n    final QueryResponse response = client.query(\"techproducts\", queryParams);\n    final SolrDocumentList documents = response.getResults();\n\n    print(\"Found \" + documents.getNumFound() + \" documents\");\n    for(SolrDocument document : documents) {\n      final String id = (String) document.getFirstValue(\"id\");\n      final String name = (String) document.getFirstValue(\"name\");\n      \n      print(\"id: \" + id + \"; name: \" + name);\n    }\n    // end::solrj-query-with-raw-solrparams[]\n  }\n\n","sourceOld":"  @Test\n  public void queryWithRawSolrParamsExample() throws Exception {\n    // tag::solrj-query-with-raw-solrparams[]\n    final SolrClient client = getSolrClient();\n\n    final Map<String, String> queryParamMap = new HashMap<String, String>();\n    queryParamMap.put(\"q\", \"*:*\");\n    queryParamMap.put(\"fl\", \"id, name\");\n    MapSolrParams queryParams = new MapSolrParams(queryParamMap);\n\n    final QueryResponse response = client.query(\"techproducts\", queryParams);\n    final SolrDocumentList documents = response.getResults();\n\n    assertEquals(NUM_INDEXED_DOCUMENTS, documents.getNumFound());\n    for(SolrDocument document : documents) {\n      assertTrue(document.getFieldNames().contains(\"id\"));\n      assertTrue(document.getFieldNames().contains(\"name\"));\n    }\n    // end::solrj-query-with-raw-solrparams[]\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76acad1d6e22ba0ffa6e42fbe9d0844c6b08d33d","date":1594736598,"type":3,"author":"Eric Pugh","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/UsingSolrJRefGuideExamplesTest#queryWithRawSolrParamsExample().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/UsingSolrJRefGuideExamplesTest#queryWithRawSolrParamsExample().mjava","sourceNew":"  @Test\n  public void queryWithRawSolrParamsExample() throws Exception {\n    expectLine(\"Found 3 documents\");\n    expectLine(\"id: 1; name: Fitbit Alta\");\n    expectLine(\"id: 2; name: Sony Walkman\");\n    expectLine(\"id: 3; name: Garmin GPS\");\n\n    // tag::solrj-query-with-raw-solrparams[]\n    final SolrClient client = getSolrClient();\n\n    final Map<String, String> queryParamMap = new HashMap<String, String>();\n    queryParamMap.put(\"q\", \"*:*\");\n    queryParamMap.put(\"fl\", \"id, name\");\n    queryParamMap.put(\"sort\", \"id asc\");\n    MapSolrParams queryParams = new MapSolrParams(queryParamMap);\n\n    final QueryResponse response = client.query(\"techproducts\", queryParams);\n    final SolrDocumentList documents = response.getResults();\n\n    print(\"Found \" + documents.getNumFound() + \" documents\");\n    for(SolrDocument document : documents) {\n      final String id = (String) document.getFirstValue(\"id\");\n      final String name = (String) document.getFirstValue(\"name\");\n\n      print(\"id: \" + id + \"; name: \" + name);\n    }\n    // end::solrj-query-with-raw-solrparams[]\n  }\n\n","sourceOld":"  @Test\n  public void queryWithRawSolrParamsExample() throws Exception {\n    expectLine(\"Found 3 documents\");\n    expectLine(\"id: 1; name: Fitbit Alta\");\n    expectLine(\"id: 2; name: Sony Walkman\");\n    expectLine(\"id: 3; name: Garmin GPS\");\n    \n    // tag::solrj-query-with-raw-solrparams[]\n    final SolrClient client = getSolrClient();\n\n    final Map<String, String> queryParamMap = new HashMap<String, String>();\n    queryParamMap.put(\"q\", \"*:*\");\n    queryParamMap.put(\"fl\", \"id, name\");\n    queryParamMap.put(\"sort\", \"id asc\");\n    MapSolrParams queryParams = new MapSolrParams(queryParamMap);\n\n    final QueryResponse response = client.query(\"techproducts\", queryParams);\n    final SolrDocumentList documents = response.getResults();\n\n    print(\"Found \" + documents.getNumFound() + \" documents\");\n    for(SolrDocument document : documents) {\n      final String id = (String) document.getFirstValue(\"id\");\n      final String name = (String) document.getFirstValue(\"name\");\n      \n      print(\"id: \" + id + \"; name: \" + name);\n    }\n    // end::solrj-query-with-raw-solrparams[]\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a01fff746a2b2ca68b2c1d03f4ede309970631bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45ce9d6e2476f4de0ab905ae2c8d3178cc468bc8":["a01fff746a2b2ca68b2c1d03f4ede309970631bd"],"76acad1d6e22ba0ffa6e42fbe9d0844c6b08d33d":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["a01fff746a2b2ca68b2c1d03f4ede309970631bd","45ce9d6e2476f4de0ab905ae2c8d3178cc468bc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76acad1d6e22ba0ffa6e42fbe9d0844c6b08d33d"]},"commit2Childs":{"a01fff746a2b2ca68b2c1d03f4ede309970631bd":["45ce9d6e2476f4de0ab905ae2c8d3178cc468bc8","927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a01fff746a2b2ca68b2c1d03f4ede309970631bd"],"45ce9d6e2476f4de0ab905ae2c8d3178cc468bc8":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"76acad1d6e22ba0ffa6e42fbe9d0844c6b08d33d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["76acad1d6e22ba0ffa6e42fbe9d0844c6b08d33d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}