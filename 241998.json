{"path":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","sourceNew":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","sourceNew":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","sourceNew":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50805be75df24f05d29a4d2a496c7ec825cde9eb","date":1398078566,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","sourceNew":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexWriter.WRITE_LOCK_NAME)) {\n        continue; // write.lock has no header, thats ok\n      }\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","sourceNew":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexWriter.WRITE_LOCK_NAME)) {\n        continue; // write.lock has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexWriter.WRITE_LOCK_NAME)) {\n        continue; // write.lock has no header, thats ok\n      }\n      if (file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        continue; // segments.gen has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"768b0ba0c1bb98f5074a2c3f978ed3c7c3555023","date":1411397287,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory,Map[String,String]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeaders(Directory).mjava","sourceNew":"  private void checkHeaders(Directory dir, Map<String,String> namesToExtensions) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexWriter.WRITE_LOCK_NAME)) {\n        continue; // write.lock has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir, namesToExtensions); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        String codecName = in.readString();\n        assertFalse(codecName.isEmpty());\n        String extension = IndexFileNames.getExtension(file);\n        if (extension == null) {\n          assertTrue(file.startsWith(IndexFileNames.SEGMENTS));\n          extension = \"<segments> (not a real extension, designates segments file)\";\n        }\n        String previous = namesToExtensions.put(codecName, extension);\n        if (previous != null && !previous.equals(extension)) {\n          //TODO: not yet \n          // fail(\"extensions \" + previous + \" and \" + extension + \" share same codecName \" + codecName);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHeaders(Directory dir) throws IOException {\n    for (String file : dir.listAll()) {\n      if (file.equals(IndexWriter.WRITE_LOCK_NAME)) {\n        continue; // write.lock has no header, thats ok\n      }\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        CompoundFileDirectory cfsDir = new CompoundFileDirectory(dir, file, newIOContext(random()), false);\n        checkHeaders(cfsDir); // recurse into cfs\n        cfsDir.close();\n      }\n      IndexInput in = null;\n      boolean success = false;\n      try {\n        in = dir.openInput(file, newIOContext(random()));\n        int val = in.readInt();\n        assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(in);\n        } else {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["50805be75df24f05d29a4d2a496c7ec825cde9eb"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"768b0ba0c1bb98f5074a2c3f978ed3c7c3555023":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"50805be75df24f05d29a4d2a496c7ec825cde9eb":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["768b0ba0c1bb98f5074a2c3f978ed3c7c3555023"]},"commit2Childs":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["768b0ba0c1bb98f5074a2c3f978ed3c7c3555023"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","50805be75df24f05d29a4d2a496c7ec825cde9eb"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"50805be75df24f05d29a4d2a496c7ec825cde9eb":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"768b0ba0c1bb98f5074a2c3f978ed3c7c3555023":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}