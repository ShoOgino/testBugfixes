{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/FeatureLogger#log(int,LTRScoringQuery,SolrIndexSearcher,LTRScoringQuery.FeatureInfo[]).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/FeatureLogger#log(int,LTRScoringQuery,SolrIndexSearcher,LTRScoringQuery.FeatureInfo[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Log will be called every time that the model generates the feature values\n   * for a document and a query.\n   *\n   * @param docid\n   *          Solr document id whose features we are saving\n   * @param featuresInfo\n   *          List of all the {@link LTRScoringQuery.FeatureInfo} objects which contain name and value\n   *          for all the features triggered by the result set\n   * @return true if the logger successfully logged the features, false\n   *         otherwise.\n   */\n\n  public boolean log(int docid, LTRScoringQuery scoringQuery,\n      SolrIndexSearcher searcher, LTRScoringQuery.FeatureInfo[] featuresInfo) {\n    final FV_TYPE featureVector = makeFeatureVector(featuresInfo);\n    if (featureVector == null) {\n      return false;\n    }\n\n    return searcher.cacheInsert(QUERY_FV_CACHE_NAME,\n        fvCacheKey(scoringQuery, docid), featureVector) != null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/FeatureLogger#log(int,LTRScoringQuery,SolrIndexSearcher,LTRScoringQuery.FeatureInfo[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Log will be called every time that the model generates the feature values\n   * for a document and a query.\n   *\n   * @param docid\n   *          Solr document id whose features we are saving\n   * @param featuresInfo\n   *          List of all the {@link LTRScoringQuery.FeatureInfo} objects which contain name and value\n   *          for all the features triggered by the result set\n   * @return true if the logger successfully logged the features, false\n   *         otherwise.\n   */\n\n  public boolean log(int docid, LTRScoringQuery scoringQuery,\n      SolrIndexSearcher searcher, LTRScoringQuery.FeatureInfo[] featuresInfo) {\n    final FV_TYPE featureVector = makeFeatureVector(featuresInfo);\n    if (featureVector == null) {\n      return false;\n    }\n\n    return searcher.cacheInsert(QUERY_FV_CACHE_NAME,\n        fvCacheKey(scoringQuery, docid), featureVector) != null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fa1f8f009c5147b03311c7e6e6469fa7b677186","date":1482164570,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/FeatureLogger#log(int,LTRScoringQuery,SolrIndexSearcher,LTRScoringQuery.FeatureInfo[]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/FeatureLogger#log(int,LTRScoringQuery,SolrIndexSearcher,LTRScoringQuery.FeatureInfo[]).mjava","sourceNew":"  /**\n   * Log will be called every time that the model generates the feature values\n   * for a document and a query.\n   *\n   * @param docid\n   *          Solr document id whose features we are saving\n   * @param featuresInfo\n   *          List of all the {@link LTRScoringQuery.FeatureInfo} objects which contain name and value\n   *          for all the features triggered by the result set\n   * @return true if the logger successfully logged the features, false\n   *         otherwise.\n   */\n\n  public boolean log(int docid, LTRScoringQuery scoringQuery,\n      SolrIndexSearcher searcher, LTRScoringQuery.FeatureInfo[] featuresInfo) {\n    final String featureVector = makeFeatureVector(featuresInfo);\n    if (featureVector == null) {\n      return false;\n    }\n\n    return searcher.cacheInsert(fvCacheName,\n        fvCacheKey(scoringQuery, docid), featureVector) != null;\n  }\n\n","sourceOld":"  /**\n   * Log will be called every time that the model generates the feature values\n   * for a document and a query.\n   *\n   * @param docid\n   *          Solr document id whose features we are saving\n   * @param featuresInfo\n   *          List of all the {@link LTRScoringQuery.FeatureInfo} objects which contain name and value\n   *          for all the features triggered by the result set\n   * @return true if the logger successfully logged the features, false\n   *         otherwise.\n   */\n\n  public boolean log(int docid, LTRScoringQuery scoringQuery,\n      SolrIndexSearcher searcher, LTRScoringQuery.FeatureInfo[] featuresInfo) {\n    final FV_TYPE featureVector = makeFeatureVector(featuresInfo);\n    if (featureVector == null) {\n      return false;\n    }\n\n    return searcher.cacheInsert(QUERY_FV_CACHE_NAME,\n        fvCacheKey(scoringQuery, docid), featureVector) != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/FeatureLogger#log(int,LTRScoringQuery,SolrIndexSearcher,LTRScoringQuery.FeatureInfo[]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/FeatureLogger#log(int,LTRScoringQuery,SolrIndexSearcher,LTRScoringQuery.FeatureInfo[]).mjava","sourceNew":"  /**\n   * Log will be called every time that the model generates the feature values\n   * for a document and a query.\n   *\n   * @param docid\n   *          Solr document id whose features we are saving\n   * @param featuresInfo\n   *          List of all the {@link LTRScoringQuery.FeatureInfo} objects which contain name and value\n   *          for all the features triggered by the result set\n   * @return true if the logger successfully logged the features, false\n   *         otherwise.\n   */\n\n  public boolean log(int docid, LTRScoringQuery scoringQuery,\n      SolrIndexSearcher searcher, LTRScoringQuery.FeatureInfo[] featuresInfo) {\n    final String featureVector = makeFeatureVector(featuresInfo);\n    if (featureVector == null) {\n      return false;\n    }\n\n    return searcher.cacheInsert(fvCacheName,\n        fvCacheKey(scoringQuery, docid), featureVector) != null;\n  }\n\n","sourceOld":"  /**\n   * Log will be called every time that the model generates the feature values\n   * for a document and a query.\n   *\n   * @param docid\n   *          Solr document id whose features we are saving\n   * @param featuresInfo\n   *          List of all the {@link LTRScoringQuery.FeatureInfo} objects which contain name and value\n   *          for all the features triggered by the result set\n   * @return true if the logger successfully logged the features, false\n   *         otherwise.\n   */\n\n  public boolean log(int docid, LTRScoringQuery scoringQuery,\n      SolrIndexSearcher searcher, LTRScoringQuery.FeatureInfo[] featuresInfo) {\n    final FV_TYPE featureVector = makeFeatureVector(featuresInfo);\n    if (featureVector == null) {\n      return false;\n    }\n\n    return searcher.cacheInsert(QUERY_FV_CACHE_NAME,\n        fvCacheKey(scoringQuery, docid), featureVector) != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["9720b151fde2073f4e401450f4574e5f31c2d0ff","8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8fa1f8f009c5147b03311c7e6e6469fa7b677186"]},"commit2Childs":{"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}