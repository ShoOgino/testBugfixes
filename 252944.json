{"path":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","commits":[{"id":"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755","date":1329934000,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\r\n  public void doGet(HttpServletRequest request,\r\n                    HttpServletResponse response)\r\n          throws IOException, ServletException {\r\n    response.setCharacterEncoding(\"UTF-8\");\r\n    response.setContentType(\"application/json\");\r\n\r\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\r\n    \r\n    String path = request.getParameter(\"path\");\r\n    String addr = request.getParameter(\"addr\");\r\n    \r\n    if (addr != null && addr.length() == 0)\r\n    {\r\n      addr = null;\r\n    }\r\n    \r\n    String detailS = request.getParameter(\"detail\");\r\n    boolean detail = detailS != null && detailS.equals(\"true\");\r\n    PrintWriter out = response.getWriter();\r\n    \r\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\r\n    printer.detail = detail;\r\n    \r\n    try {\r\n      printer.print(path);\r\n    } finally {\r\n      printer.close();\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6ddd3da533988676f6ec21e7e4651a2b2e8345","date":1330043299,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\r\n  public void doGet(HttpServletRequest request,\r\n                    HttpServletResponse response)\r\n      throws IOException, ServletException {\r\n    response.setCharacterEncoding(\"UTF-8\");\r\n    response.setContentType(\"application/json\");\r\n\r\n    // This attribute is set by the SolrDispatchFilter\r\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\r\n\r\n    String path = request.getParameter(\"path\");\r\n    String addr = request.getParameter(\"addr\");\r\n\r\n    if (addr != null && addr.length() == 0) {\r\n      addr = null;\r\n    }\r\n\r\n    String detailS = request.getParameter(\"detail\");\r\n    boolean detail = detailS != null && detailS.equals(\"true\");\r\n    PrintWriter out = response.getWriter();\r\n\r\n\r\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\r\n    printer.detail = detail;\r\n\r\n    try {\r\n      printer.print(path);\r\n    } finally {\r\n      printer.close();\r\n    }\r\n  }\r\n\n","sourceOld":"  @Override\r\n  public void doGet(HttpServletRequest request,\r\n                    HttpServletResponse response)\r\n          throws IOException, ServletException {\r\n    response.setCharacterEncoding(\"UTF-8\");\r\n    response.setContentType(\"application/json\");\r\n\r\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\r\n    \r\n    String path = request.getParameter(\"path\");\r\n    String addr = request.getParameter(\"addr\");\r\n    \r\n    if (addr != null && addr.length() == 0)\r\n    {\r\n      addr = null;\r\n    }\r\n    \r\n    String detailS = request.getParameter(\"detail\");\r\n    boolean detail = detailS != null && detailS.equals(\"true\");\r\n    PrintWriter out = response.getWriter();\r\n    \r\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\r\n    printer.detail = detail;\r\n    \r\n    try {\r\n      printer.print(path);\r\n    } finally {\r\n      printer.close();\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\r\n  public void doGet(HttpServletRequest request,\r\n                    HttpServletResponse response)\r\n      throws IOException, ServletException {\r\n    response.setCharacterEncoding(\"UTF-8\");\r\n    response.setContentType(\"application/json\");\r\n\r\n    // This attribute is set by the SolrDispatchFilter\r\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\r\n\r\n    String path = request.getParameter(\"path\");\r\n    String addr = request.getParameter(\"addr\");\r\n\r\n    if (addr != null && addr.length() == 0) {\r\n      addr = null;\r\n    }\r\n\r\n    String detailS = request.getParameter(\"detail\");\r\n    boolean detail = detailS != null && detailS.equals(\"true\");\r\n    PrintWriter out = response.getWriter();\r\n\r\n\r\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\r\n    printer.detail = detail;\r\n\r\n    try {\r\n      printer.print(path);\r\n    } finally {\r\n      printer.close();\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dccd36091d3547bf3a42b32aa932bb6082269048","date":1331137820,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\r\n  public void doGet(HttpServletRequest request,\r\n                    HttpServletResponse response)\r\n      throws IOException, ServletException {\r\n    response.setCharacterEncoding(\"UTF-8\");\r\n    response.setContentType(\"application/json\");\r\n\r\n    // This attribute is set by the SolrDispatchFilter\r\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\r\n\r\n    String path = request.getParameter(\"path\");\r\n    String addr = request.getParameter(\"addr\");\r\n\r\n    if (addr != null && addr.length() == 0) {\r\n      addr = null;\r\n    }\r\n\r\n    String detailS = request.getParameter(\"detail\");\r\n    boolean detail = detailS != null && detailS.equals(\"true\");\r\n\r\n    String dumpS = request.getParameter(\"dump\");\r\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\r\n\r\n    PrintWriter out = response.getWriter();\r\n\r\n\r\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\r\n    printer.detail = detail;\r\n    printer.dump = dump;\r\n\r\n    try {\r\n      printer.print(path);\r\n    } finally {\r\n      printer.close();\r\n    }\r\n  }\r\n\n","sourceOld":"  @Override\r\n  public void doGet(HttpServletRequest request,\r\n                    HttpServletResponse response)\r\n      throws IOException, ServletException {\r\n    response.setCharacterEncoding(\"UTF-8\");\r\n    response.setContentType(\"application/json\");\r\n\r\n    // This attribute is set by the SolrDispatchFilter\r\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\r\n\r\n    String path = request.getParameter(\"path\");\r\n    String addr = request.getParameter(\"addr\");\r\n\r\n    if (addr != null && addr.length() == 0) {\r\n      addr = null;\r\n    }\r\n\r\n    String detailS = request.getParameter(\"detail\");\r\n    boolean detail = detailS != null && detailS.equals(\"true\");\r\n    PrintWriter out = response.getWriter();\r\n\r\n\r\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\r\n    printer.detail = detail;\r\n\r\n    try {\r\n      printer.print(path);\r\n    } finally {\r\n      printer.close();\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\r\n  public void doGet(HttpServletRequest request,\r\n                    HttpServletResponse response)\r\n      throws IOException, ServletException {\r\n    response.setCharacterEncoding(\"UTF-8\");\r\n    response.setContentType(\"application/json\");\r\n\r\n    // This attribute is set by the SolrDispatchFilter\r\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\r\n\r\n    String path = request.getParameter(\"path\");\r\n    String addr = request.getParameter(\"addr\");\r\n\r\n    if (addr != null && addr.length() == 0) {\r\n      addr = null;\r\n    }\r\n\r\n    String detailS = request.getParameter(\"detail\");\r\n    boolean detail = detailS != null && detailS.equals(\"true\");\r\n\r\n    String dumpS = request.getParameter(\"dump\");\r\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\r\n\r\n    PrintWriter out = response.getWriter();\r\n\r\n\r\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\r\n    printer.detail = detail;\r\n    printer.dump = dump;\r\n\r\n    try {\r\n      printer.print(path);\r\n    } finally {\r\n      printer.close();\r\n    }\r\n  }\r\n\n","sourceOld":"  @Override\r\n  public void doGet(HttpServletRequest request,\r\n                    HttpServletResponse response)\r\n      throws IOException, ServletException {\r\n    response.setCharacterEncoding(\"UTF-8\");\r\n    response.setContentType(\"application/json\");\r\n\r\n    // This attribute is set by the SolrDispatchFilter\r\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\r\n\r\n    String path = request.getParameter(\"path\");\r\n    String addr = request.getParameter(\"addr\");\r\n\r\n    if (addr != null && addr.length() == 0) {\r\n      addr = null;\r\n    }\r\n\r\n    String detailS = request.getParameter(\"detail\");\r\n    boolean detail = detailS != null && detailS.equals(\"true\");\r\n    PrintWriter out = response.getWriter();\r\n\r\n\r\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\r\n    printer.detail = detail;\r\n\r\n    try {\r\n      printer.print(path);\r\n    } finally {\r\n      printer.close();\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","date":1332766738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws IOException, ServletException {\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n\n    String path = request.getParameter(\"path\");\n    String addr = request.getParameter(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = request.getParameter(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = request.getParameter(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    PrintWriter out = response.getWriter();\n\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n  }\n\n","sourceOld":"  @Override\r\n  public void doGet(HttpServletRequest request,\r\n                    HttpServletResponse response)\r\n      throws IOException, ServletException {\r\n    response.setCharacterEncoding(\"UTF-8\");\r\n    response.setContentType(\"application/json\");\r\n\r\n    // This attribute is set by the SolrDispatchFilter\r\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\r\n\r\n    String path = request.getParameter(\"path\");\r\n    String addr = request.getParameter(\"addr\");\r\n\r\n    if (addr != null && addr.length() == 0) {\r\n      addr = null;\r\n    }\r\n\r\n    String detailS = request.getParameter(\"detail\");\r\n    boolean detail = detailS != null && detailS.equals(\"true\");\r\n\r\n    String dumpS = request.getParameter(\"dump\");\r\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\r\n\r\n    PrintWriter out = response.getWriter();\r\n\r\n\r\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\r\n    printer.detail = detail;\r\n    printer.dump = dump;\r\n\r\n    try {\r\n      printer.print(path);\r\n    } finally {\r\n      printer.close();\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws IOException {\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n\n    String path = request.getParameter(\"path\");\n    String addr = request.getParameter(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = request.getParameter(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = request.getParameter(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    PrintWriter out = response.getWriter();\n\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws IOException, ServletException {\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n\n    String path = request.getParameter(\"path\");\n    String addr = request.getParameter(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = request.getParameter(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = request.getParameter(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    PrintWriter out = response.getWriter();\n\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n  }\n\n","bugFix":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws IOException {\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n\n    String path = request.getParameter(\"path\");\n    String addr = request.getParameter(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = request.getParameter(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = request.getParameter(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    PrintWriter out = response.getWriter();\n\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws IOException, ServletException {\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n\n    String path = request.getParameter(\"path\");\n    String addr = request.getParameter(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = request.getParameter(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = request.getParameter(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    PrintWriter out = response.getWriter();\n\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d0565444d6381434fbff66cecf07da249f2bb4","date":1357484111,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), IOUtils.CHARSET_UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws IOException {\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n\n    String path = request.getParameter(\"path\");\n    String addr = request.getParameter(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = request.getParameter(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = request.getParameter(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    PrintWriter out = response.getWriter();\n\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), IOUtils.CHARSET_UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws IOException {\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n\n    String path = request.getParameter(\"path\");\n    String addr = request.getParameter(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = request.getParameter(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = request.getParameter(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    PrintWriter out = response.getWriter();\n\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), IOUtils.CHARSET_UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), IOUtils.CHARSET_UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n    boolean all = \"true\".equals(params.get(\"all\"));\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path, all);\n    } finally {\n      printer.close();\n    }\n\n    out.flush();\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n    boolean all = \"true\".equals(params.get(\"all\"));\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n\n    out.flush();\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n    boolean all = \"true\".equals(params.get(\"all\"));\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path, all);\n    } finally {\n      printer.close();\n    }\n\n    out.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    printer.isTreeView = (params.get(\"wt\") == null); // this is hacky but tree view requests don't come in with the wt set\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n\n    out.flush();\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n    boolean all = \"true\".equals(params.get(\"all\"));\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n\n    out.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n    boolean all = \"true\".equals(params.get(\"all\"));\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n\n    out.flush();\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    printer.isTreeView = (params.get(\"wt\") == null); // this is hacky but tree view requests don't come in with the wt set\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n\n    out.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    printer.isTreeView = (params.get(\"wt\") == null); // this is hacky but tree view requests don't come in with the wt set\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n\n    out.flush();\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n    boolean all = \"true\".equals(params.get(\"all\"));\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n\n    out.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d69bac0909e90a1213b0850137b00ac371f866e1","date":1419979130,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n    \n    int start = paramAsInt(\"start\", params, 0);\n    int rows = paramAsInt(\"rows\", params, -1);\n    \n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n    \n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n    \n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    printer.isTreeView = (params.get(\"wt\") == null); // this is hacky but tree view requests don't come in with the wt set\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n\n    out.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(PATH);\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n    \n    int start = paramAsInt(\"start\", params, 0);\n    int rows = paramAsInt(\"rows\", params, -1);\n    \n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n    \n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n    \n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n    \n    int start = paramAsInt(\"start\", params, 0);\n    int rows = paramAsInt(\"rows\", params, -1);\n    \n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n    \n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n    \n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(PATH);\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n    \n    int start = paramAsInt(\"start\", params, 0);\n    int rows = paramAsInt(\"rows\", params, -1);\n    \n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n    \n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n    \n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(\"path\");\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n    \n    int start = paramAsInt(\"start\", params, 0);\n    int rows = paramAsInt(\"rows\", params, -1);\n    \n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n    \n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n    \n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a","date":1443442239,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    final SolrParams params = req.getParams();\n    Map<String, String> map = new HashMap<>(1);\n    map.put(WT, \"raw\");\n    map.put(OMIT_HEADER, \"true\");\n    req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), params));\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n\n    String path = params.get(PATH);\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n\n    int start = params.getInt(\"start\", 0);\n    int rows = params.getInt(\"rows\", -1);\n\n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n\n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n\n    ZKPrinter printer = new ZKPrinter(cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    rsp.getValues().add(RawResponseWriter.CONTENT,printer);\n  }\n\n","sourceOld":"  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException,IOException {\n    // This attribute is set by the SolrDispatchFilter\n    CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n    if (cores == null) {\n      throw new ServletException(\"Missing request attribute org.apache.solr.CoreContainer.\");\n    }\n\n    synchronized (this) {\n      if (pagingSupport == null) {\n        pagingSupport = new PagedCollectionSupport();\n        ZkController zkController = cores.getZkController();\n        if (zkController != null) {\n          // get notified when the ZK session expires (so we can clear the cached collections and rebuild)\n          zkController.addOnReconnectListener(pagingSupport);\n        }\n      }\n    }\n    \n    final SolrParams params;\n    try {\n      params = SolrRequestParsers.DEFAULT.parse(null, request.getServletPath(), request).getParams();\n    } catch (Exception e) {\n      int code=500;\n      if (e instanceof SolrException) {\n        code = Math.min(599, Math.max(100, ((SolrException)e).code()));\n      }\n      response.sendError(code, e.toString());\n      return;\n    }\n\n    String path = params.get(PATH);\n    String addr = params.get(\"addr\");\n\n    if (addr != null && addr.length() == 0) {\n      addr = null;\n    }\n\n    String detailS = params.get(\"detail\");\n    boolean detail = detailS != null && detailS.equals(\"true\");\n\n    String dumpS = params.get(\"dump\");\n    boolean dump = dumpS != null && dumpS.equals(\"true\");\n    \n    int start = paramAsInt(\"start\", params, 0);\n    int rows = paramAsInt(\"rows\", params, -1);\n    \n    String filterType = params.get(\"filterType\");\n    if (filterType != null) {\n      filterType = filterType.trim().toLowerCase(Locale.ROOT);\n      if (filterType.length() == 0)\n        filterType = null;\n    }\n    FilterType type = (filterType != null) ? FilterType.valueOf(filterType) : FilterType.none;\n    \n    String filter = (type != FilterType.none) ? params.get(\"filter\") : null;\n    if (filter != null) {\n      filter = filter.trim();\n      if (filter.length() == 0)\n        filter = null;\n    }\n    \n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/json\");\n\n    Writer out = new FastWriter(new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n\n    ZKPrinter printer = new ZKPrinter(response, out, cores.getZkController(), addr);\n    printer.detail = detail;\n    printer.dump = dump;\n    boolean isGraphView = \"graph\".equals(params.get(\"view\"));\n    printer.page = (isGraphView && \"/clusterstate.json\".equals(path))\n        ? new PageOfCollections(start, rows, type, filter) : null;\n    printer.pagingSupport = pagingSupport;\n\n    try {\n      printer.print(path);\n    } finally {\n      printer.close();\n    }\n    \n    out.flush();\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["c7d0565444d6381434fbff66cecf07da249f2bb4","7d89d7e4e5101347833eea558851bf4209218619"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","c7d0565444d6381434fbff66cecf07da249f2bb4"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","dccd36091d3547bf3a42b32aa932bb6082269048"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["dccd36091d3547bf3a42b32aa932bb6082269048"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"dccd36091d3547bf3a42b32aa932bb6082269048":["dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d89d7e4e5101347833eea558851bf4209218619":["c7d0565444d6381434fbff66cecf07da249f2bb4"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"d69bac0909e90a1213b0850137b00ac371f866e1":["9279b175e5e66258442d2123a50f052219a9cc1b"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["d69bac0909e90a1213b0850137b00ac371f866e1"],"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["2faa4d8af1f20119ec0d38b5ae80ce9e78f10755"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["d69bac0909e90a1213b0850137b00ac371f866e1","1390137e395d2f07f9ba5b8c43d293befe84d563"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c7d0565444d6381434fbff66cecf07da249f2bb4":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7d89d7e4e5101347833eea558851bf4209218619"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["38e3b736c7ca086d61b7dbb841c905ee115490da"],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"dccd36091d3547bf3a42b32aa932bb6082269048":["38e3b736c7ca086d61b7dbb841c905ee115490da","5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"],"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755":["dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"9279b175e5e66258442d2123a50f052219a9cc1b":["d69bac0909e90a1213b0850137b00ac371f866e1"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d69bac0909e90a1213b0850137b00ac371f866e1":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","dccd36091d3547bf3a42b32aa932bb6082269048"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a","d2638f781be724518ff6c2263d14a48cf6e68017"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2faa4d8af1f20119ec0d38b5ae80ce9e78f10755"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7d0565444d6381434fbff66cecf07da249f2bb4","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","38e3b736c7ca086d61b7dbb841c905ee115490da","fe33227f6805edab2036cbb80645cc4e2d1fa424","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}