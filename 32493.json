{"path":"lucene/core/src/test/org/apache/lucene/document/TestXYMultiPolygonShapeQueries#nextShape().mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestXYMultiPolygonShapeQueries#nextShape().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestXYMultiPolygonShapeQueries#nextShape().mjava","sourceNew":"  @Override\n  protected XYPolygon[] nextShape() {\n    int n = random().nextInt(4) + 1;\n    XYPolygon[] polygons = new XYPolygon[n];\n    for (int i =0; i < n; i++) {\n      int  repetitions =0;\n      while (true) {\n        // if we can't tessellate; then random polygon generator created a malformed shape\n        XYPolygon p = (XYPolygon) getShapeType().nextShape();\n        try {\n          Tessellator.tessellate(p);\n          //polygons are disjoint so CONTAINS works. Note that if we intersect\n          //any shape then contains return false.\n          if (isDisjoint(polygons, p, i)) {\n            polygons[i] = p;\n            break;\n          }\n          repetitions++;\n          if (repetitions > 50) {\n            //try again\n            return nextShape();\n          }\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n    }\n    return polygons;\n  }\n\n","sourceOld":"  @Override\n  protected XYPolygon[] nextShape() {\n    int n = random().nextInt(4) + 1;\n    XYPolygon[] polygons = new XYPolygon[n];\n    for (int i =0; i < n; i++) {\n      int  repetitions =0;\n      while (true) {\n        // if we can't tessellate; then random polygon generator created a malformed shape\n        XYPolygon p = (XYPolygon) getShapeType().nextShape();\n        try {\n          Tessellator.tessellate(p);\n          //polygons are disjoint so CONTAINS works. Note that if we intersect\n          //any shape then contains return false.\n          if (isDisjoint(polygons, p, i)) {\n            polygons[i] = p;\n            break;\n          }\n          repetitions++;\n          if (repetitions > 50) {\n            //try again\n            return nextShape();\n          }\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n    }\n    return polygons;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestXYMultiPolygonShapeQueries#nextShape().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestXYMultiPolygonShapeQueries#nextShape().mjava","sourceNew":"  @Override\n  protected XYPolygon[] nextShape() {\n    int n = random().nextInt(4) + 1;\n    XYPolygon[] polygons = new XYPolygon[n];\n    for (int i =0; i < n; i++) {\n      int  repetitions =0;\n      while (true) {\n        // if we can't tessellate; then random polygon generator created a malformed shape\n        XYPolygon p = (XYPolygon) getShapeType().nextShape();\n        try {\n          Tessellator.tessellate(p);\n          //polygons are disjoint so CONTAINS works. Note that if we intersect\n          //any shape then contains return false.\n          if (isDisjoint(polygons, p, i)) {\n            polygons[i] = p;\n            break;\n          }\n          repetitions++;\n          if (repetitions > 2) {\n            //try again\n            return nextShape();\n          }\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n    }\n    return polygons;\n  }\n\n","sourceOld":"  @Override\n  protected XYPolygon[] nextShape() {\n    int n = random().nextInt(4) + 1;\n    XYPolygon[] polygons = new XYPolygon[n];\n    for (int i =0; i < n; i++) {\n      int  repetitions =0;\n      while (true) {\n        // if we can't tessellate; then random polygon generator created a malformed shape\n        XYPolygon p = (XYPolygon) getShapeType().nextShape();\n        try {\n          Tessellator.tessellate(p);\n          //polygons are disjoint so CONTAINS works. Note that if we intersect\n          //any shape then contains return false.\n          if (isDisjoint(polygons, p, i)) {\n            polygons[i] = p;\n            break;\n          }\n          repetitions++;\n          if (repetitions > 50) {\n            //try again\n            return nextShape();\n          }\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n    }\n    return polygons;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}