{"path":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","commits":[{"id":"f1de703f36b1071144037c80ca5fe118aa5e96fd","date":1493947151,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    for (int i = 0; i < 100; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"Atomic\")\n                  .add(\"Atomic.cat\", \"add\")\n                  .add(\"Atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n            factory.inform(h.getCore());\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      t.run();\n      threads.add(t);\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) {\n      thread.join();\n    }\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["817fc4762cd649397b27305970dad27295735f3a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    for (int i = 0; i < 100; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"Atomic\")\n                  .add(\"Atomic.cat\", \"add\")\n                  .add(\"Atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n            factory.inform(h.getCore());\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      t.run();\n      threads.add(t);\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) {\n      thread.join();\n    }\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"526bbf21a282a0aeaa55d4963d2646fd87ea5722","date":1497595167,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    for (int i = 0; i < 100; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n            factory.inform(h.getCore());\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      t.run();\n      threads.add(t);\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) {\n      thread.join();\n    }\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    for (int i = 0; i < 100; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"Atomic\")\n                  .add(\"Atomic.cat\", \"add\")\n                  .add(\"Atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n            factory.inform(h.getCore());\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      t.run();\n      threads.add(t);\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) {\n      thread.join();\n    }\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    for (int i = 0; i < 100; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n            factory.inform(h.getCore());\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      t.run();\n      threads.add(t);\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) {\n      thread.join();\n    }\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    for (int i = 0; i < 100; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"Atomic\")\n                  .add(\"Atomic.cat\", \"add\")\n                  .add(\"Atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n            factory.inform(h.getCore());\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      t.run();\n      threads.add(t);\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) {\n      thread.join();\n    }\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    for (int i = 0; i < 100; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n            factory.inform(h.getCore());\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      t.run();\n      threads.add(t);\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) {\n      thread.join();\n    }\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    for (int i = 0; i < 100; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"Atomic\")\n                  .add(\"Atomic.cat\", \"add\")\n                  .add(\"Atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n            factory.inform(h.getCore());\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      t.run();\n      threads.add(t);\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) {\n      thread.join();\n    }\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29f58859ae799964a6d229bf545960d9077932db","date":1501135078,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    for (int i = 0; i < 100; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n            factory.inform(h.getCore());\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      t.run();\n      threads.add(t);\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) {\n      thread.join();\n    }\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cdf274a1e3100b0988572e3a39989837d3257fc8","date":1501381674,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10734\")\n  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10734\")\n  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    for (int i = 0; i < 100; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n            factory.inform(h.getCore());\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      t.run();\n      threads.add(t);\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) {\n      thread.join();\n    }\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10734\")\n  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10734\")\n  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78c4170c235dc5c6ceb6cdba24c7df20aaee19a2","date":1522143323,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10734\")\n  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac32222db61ee556469b026550814e77b307641b","date":1522160587,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10734\")\n  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","date":1522191940,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10734\")\n  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10734\")\n  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:\" + queryString.toString())\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"392e007070227c0fd1c28259a11f55a06a9bd7c2","date":1522221057,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10734\")\n  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10734\")\n  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":3,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                createDistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":["817fc4762cd649397b27305970dad27295735f3a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817fc4762cd649397b27305970dad27295735f3a","date":1561046362,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            SolrQueryResponse rsp = new SolrQueryResponse();\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                createDistributedUpdateProcessor(cmd.getReq(), rsp,\n                    createRunUpdateProcessor(cmd.getReq(), rsp, null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                createDistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":["f1de703f36b1071144037c80ca5fe118aa5e96fd","9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf62a41dee1ac5d780c26dc793cab09e2a755b6d","date":1567792557,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest#testMultipleThreads().mjava","sourceNew":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          ModifiableSolrParams params = new ModifiableSolrParams()\n              .add(\"processor\", \"atomic\")\n              .add(\"atomic.cat\", \"add\")\n              .add(\"atomic.int_i\", \"inc\")\n              .add(\"commit\",\"true\");\n          try (SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params)) {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.solrDoc = new SolrInputDocument();\n            cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n            cmd.solrDoc.addField(\"cat\", strings[index]);\n            cmd.solrDoc.addField(\"int_i\", index);\n            SolrQueryResponse rsp = new SolrQueryResponse();\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                createDistributedUpdateProcessor(cmd.getReq(), rsp,\n                    createRunUpdateProcessor(cmd.getReq(), rsp, null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","sourceOld":"  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=10\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            SolrQueryResponse rsp = new SolrQueryResponse();\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                createDistributedUpdateProcessor(cmd.getReq(), rsp,\n                    createRunUpdateProcessor(cmd.getReq(), rsp, null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString() + \")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:\" + finalCount)\n        , \"//result[@numFound=1]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"392e007070227c0fd1c28259a11f55a06a9bd7c2":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["cdf274a1e3100b0988572e3a39989837d3257fc8"],"43564cbb30b064675027cfb569564e8531096e97":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","392e007070227c0fd1c28259a11f55a06a9bd7c2"],"bf62a41dee1ac5d780c26dc793cab09e2a755b6d":["817fc4762cd649397b27305970dad27295735f3a"],"cdf274a1e3100b0988572e3a39989837d3257fc8":["29f58859ae799964a6d229bf545960d9077932db"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","ac32222db61ee556469b026550814e77b307641b"],"817fc4762cd649397b27305970dad27295735f3a":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"28288370235ed02234a64753cdbf0c6ec096304a":["f1de703f36b1071144037c80ca5fe118aa5e96fd","526bbf21a282a0aeaa55d4963d2646fd87ea5722"],"78c4170c235dc5c6ceb6cdba24c7df20aaee19a2":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"526bbf21a282a0aeaa55d4963d2646fd87ea5722":["f1de703f36b1071144037c80ca5fe118aa5e96fd"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f1de703f36b1071144037c80ca5fe118aa5e96fd"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cdf274a1e3100b0988572e3a39989837d3257fc8"],"ac32222db61ee556469b026550814e77b307641b":["78c4170c235dc5c6ceb6cdba24c7df20aaee19a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1de703f36b1071144037c80ca5fe118aa5e96fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29f58859ae799964a6d229bf545960d9077932db":["28288370235ed02234a64753cdbf0c6ec096304a"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["43564cbb30b064675027cfb569564e8531096e97"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","526bbf21a282a0aeaa55d4963d2646fd87ea5722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf62a41dee1ac5d780c26dc793cab09e2a755b6d"]},"commit2Childs":{"392e007070227c0fd1c28259a11f55a06a9bd7c2":["43564cbb30b064675027cfb569564e8531096e97"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","78c4170c235dc5c6ceb6cdba24c7df20aaee19a2"],"43564cbb30b064675027cfb569564e8531096e97":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"bf62a41dee1ac5d780c26dc793cab09e2a755b6d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cdf274a1e3100b0988572e3a39989837d3257fc8":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["392e007070227c0fd1c28259a11f55a06a9bd7c2","43564cbb30b064675027cfb569564e8531096e97"],"817fc4762cd649397b27305970dad27295735f3a":["bf62a41dee1ac5d780c26dc793cab09e2a755b6d"],"28288370235ed02234a64753cdbf0c6ec096304a":["29f58859ae799964a6d229bf545960d9077932db"],"78c4170c235dc5c6ceb6cdba24c7df20aaee19a2":["ac32222db61ee556469b026550814e77b307641b"],"526bbf21a282a0aeaa55d4963d2646fd87ea5722":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"ac32222db61ee556469b026550814e77b307641b":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","f1de703f36b1071144037c80ca5fe118aa5e96fd"],"f1de703f36b1071144037c80ca5fe118aa5e96fd":["28288370235ed02234a64753cdbf0c6ec096304a","526bbf21a282a0aeaa55d4963d2646fd87ea5722","e9017cf144952056066919f1ebc7897ff9bd71b1"],"29f58859ae799964a6d229bf545960d9077932db":["cdf274a1e3100b0988572e3a39989837d3257fc8"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["817fc4762cd649397b27305970dad27295735f3a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}