{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String,Class[#],boolean).mjava","commits":[{"id":"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa","date":1494330459,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String,Class[#],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String,Class[#]).mjava","sourceNew":"  private static Method findSetter(Class<?> clazz, String setterName, String key, Class<?> paramClazz, boolean lenient) {\n    BeanInfo beanInfo;\n    try {\n      beanInfo = Introspector.getBeanInfo(clazz);\n    } catch (IntrospectionException ie) {\n      if (lenient) {\n        return null;\n      }\n      throw new RuntimeException(\"Error getting bean info for class : \" + clazz.getName(), ie);\n    }\n    for (final boolean matchParamClazz: new boolean[]{true, false}) {\n      for (final MethodDescriptor desc : beanInfo.getMethodDescriptors()) {\n        final Method m = desc.getMethod();\n        final Class<?> p[] = m.getParameterTypes();\n        if (m.getName().equals(setterName) && p.length == 1 &&\n            (!matchParamClazz || paramClazz.equals(p[0]))) {\n          return m;\n        }\n      }\n    }\n    if (lenient) {\n      return null;\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","sourceOld":"  private static Method findSetter(Class<?> clazz, String setterName, String key, Class<?> paramClazz) {\n    BeanInfo beanInfo;\n    try {\n      beanInfo = Introspector.getBeanInfo(clazz);\n    } catch (IntrospectionException ie) {\n      throw new RuntimeException(\"Error getting bean info for class : \" + clazz.getName(), ie);\n    }\n    for (final boolean matchParamClazz: new boolean[]{true, false}) {\n      for (final MethodDescriptor desc : beanInfo.getMethodDescriptors()) {\n        final Method m = desc.getMethod();\n        final Class<?> p[] = m.getParameterTypes();\n        if (m.getName().equals(setterName) && p.length == 1 &&\n            (!matchParamClazz || paramClazz.equals(p[0]))) {\n          return m;\n        }\n      }\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#findSetter(Class[#],String,String,Class[#],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static Method findSetter(Class<?> clazz, String setterName, String key, Class<?> paramClazz, boolean lenient) {\n    BeanInfo beanInfo;\n    try {\n      beanInfo = Introspector.getBeanInfo(clazz);\n    } catch (IntrospectionException ie) {\n      if (lenient) {\n        return null;\n      }\n      throw new RuntimeException(\"Error getting bean info for class : \" + clazz.getName(), ie);\n    }\n    for (final boolean matchParamClazz: new boolean[]{true, false}) {\n      for (final MethodDescriptor desc : beanInfo.getMethodDescriptors()) {\n        final Method m = desc.getMethod();\n        final Class<?> p[] = m.getParameterTypes();\n        if (m.getName().equals(setterName) && p.length == 1 &&\n            (!matchParamClazz || paramClazz.equals(p[0]))) {\n          return m;\n        }\n      }\n    }\n    if (lenient) {\n      return null;\n    }\n    throw new RuntimeException(\"No setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}