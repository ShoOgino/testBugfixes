{"path":"lucene/core/src/java/org/apache/lucene/store/DataInput#readMapOfStrings().mjava","commits":[{"id":"79700663e164dece87bed4adfd3e28bab6cb1385","date":1425241849,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataInput#readMapOfStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Reads a Map&lt;String,String&gt; previously written\n   * with {@link DataOutput#writeMapOfStrings(Map)}. \n   * @return An immutable map containing the written contents.\n   */\n  public Map<String,String> readMapOfStrings() throws IOException {\n    int count = readVInt();\n    if (count == 0) {\n      return Collections.emptyMap();\n    } else if (count == 1) {\n      return Collections.singletonMap(readString(), readString());\n    } else {\n      Map<String,String> map = count > 10 ? new HashMap<>() : new TreeMap<>();\n      for (int i = 0; i < count; i++) {\n        final String key = readString();\n        final String val = readString();\n        map.put(key, val);\n      }\n      return Collections.unmodifiableMap(map);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"299a2348fa24151d150182211b6208a38e5e3450","date":1425304608,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataInput#readMapOfStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Reads a Map&lt;String,String&gt; previously written\n   * with {@link DataOutput#writeMapOfStrings(Map)}. \n   * @return An immutable map containing the written contents.\n   */\n  public Map<String,String> readMapOfStrings() throws IOException {\n    int count = readVInt();\n    if (count == 0) {\n      return Collections.emptyMap();\n    } else if (count == 1) {\n      return Collections.singletonMap(readString(), readString());\n    } else {\n      Map<String,String> map = count > 10 ? new HashMap<>() : new TreeMap<>();\n      for (int i = 0; i < count; i++) {\n        final String key = readString();\n        final String val = readString();\n        map.put(key, val);\n      }\n      return Collections.unmodifiableMap(map);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataInput#readMapOfStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Reads a Map&lt;String,String&gt; previously written\n   * with {@link DataOutput#writeMapOfStrings(Map)}. \n   * @return An immutable map containing the written contents.\n   */\n  public Map<String,String> readMapOfStrings() throws IOException {\n    int count = readVInt();\n    if (count == 0) {\n      return Collections.emptyMap();\n    } else if (count == 1) {\n      return Collections.singletonMap(readString(), readString());\n    } else {\n      Map<String,String> map = count > 10 ? new HashMap<>() : new TreeMap<>();\n      for (int i = 0; i < count; i++) {\n        final String key = readString();\n        final String val = readString();\n        map.put(key, val);\n      }\n      return Collections.unmodifiableMap(map);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79700663e164dece87bed4adfd3e28bab6cb1385"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79700663e164dece87bed4adfd3e28bab6cb1385":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"299a2348fa24151d150182211b6208a38e5e3450":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79700663e164dece87bed4adfd3e28bab6cb1385"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["79700663e164dece87bed4adfd3e28bab6cb1385"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","79700663e164dece87bed4adfd3e28bab6cb1385","299a2348fa24151d150182211b6208a38e5e3450"],"79700663e164dece87bed4adfd3e28bab6cb1385":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","299a2348fa24151d150182211b6208a38e5e3450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"299a2348fa24151d150182211b6208a38e5e3450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","299a2348fa24151d150182211b6208a38e5e3450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}