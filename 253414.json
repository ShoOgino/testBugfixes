{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** If dim=-1 we sort by docID, else by that dim. */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n\n    // All buffered points are still in heap; just do in-place sort:\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        // scratch1 = values[i]\n        writer.readPackedValue(i, scratch1);\n        // scratch2 = values[j]\n        writer.readPackedValue(j, scratch2);\n        // values[i] = scratch2\n        writer.writePackedValue(i, scratch2);\n        // values[j] = scratch1\n        writer.writePackedValue(j, scratch1);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        if (dim != -1) {\n          writer.readPackedValue(i, scratch1);\n          writer.readPackedValue(j, scratch2);\n          int cmp = BKDUtil.compare(bytesPerDim, scratch1, dim, scratch2, dim);\n          if (cmp != 0) {\n            return cmp;\n          }\n        }\n\n        // Tie-break\n        int cmp = Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(writer.ords[i], writer.ords[j]);\n      }\n    }.sort(start, start+length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","sourceNew":"  /** If dim=-1 we sort by docID, else by that dim. */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n\n    // All buffered points are still in heap; just do in-place sort:\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        // scratch1 = values[i]\n        writer.readPackedValue(i, scratch1);\n        // scratch2 = values[j]\n        writer.readPackedValue(j, scratch2);\n        // values[i] = scratch2\n        writer.writePackedValue(i, scratch2);\n        // values[j] = scratch1\n        writer.writePackedValue(j, scratch1);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        writer.readPackedValue(i, scratch1);\n        writer.readPackedValue(j, scratch2);\n        int cmp = BKDUtil.compare(bytesPerDim, scratch1, dim, scratch2, dim);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(writer.ords[i], writer.ords[j]);\n      }\n    }.sort(start, start+length);\n  }\n\n","sourceOld":"  /** If dim=-1 we sort by docID, else by that dim. */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n\n    // All buffered points are still in heap; just do in-place sort:\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        // scratch1 = values[i]\n        writer.readPackedValue(i, scratch1);\n        // scratch2 = values[j]\n        writer.readPackedValue(j, scratch2);\n        // values[i] = scratch2\n        writer.writePackedValue(i, scratch2);\n        // values[j] = scratch1\n        writer.writePackedValue(j, scratch1);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        if (dim != -1) {\n          writer.readPackedValue(i, scratch1);\n          writer.readPackedValue(j, scratch2);\n          int cmp = BKDUtil.compare(bytesPerDim, scratch1, dim, scratch2, dim);\n          if (cmp != 0) {\n            return cmp;\n          }\n        }\n\n        // Tie-break\n        int cmp = Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(writer.ords[i], writer.ords[j]);\n      }\n    }.sort(start, start+length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1786be6a11f9cf5e48ce84869d1bb71e9c02f966","date":1448381196,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    //System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n      private long pivotOrd;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        pivotOrd = writer.ords[i];\n\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = BKDUtil.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), index*numDims+dim);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(pivotDocID, writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(pivotOrd, writer.ords[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = BKDUtil.compare(bytesPerDim, writer.blocks.get(blockI), dimI*numDims+dim, writer.blocks.get(blockJ), dimJ*numDims+dim);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(writer.ords[i], writer.ords[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","sourceOld":"  /** If dim=-1 we sort by docID, else by that dim. */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n\n    // All buffered points are still in heap; just do in-place sort:\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        // scratch1 = values[i]\n        writer.readPackedValue(i, scratch1);\n        // scratch2 = values[j]\n        writer.readPackedValue(j, scratch2);\n        // values[i] = scratch2\n        writer.writePackedValue(i, scratch2);\n        // values[j] = scratch1\n        writer.writePackedValue(j, scratch1);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        writer.readPackedValue(i, scratch1);\n        writer.readPackedValue(j, scratch2);\n        int cmp = BKDUtil.compare(bytesPerDim, scratch1, dim, scratch2, dim);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(writer.ords[i], writer.ords[j]);\n      }\n    }.sort(start, start+length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    //System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n      private long pivotOrd;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        pivotOrd = writer.ords[i];\n\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = NumericUtils.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), index*numDims+dim);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(pivotDocID, writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(pivotOrd, writer.ords[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = NumericUtils.compare(bytesPerDim, writer.blocks.get(blockI), dimI*numDims+dim, writer.blocks.get(blockJ), dimJ*numDims+dim);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(writer.ords[i], writer.ords[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","sourceOld":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    //System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n      private long pivotOrd;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        pivotOrd = writer.ords[i];\n\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = BKDUtil.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), index*numDims+dim);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(pivotDocID, writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(pivotOrd, writer.ords[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = BKDUtil.compare(bytesPerDim, writer.blocks.get(blockI), dimI*numDims+dim, writer.blocks.get(blockJ), dimJ*numDims+dim);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(writer.ords[i], writer.ords[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12bfdc932307442b651432f92845942f9041ace8","date":1456860728,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    //System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n      private long pivotOrd;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        pivotOrd = writer.ords[i];\n\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = StringHelper.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), bytesPerDim*(index*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(pivotDocID, writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(pivotOrd, writer.ords[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = StringHelper.compare(bytesPerDim, writer.blocks.get(blockI), bytesPerDim*(dimI*numDims+dim), writer.blocks.get(blockJ), bytesPerDim*(dimJ*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(writer.ords[i], writer.ords[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","sourceOld":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    //System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n      private long pivotOrd;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        pivotOrd = writer.ords[i];\n\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = NumericUtils.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), index*numDims+dim);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(pivotDocID, writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(pivotOrd, writer.ords[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = NumericUtils.compare(bytesPerDim, writer.blocks.get(blockI), dimI*numDims+dim, writer.blocks.get(blockJ), dimJ*numDims+dim);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(writer.ords[i], writer.ords[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    // System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n      private long pivotOrd;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        pivotOrd = writer.ords[i];\n\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = StringHelper.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), bytesPerDim*(index*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(pivotDocID, writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(pivotOrd, writer.ords[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = StringHelper.compare(bytesPerDim, writer.blocks.get(blockI), bytesPerDim*(dimI*numDims+dim), writer.blocks.get(blockJ), bytesPerDim*(dimJ*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break by docID:\n\n        // No need to tie break on ord, for the case where the same doc has the same value in a given dimension indexed more than once: it\n        // can't matter at search time since we don't write ords into the index:\n        return Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","sourceOld":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    //System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n      private long pivotOrd;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        pivotOrd = writer.ords[i];\n\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = StringHelper.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), bytesPerDim*(index*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(pivotDocID, writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(pivotOrd, writer.ords[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = StringHelper.compare(bytesPerDim, writer.blocks.get(blockI), bytesPerDim*(dimI*numDims+dim), writer.blocks.get(blockJ), bytesPerDim*(dimJ*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(writer.ords[i], writer.ords[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    // System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n      private long pivotOrd;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        pivotOrd = writer.ords[i];\n\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = StringHelper.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), bytesPerDim*(index*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(pivotDocID, writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(pivotOrd, writer.ords[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = StringHelper.compare(bytesPerDim, writer.blocks.get(blockI), bytesPerDim*(dimI*numDims+dim), writer.blocks.get(blockJ), bytesPerDim*(dimJ*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break by docID:\n\n        // No need to tie break on ord, for the case where the same doc has the same value in a given dimension indexed more than once: it\n        // can't matter at search time since we don't write ords into the index:\n        return Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","sourceOld":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    //System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n      private long pivotOrd;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        pivotOrd = writer.ords[i];\n\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = NumericUtils.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), index*numDims+dim);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(pivotDocID, writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(pivotOrd, writer.ords[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = NumericUtils.compare(bytesPerDim, writer.blocks.get(blockI), dimI*numDims+dim, writer.blocks.get(blockJ), dimJ*numDims+dim);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(writer.ords[i], writer.ords[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca","date":1457777566,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    // System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = StringHelper.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), bytesPerDim*(index*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        return Integer.compare(pivotDocID, writer.docIDs[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        if (longOrds) {\n          long ord = writer.ordsLong[i];\n          writer.ordsLong[i] = writer.ordsLong[j];\n          writer.ordsLong[j] = ord;\n        } else {\n          int ord = writer.ords[i];\n          writer.ords[i] = writer.ords[j];\n          writer.ords[j] = ord;\n        }\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = StringHelper.compare(bytesPerDim, writer.blocks.get(blockI), bytesPerDim*(dimI*numDims+dim), writer.blocks.get(blockJ), bytesPerDim*(dimJ*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break by docID:\n\n        // No need to tie break on ord, for the case where the same doc has the same value in a given dimension indexed more than once: it\n        // can't matter at search time since we don't write ords into the index:\n        return Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","sourceOld":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    // System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n      private long pivotOrd;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        pivotOrd = writer.ords[i];\n\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = StringHelper.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), bytesPerDim*(index*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        cmp = Integer.compare(pivotDocID, writer.docIDs[j]);\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        return Long.compare(pivotOrd, writer.ords[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        long ord = writer.ords[i];\n        writer.ords[i] = writer.ords[j];\n        writer.ords[j] = ord;\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = StringHelper.compare(bytesPerDim, writer.blocks.get(blockI), bytesPerDim*(dimI*numDims+dim), writer.blocks.get(blockJ), bytesPerDim*(dimJ*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break by docID:\n\n        // No need to tie break on ord, for the case where the same doc has the same value in a given dimension indexed more than once: it\n        // can't matter at search time since we don't write ords into the index:\n        return Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    // System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = StringHelper.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), bytesPerDim*(index*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        return Integer.compare(pivotDocID, writer.docIDs[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        if (singleValuePerDoc == false) {\n          if (longOrds) {\n            long ord = writer.ordsLong[i];\n            writer.ordsLong[i] = writer.ordsLong[j];\n            writer.ordsLong[j] = ord;\n          } else {\n            int ord = writer.ords[i];\n            writer.ords[i] = writer.ords[j];\n            writer.ords[j] = ord;\n          }\n        }\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = StringHelper.compare(bytesPerDim, writer.blocks.get(blockI), bytesPerDim*(dimI*numDims+dim), writer.blocks.get(blockJ), bytesPerDim*(dimJ*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break by docID:\n\n        // No need to tie break on ord, for the case where the same doc has the same value in a given dimension indexed more than once: it\n        // can't matter at search time since we don't write ords into the index:\n        return Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","sourceOld":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    // System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = StringHelper.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), bytesPerDim*(index*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        return Integer.compare(pivotDocID, writer.docIDs[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        if (longOrds) {\n          long ord = writer.ordsLong[i];\n          writer.ordsLong[i] = writer.ordsLong[j];\n          writer.ordsLong[j] = ord;\n        } else {\n          int ord = writer.ords[i];\n          writer.ords[i] = writer.ords[j];\n          writer.ords[j] = ord;\n        }\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = StringHelper.compare(bytesPerDim, writer.blocks.get(blockI), bytesPerDim*(dimI*numDims+dim), writer.blocks.get(blockJ), bytesPerDim*(dimJ*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break by docID:\n\n        // No need to tie break on ord, for the case where the same doc has the same value in a given dimension indexed more than once: it\n        // can't matter at search time since we don't write ords into the index:\n        return Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1987c0002f396ce6d6dada94c6773d6ba0e03f50","date":1458660902,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    // System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = StringHelper.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), bytesPerDim*(index*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        return Integer.compare(pivotDocID, writer.docIDs[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        if (singleValuePerDoc == false) {\n          if (longOrds) {\n            long ord = writer.ordsLong[i];\n            writer.ordsLong[i] = writer.ordsLong[j];\n            writer.ordsLong[j] = ord;\n          } else {\n            int ord = writer.ords[i];\n            writer.ords[i] = writer.ords[j];\n            writer.ords[j] = ord;\n          }\n        }\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = StringHelper.compare(bytesPerDim, writer.blocks.get(blockI), bytesPerDim*(dimI*numDims+dim), writer.blocks.get(blockJ), bytesPerDim*(dimJ*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break by docID:\n\n        // No need to tie break on ord, for the case where the same doc has the same value in a given dimension indexed more than once: it\n        // can't matter at search time since we don't write ords into the index:\n        return Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n      }\n    }.sort(0, Math.toIntExact(pointCount));\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","sourceOld":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int start, int length, int dim) {\n\n    assert pointCount < Integer.MAX_VALUE;\n    //int[] swapCount = new int[1];\n    //int[] cmpCount = new int[1];\n\n    // System.out.println(\"SORT length=\" + length);\n\n    // All buffered points are still in heap; just do in-place sort:\n    new IntroSorter() {\n      private final byte[] pivotPackedValue = new byte[bytesPerDim];\n      private int pivotDocID;\n\n      @Override\n      protected void setPivot(int i) {\n        pivotDocID = writer.docIDs[i];\n        int block = i / writer.valuesPerBlock;\n        int index = i % writer.valuesPerBlock;\n        System.arraycopy(writer.blocks.get(block), index*packedBytesLength+dim*bytesPerDim, pivotPackedValue, 0, bytesPerDim);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        //cmpCount[0]++;\n        int block = j / writer.valuesPerBlock;\n        int index = j % writer.valuesPerBlock;\n        assert index >= 0: \"index=\" + index + \" j=\" + j;\n        int cmp = StringHelper.compare(bytesPerDim, pivotPackedValue, 0, writer.blocks.get(block), bytesPerDim*(index*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break\n        return Integer.compare(pivotDocID, writer.docIDs[j]);\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        if (singleValuePerDoc == false) {\n          if (longOrds) {\n            long ord = writer.ordsLong[i];\n            writer.ordsLong[i] = writer.ordsLong[j];\n            writer.ordsLong[j] = ord;\n          } else {\n            int ord = writer.ords[i];\n            writer.ords[i] = writer.ords[j];\n            writer.ords[j] = ord;\n          }\n        }\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        //cmpCount[0]++;\n        int blockI = i / writer.valuesPerBlock;\n        int dimI = i % writer.valuesPerBlock;\n        int blockJ = j / writer.valuesPerBlock;\n        int dimJ = j % writer.valuesPerBlock;\n        int cmp = StringHelper.compare(bytesPerDim, writer.blocks.get(blockI), bytesPerDim*(dimI*numDims+dim), writer.blocks.get(blockJ), bytesPerDim*(dimJ*numDims+dim));\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // Tie-break by docID:\n\n        // No need to tie break on ord, for the case where the same doc has the same value in a given dimension indexed more than once: it\n        // can't matter at search time since we don't write ords into the index:\n        return Integer.compare(writer.docIDs[i], writer.docIDs[j]);\n      }\n    }.sort(start, start+length);\n    //System.out.println(\"LEN=\" + length + \" SWAP=\" + swapCount[0] + \" CMP=\" + cmpCount[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int pointCount, int dim, int commonPrefixLength) {\n    // Tie-break by docID:\n    new MSBRadixSorter(bytesPerDim + Integer.BYTES - commonPrefixLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k + commonPrefixLength < bytesPerDim) {\n          // dim bytes\n          int block = i / writer.valuesPerBlock;\n          int index = i % writer.valuesPerBlock;\n          return writer.blocks.get(block)[index * packedBytesLength + dim * bytesPerDim + k + commonPrefixLength] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k + commonPrefixLength - bytesPerDim);\n          return (writer.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        writer.swap(i, j);\n      }\n\n    }.sort(0, pointCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":6,"author":"iverase","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int from, int to, int dim, int commonPrefixLength) {\n    // Tie-break by docID:\n    new MSBRadixSorter(bytesPerDim + Integer.BYTES - commonPrefixLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k + commonPrefixLength < bytesPerDim) {\n          // dim bytes\n          int block = i / writer.valuesPerBlock;\n          int index = i % writer.valuesPerBlock;\n          return writer.blocks.get(block)[index * packedBytesLength + dim * bytesPerDim + k + commonPrefixLength] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k + commonPrefixLength - bytesPerDim);\n          return (writer.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        writer.swap(i, j);\n      }\n\n    }.sort(from, to);\n  }\n\n","sourceOld":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int pointCount, int dim, int commonPrefixLength) {\n    // Tie-break by docID:\n    new MSBRadixSorter(bytesPerDim + Integer.BYTES - commonPrefixLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k + commonPrefixLength < bytesPerDim) {\n          // dim bytes\n          int block = i / writer.valuesPerBlock;\n          int index = i % writer.valuesPerBlock;\n          return writer.blocks.get(block)[index * packedBytesLength + dim * bytesPerDim + k + commonPrefixLength] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k + commonPrefixLength - bytesPerDim);\n          return (writer.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        writer.swap(i, j);\n      }\n\n    }.sort(0, pointCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#sortHeapPointWriter(HeapPointWriter,int,int,int).mjava","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int from, int to, int dim, int commonPrefixLength) {\n    // Tie-break by docID:\n    new MSBRadixSorter(bytesPerDim + Integer.BYTES - commonPrefixLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k + commonPrefixLength < bytesPerDim) {\n          // dim bytes\n          int block = i / writer.valuesPerBlock;\n          int index = i % writer.valuesPerBlock;\n          return writer.blocks.get(block)[index * packedBytesLength + dim * bytesPerDim + k + commonPrefixLength] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k + commonPrefixLength - bytesPerDim);\n          return (writer.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        writer.swap(i, j);\n      }\n\n    }.sort(from, to);\n  }\n\n","sourceOld":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int pointCount, int dim, int commonPrefixLength) {\n    // Tie-break by docID:\n    new MSBRadixSorter(bytesPerDim + Integer.BYTES - commonPrefixLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k + commonPrefixLength < bytesPerDim) {\n          // dim bytes\n          int block = i / writer.valuesPerBlock;\n          int index = i % writer.valuesPerBlock;\n          return writer.blocks.get(block)[index * packedBytesLength + dim * bytesPerDim + k + commonPrefixLength] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k + commonPrefixLength - bytesPerDim);\n          return (writer.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        writer.swap(i, j);\n      }\n\n    }.sort(0, pointCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["1987c0002f396ce6d6dada94c6773d6ba0e03f50"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["12bfdc932307442b651432f92845942f9041ace8"],"770342641f7b505eaa8dccdc666158bff2419109":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"12bfdc932307442b651432f92845942f9041ace8":["770342641f7b505eaa8dccdc666158bff2419109"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"1987c0002f396ce6d6dada94c6773d6ba0e03f50":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a69ebf290ab26d026cc224e517e0d93d931ac87b"]},"commit2Childs":{"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["770342641f7b505eaa8dccdc666158bff2419109"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"770342641f7b505eaa8dccdc666158bff2419109":["12bfdc932307442b651432f92845942f9041ace8","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"12bfdc932307442b651432f92845942f9041ace8":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["1987c0002f396ce6d6dada94c6773d6ba0e03f50"],"1987c0002f396ce6d6dada94c6773d6ba0e03f50":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}