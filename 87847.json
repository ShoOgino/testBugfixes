{"path":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(String).mjava","commits":[{"id":"4b1444275c93a8051a6fe6158639467a144ae0a4","date":1224502393,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(String).mjava","pathOld":"/dev/null","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData String.  This does the first phase of\n   *  2-phase commit.  You can only call this when\n   *  autoCommit is false.  This method does all steps\n   *  necessary to commit changes since this writer was\n   *  opened: flushes pending added and deleted docs, syncs\n   *  the index files, writes most of next segments_N file.\n   *  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(String)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  @param commitUserData Opaque String that's recorded\n   *  into the segments file in the index, and retrievable\n   *  by {@link IndexReader#getCommitUserData}.  Note that\n   *  when IndexWriter commits itself, for example if open\n   *  with autoCommit=true, or, during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.  Therefore it's best to use this\n   *  feature only when autoCommit is false.\n   */\n  public final void prepareCommit(String commitUserData) throws CorruptIndexException, IOException {\n    prepareCommit(commitUserData, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9665d17707cc21b1db995118ff36129723139ab","date":1225384420,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(String).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData String.  This does the first phase of\n   *  2-phase commit.  You can only call this when\n   *  autoCommit is false.  This method does all steps\n   *  necessary to commit changes since this writer was\n   *  opened: flushes pending added and deleted docs, syncs\n   *  the index files, writes most of next segments_N file.\n   *  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(String)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque String that's recorded\n   *  into the segments file in the index, and retrievable\n   *  by {@link IndexReader#getCommitUserData}.  Note that\n   *  when IndexWriter commits itself, for example if open\n   *  with autoCommit=true, or, during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.  Therefore it's best to use this\n   *  feature only when autoCommit is false.\n   */\n  public final void prepareCommit(String commitUserData) throws CorruptIndexException, IOException {\n    prepareCommit(commitUserData, false);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData String.  This does the first phase of\n   *  2-phase commit.  You can only call this when\n   *  autoCommit is false.  This method does all steps\n   *  necessary to commit changes since this writer was\n   *  opened: flushes pending added and deleted docs, syncs\n   *  the index files, writes most of next segments_N file.\n   *  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(String)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  @param commitUserData Opaque String that's recorded\n   *  into the segments file in the index, and retrievable\n   *  by {@link IndexReader#getCommitUserData}.  Note that\n   *  when IndexWriter commits itself, for example if open\n   *  with autoCommit=true, or, during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.  Therefore it's best to use this\n   *  feature only when autoCommit is false.\n   */\n  public final void prepareCommit(String commitUserData) throws CorruptIndexException, IOException {\n    prepareCommit(commitUserData, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3ab91f3bb602daf6393fa7f78b11afd3400d669","date":1243282044,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(String).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit.  You can only call this\n   *  when autoCommit is false.  This method does all steps\n   *  necessary to commit changes since this writer was\n   *  opened: flushes pending added and deleted docs, syncs\n   *  the index files, writes most of next segments_N file.\n   *  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself, for example if open with\n   *  autoCommit=true, or, during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.  Therefore it's best to use this\n   *  feature only when autoCommit is false.\n   */\n  public final void prepareCommit(Map commitUserData) throws CorruptIndexException, IOException {\n    prepareCommit(commitUserData, false);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData String.  This does the first phase of\n   *  2-phase commit.  You can only call this when\n   *  autoCommit is false.  This method does all steps\n   *  necessary to commit changes since this writer was\n   *  opened: flushes pending added and deleted docs, syncs\n   *  the index files, writes most of next segments_N file.\n   *  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(String)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque String that's recorded\n   *  into the segments file in the index, and retrievable\n   *  by {@link IndexReader#getCommitUserData}.  Note that\n   *  when IndexWriter commits itself, for example if open\n   *  with autoCommit=true, or, during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.  Therefore it's best to use this\n   *  feature only when autoCommit is false.\n   */\n  public final void prepareCommit(String commitUserData) throws CorruptIndexException, IOException {\n    prepareCommit(commitUserData, false);\n  }\n\n","bugFix":null,"bugIntro":["77f2d7c2378a8a9c822e657ca7c4902aaa79f3ac"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e9665d17707cc21b1db995118ff36129723139ab":["4b1444275c93a8051a6fe6158639467a144ae0a4"],"4b1444275c93a8051a6fe6158639467a144ae0a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["e9665d17707cc21b1db995118ff36129723139ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"]},"commit2Childs":{"e9665d17707cc21b1db995118ff36129723139ab":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"4b1444275c93a8051a6fe6158639467a144ae0a4":["e9665d17707cc21b1db995118ff36129723139ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b1444275c93a8051a6fe6158639467a144ae0a4"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}