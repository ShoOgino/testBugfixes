{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextPosition().mjava","commits":[{"id":"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","date":1308411958,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a81d4e03e5fe1327c36803b2b698afcbc96eca0b","date":1309376774,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads + \" this=\" + this);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        // Necessary, in case caller changed the\n        // payload.bytes from prior call:\n        payload.bytes = buffer;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads + \" this=\" + this);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        // Necessary, in case caller changed the\n        // payload.bytes from prior call:\n        payload.bytes = buffer;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads + \" this=\" + this);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        // Necessary, in case caller changed the\n        // payload.bytes from prior call:\n        payload.bytes = buffer;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads + \" this=\" + this);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        // Necessary, in case caller changed the\n        // payload.bytes from prior call:\n        payload.bytes = buffer;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() {\n      if (VERBOSE) System.out.println(\"    nextPos storePayloads=\" + storePayloads + \" this=\" + this);\n      assert posPending > 0;\n      posPending--;\n      if (!storePayloads) {\n        pos += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        pos += code >>> 1;\n        if ((code & 1) != 0) {\n          payloadLength = in.readVInt();\n          //System.out.println(\"      new payloadLen=\" + payloadLength);\n          //} else {\n          //System.out.println(\"      same payloadLen=\" + payloadLength);\n        }\n        payload.offset = in.getPosition();\n        in.skipBytes(payloadLength);\n        payload.length = payloadLength;\n        // Necessary, in case caller changed the\n        // payload.bytes from prior call:\n        payload.bytes = buffer;\n        payloadRetrieved = false;\n      }\n\n      if (VERBOSE) System.out.println(\"      pos=\" + pos + \" payload=\" + payload + \" fp=\" + in.getPosition());\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a81d4e03e5fe1327c36803b2b698afcbc96eca0b"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"a81d4e03e5fe1327c36803b2b698afcbc96eca0b":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","a81d4e03e5fe1327c36803b2b698afcbc96eca0b"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","a81d4e03e5fe1327c36803b2b698afcbc96eca0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a81d4e03e5fe1327c36803b2b698afcbc96eca0b":["7b91922b55d15444d554721b352861d028eb8278","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","a81d4e03e5fe1327c36803b2b698afcbc96eca0b","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}