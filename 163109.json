{"path":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 44, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 44, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do another delete & another setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure 2nd delete & 2nd norm \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b583d3621fe173e7296abcf62f82fb707c901234","date":1194717060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName, null, false);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 44, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 44, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a015c55424dd37249054283bedc90388bd45358f","date":1197049353,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 44, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName, null, false);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 44, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33","date":1201260752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 44, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 43, hits.length());\n    d = hits.doc(0);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5e023aa3e1228b8ccacdc30d852eb88e996d1b2","date":1247229077,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    assertEquals(\"wrong doc count\", 45, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":["059062eb4071e7bbb5a38b6513158f2f87ede135"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","sourceNew":null,"sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","sourceNew":null,"sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf","date":1254831905,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"712be41a80a289d25186217345860f2ddec4cab8","date":1254838366,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String,boolean).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.docCount());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["a015c55424dd37249054283bedc90388bd45358f"],"0a046c0c310bc77931fc8441bd920053b607dd14":["c5e023aa3e1228b8ccacdc30d852eb88e996d1b2","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["0a046c0c310bc77931fc8441bd920053b607dd14"],"b583d3621fe173e7296abcf62f82fb707c901234":["8b6187898fc4413ccd18229711786550a280383c"],"a015c55424dd37249054283bedc90388bd45358f":["b583d3621fe173e7296abcf62f82fb707c901234"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["c5e023aa3e1228b8ccacdc30d852eb88e996d1b2"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5e023aa3e1228b8ccacdc30d852eb88e996d1b2":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"712be41a80a289d25186217345860f2ddec4cab8":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["712be41a80a289d25186217345860f2ddec4cab8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["712be41a80a289d25186217345860f2ddec4cab8"],"b583d3621fe173e7296abcf62f82fb707c901234":["a015c55424dd37249054283bedc90388bd45358f"],"a015c55424dd37249054283bedc90388bd45358f":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["c5e023aa3e1228b8ccacdc30d852eb88e996d1b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"c5e023aa3e1228b8ccacdc30d852eb88e996d1b2":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"712be41a80a289d25186217345860f2ddec4cab8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b6187898fc4413ccd18229711786550a280383c":["b583d3621fe173e7296abcf62f82fb707c901234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}