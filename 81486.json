{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newFloatRange(String,Float,Float,boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newFloatRange(String,Float,Float,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newFloatRange(String,Float,Float,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getFloats(AtomicReader,String,boolean)}. This works with all\n   * float fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Float> newFloatRange(String field, Float lowerVal, Float upperVal, boolean includeLower, boolean includeUpper) {\n    return newFloatRange(field, null, lowerVal, upperVal, includeLower, includeUpper);\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getFloats(AtomicReader,String,boolean)}. This works with all\n   * float fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Float> newFloatRange(String field, Float lowerVal, Float upperVal, boolean includeLower, boolean includeUpper) {\n    return newFloatRange(field, null, lowerVal, upperVal, includeLower, includeUpper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newFloatRange(String,Float,Float,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newFloatRange(String,Float,Float,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link AtomicReader#getNumericDocValues(String)}. This works with all\n   * float fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Float> newFloatRange(String field, Float lowerVal, Float upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Float>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        // we transform the floating point numbers to sortable integers\n        // using NumericUtils to easier find the next bigger/lower value\n        final float inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          float f = lowerVal.floatValue();\n          if (!includeUpper && f > 0.0f && Float.isInfinite(f))\n            return null;\n          int i = NumericUtils.floatToSortableInt(f);\n          inclusiveLowerPoint = NumericUtils.sortableIntToFloat( includeLower ?  i : (i + 1) );\n        } else {\n          inclusiveLowerPoint = Float.NEGATIVE_INFINITY;\n        }\n        if (upperVal != null) {\n          float f = upperVal.floatValue();\n          if (!includeUpper && f < 0.0f && Float.isInfinite(f))\n            return null;\n          int i = NumericUtils.floatToSortableInt(f);\n          inclusiveUpperPoint = NumericUtils.sortableIntToFloat( includeUpper ? i : (i - 1) );\n        } else {\n          inclusiveUpperPoint = Float.POSITIVE_INFINITY;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final NumericDocValues values = DocValues.getNumeric(context.reader(), field);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final float value = Float.intBitsToFloat((int)values.get(doc));\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getFloats(AtomicReader,String,boolean)}. This works with all\n   * float fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Float> newFloatRange(String field, Float lowerVal, Float upperVal, boolean includeLower, boolean includeUpper) {\n    return newFloatRange(field, null, lowerVal, upperVal, includeLower, includeUpper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeFilter#newFloatRange(String,Float,Float,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newFloatRange(String,Float,Float,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link AtomicReader#getNumericDocValues(String)}. This works with all\n   * float fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocValuesRangeFilter<Float> newFloatRange(String field, Float lowerVal, Float upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocValuesRangeFilter<Float>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        // we transform the floating point numbers to sortable integers\n        // using NumericUtils to easier find the next bigger/lower value\n        final float inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          float f = lowerVal.floatValue();\n          if (!includeUpper && f > 0.0f && Float.isInfinite(f))\n            return null;\n          int i = NumericUtils.floatToSortableInt(f);\n          inclusiveLowerPoint = NumericUtils.sortableIntToFloat( includeLower ?  i : (i + 1) );\n        } else {\n          inclusiveLowerPoint = Float.NEGATIVE_INFINITY;\n        }\n        if (upperVal != null) {\n          float f = upperVal.floatValue();\n          if (!includeUpper && f < 0.0f && Float.isInfinite(f))\n            return null;\n          int i = NumericUtils.floatToSortableInt(f);\n          inclusiveUpperPoint = NumericUtils.sortableIntToFloat( includeUpper ? i : (i - 1) );\n        } else {\n          inclusiveUpperPoint = Float.POSITIVE_INFINITY;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final NumericDocValues values = DocValues.getNumeric(context.reader(), field);\n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final float value = Float.intBitsToFloat((int)values.get(doc));\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link AtomicReader#getNumericDocValues(String)}. This works with all\n   * float fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Float> newFloatRange(String field, Float lowerVal, Float upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Float>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        // we transform the floating point numbers to sortable integers\n        // using NumericUtils to easier find the next bigger/lower value\n        final float inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          float f = lowerVal.floatValue();\n          if (!includeUpper && f > 0.0f && Float.isInfinite(f))\n            return null;\n          int i = NumericUtils.floatToSortableInt(f);\n          inclusiveLowerPoint = NumericUtils.sortableIntToFloat( includeLower ?  i : (i + 1) );\n        } else {\n          inclusiveLowerPoint = Float.NEGATIVE_INFINITY;\n        }\n        if (upperVal != null) {\n          float f = upperVal.floatValue();\n          if (!includeUpper && f < 0.0f && Float.isInfinite(f))\n            return null;\n          int i = NumericUtils.floatToSortableInt(f);\n          inclusiveUpperPoint = NumericUtils.sortableIntToFloat( includeUpper ? i : (i - 1) );\n        } else {\n          inclusiveUpperPoint = Float.POSITIVE_INFINITY;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final NumericDocValues values = DocValues.getNumeric(context.reader(), field);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final float value = Float.intBitsToFloat((int)values.get(doc));\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newFloatRange(String,Float,Float,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getFloats(AtomicReader,String,boolean)}. This works with all\n   * float fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Float> newFloatRange(String field, Float lowerVal, Float upperVal, boolean includeLower, boolean includeUpper) {\n    return newFloatRange(field, null, lowerVal, upperVal, includeLower, includeUpper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newFloatRange(String,Float,Float,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getFloats(AtomicReader,String,boolean)}. This works with all\n   * float fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Float> newFloatRange(String field, Float lowerVal, Float upperVal, boolean includeLower, boolean includeUpper) {\n    return newFloatRange(field, null, lowerVal, upperVal, includeLower, includeUpper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9274621789ce990dbfef455dabdf026bb3184821":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9274621789ce990dbfef455dabdf026bb3184821"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["9274621789ce990dbfef455dabdf026bb3184821"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}