{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#deleteNonSnapshotIndexFiles(String).mjava","commits":[{"id":"3e13696c44d3e2405098726359ab81dab178e7bc","date":1476726926,"type":0,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#deleteNonSnapshotIndexFiles(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method deletes the index files not associated with any named snapshot only\n   * if the specified indexDirPath is not the *current* index directory.\n   *\n   * @param indexDirPath The path of the directory\n   * @throws IOException In case of I/O error.\n   */\n  public void deleteNonSnapshotIndexFiles(String indexDirPath) throws IOException {\n    // Skip if the specified indexDirPath is the *current* index directory.\n    if (getIndexDir().equals(indexDirPath)) {\n      return;\n    }\n\n    // Note this lock is required to prevent multiple snapshot deletions from\n    // opening multiple IndexWriter instances simultaneously.\n    this.snapshotDelLock.lock();\n    Directory dir = getDirectoryFactory().get(indexDirPath, DirContext.DEFAULT, \"none\");\n    try {\n      Collection<SnapshotMetaData> snapshots = snapshotMgr.listSnapshotsInIndexDir(indexDirPath);\n      log.info(\"Following snapshots exist in the index directory {} : {}\", indexDirPath, snapshots);\n      // Delete the old index directory only if no snapshot exists in that directory.\n      if (snapshots.isEmpty()) {\n        log.info(\"Removing index directory {} since all named snapshots are deleted.\", indexDirPath);\n        getDirectoryFactory().remove(dir);\n      } else {\n        SolrSnapshotManager.deleteNonSnapshotIndexFiles(this, dir, snapshots);\n      }\n    } finally {\n      snapshotDelLock.unlock();\n      if (dir != null) {\n        getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#deleteNonSnapshotIndexFiles(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method deletes the index files not associated with any named snapshot only\n   * if the specified indexDirPath is not the *current* index directory.\n   *\n   * @param indexDirPath The path of the directory\n   * @throws IOException In case of I/O error.\n   */\n  public void deleteNonSnapshotIndexFiles(String indexDirPath) throws IOException {\n    // Skip if the specified indexDirPath is the *current* index directory.\n    if (getIndexDir().equals(indexDirPath)) {\n      return;\n    }\n\n    // Note this lock is required to prevent multiple snapshot deletions from\n    // opening multiple IndexWriter instances simultaneously.\n    this.snapshotDelLock.lock();\n    Directory dir = getDirectoryFactory().get(indexDirPath, DirContext.DEFAULT, \"none\");\n    try {\n      Collection<SnapshotMetaData> snapshots = snapshotMgr.listSnapshotsInIndexDir(indexDirPath);\n      log.info(\"Following snapshots exist in the index directory {} : {}\", indexDirPath, snapshots);\n      // Delete the old index directory only if no snapshot exists in that directory.\n      if (snapshots.isEmpty()) {\n        log.info(\"Removing index directory {} since all named snapshots are deleted.\", indexDirPath);\n        getDirectoryFactory().remove(dir);\n      } else {\n        SolrSnapshotManager.deleteNonSnapshotIndexFiles(this, dir, snapshots);\n      }\n    } finally {\n      snapshotDelLock.unlock();\n      if (dir != null) {\n        getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e13696c44d3e2405098726359ab81dab178e7bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e13696c44d3e2405098726359ab81dab178e7bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e13696c44d3e2405098726359ab81dab178e7bc"]},"commit2Childs":{"3e13696c44d3e2405098726359ab81dab178e7bc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e13696c44d3e2405098726359ab81dab178e7bc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}