{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","sourceNew":"  /** Expert: constructs a TermQuery that will use the\n   *  provided docFreq instead of looking up the docFreq\n   *  against the searcher. */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = t;\n    docFreq = states.docFreq();\n    perReaderTermState = states;\n  }\n\n","sourceOld":"  /** Expert: constructs a TermQuery that will use the\n   *  provided docFreq instead of looking up the docFreq\n   *  against the searcher. */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = t;\n    docFreq = states.docFreq();\n    perReaderTermState = states;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","sourceNew":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = t;\n    docFreq = states.docFreq();\n    perReaderTermState = states;\n  }\n\n","sourceOld":"  /** Expert: constructs a TermQuery that will use the\n   *  provided docFreq instead of looking up the docFreq\n   *  against the searcher. */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = t;\n    docFreq = states.docFreq();\n    perReaderTermState = states;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"365f98746545c0785c9778597f8558f5f91db4ad","date":1429195989,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","sourceNew":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = Objects.requireNonNull(t);\n    perReaderTermState = Objects.requireNonNull(states);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = t;\n    docFreq = states.docFreq();\n    perReaderTermState = states;\n  }\n\n","bugFix":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17a677e88529303e630fb314d1506ea0cdb40f00","date":1432211402,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","sourceNew":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = Objects.requireNonNull(t);\n    if (states.hasOnlyRealTerms() == false) {\n      // The reason for this is that fake terms might have the same bytes as\n      // real terms, and this confuses query caching because they don't match\n      // the same documents\n      throw new IllegalArgumentException(\"Term queries must be created on real terms\");\n    }\n    perReaderTermState = Objects.requireNonNull(states);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = Objects.requireNonNull(t);\n    perReaderTermState = Objects.requireNonNull(states);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","date":1466407389,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","sourceNew":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = Objects.requireNonNull(t);\n    perReaderTermState = Objects.requireNonNull(states);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = Objects.requireNonNull(t);\n    if (states.hasOnlyRealTerms() == false) {\n      // The reason for this is that fake terms might have the same bytes as\n      // real terms, and this confuses query caching because they don't match\n      // the same documents\n      throw new IllegalArgumentException(\"Term queries must be created on real terms\");\n    }\n    perReaderTermState = Objects.requireNonNull(states);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","sourceNew":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = Objects.requireNonNull(t);\n    perReaderTermState = Objects.requireNonNull(states);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = Objects.requireNonNull(t);\n    if (states.hasOnlyRealTerms() == false) {\n      // The reason for this is that fake terms might have the same bytes as\n      // real terms, and this confuses query caching because they don't match\n      // the same documents\n      throw new IllegalArgumentException(\"Term queries must be created on real terms\");\n    }\n    perReaderTermState = Objects.requireNonNull(states);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","sourceNew":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = Objects.requireNonNull(t);\n    perReaderTermState = Objects.requireNonNull(states);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = Objects.requireNonNull(t);\n    if (states.hasOnlyRealTerms() == false) {\n      // The reason for this is that fake terms might have the same bytes as\n      // real terms, and this confuses query caching because they don't match\n      // the same documents\n      throw new IllegalArgumentException(\"Term queries must be created on real terms\");\n    }\n    perReaderTermState = Objects.requireNonNull(states);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermStates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","sourceNew":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermStates states) {\n    assert states != null;\n    term = Objects.requireNonNull(t);\n    perReaderTermState = Objects.requireNonNull(states);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = Objects.requireNonNull(t);\n    perReaderTermState = Objects.requireNonNull(states);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#TermQuery(Term,TermContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: constructs a TermQuery that will use the provided docFreq instead\n   * of looking up the docFreq against the searcher.\n   */\n  public TermQuery(Term t, TermContext states) {\n    assert states != null;\n    term = Objects.requireNonNull(t);\n    perReaderTermState = Objects.requireNonNull(states);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["6aaba221b22442bdf0ef28770c25fe259dfb3f55","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["17a677e88529303e630fb314d1506ea0cdb40f00","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["17a677e88529303e630fb314d1506ea0cdb40f00"],"365f98746545c0785c9778597f8558f5f91db4ad":["51f5280f31484820499077f41fcdfe92d527d9dc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17a677e88529303e630fb314d1506ea0cdb40f00":["365f98746545c0785c9778597f8558f5f91db4ad"],"51f5280f31484820499077f41fcdfe92d527d9dc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["17a677e88529303e630fb314d1506ea0cdb40f00","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"365f98746545c0785c9778597f8558f5f91db4ad":["17a677e88529303e630fb314d1506ea0cdb40f00"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"17a677e88529303e630fb314d1506ea0cdb40f00":["6aaba221b22442bdf0ef28770c25fe259dfb3f55","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"51f5280f31484820499077f41fcdfe92d527d9dc":["365f98746545c0785c9778597f8558f5f91db4ad"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}