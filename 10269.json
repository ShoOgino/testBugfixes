{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","commits":[{"id":"53f6c67ebf2e8c3ab674868621bfa5e99e4ea163","date":1291984276,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      Directory dir = newFSDirectory(file);\n      if (IndexReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c7bd47401da6ebba418e39fb50b20e64532ce537"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      Directory dir = newFSDirectory(file);\n      if (IndexReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      Directory dir = newFSDirectory(file);\n      if (IndexReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (IndexReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      Directory dir = newFSDirectory(file);\n      if (IndexReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (IndexReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      Directory dir = newFSDirectory(file);\n      if (IndexReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (IndexReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      Directory dir = newFSDirectory(file);\n      if (IndexReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","date":1327848882,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (IndexReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (IndexReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#checkIndexes(File).mjava","sourceNew":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Recursively looks for indexes underneath <code>file</code>,\n   * and runs checkindex on them. returns true if it found any indexes.\n   */\n  public boolean checkIndexes(File file) throws IOException {\n    if (file.isDirectory()) {\n      MockDirectoryWrapper dir = newFSDirectory(file);\n      dir.setCheckIndexOnClose(false); // don't double-checkindex\n      if (DirectoryReader.indexExists(dir)) {\n        if (VERBOSE) {\n          System.err.println(\"Checking index: \" + file);\n        }\n        _TestUtil.checkIndex(dir);\n        dir.close();\n        return true;\n      }\n      dir.close();\n      for (File f : file.listFiles())\n        if (checkIndexes(f))\n          return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["53f6c67ebf2e8c3ab674868621bfa5e99e4ea163"],"79c2cb24929f2649a8875fb629086171f914d5ce":["53f6c67ebf2e8c3ab674868621bfa5e99e4ea163","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53f6c67ebf2e8c3ab674868621bfa5e99e4ea163"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53f6c67ebf2e8c3ab674868621bfa5e99e4ea163"],"53f6c67ebf2e8c3ab674868621bfa5e99e4ea163":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","f9172d6bebb12f0bba2ebb1756779c2f8948ab7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","5cab9a86bd67202d20b6adc463008c8e982b070a"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","53f6c67ebf2e8c3ab674868621bfa5e99e4ea163"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"53f6c67ebf2e8c3ab674868621bfa5e99e4ea163":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}