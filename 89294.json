{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#unordered(boolean,IntervalsSource...).mjava","commits":[{"id":"c3480728ed564c17162fff1200a8d15c1a5f24cd","date":1527693339,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#unordered(boolean,IntervalsSource...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an unordered {@link IntervalsSource}\n   *\n   * Returns intervals in which all the subsources appear.\n   *\n   * @param subSources  an unordered set of {@link IntervalsSource}s\n   * @param allowOverlaps whether or not the sources should be allowed to overlap in a hit\n   */\n  public static IntervalsSource unordered(boolean allowOverlaps, IntervalsSource... subSources) {\n    return new ConjunctionIntervalsSource(Arrays.asList(subSources),\n        allowOverlaps ? IntervalFunction.UNORDERED : IntervalFunction.UNORDERED_NO_OVERLAP);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#unordered(boolean,IntervalsSource...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#unordered(boolean,IntervalsSource...).mjava","sourceNew":"  /**\n   * Create an unordered {@link IntervalsSource}\n   *\n   * Returns intervals in which all the subsources appear.\n   *\n   * @param subSources  an unordered set of {@link IntervalsSource}s\n   * @param allowOverlaps whether or not the sources should be allowed to overlap in a hit\n   */\n  public static IntervalsSource unordered(boolean allowOverlaps, IntervalsSource... subSources) {\n    return new MinimizingConjunctionIntervalsSource(Arrays.asList(subSources),\n        allowOverlaps ? IntervalFunction.UNORDERED : IntervalFunction.UNORDERED_NO_OVERLAP);\n  }\n\n","sourceOld":"  /**\n   * Create an unordered {@link IntervalsSource}\n   *\n   * Returns intervals in which all the subsources appear.\n   *\n   * @param subSources  an unordered set of {@link IntervalsSource}s\n   * @param allowOverlaps whether or not the sources should be allowed to overlap in a hit\n   */\n  public static IntervalsSource unordered(boolean allowOverlaps, IntervalsSource... subSources) {\n    return new ConjunctionIntervalsSource(Arrays.asList(subSources),\n        allowOverlaps ? IntervalFunction.UNORDERED : IntervalFunction.UNORDERED_NO_OVERLAP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aac4f97c29dc6e1ecc8c2143596fadfff1a4942","date":1551085126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#unordered(boolean,IntervalsSource...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#unordered(boolean,IntervalsSource...).mjava","sourceNew":"  /**\n   * Create an unordered {@link IntervalsSource}\n   *\n   * Returns intervals in which all the subsources appear.\n   *\n   * @param subSources  an unordered set of {@link IntervalsSource}s\n   * @param allowOverlaps whether or not the sources should be allowed to overlap in a hit\n   */\n  public static IntervalsSource unordered(boolean allowOverlaps, IntervalsSource... subSources) {\n    if (subSources.length == 1) {\n      return subSources[0];\n    }\n    return new MinimizingConjunctionIntervalsSource(Arrays.asList(subSources),\n        allowOverlaps ? IntervalFunction.UNORDERED : IntervalFunction.UNORDERED_NO_OVERLAP);\n  }\n\n","sourceOld":"  /**\n   * Create an unordered {@link IntervalsSource}\n   *\n   * Returns intervals in which all the subsources appear.\n   *\n   * @param subSources  an unordered set of {@link IntervalsSource}s\n   * @param allowOverlaps whether or not the sources should be allowed to overlap in a hit\n   */\n  public static IntervalsSource unordered(boolean allowOverlaps, IntervalsSource... subSources) {\n    return new MinimizingConjunctionIntervalsSource(Arrays.asList(subSources),\n        allowOverlaps ? IntervalFunction.UNORDERED : IntervalFunction.UNORDERED_NO_OVERLAP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd30b14e465b221a47cab8b72c44bb11edd6437f","date":1551085569,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#unordered(boolean,IntervalsSource...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#unordered(boolean,IntervalsSource...).mjava","sourceNew":"  /**\n   * Create an unordered {@link IntervalsSource}\n   *\n   * Returns intervals in which all the subsources appear.\n   *\n   * @param subSources  an unordered set of {@link IntervalsSource}s\n   * @param allowOverlaps whether or not the sources should be allowed to overlap in a hit\n   */\n  public static IntervalsSource unordered(boolean allowOverlaps, IntervalsSource... subSources) {\n    if (subSources.length == 1) {\n      return subSources[0];\n    }\n    return new MinimizingConjunctionIntervalsSource(Arrays.asList(subSources),\n        allowOverlaps ? IntervalFunction.UNORDERED : IntervalFunction.UNORDERED_NO_OVERLAP);\n  }\n\n","sourceOld":"  /**\n   * Create an unordered {@link IntervalsSource}\n   *\n   * Returns intervals in which all the subsources appear.\n   *\n   * @param subSources  an unordered set of {@link IntervalsSource}s\n   * @param allowOverlaps whether or not the sources should be allowed to overlap in a hit\n   */\n  public static IntervalsSource unordered(boolean allowOverlaps, IntervalsSource... subSources) {\n    return new MinimizingConjunctionIntervalsSource(Arrays.asList(subSources),\n        allowOverlaps ? IntervalFunction.UNORDERED : IntervalFunction.UNORDERED_NO_OVERLAP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde","date":1553685823,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#unordered(boolean,IntervalsSource...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#unordered(boolean,IntervalsSource...).mjava","sourceNew":"  /**\n   * Create an unordered {@link IntervalsSource}\n   *\n   * Returns intervals in which all the subsources appear.\n   *\n   * @param subSources  an unordered set of {@link IntervalsSource}s\n   * @param allowOverlaps whether or not the sources should be allowed to overlap in a hit\n   */\n  public static IntervalsSource unordered(boolean allowOverlaps, IntervalsSource... subSources) {\n    return UnorderedIntervalsSource.build(Arrays.asList(subSources), allowOverlaps);\n  }\n\n","sourceOld":"  /**\n   * Create an unordered {@link IntervalsSource}\n   *\n   * Returns intervals in which all the subsources appear.\n   *\n   * @param subSources  an unordered set of {@link IntervalsSource}s\n   * @param allowOverlaps whether or not the sources should be allowed to overlap in a hit\n   */\n  public static IntervalsSource unordered(boolean allowOverlaps, IntervalsSource... subSources) {\n    if (subSources.length == 1) {\n      return subSources[0];\n    }\n    return new MinimizingConjunctionIntervalsSource(Arrays.asList(subSources),\n        allowOverlaps ? IntervalFunction.UNORDERED : IntervalFunction.UNORDERED_NO_OVERLAP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d80eb3a3efa6c6d985fb5d0c464f95d2792ada53","date":1559915156,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#unordered(boolean,IntervalsSource...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create an unordered {@link IntervalsSource}\n   *\n   * Returns intervals in which all the subsources appear.\n   *\n   * @param subSources  an unordered set of {@link IntervalsSource}s\n   * @param allowOverlaps whether or not the sources should be allowed to overlap in a hit\n   */\n  public static IntervalsSource unordered(boolean allowOverlaps, IntervalsSource... subSources) {\n    return UnorderedIntervalsSource.build(Arrays.asList(subSources), allowOverlaps);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d80eb3a3efa6c6d985fb5d0c464f95d2792ada53":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"],"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["dd30b14e465b221a47cab8b72c44bb11edd6437f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aac4f97c29dc6e1ecc8c2143596fadfff1a4942":["2375622520a4e480775e3104a2f9a423536755b4"],"2375622520a4e480775e3104a2f9a423536755b4":["c3480728ed564c17162fff1200a8d15c1a5f24cd"],"dd30b14e465b221a47cab8b72c44bb11edd6437f":["2375622520a4e480775e3104a2f9a423536755b4","0aac4f97c29dc6e1ecc8c2143596fadfff1a4942"],"c3480728ed564c17162fff1200a8d15c1a5f24cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d80eb3a3efa6c6d985fb5d0c464f95d2792ada53"]},"commit2Childs":{"d80eb3a3efa6c6d985fb5d0c464f95d2792ada53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["d80eb3a3efa6c6d985fb5d0c464f95d2792ada53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3480728ed564c17162fff1200a8d15c1a5f24cd"],"0aac4f97c29dc6e1ecc8c2143596fadfff1a4942":["dd30b14e465b221a47cab8b72c44bb11edd6437f"],"2375622520a4e480775e3104a2f9a423536755b4":["0aac4f97c29dc6e1ecc8c2143596fadfff1a4942","dd30b14e465b221a47cab8b72c44bb11edd6437f"],"dd30b14e465b221a47cab8b72c44bb11edd6437f":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"],"c3480728ed564c17162fff1200a8d15c1a5f24cd":["2375622520a4e480775e3104a2f9a423536755b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}