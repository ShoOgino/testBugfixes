{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","sourceNew":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      int termStartOffset = offsetAtt.startOffset();\n      int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = offsetAtt.startOffset();\n            matchEndOffset = offsetAtt.endOffset();\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token(termStartOffset, termEndOffset);\n      token.setEmpty().append(termAtt);\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","sourceOld":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      int termStartOffset = offsetAtt.startOffset();\n      int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = offsetAtt.startOffset();\n            matchEndOffset = offsetAtt.endOffset();\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token(termStartOffset, termEndOffset);\n      token.setEmpty().append(termAtt);\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","sourceNew":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      int termStartOffset = offsetAtt.startOffset();\n      int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = offsetAtt.startOffset();\n            matchEndOffset = offsetAtt.endOffset();\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token();\n      token.setOffset(termStartOffset, termEndOffset);\n      token.setEmpty().append(termAtt);\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","sourceOld":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      int termStartOffset = offsetAtt.startOffset();\n      int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = offsetAtt.startOffset();\n            matchEndOffset = offsetAtt.endOffset();\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token(termStartOffset, termEndOffset);\n      token.setEmpty().append(termAtt);\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b7ec747d08b70141f1e52df23dd3c49f8cb4857","date":1420327392,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","sourceNew":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      final int termStartOffset = offsetAtt.startOffset();\n      final int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = termStartOffset;\n            matchEndOffset = termEndOffset;\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token();\n      token.setOffset(termStartOffset, termEndOffset);\n      token.setEmpty().append(termAtt);\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","sourceOld":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      int termStartOffset = offsetAtt.startOffset();\n      int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = offsetAtt.startOffset();\n            matchEndOffset = offsetAtt.endOffset();\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token();\n      token.setOffset(termStartOffset, termEndOffset);\n      token.setEmpty().append(termAtt);\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","bugFix":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f1a421c5a6934704db5f8be705bc74f42e679ba","date":1498207865,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","sourceNew":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      final int termStartOffset = offsetAtt.startOffset();\n      final int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = termStartOffset;\n            matchEndOffset = termEndOffset;\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","sourceOld":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      final int termStartOffset = offsetAtt.startOffset();\n      final int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = termStartOffset;\n            matchEndOffset = termEndOffset;\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token();\n      token.setOffset(termStartOffset, termEndOffset);\n      token.setEmpty().append(termAtt);\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","sourceNew":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      final int termStartOffset = offsetAtt.startOffset();\n      final int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = termStartOffset;\n            matchEndOffset = termEndOffset;\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","sourceOld":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      final int termStartOffset = offsetAtt.startOffset();\n      final int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = termStartOffset;\n            matchEndOffset = termEndOffset;\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token();\n      token.setOffset(termStartOffset, termEndOffset);\n      token.setEmpty().append(termAtt);\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","sourceNew":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      final int termStartOffset = offsetAtt.startOffset();\n      final int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = termStartOffset;\n            matchEndOffset = termEndOffset;\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","sourceOld":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      final int termStartOffset = offsetAtt.startOffset();\n      final int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = termStartOffset;\n            matchEndOffset = termEndOffset;\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token();\n      token.setOffset(termStartOffset, termEndOffset);\n      token.setEmpty().append(termAtt);\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f1a421c5a6934704db5f8be705bc74f42e679ba":["1b7ec747d08b70141f1e52df23dd3c49f8cb4857"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1b7ec747d08b70141f1e52df23dd3c49f8cb4857":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["1b7ec747d08b70141f1e52df23dd3c49f8cb4857","1f1a421c5a6934704db5f8be705bc74f42e679ba"],"28288370235ed02234a64753cdbf0c6ec096304a":["1b7ec747d08b70141f1e52df23dd3c49f8cb4857","1f1a421c5a6934704db5f8be705bc74f42e679ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"1f1a421c5a6934704db5f8be705bc74f42e679ba":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["1b7ec747d08b70141f1e52df23dd3c49f8cb4857"],"1b7ec747d08b70141f1e52df23dd3c49f8cb4857":["1f1a421c5a6934704db5f8be705bc74f42e679ba","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}