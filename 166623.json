{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","commits":[{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory(random);\n      IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = newDirectory(random);\n      IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory(random);\n      IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84b590669deb3d3a471cec6cb13b104b2ee94418","date":1288889547,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84b590669deb3d3a471cec6cb13b104b2ee94418":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["1f653cfcf159baeaafe5d01682a911e95bba4012","84b590669deb3d3a471cec6cb13b104b2ee94418"],"a05409176bd65129d67a785ee70e881e238a9aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84b590669deb3d3a471cec6cb13b104b2ee94418"]},"commit2Childs":{"84b590669deb3d3a471cec6cb13b104b2ee94418":["85a883878c0af761245ab048babc63d099f835f3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["84b590669deb3d3a471cec6cb13b104b2ee94418","85a883878c0af761245ab048babc63d099f835f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05409176bd65129d67a785ee70e881e238a9aef"],"85a883878c0af761245ab048babc63d099f835f3":[],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}