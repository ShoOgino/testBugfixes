{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1de2017537ab5538f357ae8307a1113a0cc8ee3","date":1344454581,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c05c6a4f999960536d6b23302feffb8a50227466","date":1353382574,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return server response\n\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n          throws IOException\n  {\n      log.info(\"connecting to \" + host + \" \" + port);\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n                  new BufferedReader(\n                          new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return server response\n\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n          throws IOException\n  {\n      log.info(\"connecting to \" + host + \" \" + port);\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n                  new BufferedReader(\n                          new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return server response\n\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n          throws IOException\n  {\n      log.info(\"connecting to \" + host + \" \" + port);\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(StandardCharsets.US_ASCII));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n                  new BufferedReader(\n                          new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return server response\n\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n          throws IOException\n  {\n      log.info(\"connecting to \" + host + \" \" + port);\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n                  new BufferedReader(\n                          new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return server response\n\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n          throws IOException\n  {\n      log.info(\"connecting to \" + host + \" \" + port);\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(StandardCharsets.US_ASCII));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n                  new BufferedReader(\n                          new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return server response\n\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n          throws IOException\n  {\n      log.info(\"connecting to \" + host + \" \" + port);\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n                  new BufferedReader(\n                          new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"144b39b0b004b766b7f785a03b6898512514c0c3","date":1411141724,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return server response\n\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n          throws IOException\n  {\n    log.info(\"connecting to \" + host + \" \" + port);\n    BufferedReader reader = null;\n    try (Socket sock = new Socket(host, port)) {\n      OutputStream outstream = sock.getOutputStream();\n      outstream.write(cmd.getBytes(StandardCharsets.US_ASCII));\n      outstream.flush();\n      // this replicates NC - close the output stream before reading\n      sock.shutdownOutput();\n\n      reader =\n          new BufferedReader(\n              new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n      StringBuilder sb = new StringBuilder();\n      String line;\n      while ((line = reader.readLine()) != null) {\n        sb.append(line).append(\"\\n\");\n      }\n      return sb.toString();\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return server response\n\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n          throws IOException\n  {\n      log.info(\"connecting to \" + host + \" \" + port);\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(StandardCharsets.US_ASCII));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n                  new BufferedReader(\n                          new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","date":1563597632,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return server response\n\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n          throws IOException\n  {\n    log.info(\"connecting to \" + host + \" \" + port);\n    BufferedReader reader = null;\n    try (Socket sock = new Socket(host, port)) {\n      OutputStream outstream = sock.getOutputStream();\n      outstream.write(cmd.getBytes(StandardCharsets.US_ASCII));\n      outstream.flush();\n      // this replicates NC - close the output stream before reading\n      sock.shutdownOutput();\n\n      reader = new BufferedReader(\n          new InputStreamReader(sock.getInputStream(), StandardCharsets.US_ASCII));\n      StringBuilder sb = new StringBuilder();\n      String line;\n      while ((line = reader.readLine()) != null) {\n        sb.append(line).append(\"\\n\");\n      }\n      return sb.toString();\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return server response\n\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n          throws IOException\n  {\n    log.info(\"connecting to \" + host + \" \" + port);\n    BufferedReader reader = null;\n    try (Socket sock = new Socket(host, port)) {\n      OutputStream outstream = sock.getOutputStream();\n      outstream.write(cmd.getBytes(StandardCharsets.US_ASCII));\n      outstream.flush();\n      // this replicates NC - close the output stream before reading\n      sock.shutdownOutput();\n\n      reader =\n          new BufferedReader(\n              new InputStreamReader(sock.getInputStream(), \"US-ASCII\"));\n      StringBuilder sb = new StringBuilder();\n      String line;\n      while ((line = reader.readLine()) != null) {\n        sb.append(line).append(\"\\n\");\n      }\n      return sb.toString();\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return server response\n\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n          throws IOException\n  {\n    log.info(\"connecting to {} {}\", host, port);\n    BufferedReader reader = null;\n    try (Socket sock = new Socket(host, port)) {\n      OutputStream outstream = sock.getOutputStream();\n      outstream.write(cmd.getBytes(StandardCharsets.US_ASCII));\n      outstream.flush();\n      // this replicates NC - close the output stream before reading\n      sock.shutdownOutput();\n\n      reader = new BufferedReader(\n          new InputStreamReader(sock.getInputStream(), StandardCharsets.US_ASCII));\n      StringBuilder sb = new StringBuilder();\n      String line;\n      while ((line = reader.readLine()) != null) {\n        sb.append(line).append(\"\\n\");\n      }\n      return sb.toString();\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return server response\n\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n          throws IOException\n  {\n    log.info(\"connecting to \" + host + \" \" + port);\n    BufferedReader reader = null;\n    try (Socket sock = new Socket(host, port)) {\n      OutputStream outstream = sock.getOutputStream();\n      outstream.write(cmd.getBytes(StandardCharsets.US_ASCII));\n      outstream.flush();\n      // this replicates NC - close the output stream before reading\n      sock.shutdownOutput();\n\n      reader = new BufferedReader(\n          new InputStreamReader(sock.getInputStream(), StandardCharsets.US_ASCII));\n      StringBuilder sb = new StringBuilder();\n      String line;\n      while ((line = reader.readLine()) != null) {\n        sb.append(line).append(\"\\n\");\n      }\n      return sb.toString();\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["e1de2017537ab5538f357ae8307a1113a0cc8ee3"],"5eb2511ababf862ea11e10761c70ee560cd84510":["c05c6a4f999960536d6b23302feffb8a50227466","7d89d7e4e5101347833eea558851bf4209218619"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","c05c6a4f999960536d6b23302feffb8a50227466"],"c05c6a4f999960536d6b23302feffb8a50227466":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"7d89d7e4e5101347833eea558851bf4209218619":["c05c6a4f999960536d6b23302feffb8a50227466"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"144b39b0b004b766b7f785a03b6898512514c0c3":["7d89d7e4e5101347833eea558851bf4209218619"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["144b39b0b004b766b7f785a03b6898512514c0c3"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1de2017537ab5538f357ae8307a1113a0cc8ee3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1de2017537ab5538f357ae8307a1113a0cc8ee3"],"e1de2017537ab5538f357ae8307a1113a0cc8ee3":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["407687e67faf6e1f02a211ca078d8e3eed631027","c05c6a4f999960536d6b23302feffb8a50227466"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"c05c6a4f999960536d6b23302feffb8a50227466":["5eb2511ababf862ea11e10761c70ee560cd84510","407687e67faf6e1f02a211ca078d8e3eed631027","7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","144b39b0b004b766b7f785a03b6898512514c0c3"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"144b39b0b004b766b7f785a03b6898512514c0c3":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"e1de2017537ab5538f357ae8307a1113a0cc8ee3":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["e1de2017537ab5538f357ae8307a1113a0cc8ee3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","407687e67faf6e1f02a211ca078d8e3eed631027","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}