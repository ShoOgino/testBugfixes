{"path":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testRenameWithHardLink().mjava","commits":[{"id":"23963f4ff234b34eac505a6e8cb93dc69bc7f693","date":1526628830,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testRenameWithHardLink().mjava","pathOld":"/dev/null","sourceNew":"  public void testRenameWithHardLink() throws Exception {\n    Path path = createTempDir();\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Directory dir1 = new SimpleFSDirectory(new FilterPath(path, fs));\n    Directory dir2 = new SimpleFSDirectory(new FilterPath(path.resolve(\"link\"), fs));\n\n    IndexOutput target = dir1.createOutput(\"target.txt\", IOContext.DEFAULT);\n    target.writeInt(1);\n    target.close();\n\n    HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(dir2);\n    wrapper.copyFrom(dir1, \"target.txt\", \"link.txt\", IOContext.DEFAULT);\n\n    IndexOutput source = dir1.createOutput(\"source.txt\", IOContext.DEFAULT);\n    source.writeInt(2);\n    source.close();\n\n    IndexInput link = dir2.openInput(\"link.txt\", IOContext.DEFAULT);\n    // Rename while opening a hard-link file\n    dir1.rename(\"source.txt\", \"target.txt\");\n    link.close();\n\n    IndexInput in = dir1.openInput(\"target.txt\", IOContext.DEFAULT);\n    assertEquals(2, in.readInt());\n    in.close();\n\n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b905443775dddeb9b6fb3b12c90998789f726de6","date":1526665091,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testRenameWithHardLink().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testRenameWithHardLink().mjava","sourceNew":"  public void testRenameWithHardLink() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n    Path path = createTempDir();\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Directory dir1 = new SimpleFSDirectory(new FilterPath(path, fs));\n    Directory dir2 = new SimpleFSDirectory(new FilterPath(path.resolve(\"link\"), fs));\n\n    IndexOutput target = dir1.createOutput(\"target.txt\", IOContext.DEFAULT);\n    target.writeInt(1);\n    target.close();\n\n    HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(dir2);\n    wrapper.copyFrom(dir1, \"target.txt\", \"link.txt\", IOContext.DEFAULT);\n\n    IndexOutput source = dir1.createOutput(\"source.txt\", IOContext.DEFAULT);\n    source.writeInt(2);\n    source.close();\n\n    IndexInput link = dir2.openInput(\"link.txt\", IOContext.DEFAULT);\n    // Rename while opening a hard-link file\n    dir1.rename(\"source.txt\", \"target.txt\");\n    link.close();\n\n    IndexInput in = dir1.openInput(\"target.txt\", IOContext.DEFAULT);\n    assertEquals(2, in.readInt());\n    in.close();\n\n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":"  public void testRenameWithHardLink() throws Exception {\n    Path path = createTempDir();\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Directory dir1 = new SimpleFSDirectory(new FilterPath(path, fs));\n    Directory dir2 = new SimpleFSDirectory(new FilterPath(path.resolve(\"link\"), fs));\n\n    IndexOutput target = dir1.createOutput(\"target.txt\", IOContext.DEFAULT);\n    target.writeInt(1);\n    target.close();\n\n    HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(dir2);\n    wrapper.copyFrom(dir1, \"target.txt\", \"link.txt\", IOContext.DEFAULT);\n\n    IndexOutput source = dir1.createOutput(\"source.txt\", IOContext.DEFAULT);\n    source.writeInt(2);\n    source.close();\n\n    IndexInput link = dir2.openInput(\"link.txt\", IOContext.DEFAULT);\n    // Rename while opening a hard-link file\n    dir1.rename(\"source.txt\", \"target.txt\");\n    link.close();\n\n    IndexInput in = dir1.openInput(\"target.txt\", IOContext.DEFAULT);\n    assertEquals(2, in.readInt());\n    in.close();\n\n    IOUtils.close(dir1, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":3,"author":"Yannick Welsch","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testRenameWithHardLink().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testRenameWithHardLink().mjava","sourceNew":"  public void testRenameWithHardLink() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n    Path path = createTempDir();\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Directory dir1 = new NIOFSDirectory(new FilterPath(path, fs));\n    Directory dir2 = new NIOFSDirectory(new FilterPath(path.resolve(\"link\"), fs));\n\n    IndexOutput target = dir1.createOutput(\"target.txt\", IOContext.DEFAULT);\n    target.writeInt(1);\n    target.close();\n\n    HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(dir2);\n    wrapper.copyFrom(dir1, \"target.txt\", \"link.txt\", IOContext.DEFAULT);\n\n    IndexOutput source = dir1.createOutput(\"source.txt\", IOContext.DEFAULT);\n    source.writeInt(2);\n    source.close();\n\n    IndexInput link = dir2.openInput(\"link.txt\", IOContext.DEFAULT);\n    // Rename while opening a hard-link file\n    dir1.rename(\"source.txt\", \"target.txt\");\n    link.close();\n\n    IndexInput in = dir1.openInput(\"target.txt\", IOContext.DEFAULT);\n    assertEquals(2, in.readInt());\n    in.close();\n\n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":"  public void testRenameWithHardLink() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n    Path path = createTempDir();\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Directory dir1 = new SimpleFSDirectory(new FilterPath(path, fs));\n    Directory dir2 = new SimpleFSDirectory(new FilterPath(path.resolve(\"link\"), fs));\n\n    IndexOutput target = dir1.createOutput(\"target.txt\", IOContext.DEFAULT);\n    target.writeInt(1);\n    target.close();\n\n    HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(dir2);\n    wrapper.copyFrom(dir1, \"target.txt\", \"link.txt\", IOContext.DEFAULT);\n\n    IndexOutput source = dir1.createOutput(\"source.txt\", IOContext.DEFAULT);\n    source.writeInt(2);\n    source.close();\n\n    IndexInput link = dir2.openInput(\"link.txt\", IOContext.DEFAULT);\n    // Rename while opening a hard-link file\n    dir1.rename(\"source.txt\", \"target.txt\");\n    link.close();\n\n    IndexInput in = dir1.openInput(\"target.txt\", IOContext.DEFAULT);\n    assertEquals(2, in.readInt());\n    in.close();\n\n    IOUtils.close(dir1, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testRenameWithHardLink().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testRenameWithHardLink().mjava","sourceNew":"  public void testRenameWithHardLink() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n    Path path = createTempDir();\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Directory dir1 = new NIOFSDirectory(new FilterPath(path, fs));\n    Directory dir2 = new NIOFSDirectory(new FilterPath(path.resolve(\"link\"), fs));\n\n    IndexOutput target = dir1.createOutput(\"target.txt\", IOContext.DEFAULT);\n    target.writeInt(1);\n    target.close();\n\n    HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(dir2);\n    wrapper.copyFrom(dir1, \"target.txt\", \"link.txt\", IOContext.DEFAULT);\n\n    IndexOutput source = dir1.createOutput(\"source.txt\", IOContext.DEFAULT);\n    source.writeInt(2);\n    source.close();\n\n    IndexInput link = dir2.openInput(\"link.txt\", IOContext.DEFAULT);\n    // Rename while opening a hard-link file\n    dir1.rename(\"source.txt\", \"target.txt\");\n    link.close();\n\n    IndexInput in = dir1.openInput(\"target.txt\", IOContext.DEFAULT);\n    assertEquals(2, in.readInt());\n    in.close();\n\n    IOUtils.close(dir1, dir2);\n  }\n\n","sourceOld":"  public void testRenameWithHardLink() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n    Path path = createTempDir();\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Directory dir1 = new SimpleFSDirectory(new FilterPath(path, fs));\n    Directory dir2 = new SimpleFSDirectory(new FilterPath(path.resolve(\"link\"), fs));\n\n    IndexOutput target = dir1.createOutput(\"target.txt\", IOContext.DEFAULT);\n    target.writeInt(1);\n    target.close();\n\n    HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(dir2);\n    wrapper.copyFrom(dir1, \"target.txt\", \"link.txt\", IOContext.DEFAULT);\n\n    IndexOutput source = dir1.createOutput(\"source.txt\", IOContext.DEFAULT);\n    source.writeInt(2);\n    source.close();\n\n    IndexInput link = dir2.openInput(\"link.txt\", IOContext.DEFAULT);\n    // Rename while opening a hard-link file\n    dir1.rename(\"source.txt\", \"target.txt\");\n    link.close();\n\n    IndexInput in = dir1.openInput(\"target.txt\", IOContext.DEFAULT);\n    assertEquals(2, in.readInt());\n    in.close();\n\n    IOUtils.close(dir1, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["b905443775dddeb9b6fb3b12c90998789f726de6","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"23963f4ff234b34eac505a6e8cb93dc69bc7f693":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["b905443775dddeb9b6fb3b12c90998789f726de6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b905443775dddeb9b6fb3b12c90998789f726de6":["23963f4ff234b34eac505a6e8cb93dc69bc7f693"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ca2a57dbb0665332572cf1a0dffa67234089615"]},"commit2Childs":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"23963f4ff234b34eac505a6e8cb93dc69bc7f693":["b905443775dddeb9b6fb3b12c90998789f726de6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23963f4ff234b34eac505a6e8cb93dc69bc7f693"],"b905443775dddeb9b6fb3b12c90998789f726de6":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}