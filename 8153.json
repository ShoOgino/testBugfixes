{"path":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","pathOld":"modules/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","sourceNew":"        public boolean stem() {\n            int v_1;\n            int v_2;\n            // (, line 464\n            // (, line 465\n            // call more_than_one_syllable_word, line 465\n            if (!r_more_than_one_syllable_word())\n            {\n                return false;\n            }\n            // (, line 466\n            // backwards, line 467\n            limit_backward = cursor; cursor = limit;\n            // (, line 467\n            // do, line 468\n            v_1 = limit - cursor;\n            lab0: do {\n                // call stem_nominal_verb_suffixes, line 468\n                if (!r_stem_nominal_verb_suffixes())\n                {\n                    break lab0;\n                }\n            } while (false);\n            cursor = limit - v_1;\n            // Boolean test continue_stemming_noun_suffixes, line 469\n            if (!(B_continue_stemming_noun_suffixes))\n            {\n                return false;\n            }\n            // do, line 470\n            v_2 = limit - cursor;\n            lab1: do {\n                // call stem_noun_suffixes, line 470\n                if (!r_stem_noun_suffixes())\n                {\n                    break lab1;\n                }\n            } while (false);\n            cursor = limit - v_2;\n            cursor = limit_backward;            // call postlude, line 473\n            if (!r_postlude())\n            {\n                return false;\n            }\n            return true;\n        }\n\n","sourceOld":"        public boolean stem() {\n            int v_1;\n            int v_2;\n            // (, line 464\n            // (, line 465\n            // call more_than_one_syllable_word, line 465\n            if (!r_more_than_one_syllable_word())\n            {\n                return false;\n            }\n            // (, line 466\n            // backwards, line 467\n            limit_backward = cursor; cursor = limit;\n            // (, line 467\n            // do, line 468\n            v_1 = limit - cursor;\n            lab0: do {\n                // call stem_nominal_verb_suffixes, line 468\n                if (!r_stem_nominal_verb_suffixes())\n                {\n                    break lab0;\n                }\n            } while (false);\n            cursor = limit - v_1;\n            // Boolean test continue_stemming_noun_suffixes, line 469\n            if (!(B_continue_stemming_noun_suffixes))\n            {\n                return false;\n            }\n            // do, line 470\n            v_2 = limit - cursor;\n            lab1: do {\n                // call stem_noun_suffixes, line 470\n                if (!r_stem_noun_suffixes())\n                {\n                    break lab1;\n                }\n            } while (false);\n            cursor = limit - v_2;\n            cursor = limit_backward;            // call postlude, line 473\n            if (!r_postlude())\n            {\n                return false;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a6a9e301c12ab07b1d0428b5aad813fff317b3","date":1343846505,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","sourceNew":"                public boolean stem() {\n            int v_1;\n            int v_2;\n                    // (, line 464\n                    // (, line 465\n                    // call more_than_one_syllable_word, line 465\n                    if (!r_more_than_one_syllable_word())\n                    {\n                        return false;\n                    }\n                    // (, line 466\n                    // backwards, line 467\n                    limit_backward = cursor; cursor = limit;\n                    // (, line 467\n                    // do, line 468\n                    v_1 = limit - cursor;\n                    lab0: do {\n                        // call stem_nominal_verb_suffixes, line 468\n                        if (!r_stem_nominal_verb_suffixes())\n                        {\n                            break lab0;\n                        }\n                    } while (false);\n                    cursor = limit - v_1;\n                    // Boolean test continue_stemming_noun_suffixes, line 469\n                    if (!(B_continue_stemming_noun_suffixes))\n                    {\n                        return false;\n                    }\n                    // do, line 470\n                    v_2 = limit - cursor;\n                    lab1: do {\n                        // call stem_noun_suffixes, line 470\n                        if (!r_stem_noun_suffixes())\n                        {\n                            break lab1;\n                        }\n                    } while (false);\n                    cursor = limit - v_2;\n                    cursor = limit_backward;                    // call postlude, line 473\n                    if (!r_postlude())\n                    {\n                        return false;\n                    }\n                    return true;\n                }\n\n","sourceOld":"        public boolean stem() {\n            int v_1;\n            int v_2;\n            // (, line 464\n            // (, line 465\n            // call more_than_one_syllable_word, line 465\n            if (!r_more_than_one_syllable_word())\n            {\n                return false;\n            }\n            // (, line 466\n            // backwards, line 467\n            limit_backward = cursor; cursor = limit;\n            // (, line 467\n            // do, line 468\n            v_1 = limit - cursor;\n            lab0: do {\n                // call stem_nominal_verb_suffixes, line 468\n                if (!r_stem_nominal_verb_suffixes())\n                {\n                    break lab0;\n                }\n            } while (false);\n            cursor = limit - v_1;\n            // Boolean test continue_stemming_noun_suffixes, line 469\n            if (!(B_continue_stemming_noun_suffixes))\n            {\n                return false;\n            }\n            // do, line 470\n            v_2 = limit - cursor;\n            lab1: do {\n                // call stem_noun_suffixes, line 470\n                if (!r_stem_noun_suffixes())\n                {\n                    break lab1;\n                }\n            } while (false);\n            cursor = limit - v_2;\n            cursor = limit_backward;            // call postlude, line 473\n            if (!r_postlude())\n            {\n                return false;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","sourceNew":"                public boolean stem() {\n            int v_1;\n            int v_2;\n                    // (, line 464\n                    // (, line 465\n                    // call more_than_one_syllable_word, line 465\n                    if (!r_more_than_one_syllable_word())\n                    {\n                        return false;\n                    }\n                    // (, line 466\n                    // backwards, line 467\n                    limit_backward = cursor; cursor = limit;\n                    // (, line 467\n                    // do, line 468\n                    v_1 = limit - cursor;\n                    lab0: do {\n                        // call stem_nominal_verb_suffixes, line 468\n                        if (!r_stem_nominal_verb_suffixes())\n                        {\n                            break lab0;\n                        }\n                    } while (false);\n                    cursor = limit - v_1;\n                    // Boolean test continue_stemming_noun_suffixes, line 469\n                    if (!(B_continue_stemming_noun_suffixes))\n                    {\n                        return false;\n                    }\n                    // do, line 470\n                    v_2 = limit - cursor;\n                    lab1: do {\n                        // call stem_noun_suffixes, line 470\n                        if (!r_stem_noun_suffixes())\n                        {\n                            break lab1;\n                        }\n                    } while (false);\n                    cursor = limit - v_2;\n                    cursor = limit_backward;                    // call postlude, line 473\n                    if (!r_postlude())\n                    {\n                        return false;\n                    }\n                    return true;\n                }\n\n","sourceOld":"        public boolean stem() {\n            int v_1;\n            int v_2;\n            // (, line 464\n            // (, line 465\n            // call more_than_one_syllable_word, line 465\n            if (!r_more_than_one_syllable_word())\n            {\n                return false;\n            }\n            // (, line 466\n            // backwards, line 467\n            limit_backward = cursor; cursor = limit;\n            // (, line 467\n            // do, line 468\n            v_1 = limit - cursor;\n            lab0: do {\n                // call stem_nominal_verb_suffixes, line 468\n                if (!r_stem_nominal_verb_suffixes())\n                {\n                    break lab0;\n                }\n            } while (false);\n            cursor = limit - v_1;\n            // Boolean test continue_stemming_noun_suffixes, line 469\n            if (!(B_continue_stemming_noun_suffixes))\n            {\n                return false;\n            }\n            // do, line 470\n            v_2 = limit - cursor;\n            lab1: do {\n                // call stem_noun_suffixes, line 470\n                if (!r_stem_noun_suffixes())\n                {\n                    break lab1;\n                }\n            } while (false);\n            cursor = limit - v_2;\n            cursor = limit_backward;            // call postlude, line 473\n            if (!r_postlude())\n            {\n                return false;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","sourceNew":"                public boolean stem() {\n            int v_1;\n            int v_2;\n                    // (, line 464\n                    // (, line 465\n                    // call more_than_one_syllable_word, line 465\n                    if (!r_more_than_one_syllable_word())\n                    {\n                        return false;\n                    }\n                    // (, line 466\n                    // backwards, line 467\n                    limit_backward = cursor; cursor = limit;\n                    // (, line 467\n                    // do, line 468\n                    v_1 = limit - cursor;\n                    lab0: do {\n                        // call stem_nominal_verb_suffixes, line 468\n                        if (!r_stem_nominal_verb_suffixes())\n                        {\n                            break lab0;\n                        }\n                    } while (false);\n                    cursor = limit - v_1;\n                    // Boolean test continue_stemming_noun_suffixes, line 469\n                    if (!(B_continue_stemming_noun_suffixes))\n                    {\n                        return false;\n                    }\n                    // do, line 470\n                    v_2 = limit - cursor;\n                    lab1: do {\n                        // call stem_noun_suffixes, line 470\n                        if (!r_stem_noun_suffixes())\n                        {\n                            break lab1;\n                        }\n                    } while (false);\n                    cursor = limit - v_2;\n                    cursor = limit_backward;                    // call postlude, line 473\n                    if (!r_postlude())\n                    {\n                        return false;\n                    }\n                    return true;\n                }\n\n","sourceOld":"        public boolean stem() {\n            int v_1;\n            int v_2;\n            // (, line 464\n            // (, line 465\n            // call more_than_one_syllable_word, line 465\n            if (!r_more_than_one_syllable_word())\n            {\n                return false;\n            }\n            // (, line 466\n            // backwards, line 467\n            limit_backward = cursor; cursor = limit;\n            // (, line 467\n            // do, line 468\n            v_1 = limit - cursor;\n            lab0: do {\n                // call stem_nominal_verb_suffixes, line 468\n                if (!r_stem_nominal_verb_suffixes())\n                {\n                    break lab0;\n                }\n            } while (false);\n            cursor = limit - v_1;\n            // Boolean test continue_stemming_noun_suffixes, line 469\n            if (!(B_continue_stemming_noun_suffixes))\n            {\n                return false;\n            }\n            // do, line 470\n            v_2 = limit - cursor;\n            lab1: do {\n                // call stem_noun_suffixes, line 470\n                if (!r_stem_noun_suffixes())\n                {\n                    break lab1;\n                }\n            } while (false);\n            cursor = limit - v_2;\n            cursor = limit_backward;            // call postlude, line 473\n            if (!r_postlude())\n            {\n                return false;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","sourceNew":"                @Override\n                public boolean stem() {\n            int v_1;\n            int v_2;\n                    // (, line 464\n                    // (, line 465\n                    // call more_than_one_syllable_word, line 465\n                    if (!r_more_than_one_syllable_word())\n                    {\n                        return false;\n                    }\n                    // (, line 466\n                    // backwards, line 467\n                    limit_backward = cursor; cursor = limit;\n                    // (, line 467\n                    // do, line 468\n                    v_1 = limit - cursor;\n                    lab0: do {\n                        // call stem_nominal_verb_suffixes, line 468\n                        if (!r_stem_nominal_verb_suffixes())\n                        {\n                            break lab0;\n                        }\n                    } while (false);\n                    cursor = limit - v_1;\n                    // Boolean test continue_stemming_noun_suffixes, line 469\n                    if (!(B_continue_stemming_noun_suffixes))\n                    {\n                        return false;\n                    }\n                    // do, line 470\n                    v_2 = limit - cursor;\n                    lab1: do {\n                        // call stem_noun_suffixes, line 470\n                        if (!r_stem_noun_suffixes())\n                        {\n                            break lab1;\n                        }\n                    } while (false);\n                    cursor = limit - v_2;\n                    cursor = limit_backward;                    // call postlude, line 473\n                    if (!r_postlude())\n                    {\n                        return false;\n                    }\n                    return true;\n                }\n\n","sourceOld":"                public boolean stem() {\n            int v_1;\n            int v_2;\n                    // (, line 464\n                    // (, line 465\n                    // call more_than_one_syllable_word, line 465\n                    if (!r_more_than_one_syllable_word())\n                    {\n                        return false;\n                    }\n                    // (, line 466\n                    // backwards, line 467\n                    limit_backward = cursor; cursor = limit;\n                    // (, line 467\n                    // do, line 468\n                    v_1 = limit - cursor;\n                    lab0: do {\n                        // call stem_nominal_verb_suffixes, line 468\n                        if (!r_stem_nominal_verb_suffixes())\n                        {\n                            break lab0;\n                        }\n                    } while (false);\n                    cursor = limit - v_1;\n                    // Boolean test continue_stemming_noun_suffixes, line 469\n                    if (!(B_continue_stemming_noun_suffixes))\n                    {\n                        return false;\n                    }\n                    // do, line 470\n                    v_2 = limit - cursor;\n                    lab1: do {\n                        // call stem_noun_suffixes, line 470\n                        if (!r_stem_noun_suffixes())\n                        {\n                            break lab1;\n                        }\n                    } while (false);\n                    cursor = limit - v_2;\n                    cursor = limit_backward;                    // call postlude, line 473\n                    if (!r_postlude())\n                    {\n                        return false;\n                    }\n                    return true;\n                }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","sourceNew":"                @Override\n                public boolean stem() {\n            int v_1;\n            int v_2;\n                    // (, line 464\n                    // (, line 465\n                    // call more_than_one_syllable_word, line 465\n                    if (!r_more_than_one_syllable_word())\n                    {\n                        return false;\n                    }\n                    // (, line 466\n                    // backwards, line 467\n                    limit_backward = cursor; cursor = limit;\n                    // (, line 467\n                    // do, line 468\n                    v_1 = limit - cursor;\n                    lab0: do {\n                        // call stem_nominal_verb_suffixes, line 468\n                        if (!r_stem_nominal_verb_suffixes())\n                        {\n                            break lab0;\n                        }\n                    } while (false);\n                    cursor = limit - v_1;\n                    // Boolean test continue_stemming_noun_suffixes, line 469\n                    if (!(B_continue_stemming_noun_suffixes))\n                    {\n                        return false;\n                    }\n                    // do, line 470\n                    v_2 = limit - cursor;\n                    lab1: do {\n                        // call stem_noun_suffixes, line 470\n                        if (!r_stem_noun_suffixes())\n                        {\n                            break lab1;\n                        }\n                    } while (false);\n                    cursor = limit - v_2;\n                    cursor = limit_backward;                    // call postlude, line 473\n                    if (!r_postlude())\n                    {\n                        return false;\n                    }\n                    return true;\n                }\n\n","sourceOld":"                public boolean stem() {\n            int v_1;\n            int v_2;\n                    // (, line 464\n                    // (, line 465\n                    // call more_than_one_syllable_word, line 465\n                    if (!r_more_than_one_syllable_word())\n                    {\n                        return false;\n                    }\n                    // (, line 466\n                    // backwards, line 467\n                    limit_backward = cursor; cursor = limit;\n                    // (, line 467\n                    // do, line 468\n                    v_1 = limit - cursor;\n                    lab0: do {\n                        // call stem_nominal_verb_suffixes, line 468\n                        if (!r_stem_nominal_verb_suffixes())\n                        {\n                            break lab0;\n                        }\n                    } while (false);\n                    cursor = limit - v_1;\n                    // Boolean test continue_stemming_noun_suffixes, line 469\n                    if (!(B_continue_stemming_noun_suffixes))\n                    {\n                        return false;\n                    }\n                    // do, line 470\n                    v_2 = limit - cursor;\n                    lab1: do {\n                        // call stem_noun_suffixes, line 470\n                        if (!r_stem_noun_suffixes())\n                        {\n                            break lab1;\n                        }\n                    } while (false);\n                    cursor = limit - v_2;\n                    cursor = limit_backward;                    // call postlude, line 473\n                    if (!r_postlude())\n                    {\n                        return false;\n                    }\n                    return true;\n                }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09479cd2de06c67a115b7346a8e5de8af4d62e81","date":1581961081,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer#stem().mjava","sourceNew":"public boolean stem() {\n  if (!r_more_than_one_syllable_word())\n  {\n    return false;\n  }\n  limit_backward = cursor;\n  cursor = limit;\n  int v_1 = limit - cursor;\n  r_stem_nominal_verb_suffixes();\n  cursor = limit - v_1;\n  if (!(B_continue_stemming_noun_suffixes))\n  {\n    return false;\n  }\n  int v_2 = limit - cursor;\n  r_stem_noun_suffixes();\n  cursor = limit - v_2;\n  cursor = limit_backward;\n  if (!r_postlude())\n  {\n    return false;\n  }\n  return true;\n}\n\n","sourceOld":"                @Override\n                public boolean stem() {\n            int v_1;\n            int v_2;\n                    // (, line 464\n                    // (, line 465\n                    // call more_than_one_syllable_word, line 465\n                    if (!r_more_than_one_syllable_word())\n                    {\n                        return false;\n                    }\n                    // (, line 466\n                    // backwards, line 467\n                    limit_backward = cursor; cursor = limit;\n                    // (, line 467\n                    // do, line 468\n                    v_1 = limit - cursor;\n                    lab0: do {\n                        // call stem_nominal_verb_suffixes, line 468\n                        if (!r_stem_nominal_verb_suffixes())\n                        {\n                            break lab0;\n                        }\n                    } while (false);\n                    cursor = limit - v_1;\n                    // Boolean test continue_stemming_noun_suffixes, line 469\n                    if (!(B_continue_stemming_noun_suffixes))\n                    {\n                        return false;\n                    }\n                    // do, line 470\n                    v_2 = limit - cursor;\n                    lab1: do {\n                        // call stem_noun_suffixes, line 470\n                        if (!r_stem_noun_suffixes())\n                        {\n                            break lab1;\n                        }\n                    } while (false);\n                    cursor = limit - v_2;\n                    cursor = limit_backward;                    // call postlude, line 473\n                    if (!r_postlude())\n                    {\n                        return false;\n                    }\n                    return true;\n                }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b6a6a9e301c12ab07b1d0428b5aad813fff317b3","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b6a6a9e301c12ab07b1d0428b5aad813fff317b3"],"b6a6a9e301c12ab07b1d0428b5aad813fff317b3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b6a6a9e301c12ab07b1d0428b5aad813fff317b3"],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b6a6a9e301c12ab07b1d0428b5aad813fff317b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09479cd2de06c67a115b7346a8e5de8af4d62e81"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d6f074e73200c07d54f242d3880a8da5a35ff97b","b6a6a9e301c12ab07b1d0428b5aad813fff317b3","8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"b6a6a9e301c12ab07b1d0428b5aad813fff317b3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","7530de27b87b961b51f01bd1299b7004d46e8823"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","09479cd2de06c67a115b7346a8e5de8af4d62e81"],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}