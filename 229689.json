{"path":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","commits":[{"id":"a9f33f3feaa8138843f86ea31f1284b79c331f4a","date":1441788048,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions().mjava","sourceNew":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<DocIdSetIterator> iterators = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators.add(new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && iterators.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, iterators.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, iterators.size());\n        List<DocIdSetIterator> subIterators = iterators.subList(subSeqStart, subSeqEnd);\n        DocIdSetIterator subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(null, subIterators, Collections.emptyList());\n        } else {\n          subConjunction = ConjunctionDISI.intersect(subIterators);\n        }\n        iterators.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          iterators.remove(subSeqStart + 1);\n        }\n      }\n      if (iterators.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        iterators.add(DocIdSetIterator.all(maxDoc));\n      }\n\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(iterators);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","sourceOld":"  public void testCollapseSubConjunctions() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<DocIdSetIterator> iterators = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators.add(new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && iterators.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, iterators.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, iterators.size());\n        final ConjunctionDISI subConjunction = ConjunctionDISI.intersect(iterators.subList(subSeqStart, subSeqEnd));\n        iterators.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          iterators.remove(subSeqStart + 1);\n        }\n      }\n      if (iterators.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        iterators.add(DocIdSetIterator.all(maxDoc));\n      }\n\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(iterators);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","sourceNew":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<Scorer> scorers = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          scorers.add(new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator()));\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          scorers.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && scorers.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, scorers.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, scorers.size());\n        List<Scorer> subIterators = scorers.subList(subSeqStart, subSeqEnd);\n        Scorer subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(null, subIterators, Collections.emptyList());\n        } else {\n          subConjunction = new ConstantScoreScorer(null, 0f, ConjunctionDISI.intersectScorers(subIterators));\n        }\n        scorers.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          scorers.remove(subSeqStart + 1);\n        }\n      }\n      if (scorers.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        scorers.add(new ConstantScoreScorer(null, 0f, DocIdSetIterator.all(maxDoc)));\n      }\n\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersectScorers(scorers);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","sourceOld":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<DocIdSetIterator> iterators = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators.add(new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && iterators.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, iterators.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, iterators.size());\n        List<DocIdSetIterator> subIterators = iterators.subList(subSeqStart, subSeqEnd);\n        DocIdSetIterator subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(null, subIterators, Collections.emptyList());\n        } else {\n          subConjunction = ConjunctionDISI.intersect(subIterators);\n        }\n        iterators.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          iterators.remove(subSeqStart + 1);\n        }\n      }\n      if (iterators.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        iterators.add(DocIdSetIterator.all(maxDoc));\n      }\n\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(iterators);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","date":1465831664,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","sourceNew":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<Scorer> scorers = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          scorers.add(new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator()));\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          scorers.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && scorers.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, scorers.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, scorers.size());\n        List<Scorer> subIterators = scorers.subList(subSeqStart, subSeqEnd);\n        Scorer subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(null, subIterators, Collections.emptyList());\n        } else {\n          subConjunction = new ConstantScoreScorer(null, 0f, ConjunctionDISI.intersectScorers(subIterators));\n        }\n        scorers.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          scorers.remove(subSeqStart + 1);\n        }\n      }\n      if (scorers.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        scorers.add(new ConstantScoreScorer(null, 0f, DocIdSetIterator.all(maxDoc)));\n      }\n\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(scorers);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","sourceOld":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<Scorer> scorers = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          scorers.add(new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator()));\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          scorers.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && scorers.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, scorers.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, scorers.size());\n        List<Scorer> subIterators = scorers.subList(subSeqStart, subSeqEnd);\n        Scorer subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(null, subIterators, Collections.emptyList());\n        } else {\n          subConjunction = new ConstantScoreScorer(null, 0f, ConjunctionDISI.intersectScorers(subIterators));\n        }\n        scorers.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          scorers.remove(subSeqStart + 1);\n        }\n      }\n      if (scorers.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        scorers.add(new ConstantScoreScorer(null, 0f, DocIdSetIterator.all(maxDoc)));\n      }\n\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersectScorers(scorers);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","sourceNew":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<Scorer> scorers = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          scorers.add(new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator()));\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          scorers.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && scorers.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, scorers.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, scorers.size());\n        List<Scorer> subIterators = scorers.subList(subSeqStart, subSeqEnd);\n        Scorer subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(null, subIterators, Collections.emptyList());\n        } else {\n          subConjunction = new ConstantScoreScorer(null, 0f, ConjunctionDISI.intersectScorers(subIterators));\n        }\n        scorers.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          scorers.remove(subSeqStart + 1);\n        }\n      }\n      if (scorers.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        scorers.add(new ConstantScoreScorer(null, 0f, DocIdSetIterator.all(maxDoc)));\n      }\n\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(scorers);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","sourceOld":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<Scorer> scorers = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          scorers.add(new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator()));\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          scorers.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && scorers.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, scorers.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, scorers.size());\n        List<Scorer> subIterators = scorers.subList(subSeqStart, subSeqEnd);\n        Scorer subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(null, subIterators, Collections.emptyList());\n        } else {\n          subConjunction = new ConstantScoreScorer(null, 0f, ConjunctionDISI.intersectScorers(subIterators));\n        }\n        scorers.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          scorers.remove(subSeqStart + 1);\n        }\n      }\n      if (scorers.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        scorers.add(new ConstantScoreScorer(null, 0f, DocIdSetIterator.all(maxDoc)));\n      }\n\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersectScorers(scorers);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","sourceNew":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<Scorer> scorers = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          scorers.add(new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator()));\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          scorers.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && scorers.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, scorers.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, scorers.size());\n        List<Scorer> subIterators = scorers.subList(subSeqStart, subSeqEnd);\n        Scorer subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(null, subIterators, Collections.emptyList());\n        } else {\n          subConjunction = new ConstantScoreScorer(null, 0f, ConjunctionDISI.intersectScorers(subIterators));\n        }\n        scorers.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          scorers.remove(subSeqStart + 1);\n        }\n      }\n      if (scorers.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        scorers.add(new ConstantScoreScorer(null, 0f, DocIdSetIterator.all(maxDoc)));\n      }\n\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(scorers);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","sourceOld":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<Scorer> scorers = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          scorers.add(new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator()));\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          scorers.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && scorers.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, scorers.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, scorers.size());\n        List<Scorer> subIterators = scorers.subList(subSeqStart, subSeqEnd);\n        Scorer subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(null, subIterators, Collections.emptyList());\n        } else {\n          subConjunction = new ConstantScoreScorer(null, 0f, ConjunctionDISI.intersectScorers(subIterators));\n        }\n        scorers.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          scorers.remove(subSeqStart + 1);\n        }\n      }\n      if (scorers.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        scorers.add(new ConstantScoreScorer(null, 0f, DocIdSetIterator.all(maxDoc)));\n      }\n\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersectScorers(scorers);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","sourceNew":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<Scorer> scorers = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          scorers.add(new ConstantScoreScorer(new FakeWeight(), 0f, new BitDocIdSet(set).iterator()));\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          scorers.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && scorers.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, scorers.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, scorers.size());\n        List<Scorer> subIterators = scorers.subList(subSeqStart, subSeqEnd);\n        Scorer subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(new FakeWeight(), subIterators, Collections.emptyList());\n        } else {\n          subConjunction = new ConstantScoreScorer(new FakeWeight(), 0f, ConjunctionDISI.intersectScorers(subIterators));\n        }\n        scorers.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          scorers.remove(subSeqStart + 1);\n        }\n      }\n      if (scorers.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        scorers.add(new ConstantScoreScorer(new FakeWeight(), 0f, DocIdSetIterator.all(maxDoc)));\n      }\n\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(scorers);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","sourceOld":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<Scorer> scorers = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          scorers.add(new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator()));\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          scorers.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && scorers.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, scorers.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, scorers.size());\n        List<Scorer> subIterators = scorers.subList(subSeqStart, subSeqEnd);\n        Scorer subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(null, subIterators, Collections.emptyList());\n        } else {\n          subConjunction = new ConstantScoreScorer(null, 0f, ConjunctionDISI.intersectScorers(subIterators));\n        }\n        scorers.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          scorers.remove(subSeqStart + 1);\n        }\n      }\n      if (scorers.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        scorers.add(new ConstantScoreScorer(null, 0f, DocIdSetIterator.all(maxDoc)));\n      }\n\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(scorers);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testCollapseSubConjunctions(boolean).mjava","sourceNew":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<Scorer> scorers = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          scorers.add(new ConstantScoreScorer(new FakeWeight(), 0f, ScoreMode.TOP_SCORES, new BitDocIdSet(set).iterator()));\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          scorers.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && scorers.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, scorers.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, scorers.size());\n        List<Scorer> subIterators = scorers.subList(subSeqStart, subSeqEnd);\n        Scorer subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(new FakeWeight(), subIterators, Collections.emptyList());\n        } else {\n          subConjunction = new ConstantScoreScorer(new FakeWeight(), 0f, ScoreMode.TOP_SCORES, ConjunctionDISI.intersectScorers(subIterators));\n        }\n        scorers.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          scorers.remove(subSeqStart + 1);\n        }\n      }\n      if (scorers.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        scorers.add(new ConstantScoreScorer(new FakeWeight(), 0f, ScoreMode.TOP_SCORES, DocIdSetIterator.all(maxDoc)));\n      }\n\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(scorers);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","sourceOld":"  public void testCollapseSubConjunctions(boolean wrapWithScorer) throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 5, 10);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final List<Scorer> scorers = new LinkedList<>();\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          scorers.add(new ConstantScoreScorer(new FakeWeight(), 0f, new BitDocIdSet(set).iterator()));\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          scorers.add(scorer(approximation));\n        }\n      }\n\n      // make some sub sequences into sub conjunctions\n      final int subIters = atLeast(3);\n      for (int subIter = 0; subIter < subIters && scorers.size() > 3; ++subIter) {\n        final int subSeqStart = TestUtil.nextInt(random(), 0, scorers.size() - 2);\n        final int subSeqEnd = TestUtil.nextInt(random(), subSeqStart + 2, scorers.size());\n        List<Scorer> subIterators = scorers.subList(subSeqStart, subSeqEnd);\n        Scorer subConjunction;\n        if (wrapWithScorer) {\n          subConjunction = new ConjunctionScorer(new FakeWeight(), subIterators, Collections.emptyList());\n        } else {\n          subConjunction = new ConstantScoreScorer(new FakeWeight(), 0f, ConjunctionDISI.intersectScorers(subIterators));\n        }\n        scorers.set(subSeqStart, subConjunction);\n        int toRemove = subSeqEnd - subSeqStart - 1;\n        while (toRemove-- > 0) {\n          scorers.remove(subSeqStart + 1);\n        }\n      }\n      if (scorers.size() == 1) {\n        // ConjunctionDISI needs two iterators\n        scorers.add(new ConstantScoreScorer(new FakeWeight(), 0f, DocIdSetIterator.all(maxDoc)));\n      }\n\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(scorers);\n      assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a9f33f3feaa8138843f86ea31f1284b79c331f4a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["7dd748bb245633a8195281556bb0e68a6ea97d18","a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a9f33f3feaa8138843f86ea31f1284b79c331f4a"],"9c226b0eeb8b028f572020f459851a663a2c064e":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c226b0eeb8b028f572020f459851a663a2c064e"]},"commit2Childs":{"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a9f33f3feaa8138843f86ea31f1284b79c331f4a":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9f33f3feaa8138843f86ea31f1284b79c331f4a"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["9c226b0eeb8b028f572020f459851a663a2c064e"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9c226b0eeb8b028f572020f459851a663a2c064e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}