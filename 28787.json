{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#contains(Cell).mjava","commits":[{"id":"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9","date":1459984736,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#contains(Cell).mjava","pathOld":"/dev/null","sourceNew":"      /** Returns true if this cell fully contains the other one */\n      public boolean contains(Cell other) {\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = bytesPerDim * dim;\n          // other.min < this.min?\n          if (StringHelper.compare(bytesPerDim, other.minPackedValue, offset, minPackedValue, offset) < 0) {\n            return false;\n          }\n          // other.max < this.max?\n          if (StringHelper.compare(bytesPerDim, other.maxPackedValue, offset, maxPackedValue, offset) > 0) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#contains(Cell).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#contains(Cell).mjava","sourceNew":"      /** Returns true if this cell fully contains the other one */\n      public boolean contains(Cell other) {\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = bytesPerDim * dim;\n          // other.min < this.min?\n          if (FutureArrays.compareUnsigned(other.minPackedValue, offset, offset + bytesPerDim, minPackedValue, offset, offset + bytesPerDim) < 0) {\n            return false;\n          }\n          // other.max < this.max?\n          if (FutureArrays.compareUnsigned(other.maxPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n","sourceOld":"      /** Returns true if this cell fully contains the other one */\n      public boolean contains(Cell other) {\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = bytesPerDim * dim;\n          // other.min < this.min?\n          if (StringHelper.compare(bytesPerDim, other.minPackedValue, offset, minPackedValue, offset) < 0) {\n            return false;\n          }\n          // other.max < this.max?\n          if (StringHelper.compare(bytesPerDim, other.maxPackedValue, offset, maxPackedValue, offset) > 0) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#contains(Cell).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#contains(Cell).mjava","sourceNew":"      /** Returns true if this cell fully contains the other one */\n      public boolean contains(Cell other) {\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = bytesPerDim * dim;\n          // other.min < this.min?\n          if (Arrays.compareUnsigned(other.minPackedValue, offset, offset + bytesPerDim, minPackedValue, offset, offset + bytesPerDim) < 0) {\n            return false;\n          }\n          // other.max < this.max?\n          if (Arrays.compareUnsigned(other.maxPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n","sourceOld":"      /** Returns true if this cell fully contains the other one */\n      public boolean contains(Cell other) {\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = bytesPerDim * dim;\n          // other.min < this.min?\n          if (FutureArrays.compareUnsigned(other.minPackedValue, offset, offset + bytesPerDim, minPackedValue, offset, offset + bytesPerDim) < 0) {\n            return false;\n          }\n          // other.max < this.max?\n          if (FutureArrays.compareUnsigned(other.maxPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}