{"path":"src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"/dev/null","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      // mix the bits so that sortFields are position dependent\n      // so that a,b won't hash to the same value as b,a\n      h ^= (h << 8) | (h >>> 25);   // reversible hash\n\n      if (sf.getField() != null) h += sf.getField().hashCode();\n      h += sf.getType();\n      if (sf.getReverse()) h=~h;\n      if (sf.getLocale()!=null) h+=sf.getLocale().hashCode();\n      if (sf.getFactory()!=null) h+=sf.getFactory().hashCode();\n    }\n\n    hc = h;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e5928bf4822eca4fca645e56e54d0f7398f3b0","date":1266601245,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      // mix the bits so that sortFields are position dependent\n      // so that a,b won't hash to the same value as b,a\n      h ^= (h << 8) | (h >>> 25);   // reversible hash\n\n      if (sf.getField() != null) h += sf.getField().hashCode();\n      h += sf.getType();\n      if (sf.getReverse()) h=~h;\n      if (sf.getLocale()!=null) h+=sf.getLocale().hashCode();\n      if (sf.getFactory()!=null) h+=sf.getFactory().hashCode();\n    }\n\n    hc = h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) throws IOException {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) throws IOException {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) throws IOException {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"66e5928bf4822eca4fca645e56e54d0f7398f3b0":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["66e5928bf4822eca4fca645e56e54d0f7398f3b0"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"66e5928bf4822eca4fca645e56e54d0f7398f3b0":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["66e5928bf4822eca4fca645e56e54d0f7398f3b0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}