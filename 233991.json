{"path":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#toStringBuilder(StringBuilder).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#toStringBuilder(StringBuilder).mjava","pathOld":"/dev/null","sourceNew":"  StringBuilder toStringBuilder(StringBuilder b) {\n    switch (kind) {\n      case REGEXP_UNION:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"|\");\n        exp2.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_CONCATENATION:\n        exp1.toStringBuilder(b);\n        exp2.toStringBuilder(b);\n        break;\n      case REGEXP_INTERSECTION:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"&\");\n        exp2.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_OPTIONAL:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\")?\");\n        break;\n      case REGEXP_REPEAT:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\")*\");\n        break;\n      case REGEXP_REPEAT_MIN:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"){\").append(min).append(\",}\");\n        break;\n      case REGEXP_REPEAT_MINMAX:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"){\").append(min).append(\",\").append(max).append(\"}\");\n        break;\n      case REGEXP_COMPLEMENT:\n        b.append(\"~(\");\n        exp1.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_CHAR:\n        b.append(\"\\\\\").append(c);\n        break;\n      case REGEXP_CHAR_RANGE:\n        b.append(\"[\\\\\").append(from).append(\"-\\\\\").append(to).append(\"]\");\n        break;\n      case REGEXP_ANYCHAR:\n        b.append(\".\");\n        break;\n      case REGEXP_EMPTY:\n        b.append(\"#\");\n        break;\n      case REGEXP_STRING:\n        b.append(\"\\\"\").append(s).append(\"\\\"\");\n        break;\n      case REGEXP_ANYSTRING:\n        b.append(\"@\");\n        break;\n      case REGEXP_AUTOMATON:\n        b.append(\"<\").append(s).append(\">\");\n        break;\n      case REGEXP_INTERVAL:\n        String s1 = Integer.toString(min);\n        String s2 = Integer.toString(max);\n        b.append(\"<\");\n        if (digits > 0) for (int i = s1.length(); i < digits; i++)\n          b.append('0');\n        b.append(s1).append(\"-\");\n        if (digits > 0) for (int i = s2.length(); i < digits; i++)\n          b.append('0');\n        b.append(s2).append(\">\");\n        break;\n    }\n    return b;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#toStringBuilder(StringBuilder).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#toStringBuilder(StringBuilder).mjava","sourceNew":"  StringBuilder toStringBuilder(StringBuilder b) {\n    switch (kind) {\n      case REGEXP_UNION:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"|\");\n        exp2.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_CONCATENATION:\n        exp1.toStringBuilder(b);\n        exp2.toStringBuilder(b);\n        break;\n      case REGEXP_INTERSECTION:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"&\");\n        exp2.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_OPTIONAL:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\")?\");\n        break;\n      case REGEXP_REPEAT:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\")*\");\n        break;\n      case REGEXP_REPEAT_MIN:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"){\").append(min).append(\",}\");\n        break;\n      case REGEXP_REPEAT_MINMAX:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"){\").append(min).append(\",\").append(max).append(\"}\");\n        break;\n      case REGEXP_COMPLEMENT:\n        b.append(\"~(\");\n        exp1.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_CHAR:\n        b.append(\"\\\\\").appendCodePoint(c);\n        break;\n      case REGEXP_CHAR_RANGE:\n        b.append(\"[\\\\\").appendCodePoint(from).append(\"-\\\\\").appendCodePoint(to).append(\"]\");\n        break;\n      case REGEXP_ANYCHAR:\n        b.append(\".\");\n        break;\n      case REGEXP_EMPTY:\n        b.append(\"#\");\n        break;\n      case REGEXP_STRING:\n        b.append(\"\\\"\").append(s).append(\"\\\"\");\n        break;\n      case REGEXP_ANYSTRING:\n        b.append(\"@\");\n        break;\n      case REGEXP_AUTOMATON:\n        b.append(\"<\").append(s).append(\">\");\n        break;\n      case REGEXP_INTERVAL:\n        String s1 = Integer.toString(min);\n        String s2 = Integer.toString(max);\n        b.append(\"<\");\n        if (digits > 0) for (int i = s1.length(); i < digits; i++)\n          b.append('0');\n        b.append(s1).append(\"-\");\n        if (digits > 0) for (int i = s2.length(); i < digits; i++)\n          b.append('0');\n        b.append(s2).append(\">\");\n        break;\n    }\n    return b;\n  }\n\n","sourceOld":"  StringBuilder toStringBuilder(StringBuilder b) {\n    switch (kind) {\n      case REGEXP_UNION:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"|\");\n        exp2.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_CONCATENATION:\n        exp1.toStringBuilder(b);\n        exp2.toStringBuilder(b);\n        break;\n      case REGEXP_INTERSECTION:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"&\");\n        exp2.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_OPTIONAL:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\")?\");\n        break;\n      case REGEXP_REPEAT:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\")*\");\n        break;\n      case REGEXP_REPEAT_MIN:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"){\").append(min).append(\",}\");\n        break;\n      case REGEXP_REPEAT_MINMAX:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"){\").append(min).append(\",\").append(max).append(\"}\");\n        break;\n      case REGEXP_COMPLEMENT:\n        b.append(\"~(\");\n        exp1.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_CHAR:\n        b.append(\"\\\\\").append(c);\n        break;\n      case REGEXP_CHAR_RANGE:\n        b.append(\"[\\\\\").append(from).append(\"-\\\\\").append(to).append(\"]\");\n        break;\n      case REGEXP_ANYCHAR:\n        b.append(\".\");\n        break;\n      case REGEXP_EMPTY:\n        b.append(\"#\");\n        break;\n      case REGEXP_STRING:\n        b.append(\"\\\"\").append(s).append(\"\\\"\");\n        break;\n      case REGEXP_ANYSTRING:\n        b.append(\"@\");\n        break;\n      case REGEXP_AUTOMATON:\n        b.append(\"<\").append(s).append(\">\");\n        break;\n      case REGEXP_INTERVAL:\n        String s1 = Integer.toString(min);\n        String s2 = Integer.toString(max);\n        b.append(\"<\");\n        if (digits > 0) for (int i = s1.length(); i < digits; i++)\n          b.append('0');\n        b.append(s1).append(\"-\");\n        if (digits > 0) for (int i = s2.length(); i < digits; i++)\n          b.append('0');\n        b.append(s2).append(\">\");\n        break;\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toStringBuilder(StringBuilder).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#toStringBuilder(StringBuilder).mjava","sourceNew":"  StringBuilder toStringBuilder(StringBuilder b) {\n    switch (kind) {\n      case REGEXP_UNION:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"|\");\n        exp2.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_CONCATENATION:\n        exp1.toStringBuilder(b);\n        exp2.toStringBuilder(b);\n        break;\n      case REGEXP_INTERSECTION:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"&\");\n        exp2.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_OPTIONAL:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\")?\");\n        break;\n      case REGEXP_REPEAT:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\")*\");\n        break;\n      case REGEXP_REPEAT_MIN:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"){\").append(min).append(\",}\");\n        break;\n      case REGEXP_REPEAT_MINMAX:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"){\").append(min).append(\",\").append(max).append(\"}\");\n        break;\n      case REGEXP_COMPLEMENT:\n        b.append(\"~(\");\n        exp1.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_CHAR:\n        b.append(\"\\\\\").appendCodePoint(c);\n        break;\n      case REGEXP_CHAR_RANGE:\n        b.append(\"[\\\\\").appendCodePoint(from).append(\"-\\\\\").appendCodePoint(to).append(\"]\");\n        break;\n      case REGEXP_ANYCHAR:\n        b.append(\".\");\n        break;\n      case REGEXP_EMPTY:\n        b.append(\"#\");\n        break;\n      case REGEXP_STRING:\n        b.append(\"\\\"\").append(s).append(\"\\\"\");\n        break;\n      case REGEXP_ANYSTRING:\n        b.append(\"@\");\n        break;\n      case REGEXP_AUTOMATON:\n        b.append(\"<\").append(s).append(\">\");\n        break;\n      case REGEXP_INTERVAL:\n        String s1 = Integer.toString(min);\n        String s2 = Integer.toString(max);\n        b.append(\"<\");\n        if (digits > 0) for (int i = s1.length(); i < digits; i++)\n          b.append('0');\n        b.append(s1).append(\"-\");\n        if (digits > 0) for (int i = s2.length(); i < digits; i++)\n          b.append('0');\n        b.append(s2).append(\">\");\n        break;\n    }\n    return b;\n  }\n\n","sourceOld":"  StringBuilder toStringBuilder(StringBuilder b) {\n    switch (kind) {\n      case REGEXP_UNION:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"|\");\n        exp2.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_CONCATENATION:\n        exp1.toStringBuilder(b);\n        exp2.toStringBuilder(b);\n        break;\n      case REGEXP_INTERSECTION:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"&\");\n        exp2.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_OPTIONAL:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\")?\");\n        break;\n      case REGEXP_REPEAT:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\")*\");\n        break;\n      case REGEXP_REPEAT_MIN:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"){\").append(min).append(\",}\");\n        break;\n      case REGEXP_REPEAT_MINMAX:\n        b.append(\"(\");\n        exp1.toStringBuilder(b);\n        b.append(\"){\").append(min).append(\",\").append(max).append(\"}\");\n        break;\n      case REGEXP_COMPLEMENT:\n        b.append(\"~(\");\n        exp1.toStringBuilder(b);\n        b.append(\")\");\n        break;\n      case REGEXP_CHAR:\n        b.append(\"\\\\\").appendCodePoint(c);\n        break;\n      case REGEXP_CHAR_RANGE:\n        b.append(\"[\\\\\").appendCodePoint(from).append(\"-\\\\\").appendCodePoint(to).append(\"]\");\n        break;\n      case REGEXP_ANYCHAR:\n        b.append(\".\");\n        break;\n      case REGEXP_EMPTY:\n        b.append(\"#\");\n        break;\n      case REGEXP_STRING:\n        b.append(\"\\\"\").append(s).append(\"\\\"\");\n        break;\n      case REGEXP_ANYSTRING:\n        b.append(\"@\");\n        break;\n      case REGEXP_AUTOMATON:\n        b.append(\"<\").append(s).append(\">\");\n        break;\n      case REGEXP_INTERVAL:\n        String s1 = Integer.toString(min);\n        String s2 = Integer.toString(max);\n        b.append(\"<\");\n        if (digits > 0) for (int i = s1.length(); i < digits; i++)\n          b.append('0');\n        b.append(s1).append(\"-\");\n        if (digits > 0) for (int i = s2.length(); i < digits; i++)\n          b.append('0');\n        b.append(s2).append(\">\");\n        break;\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}