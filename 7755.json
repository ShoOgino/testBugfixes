{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/db4o/DB4oController#initialize().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/db4o/DB4oController#initialize().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/db4o/DB4oController#initialize().mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.registry.ServerComponent#initialize()\n     */\n    public void initialize() {\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Initialize \" + this.toString());\n\n        Db4o.configure().objectClass(DB4oEntry.class).objectField(\"updated\")\n                .indexed(true);\n        Db4o.configure().objectClass(BaseEntry.class).objectField(\"id\")\n                .indexed(true);\n        Db4o.configure().objectClass(BaseFeed.class).objectField(\"id\").indexed(\n                true);\n        Db4o.configure().objectClass(GDataAccount.class).objectField(\"name\")\n                .indexed(true);\n        Db4o.configure().objectClass(ServerBaseFeed.class).cascadeOnDelete(\n                false);\n        Db4o.configure().objectClass(ServerBaseFeed.class)\n                .maximumActivationDepth(0);\n        Db4o.configure().objectClass(BaseFeed.class).minimumActivationDepth(1);\n        Db4o.configure().objectClass(BaseEntry.class)\n                .minimumActivationDepth(1);\n        Db4o.configure().objectClass(BaseFeed.class).cascadeOnDelete(true);\n        Db4o.configure().objectClass(DB4oEntry.class).cascadeOnDelete(true);\n        Db4o.configure().objectClass(GDataAccount.class).cascadeOnDelete(true);\n        Db4o.configure().weakReferences(this.weakReferences);\n        Db4o.configure().optimizeNativeQueries(false);\n        if (this.runAsServer) {\n            this.server = Db4o.openServer(this.filePath, this.port);\n            if(this.server == null)\n                throw new RuntimeException(\"Can't create server at confiugred destination -- \"+this.filePath);\n            this.server.grantAccess(this.user, this.password);\n        } else {\n            InvocationHandler handler = new ObjectServerDecorator(this.user,\n                    this.password, this.host, this.port);\n            this.server = (ObjectServer) Proxy.newProxyInstance(this.getClass()\n                    .getClassLoader(), new Class[] { ObjectServer.class },\n                    handler);\n        }\n\n        PoolObjectFactory<ObjectContainer> factory = new ObjectContinerFactory(\n                this.server);\n        this.containerPool = new SimpleObjectPool<ObjectContainer>(\n                this.containerPoolSize, factory);\n        try {\n            createAdminAccount();\n        } catch (StorageException e) {\n            LOG.error(\"Can not create admin account -- \",e);\n        }\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.server.registry.ServerComponent#initialize()\n     */\n    public void initialize() {\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Initialize \" + this.toString());\n\n        Db4o.configure().objectClass(DB4oEntry.class).objectField(\"updated\")\n                .indexed(true);\n        Db4o.configure().objectClass(BaseEntry.class).objectField(\"id\")\n                .indexed(true);\n        Db4o.configure().objectClass(BaseFeed.class).objectField(\"id\").indexed(\n                true);\n        Db4o.configure().objectClass(GDataAccount.class).objectField(\"name\")\n                .indexed(true);\n        Db4o.configure().objectClass(ServerBaseFeed.class).cascadeOnDelete(\n                false);\n        Db4o.configure().objectClass(ServerBaseFeed.class)\n                .maximumActivationDepth(0);\n        Db4o.configure().objectClass(BaseFeed.class).minimumActivationDepth(1);\n        Db4o.configure().objectClass(BaseEntry.class)\n                .minimumActivationDepth(1);\n        Db4o.configure().objectClass(BaseFeed.class).cascadeOnDelete(true);\n        Db4o.configure().objectClass(DB4oEntry.class).cascadeOnDelete(true);\n        Db4o.configure().objectClass(GDataAccount.class).cascadeOnDelete(true);\n        Db4o.configure().weakReferences(this.weakReferences);\n        Db4o.configure().optimizeNativeQueries(false);\n        if (this.runAsServer) {\n            this.server = Db4o.openServer(this.filePath, this.port);\n            if(this.server == null)\n                throw new RuntimeException(\"Can't create server at confiugred destination -- \"+this.filePath);\n            this.server.grantAccess(this.user, this.password);\n        } else {\n            InvocationHandler handler = new ObjectServerDecorator(this.user,\n                    this.password, this.host, this.port);\n            this.server = (ObjectServer) Proxy.newProxyInstance(this.getClass()\n                    .getClassLoader(), new Class[] { ObjectServer.class },\n                    handler);\n        }\n\n        PoolObjectFactory<ObjectContainer> factory = new ObjectContinerFactory(\n                this.server);\n        this.containerPool = new SimpleObjectPool<ObjectContainer>(\n                this.containerPoolSize, factory);\n        try {\n            createAdminAccount();\n        } catch (StorageException e) {\n            LOG.error(\"Can not create admin account -- \",e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/db4o/DB4oController#initialize().mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/db4o/DB4oController#initialize().mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.registry.ServerComponent#initialize()\n     */\n    public void initialize() {\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Initialize \" + this.toString());\n\n        Db4o.configure().objectClass(DB4oEntry.class).objectField(\"updated\")\n                .indexed(true);\n        Db4o.configure().objectClass(BaseEntry.class).objectField(\"id\")\n                .indexed(true);\n        Db4o.configure().objectClass(BaseFeed.class).objectField(\"id\").indexed(\n                true);\n        Db4o.configure().objectClass(GDataAccount.class).objectField(\"name\")\n                .indexed(true);\n        Db4o.configure().objectClass(ServerBaseFeed.class).cascadeOnDelete(\n                false);\n        Db4o.configure().objectClass(ServerBaseFeed.class)\n                .maximumActivationDepth(0);\n        Db4o.configure().objectClass(BaseFeed.class).minimumActivationDepth(1);\n        Db4o.configure().objectClass(BaseEntry.class)\n                .minimumActivationDepth(1);\n        Db4o.configure().objectClass(BaseFeed.class).cascadeOnDelete(true);\n        Db4o.configure().objectClass(DB4oEntry.class).cascadeOnDelete(true);\n        Db4o.configure().objectClass(GDataAccount.class).cascadeOnDelete(true);\n        Db4o.configure().weakReferences(this.weakReferences);\n        Db4o.configure().optimizeNativeQueries(false);\n        if (this.runAsServer) {\n            this.server = Db4o.openServer(this.filePath, this.port);\n            if(this.server == null)\n                throw new RuntimeException(\"Can't create server at confiugred destination -- \"+this.filePath);\n            this.server.grantAccess(this.user, this.password);\n        } else {\n            InvocationHandler handler = new ObjectServerDecorator(this.user,\n                    this.password, this.host, this.port);\n            this.server = (ObjectServer) Proxy.newProxyInstance(this.getClass()\n                    .getClassLoader(), new Class[] { ObjectServer.class },\n                    handler);\n        }\n\n        PoolObjectFactory<ObjectContainer> factory = new ObjectContinerFactory(\n                this.server);\n        this.containerPool = new SimpleObjectPool<ObjectContainer>(\n                this.containerPoolSize, factory);\n        try {\n            createAdminAccount();\n        } catch (StorageException e) {\n            LOG.error(\"Can not create admin account -- \",e);\n        }\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.server.registry.ServerComponent#initialize()\n     */\n    public void initialize() {\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Initialize \" + this.toString());\n\n        Db4o.configure().objectClass(DB4oEntry.class).objectField(\"updated\")\n                .indexed(true);\n        Db4o.configure().objectClass(BaseEntry.class).objectField(\"id\")\n                .indexed(true);\n        Db4o.configure().objectClass(BaseFeed.class).objectField(\"id\").indexed(\n                true);\n        Db4o.configure().objectClass(GDataAccount.class).objectField(\"name\")\n                .indexed(true);\n        Db4o.configure().objectClass(ServerBaseFeed.class).cascadeOnDelete(\n                false);\n        Db4o.configure().objectClass(ServerBaseFeed.class)\n                .maximumActivationDepth(0);\n        Db4o.configure().objectClass(BaseFeed.class).minimumActivationDepth(1);\n        Db4o.configure().objectClass(BaseEntry.class)\n                .minimumActivationDepth(1);\n        Db4o.configure().objectClass(BaseFeed.class).cascadeOnDelete(true);\n        Db4o.configure().objectClass(DB4oEntry.class).cascadeOnDelete(true);\n        Db4o.configure().objectClass(GDataAccount.class).cascadeOnDelete(true);\n        Db4o.configure().weakReferences(this.weakReferences);\n        Db4o.configure().optimizeNativeQueries(false);\n        if (this.runAsServer) {\n            this.server = Db4o.openServer(this.filePath, this.port);\n            if(this.server == null)\n                throw new RuntimeException(\"Can't create server at confiugred destination -- \"+this.filePath);\n            this.server.grantAccess(this.user, this.password);\n        } else {\n            InvocationHandler handler = new ObjectServerDecorator(this.user,\n                    this.password, this.host, this.port);\n            this.server = (ObjectServer) Proxy.newProxyInstance(this.getClass()\n                    .getClassLoader(), new Class[] { ObjectServer.class },\n                    handler);\n        }\n\n        PoolObjectFactory<ObjectContainer> factory = new ObjectContinerFactory(\n                this.server);\n        this.containerPool = new SimpleObjectPool<ObjectContainer>(\n                this.containerPoolSize, factory);\n        try {\n            createAdminAccount();\n        } catch (StorageException e) {\n            LOG.error(\"Can not create admin account -- \",e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}