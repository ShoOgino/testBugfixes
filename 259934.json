{"path":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    readers.add(reader);\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    readers.add(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f367dfb9086b92a13c77e2d31112c715cd4502c","date":1290190924,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    ReaderUtil.gatherSubReaders(readers, reader);\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    readers.add(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    ReaderUtil.gatherSubReaders(readers, reader);\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    readers.add(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    ReaderUtil.gatherSubReaders(readers, reader);\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    readers.add(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, IndexReader r) {\n          readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    ReaderUtil.gatherSubReaders(readers, reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, IndexReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, IndexReader r) {\n          readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicIndexReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, IndexReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicIndexReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, IndexReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["7f367dfb9086b92a13c77e2d31112c715cd4502c"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"06584e6e98d592b34e1329b384182f368d2025e8":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","7f367dfb9086b92a13c77e2d31112c715cd4502c"],"7f367dfb9086b92a13c77e2d31112c715cd4502c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["06584e6e98d592b34e1329b384182f368d2025e8","da6d5ac19a80d65b1e864251f155d30960353b7e"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","7f367dfb9086b92a13c77e2d31112c715cd4502c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["06584e6e98d592b34e1329b384182f368d2025e8"]},"commit2Childs":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["06584e6e98d592b34e1329b384182f368d2025e8"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"7f367dfb9086b92a13c77e2d31112c715cd4502c":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7f367dfb9086b92a13c77e2d31112c715cd4502c","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}