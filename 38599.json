{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":null,"sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}