{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testStats().mjava","commits":[{"id":"b976b5ac4d8353f1e0a7c6a8736d9c3f197b7c19","date":1418741524,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testStats().mjava","pathOld":"/dev/null","sourceNew":"  public void testStats() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1, 10000000);\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    for (int i = 0; i < 10; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), colors));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n\n    final DirectoryReader reader = w.getReader();\n    final int segmentCount = reader.leaves().size();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    final Filter filter = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"red\")));\n    final Filter filter2 = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n\n    // first pass, lookups without caching that all miss\n    Filter cached = filterCache.doCache(filter, NEVER_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n    assertEquals(10 * segmentCount, filterCache.getTotalCount());\n    assertEquals(0, filterCache.getHitCount());\n    assertEquals(10 * segmentCount, filterCache.getMissCount());\n    assertEquals(0, filterCache.getCacheCount());\n    assertEquals(0, filterCache.getEvictionCount());\n    assertEquals(0, filterCache.getCacheSize());\n\n    // second pass, lookups + caching, only the first one is a miss\n    cached = filterCache.doCache(filter, FilterCachingPolicy.ALWAYS_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n    assertEquals(20 * segmentCount, filterCache.getTotalCount());\n    assertEquals(9 * segmentCount, filterCache.getHitCount());\n    assertEquals(11 * segmentCount, filterCache.getMissCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheCount());\n    assertEquals(0, filterCache.getEvictionCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheSize());\n\n    // third pass lookups without caching, we only have hits\n    cached = filterCache.doCache(filter, NEVER_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n    assertEquals(30 * segmentCount, filterCache.getTotalCount());\n    assertEquals(19 * segmentCount, filterCache.getHitCount());\n    assertEquals(11 * segmentCount, filterCache.getMissCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheCount());\n    assertEquals(0, filterCache.getEvictionCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheSize());\n\n    // fourth pass with a different filter which will trigger evictions since the size is 1\n    cached = filterCache.doCache(filter2, FilterCachingPolicy.ALWAYS_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n    assertEquals(40 * segmentCount, filterCache.getTotalCount());\n    assertEquals(28 * segmentCount, filterCache.getHitCount());\n    assertEquals(12 * segmentCount, filterCache.getMissCount());\n    assertEquals(2 * segmentCount, filterCache.getCacheCount());\n    assertEquals(1 * segmentCount, filterCache.getEvictionCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheSize());\n\n    // now close, causing evictions due to the closing of segment cores\n    reader.close();\n    w.close();\n    assertEquals(40 * segmentCount, filterCache.getTotalCount());\n    assertEquals(28 * segmentCount, filterCache.getHitCount());\n    assertEquals(12 * segmentCount, filterCache.getMissCount());\n    assertEquals(2 * segmentCount, filterCache.getCacheCount());\n    assertEquals(2 * segmentCount, filterCache.getEvictionCount());\n    assertEquals(0, filterCache.getCacheSize());\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testStats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testStats().mjava","sourceNew":"  public void testStats() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000000);\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    for (int i = 0; i < 10; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), colors));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n\n    final DirectoryReader reader = w.getReader();\n    final int segmentCount = reader.leaves().size();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    final Query query = new TermQuery(new Term(\"color\", \"red\"));\n    final Query query2 = new TermQuery(new Term(\"color\", \"blue\"));\n\n    searcher.setQueryCache(queryCache);\n    // first pass, lookups without caching that all miss\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertEquals(10 * segmentCount, queryCache.getTotalCount());\n    assertEquals(0, queryCache.getHitCount());\n    assertEquals(10 * segmentCount, queryCache.getMissCount());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n    assertEquals(0, queryCache.getCacheSize());\n\n    // second pass, lookups + caching, only the first one is a miss\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertEquals(20 * segmentCount, queryCache.getTotalCount());\n    assertEquals(9 * segmentCount, queryCache.getHitCount());\n    assertEquals(11 * segmentCount, queryCache.getMissCount());\n    assertEquals(1 * segmentCount, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n    assertEquals(1 * segmentCount, queryCache.getCacheSize());\n\n    // third pass lookups without caching, we only have hits\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(query), 1);\n    }\n    assertEquals(30 * segmentCount, queryCache.getTotalCount());\n    assertEquals(19 * segmentCount, queryCache.getHitCount());\n    assertEquals(11 * segmentCount, queryCache.getMissCount());\n    assertEquals(1 * segmentCount, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n    assertEquals(1 * segmentCount, queryCache.getCacheSize());\n\n    // fourth pass with a different filter which will trigger evictions since the size is 1\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(query2), 1);\n    }\n    assertEquals(40 * segmentCount, queryCache.getTotalCount());\n    assertEquals(28 * segmentCount, queryCache.getHitCount());\n    assertEquals(12 * segmentCount, queryCache.getMissCount());\n    assertEquals(2 * segmentCount, queryCache.getCacheCount());\n    assertEquals(1 * segmentCount, queryCache.getEvictionCount());\n    assertEquals(1 * segmentCount, queryCache.getCacheSize());\n\n    // now close, causing evictions due to the closing of segment cores\n    reader.close();\n    w.close();\n    assertEquals(40 * segmentCount, queryCache.getTotalCount());\n    assertEquals(28 * segmentCount, queryCache.getHitCount());\n    assertEquals(12 * segmentCount, queryCache.getMissCount());\n    assertEquals(2 * segmentCount, queryCache.getCacheCount());\n    assertEquals(2 * segmentCount, queryCache.getEvictionCount());\n    assertEquals(0, queryCache.getCacheSize());\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testStats() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1, 10000000);\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    for (int i = 0; i < 10; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), colors));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n\n    final DirectoryReader reader = w.getReader();\n    final int segmentCount = reader.leaves().size();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    final Filter filter = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"red\")));\n    final Filter filter2 = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n\n    // first pass, lookups without caching that all miss\n    Filter cached = filterCache.doCache(filter, NEVER_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n    assertEquals(10 * segmentCount, filterCache.getTotalCount());\n    assertEquals(0, filterCache.getHitCount());\n    assertEquals(10 * segmentCount, filterCache.getMissCount());\n    assertEquals(0, filterCache.getCacheCount());\n    assertEquals(0, filterCache.getEvictionCount());\n    assertEquals(0, filterCache.getCacheSize());\n\n    // second pass, lookups + caching, only the first one is a miss\n    cached = filterCache.doCache(filter, FilterCachingPolicy.ALWAYS_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n    assertEquals(20 * segmentCount, filterCache.getTotalCount());\n    assertEquals(9 * segmentCount, filterCache.getHitCount());\n    assertEquals(11 * segmentCount, filterCache.getMissCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheCount());\n    assertEquals(0, filterCache.getEvictionCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheSize());\n\n    // third pass lookups without caching, we only have hits\n    cached = filterCache.doCache(filter, NEVER_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n    assertEquals(30 * segmentCount, filterCache.getTotalCount());\n    assertEquals(19 * segmentCount, filterCache.getHitCount());\n    assertEquals(11 * segmentCount, filterCache.getMissCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheCount());\n    assertEquals(0, filterCache.getEvictionCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheSize());\n\n    // fourth pass with a different filter which will trigger evictions since the size is 1\n    cached = filterCache.doCache(filter2, FilterCachingPolicy.ALWAYS_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n    assertEquals(40 * segmentCount, filterCache.getTotalCount());\n    assertEquals(28 * segmentCount, filterCache.getHitCount());\n    assertEquals(12 * segmentCount, filterCache.getMissCount());\n    assertEquals(2 * segmentCount, filterCache.getCacheCount());\n    assertEquals(1 * segmentCount, filterCache.getEvictionCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheSize());\n\n    // now close, causing evictions due to the closing of segment cores\n    reader.close();\n    w.close();\n    assertEquals(40 * segmentCount, filterCache.getTotalCount());\n    assertEquals(28 * segmentCount, filterCache.getHitCount());\n    assertEquals(12 * segmentCount, filterCache.getMissCount());\n    assertEquals(2 * segmentCount, filterCache.getCacheCount());\n    assertEquals(2 * segmentCount, filterCache.getEvictionCount());\n    assertEquals(0, filterCache.getCacheSize());\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testStats().mjava","sourceNew":null,"sourceOld":"  public void testStats() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1, 10000000);\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    for (int i = 0; i < 10; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), colors));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n\n    final DirectoryReader reader = w.getReader();\n    final int segmentCount = reader.leaves().size();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    final Filter filter = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"red\")));\n    final Filter filter2 = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n\n    // first pass, lookups without caching that all miss\n    Filter cached = filterCache.doCache(filter, NEVER_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n    assertEquals(10 * segmentCount, filterCache.getTotalCount());\n    assertEquals(0, filterCache.getHitCount());\n    assertEquals(10 * segmentCount, filterCache.getMissCount());\n    assertEquals(0, filterCache.getCacheCount());\n    assertEquals(0, filterCache.getEvictionCount());\n    assertEquals(0, filterCache.getCacheSize());\n\n    // second pass, lookups + caching, only the first one is a miss\n    cached = filterCache.doCache(filter, FilterCachingPolicy.ALWAYS_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n    assertEquals(20 * segmentCount, filterCache.getTotalCount());\n    assertEquals(9 * segmentCount, filterCache.getHitCount());\n    assertEquals(11 * segmentCount, filterCache.getMissCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheCount());\n    assertEquals(0, filterCache.getEvictionCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheSize());\n\n    // third pass lookups without caching, we only have hits\n    cached = filterCache.doCache(filter, NEVER_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n    assertEquals(30 * segmentCount, filterCache.getTotalCount());\n    assertEquals(19 * segmentCount, filterCache.getHitCount());\n    assertEquals(11 * segmentCount, filterCache.getMissCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheCount());\n    assertEquals(0, filterCache.getEvictionCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheSize());\n\n    // fourth pass with a different filter which will trigger evictions since the size is 1\n    cached = filterCache.doCache(filter2, FilterCachingPolicy.ALWAYS_CACHE);\n    for (int i = 0; i < 10; ++i) {\n      searcher.search(new ConstantScoreQuery(cached), 1);\n    }\n    assertEquals(40 * segmentCount, filterCache.getTotalCount());\n    assertEquals(28 * segmentCount, filterCache.getHitCount());\n    assertEquals(12 * segmentCount, filterCache.getMissCount());\n    assertEquals(2 * segmentCount, filterCache.getCacheCount());\n    assertEquals(1 * segmentCount, filterCache.getEvictionCount());\n    assertEquals(1 * segmentCount, filterCache.getCacheSize());\n\n    // now close, causing evictions due to the closing of segment cores\n    reader.close();\n    w.close();\n    assertEquals(40 * segmentCount, filterCache.getTotalCount());\n    assertEquals(28 * segmentCount, filterCache.getHitCount());\n    assertEquals(12 * segmentCount, filterCache.getMissCount());\n    assertEquals(2 * segmentCount, filterCache.getCacheCount());\n    assertEquals(2 * segmentCount, filterCache.getEvictionCount());\n    assertEquals(0, filterCache.getCacheSize());\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b976b5ac4d8353f1e0a7c6a8736d9c3f197b7c19","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["b976b5ac4d8353f1e0a7c6a8736d9c3f197b7c19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b976b5ac4d8353f1e0a7c6a8736d9c3f197b7c19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b976b5ac4d8353f1e0a7c6a8736d9c3f197b7c19"],"b976b5ac4d8353f1e0a7c6a8736d9c3f197b7c19":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}