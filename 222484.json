{"path":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest.DistribRangeFacet#mergeContributionFromShard(SimpleOrderedMap[Object]).mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetRequest.DistribRangeFacet#mergeContributionFromShard(SimpleOrderedMap[Object]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Accumulates an individual facet_ranges count from a shard into global counts.\n     * <p>\n     * The implementation below uses the first encountered shard's\n     * facet_ranges as the basis for subsequent shards' data to be merged.\n     *\n     * @param rangeFromShard the facet_ranges response from a shard\n     */\n    public void mergeContributionFromShard(SimpleOrderedMap<Object> rangeFromShard) {\n      if (rangeFacet == null) {\n        rangeFacet = rangeFromShard;\n        return;\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Integer> shardFieldValues\n          = (NamedList<Integer>) rangeFromShard.get(\"counts\");\n\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Integer> existFieldValues\n          = (NamedList<Integer>) rangeFacet.get(\"counts\");\n\n      for (Map.Entry<String, Integer> existPair : existFieldValues) {\n        final String key = existPair.getKey();\n        // can be null if inconsistencies in shards responses\n        Integer newValue = shardFieldValues.get(key);\n        if (null != newValue) {\n          Integer oldValue = existPair.getValue();\n          existPair.setValue(oldValue + newValue);\n        }\n      }\n\n      // merge facet.other=before/between/after/all if they exist\n      for (FacetParams.FacetRangeOther otherKey : FacetParams.FacetRangeOther.values()) {\n        if (otherKey == FacetParams.FacetRangeOther.NONE) continue;\n\n        String name = otherKey.toString();\n        Integer shardValue = (Integer) rangeFromShard.get(name);\n        if (shardValue != null && shardValue > 0) {\n          Integer existingValue = (Integer) rangeFacet.get(name);\n          // shouldn't be null\n          int idx = rangeFacet.indexOf(name, 0);\n          rangeFacet.setVal(idx, existingValue + shardValue);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}