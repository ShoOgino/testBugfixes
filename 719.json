{"path":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#advanceAllTail().mjava","commits":[{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#advanceAllTail().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#updateFreq().mjava","sourceNew":"  /** Advance all entries from the tail to know about all matches on the\n   *  current doc. */\n  private void advanceAllTail() throws IOException {\n    // we return the next doc when the sum of the scores of the potential\n    // matching clauses is high enough but some of the clauses in 'tail' might\n    // match as well\n    // since we are advancing all clauses in tail, we just iterate the array\n    // without reorganizing the PQ\n    for (int i = tailSize - 1; i >= 0; --i) {\n      advanceTail(tail[i]);\n    }\n    tailSize = 0;\n    tailMaxScore = 0;\n    assert ensureConsistent();\n  }\n\n","sourceOld":"  /** Advance all entries from the tail to know about all matches on the\n   *  current doc. */\n  private void updateFreq() throws IOException {\n    // we return the next doc when the sum of the scores of the potential\n    // matching clauses is high enough but some of the clauses in 'tail' might\n    // match as well\n    // in general we want to advance least-costly clauses first in order to\n    // skip over non-matching documents as fast as possible. However here,\n    // we are advancing everything anyway so iterating over clauses in\n    // (roughly) cost-descending order might help avoid some permutations in\n    // the head heap\n    for (int i = tailSize - 1; i >= 0; --i) {\n      advanceTail(tail[i]);\n    }\n    tailSize = 0;\n    tailMaxScore = 0;\n    assert ensureConsistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"523cc6563c99a55527ef7993efc5413c6648852d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["523cc6563c99a55527ef7993efc5413c6648852d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}