{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletesAlreadyWrittenFiles().mjava","commits":[{"id":"c5e84aa7f651de6493590da495bcbe46d32cf038","date":1526462263,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletesAlreadyWrittenFiles().mjava","pathOld":"/dev/null","sourceNew":"  public void testPendingDeletesAlreadyWrittenFiles() throws IOException {\n    Path path = createTempDir();\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_1\");\n      });\n      new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random()))).close();\n      in.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletesAlreadyWrittenFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletesAlreadyWrittenFiles().mjava","sourceNew":"  public void testPendingDeletesAlreadyWrittenFiles() throws IOException {\n    Path path = createTempDir();\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NoSuchFileException if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_1\");\n      });\n      new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random()))).close();\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testPendingDeletesAlreadyWrittenFiles() throws IOException {\n    Path path = createTempDir();\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_1\");\n      });\n      new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random()))).close();\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":3,"author":"Yannick Welsch","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletesAlreadyWrittenFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletesAlreadyWrittenFiles().mjava","sourceNew":"  public void testPendingDeletesAlreadyWrittenFiles() throws IOException {\n    Path path = createTempDir();\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new NIOFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NoSuchFileException if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_1\");\n      });\n      new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random()))).close();\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testPendingDeletesAlreadyWrittenFiles() throws IOException {\n    Path path = createTempDir();\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NoSuchFileException if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_1\");\n      });\n      new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random()))).close();\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletesAlreadyWrittenFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletesAlreadyWrittenFiles().mjava","sourceNew":"  public void testPendingDeletesAlreadyWrittenFiles() throws IOException {\n    Path path = createTempDir();\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new NIOFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NoSuchFileException if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_1\");\n      });\n      new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random()))).close();\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testPendingDeletesAlreadyWrittenFiles() throws IOException {\n    Path path = createTempDir();\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NoSuchFileException if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_1\");\n      });\n      new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random()))).close();\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["f3adea0022cffaaa592081efed775a7b8bf86b51","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3adea0022cffaaa592081efed775a7b8bf86b51":["c5e84aa7f651de6493590da495bcbe46d32cf038"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"c5e84aa7f651de6493590da495bcbe46d32cf038":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5e84aa7f651de6493590da495bcbe46d32cf038"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"c5e84aa7f651de6493590da495bcbe46d32cf038":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}