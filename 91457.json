{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertNumerics(String,Object,Object).mjava","commits":[{"id":"dbdfda95da145c32af2267b537c92481acc7a522","date":1435597588,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertNumerics(String,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given two objects returned as stat values asserts that they are they are either both <code>null</code> \n   * or all of the following are true:\n   * <ul>\n   *  <li>They have the exact same class</li>\n   *  <li>They are both Numbers or they are both Dates -- in the later case, their millisecond's \n   *      since epoch are used for all subsequent comparisons\n   *  </li>\n   *  <li>Either:\n   *   <ul>\n   *    <li>They are Integer or Long objects with the exact same <code>longValue()</code></li>\n   *    <li>They are Float or Double objects and their <code>doubleValue()</code>s\n   *        are equally-ish with a \"small\" epsilon (relative to the scale of the expected value)\n   *    </li>\n   *   </ul>\n   *  </li>\n   * <ul>\n   *\n   * @see Date#getTime\n   * @see Number#doubleValue\n   * @see Number#longValue\n   * @see #assertEquals(String,double,double,double)\n   */\n  private void assertNumerics(String msg, Object expected, Object actual) {\n    if (null == expected || null == actual) {\n      assertEquals(msg, expected, actual);\n      return;\n    }\n    \n    assertEquals(msg + \" ... values do not have the same type: \" + expected + \" vs \" + actual,\n                 expected.getClass(), actual.getClass());\n\n    if (expected instanceof Date) {\n      expected = ((Date)expected).getTime();\n      actual = ((Date)actual).getTime();\n      msg = msg + \" (w/dates converted to ms)\";\n    }\n    \n    assertTrue(msg + \" ... expected is not a Number: \" + \n               expected + \"=>\" + expected.getClass(),\n               expected instanceof Number);\n        \n    if (expected instanceof Long || expected instanceof Integer) {\n      assertEquals(msg, ((Number)expected).longValue(), ((Number)actual).longValue());\n      \n    } else if (expected instanceof Float || expected instanceof Double) {\n      // compute an epsilon relative to the size of the expected value\n      double expect = ((Number)expected).doubleValue();\n      double epsilon = expect * 0.1E-7D;\n\n      assertEquals(msg, expect, ((Number)actual).doubleValue(), epsilon);\n      \n    } else {\n      fail(msg + \" ... where did this come from: \" + expected.getClass());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fc740d160f95a9a8fb82dc39da5e9898e65930","date":1438117317,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertNumerics(String,Object,Object).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertNumerics(String,Object,Object).mjava","sourceNew":"  /**\n   * Given two objects returned as stat values asserts that they are they are either both <code>null</code> \n   * or all of the following are true:\n   * <ul>\n   *  <li>They have the exact same class</li>\n   *  <li>They are both Numbers or they are both Dates -- in the later case, their millisecond's \n   *      since epoch are used for all subsequent comparisons\n   *  </li>\n   *  <li>Either:\n   *   <ul>\n   *    <li>They are Integer or Long objects with the exact same <code>longValue()</code></li>\n   *    <li>They are Float or Double objects and their <code>doubleValue()</code>s\n   *        are equally-ish with a \"small\" epsilon (relative to the scale of the expected value)\n   *    </li>\n   *   </ul>\n   *  </li>\n   * <ul>\n   *\n   * @see Date#getTime\n   * @see Number#doubleValue\n   * @see Number#longValue\n   * @see #assertEquals(String,double,double,double)\n   */\n  private void assertNumerics(String msg, Object expected, Object actual) {\n    if (null == expected || null == actual) {\n      assertEquals(msg, expected, actual);\n      return;\n    }\n    \n    assertEquals(msg + \" ... values do not have the same type: \" + expected + \" vs \" + actual,\n                 expected.getClass(), actual.getClass());\n\n    if (expected instanceof Date) {\n      expected = ((Date)expected).getTime();\n      actual = ((Date)actual).getTime();\n      msg = msg + \" (w/dates converted to ms)\";\n    }\n    \n    assertTrue(msg + \" ... expected is not a Number: \" + \n               expected + \"=>\" + expected.getClass(),\n               expected instanceof Number);\n        \n    if (expected instanceof Long || expected instanceof Integer) {\n      assertEquals(msg, ((Number)expected).longValue(), ((Number)actual).longValue());\n      \n    } else if (expected instanceof Float || expected instanceof Double) {\n      // compute an epsilon relative to the size of the expected value\n      double expect = ((Number)expected).doubleValue();\n      double epsilon = Math.abs(expect * 0.1E-7D);\n\n      assertEquals(msg, expect, ((Number)actual).doubleValue(), epsilon);\n      \n    } else {\n      fail(msg + \" ... where did this come from: \" + expected.getClass());\n    }\n  }\n\n","sourceOld":"  /**\n   * Given two objects returned as stat values asserts that they are they are either both <code>null</code> \n   * or all of the following are true:\n   * <ul>\n   *  <li>They have the exact same class</li>\n   *  <li>They are both Numbers or they are both Dates -- in the later case, their millisecond's \n   *      since epoch are used for all subsequent comparisons\n   *  </li>\n   *  <li>Either:\n   *   <ul>\n   *    <li>They are Integer or Long objects with the exact same <code>longValue()</code></li>\n   *    <li>They are Float or Double objects and their <code>doubleValue()</code>s\n   *        are equally-ish with a \"small\" epsilon (relative to the scale of the expected value)\n   *    </li>\n   *   </ul>\n   *  </li>\n   * <ul>\n   *\n   * @see Date#getTime\n   * @see Number#doubleValue\n   * @see Number#longValue\n   * @see #assertEquals(String,double,double,double)\n   */\n  private void assertNumerics(String msg, Object expected, Object actual) {\n    if (null == expected || null == actual) {\n      assertEquals(msg, expected, actual);\n      return;\n    }\n    \n    assertEquals(msg + \" ... values do not have the same type: \" + expected + \" vs \" + actual,\n                 expected.getClass(), actual.getClass());\n\n    if (expected instanceof Date) {\n      expected = ((Date)expected).getTime();\n      actual = ((Date)actual).getTime();\n      msg = msg + \" (w/dates converted to ms)\";\n    }\n    \n    assertTrue(msg + \" ... expected is not a Number: \" + \n               expected + \"=>\" + expected.getClass(),\n               expected instanceof Number);\n        \n    if (expected instanceof Long || expected instanceof Integer) {\n      assertEquals(msg, ((Number)expected).longValue(), ((Number)actual).longValue());\n      \n    } else if (expected instanceof Float || expected instanceof Double) {\n      // compute an epsilon relative to the size of the expected value\n      double expect = ((Number)expected).doubleValue();\n      double epsilon = expect * 0.1E-7D;\n\n      assertEquals(msg, expect, ((Number)actual).doubleValue(), epsilon);\n      \n    } else {\n      fail(msg + \" ... where did this come from: \" + expected.getClass());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab69ebfb1ee96d15d8a6b2ed13c2ac96c82ee0d2","date":1541135000,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertNumerics(String,Object,Object).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given two objects returned as stat values asserts that they are they are either both <code>null</code> \n   * or all of the following are true:\n   * <ul>\n   *  <li>They have the exact same class</li>\n   *  <li>They are both Numbers or they are both Dates -- in the later case, their millisecond's \n   *      since epoch are used for all subsequent comparisons\n   *  </li>\n   *  <li>Either:\n   *   <ul>\n   *    <li>They are Integer or Long objects with the exact same <code>longValue()</code></li>\n   *    <li>They are Float or Double objects and their <code>doubleValue()</code>s\n   *        are equally-ish with a \"small\" epsilon (relative to the scale of the expected value)\n   *    </li>\n   *   </ul>\n   *  </li>\n   * <ul>\n   *\n   * @see Date#getTime\n   * @see Number#doubleValue\n   * @see Number#longValue\n   * @see #assertEquals(String,double,double,double)\n   */\n  private void assertNumerics(String msg, Object expected, Object actual) {\n    if (null == expected || null == actual) {\n      assertEquals(msg, expected, actual);\n      return;\n    }\n    \n    assertEquals(msg + \" ... values do not have the same type: \" + expected + \" vs \" + actual,\n                 expected.getClass(), actual.getClass());\n\n    if (expected instanceof Date) {\n      expected = ((Date)expected).getTime();\n      actual = ((Date)actual).getTime();\n      msg = msg + \" (w/dates converted to ms)\";\n    }\n    \n    assertTrue(msg + \" ... expected is not a Number: \" + \n               expected + \"=>\" + expected.getClass(),\n               expected instanceof Number);\n        \n    if (expected instanceof Long || expected instanceof Integer) {\n      assertEquals(msg, ((Number)expected).longValue(), ((Number)actual).longValue());\n      \n    } else if (expected instanceof Float || expected instanceof Double) {\n      // compute an epsilon relative to the size of the expected value\n      double expect = ((Number)expected).doubleValue();\n      double epsilon = Math.abs(expect * 0.1E-7D);\n\n      assertEquals(msg, expect, ((Number)actual).doubleValue(), epsilon);\n      \n    } else {\n      fail(msg + \" ... where did this come from: \" + expected.getClass());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab69ebfb1ee96d15d8a6b2ed13c2ac96c82ee0d2":["81fc740d160f95a9a8fb82dc39da5e9898e65930"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fc740d160f95a9a8fb82dc39da5e9898e65930":["dbdfda95da145c32af2267b537c92481acc7a522"],"dbdfda95da145c32af2267b537c92481acc7a522":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ab69ebfb1ee96d15d8a6b2ed13c2ac96c82ee0d2"]},"commit2Childs":{"ab69ebfb1ee96d15d8a6b2ed13c2ac96c82ee0d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbdfda95da145c32af2267b537c92481acc7a522"],"81fc740d160f95a9a8fb82dc39da5e9898e65930":["ab69ebfb1ee96d15d8a6b2ed13c2ac96c82ee0d2"],"dbdfda95da145c32af2267b537c92481acc7a522":["81fc740d160f95a9a8fb82dc39da5e9898e65930"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}