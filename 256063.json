{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark#analyzeQueryResults(QualityQuery,Query,TopDocs,Judge,PrintWriter,long).mjava","commits":[{"id":"df2d68685a69bd82bf79243e28623c0775eb7bd8","date":1185567892,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark#analyzeQueryResults(QualityQuery,Query,TopDocs,Judge,PrintWriter,long).mjava","pathOld":"/dev/null","sourceNew":"  /* Analyze/judge results for a single quality query; optionally log them. */  \n  private QualityStats analyzeQueryResults(QualityQuery qq, Query q, TopDocs td, Judge judge, PrintWriter logger, long searchTime) throws IOException {\n    QualityStats stts = new QualityStats(judge.maxRecall(qq),searchTime);\n    ScoreDoc sd[] = td.scoreDocs;\n    long t1 = System.currentTimeMillis(); // extraction of first doc name we meassure also construction of doc name extractor, just in case.\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      long docNameExtractTime = System.currentTimeMillis() - t1;\n      t1 = System.currentTimeMillis();\n      boolean isRelevant = judge.isRelevant(docName,qq);\n      stts.addResult(i+1,isRelevant, docNameExtractTime);\n    }\n    if (logger!=null) {\n      logger.println(qq.getQueryID()+\"  -  \"+q);\n      stts.log(qq.getQueryID()+\" Stats:\",1,logger,\"  \");\n    }\n    return stts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark#analyzeQueryResults(QualityQuery,Query,TopDocs,Judge,PrintWriter,long).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark#analyzeQueryResults(QualityQuery,Query,TopDocs,Judge,PrintWriter,long).mjava","sourceNew":"  /* Analyze/judge results for a single quality query; optionally log them. */  \n  private QualityStats analyzeQueryResults(QualityQuery qq, Query q, TopDocs td, Judge judge, PrintWriter logger, long searchTime) throws IOException {\n    QualityStats stts = new QualityStats(judge.maxRecall(qq),searchTime);\n    ScoreDoc sd[] = td.scoreDocs;\n    long t1 = System.currentTimeMillis(); // extraction of first doc name we measure also construction of doc name extractor, just in case.\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      long docNameExtractTime = System.currentTimeMillis() - t1;\n      t1 = System.currentTimeMillis();\n      boolean isRelevant = judge.isRelevant(docName,qq);\n      stts.addResult(i+1,isRelevant, docNameExtractTime);\n    }\n    if (logger!=null) {\n      logger.println(qq.getQueryID()+\"  -  \"+q);\n      stts.log(qq.getQueryID()+\" Stats:\",1,logger,\"  \");\n    }\n    return stts;\n  }\n\n","sourceOld":"  /* Analyze/judge results for a single quality query; optionally log them. */  \n  private QualityStats analyzeQueryResults(QualityQuery qq, Query q, TopDocs td, Judge judge, PrintWriter logger, long searchTime) throws IOException {\n    QualityStats stts = new QualityStats(judge.maxRecall(qq),searchTime);\n    ScoreDoc sd[] = td.scoreDocs;\n    long t1 = System.currentTimeMillis(); // extraction of first doc name we meassure also construction of doc name extractor, just in case.\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      long docNameExtractTime = System.currentTimeMillis() - t1;\n      t1 = System.currentTimeMillis();\n      boolean isRelevant = judge.isRelevant(docName,qq);\n      stts.addResult(i+1,isRelevant, docNameExtractTime);\n    }\n    if (logger!=null) {\n      logger.println(qq.getQueryID()+\"  -  \"+q);\n      stts.log(qq.getQueryID()+\" Stats:\",1,logger,\"  \");\n    }\n    return stts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark#analyzeQueryResults(QualityQuery,Query,TopDocs,Judge,PrintWriter,long).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityBenchmark#analyzeQueryResults(QualityQuery,Query,TopDocs,Judge,PrintWriter,long).mjava","sourceNew":"  /* Analyze/judge results for a single quality query; optionally log them. */  \n  private QualityStats analyzeQueryResults(QualityQuery qq, Query q, TopDocs td, Judge judge, PrintWriter logger, long searchTime) throws IOException {\n    QualityStats stts = new QualityStats(judge.maxRecall(qq),searchTime);\n    ScoreDoc sd[] = td.scoreDocs;\n    long t1 = System.currentTimeMillis(); // extraction of first doc name we measure also construction of doc name extractor, just in case.\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      long docNameExtractTime = System.currentTimeMillis() - t1;\n      t1 = System.currentTimeMillis();\n      boolean isRelevant = judge.isRelevant(docName,qq);\n      stts.addResult(i+1,isRelevant, docNameExtractTime);\n    }\n    if (logger!=null) {\n      logger.println(qq.getQueryID()+\"  -  \"+q);\n      stts.log(qq.getQueryID()+\" Stats:\",1,logger,\"  \");\n    }\n    return stts;\n  }\n\n","sourceOld":"  /* Analyze/judge results for a single quality query; optionally log them. */  \n  private QualityStats analyzeQueryResults(QualityQuery qq, Query q, TopDocs td, Judge judge, PrintWriter logger, long searchTime) throws IOException {\n    QualityStats stts = new QualityStats(judge.maxRecall(qq),searchTime);\n    ScoreDoc sd[] = td.scoreDocs;\n    long t1 = System.currentTimeMillis(); // extraction of first doc name we measure also construction of doc name extractor, just in case.\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      long docNameExtractTime = System.currentTimeMillis() - t1;\n      t1 = System.currentTimeMillis();\n      boolean isRelevant = judge.isRelevant(docName,qq);\n      stts.addResult(i+1,isRelevant, docNameExtractTime);\n    }\n    if (logger!=null) {\n      logger.println(qq.getQueryID()+\"  -  \"+q);\n      stts.log(qq.getQueryID()+\" Stats:\",1,logger,\"  \");\n    }\n    return stts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["add7d922e63099fbce8f0a1b31216df7ef5067f1"]},"commit2Childs":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}