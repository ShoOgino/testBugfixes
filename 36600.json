{"path":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","commits":[{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(\"version\",\"2.0\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ce6aae13e6441cf187f083d13afaf8e9a2884e3","date":1299700113,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","sourceNew":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","sourceOld":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(\"version\",\"2.0\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","sourceNew":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","sourceOld":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(\"version\",\"2.0\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","sourceNew":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","sourceOld":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(\"version\",\"2.0\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","sourceNew":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","sourceOld":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","sourceNew":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","sourceOld":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#beforeClass().mjava","sourceNew":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","sourceOld":"  /**\n   * NOTE: we explicitly use the general 'solrconfig.xml' file here, in \n   * an attempt to test as many broad features as possible.\n   *\n   * Do not change this to point at some other \"simpler\" solrconfig.xml \n   * just because you want to add a new test case using solrconfig.xml, \n   * but your new testcase adds a feature that breaks this test.\n   */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solr/conf/solrconfig.xml\",\"solr/conf/schema-minimal.xml\");\n\n    /* make sure some misguided soul doesn't inadvertently give us \n       a uniqueKey field and defeat the point of the tests\n    */\n    assertNull(\"UniqueKey Field isn't null\", \n               h.getCore().getSchema().getUniqueKeyField());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n\n    assertNull(\"Simple assertion that adding a document works\", h.validateUpdate(\n            adoc(\"id\",  \"4055\",\n                 \"subject\", \"Hoss\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(adoc(\"id\",  \"4056\",\n                 \"subject\", \"Yonik\",\n                 \"project\", \"Solr\")));\n    assertNull(h.validateUpdate(commit()));\n    assertNull(h.validateUpdate(optimize()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["afeb033b2bd36d8ce9d82142b197da4dde13068b","2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["afeb033b2bd36d8ce9d82142b197da4dde13068b","2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"c26f00b574427b55127e869b935845554afde1fa":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}