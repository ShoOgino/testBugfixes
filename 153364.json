{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#finishFlush(IndexWriter,FlushedSegment,FrozenBufferedDeletes).mjava","commits":[{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#finishFlush(IndexWriter,FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"    protected final void finishFlush(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n            throws IOException {\n        // Finish the flushed segment and publish it to IndexWriter\n        if (newSegment == null) {\n          assert bufferedDeletes != null;\n          if (bufferedDeletes != null && bufferedDeletes.any()) {\n            indexWriter.publishFrozenDeletes(bufferedDeletes);\n            if (indexWriter.infoStream.isEnabled(\"DW\")) {\n                indexWriter.infoStream.message(\"DW\", \"flush: push buffered deletes: \" + bufferedDeletes);\n            }\n          }\n        } else {\n            publishFlushedSegment(indexWriter, newSegment, bufferedDeletes);  \n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#finishFlush(IndexWriter,FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"    protected final void finishFlush(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n            throws IOException {\n        // Finish the flushed segment and publish it to IndexWriter\n        if (newSegment == null) {\n          assert bufferedDeletes != null;\n          if (bufferedDeletes != null && bufferedDeletes.any()) {\n            indexWriter.publishFrozenDeletes(bufferedDeletes);\n            if (indexWriter.infoStream.isEnabled(\"DW\")) {\n                indexWriter.infoStream.message(\"DW\", \"flush: push buffered deletes: \" + bufferedDeletes);\n            }\n          }\n        } else {\n            publishFlushedSegment(indexWriter, newSegment, bufferedDeletes);  \n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#finishFlush(IndexWriter,FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"    protected final void finishFlush(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n            throws IOException {\n        // Finish the flushed segment and publish it to IndexWriter\n        if (newSegment == null) {\n          assert bufferedDeletes != null;\n          if (bufferedDeletes != null && bufferedDeletes.any()) {\n            indexWriter.publishFrozenDeletes(bufferedDeletes);\n            if (indexWriter.infoStream.isEnabled(\"DW\")) {\n                indexWriter.infoStream.message(\"DW\", \"flush: push buffered deletes: \" + bufferedDeletes);\n            }\n          }\n        } else {\n            publishFlushedSegment(indexWriter, newSegment, bufferedDeletes);  \n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#finishFlush(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#finishFlush(IndexWriter,FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"    protected final void finishFlush(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates bufferedUpdates)\n            throws IOException {\n        // Finish the flushed segment and publish it to IndexWriter\n        if (newSegment == null) {\n          assert bufferedUpdates != null;\n          if (bufferedUpdates != null && bufferedUpdates.any()) {\n            indexWriter.publishFrozenUpdates(bufferedUpdates);\n            if (indexWriter.infoStream.isEnabled(\"DW\")) {\n                indexWriter.infoStream.message(\"DW\", \"flush: push buffered updates: \" + bufferedUpdates);\n            }\n          }\n        } else {\n            publishFlushedSegment(indexWriter, newSegment, bufferedUpdates);  \n        }\n      }\n\n","sourceOld":"    protected final void finishFlush(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedDeletes bufferedDeletes)\n            throws IOException {\n        // Finish the flushed segment and publish it to IndexWriter\n        if (newSegment == null) {\n          assert bufferedDeletes != null;\n          if (bufferedDeletes != null && bufferedDeletes.any()) {\n            indexWriter.publishFrozenDeletes(bufferedDeletes);\n            if (indexWriter.infoStream.isEnabled(\"DW\")) {\n                indexWriter.infoStream.message(\"DW\", \"flush: push buffered deletes: \" + bufferedDeletes);\n            }\n          }\n        } else {\n            publishFlushedSegment(indexWriter, newSegment, bufferedDeletes);  \n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["7af110b00ea8df9429309d83e38e0533d82e144f"],"7af110b00ea8df9429309d83e38e0533d82e144f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7af110b00ea8df9429309d83e38e0533d82e144f":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}