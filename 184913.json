{"path":"backwards/src/test/org/apache/lucene/search/CheckHits#checkExplanations(Query,String,Searcher,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/CheckHits#checkExplanations(Query,String,Searcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that the explanation value for every document matching a\n   * query corresponds with the true score.  Optionally does \"deep\" \n   * testing of the explanation details.\n   *\n   * @see ExplanationAsserter\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param deep indicates whether a deep comparison of sub-Explanation details should be executed\n   */\n  public static void checkExplanations(Query query,\n                                       String defaultFieldName,\n                                       Searcher searcher, \n                                       boolean deep) throws IOException {\n\n    searcher.search(query,\n                    new ExplanationAsserter\n                    (query, defaultFieldName, searcher, deep));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/CheckHits#checkExplanations(Query,String,Searcher,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/CheckHits#checkExplanations(Query,String,Searcher,boolean).mjava","sourceNew":"  /**\n   * Asserts that the explanation value for every document matching a\n   * query corresponds with the true score.  Optionally does \"deep\" \n   * testing of the explanation details.\n   *\n   * @see ExplanationAsserter\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param deep indicates whether a deep comparison of sub-Explanation details should be executed\n   */\n  public static void checkExplanations(Query query,\n                                       String defaultFieldName,\n                                       Searcher searcher, \n                                       boolean deep) throws IOException {\n\n    searcher.search(query,\n                    new ExplanationAsserter\n                    (query, defaultFieldName, searcher, deep));\n\n  }\n\n","sourceOld":"  /**\n   * Asserts that the explanation value for every document matching a\n   * query corresponds with the true score.  Optionally does \"deep\" \n   * testing of the explanation details.\n   *\n   * @see ExplanationAsserter\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param deep indicates whether a deep comparison of sub-Explanation details should be executed\n   */\n  public static void checkExplanations(Query query,\n                                       String defaultFieldName,\n                                       Searcher searcher, \n                                       boolean deep) throws IOException {\n\n    searcher.search(query,\n                    new ExplanationAsserter\n                    (query, defaultFieldName, searcher, deep));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}