{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"ffced88b5e83e2ec0a42723404a647e766d96b8c","date":1361398349,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return new SortedDocValuesTermsEnum(fcsi);\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return new SortedDocValuesTermsEnum(fcsi);\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e129598ae448211d969dd7cdf2ad4558a0658a1","date":1362963550,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return new SortedDocValuesTermsEnum(fcsi);\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64e6baad25b7155a116cb0126b4e2a06b945a5c5","date":1362976847,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return new SortedDocValuesTermsEnum(fcsi);\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6","date":1363054647,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return new SortedDocValuesTermsEnum(fcsi);\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc06632ede7e48a5ddc6917badec25c8336feedc","date":1366983006,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db","date":1381416174,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasFreqs() {\n          return false;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasFreqs() {\n          return false;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a bitset\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasFreqs() {\n          return false;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = DocValues.getSorted(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasFreqs() {\n          return false;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a bitset\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasFreqs() {\n          return false;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a bitset\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = DocValues.getSorted(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasFreqs() {\n          return false;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a bitset\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = DocValues.getSorted(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasFreqs() {\n          return false;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a bitset\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = DocValues.getSorted(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasFreqs() {\n          return false;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a bitset\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasFreqs() {\n          return false;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a bitset\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = DocValues.getSorted(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasFreqs() {\n          return false;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a bitset\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) {\n          return fcsi.termsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() {\n          return -1;\n        }\n\n        @Override\n        public long size() {\n          return -1;\n        }\n\n        @Override\n        public boolean hasFreqs() {\n          return false;\n        }\n\n        @Override\n        public boolean hasOffsets() {\n          return false;\n        }\n\n        @Override\n        public boolean hasPositions() {\n          return false;\n        }\n        \n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a bitset\n        do {\n          long ord = termsEnum.ord();\n          if (ord >= 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return null;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          int ord = fcsi.getOrd(doc);\n          if (ord == -1) {\n            return false;\n          }\n          return termSet.get(ord);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["5c2b6033d1fc841b41dbf56c765ce3dc053ecba6"],"9274621789ce990dbfef455dabdf026bb3184821":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["3995f83351082af8ae83bb017e63c56818fc1568"],"56572ec06f1407c066d6b7399413178b33176cd8":["3995f83351082af8ae83bb017e63c56818fc1568","93dd449115a9247533e44bab47e8429e5dccbc6d"],"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6":["64e6baad25b7155a116cb0126b4e2a06b945a5c5"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["3995f83351082af8ae83bb017e63c56818fc1568","9274621789ce990dbfef455dabdf026bb3184821"],"7e129598ae448211d969dd7cdf2ad4558a0658a1":["ffced88b5e83e2ec0a42723404a647e766d96b8c"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"64e6baad25b7155a116cb0126b4e2a06b945a5c5":["7e129598ae448211d969dd7cdf2ad4558a0658a1"],"ffced88b5e83e2ec0a42723404a647e766d96b8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3995f83351082af8ae83bb017e63c56818fc1568":["34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db":["3995f83351082af8ae83bb017e63c56818fc1568"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["9274621789ce990dbfef455dabdf026bb3184821"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e129598ae448211d969dd7cdf2ad4558a0658a1":["64e6baad25b7155a116cb0126b4e2a06b945a5c5"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ffced88b5e83e2ec0a42723404a647e766d96b8c"],"64e6baad25b7155a116cb0126b4e2a06b945a5c5":["5c2b6033d1fc841b41dbf56c765ce3dc053ecba6"],"ffced88b5e83e2ec0a42723404a647e766d96b8c":["7e129598ae448211d969dd7cdf2ad4558a0658a1"],"3995f83351082af8ae83bb017e63c56818fc1568":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}