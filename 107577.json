{"path":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public long seek(BytesRef target) {\n      int lo = 0;\t\t\t\t  // binary search\n      int hi = fieldIndex.numIndexTerms - 1;\n      assert totalIndexInterval > 0 : \"totalIndexInterval=\" + totalIndexInterval;\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*totalIndexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public long seek(BytesRef target) {\n      int lo = 0;\t\t\t\t  // binary search\n      int hi = fieldIndex.numIndexTerms - 1;\n      assert totalIndexInterval > 0 : \"totalIndexInterval=\" + totalIndexInterval;\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*totalIndexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public long seek(BytesRef target) {\n      int lo = 0;\t\t\t\t  // binary search\n      int hi = fieldIndex.numIndexTerms - 1;\n      assert totalIndexInterval > 0 : \"totalIndexInterval=\" + totalIndexInterval;\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*totalIndexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","sourceNew":"    @Override\n    public long seek(BytesRef target) {\n      int lo = 0;\t\t\t\t  // binary search\n      int hi = fieldIndex.numIndexTerms - 1;\n      assert totalIndexInterval > 0 : \"totalIndexInterval=\" + totalIndexInterval;\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*totalIndexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","sourceOld":"    @Override\n    public long seek(BytesRef target) {\n      int lo = 0;\t\t\t\t  // binary search\n      int hi = fieldIndex.numIndexTerms - 1;\n      assert totalIndexInterval > 0 : \"totalIndexInterval=\" + totalIndexInterval;\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*totalIndexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["56da903869515527852ee21ea7ef7bfe414cd40d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","a0ae5e3ed1232483b7b8a014f175a5fe43595982","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}