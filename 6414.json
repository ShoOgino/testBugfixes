{"path":"solr/core/src/test/org/apache/solr/util/hll/FullHLLTest#smallRangeSmokeTest().mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/FullHLLTest#smallRangeSmokeTest().mjava","pathOld":"/dev/null","sourceNew":"    // TODO union test\n    /**\n     * Smoke test for {@link HLL#cardinality()} and the proper use of the\n     * small range correction.\n     */\n    @Test\n    public void smallRangeSmokeTest() {\n        final int log2m = 11;\n        final int m = (1 << log2m);\n        final int regwidth = 5;\n\n        // only one register set\n        {\n            final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n            hll.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 0/*ix*/, 1/*val*/));\n\n            final long cardinality = hll.cardinality();\n\n            // Trivially true that small correction conditions hold: one register\n            // set implies zeroes exist, and estimator trivially smaller than 5m/2.\n            // Small range correction: m * log(m/V)\n            final long expected = (long)Math.ceil(m * Math.log((double)m / (m - 1)/*# of zeroes*/));\n            assertEquals(cardinality, expected);\n        }\n\n        // all but one register set\n        {\n            final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n            for(int i=0; i<(m - 1); i++) {\n                hll.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, i/*ix*/, 1/*val*/));\n            }\n\n            // Trivially true that small correction conditions hold: all but\n            // one register set implies a zero exists, and estimator trivially\n            // smaller than 5m/2 since it's alpha / ((m-1)/2)\n            final long cardinality = hll.cardinality();\n\n            // Small range correction: m * log(m/V)\n            final long expected = (long)Math.ceil(m * Math.log((double)m / 1/*# of zeroes*/));\n            assertEquals(cardinality, expected);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/FullHLLTest#smallRangeSmokeTest().mjava","pathOld":"/dev/null","sourceNew":"    // TODO union test\n    /**\n     * Smoke test for {@link HLL#cardinality()} and the proper use of the\n     * small range correction.\n     */\n    @Test\n    public void smallRangeSmokeTest() {\n        final int log2m = 11;\n        final int m = (1 << log2m);\n        final int regwidth = 5;\n\n        // only one register set\n        {\n            final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n            hll.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 0/*ix*/, 1/*val*/));\n\n            final long cardinality = hll.cardinality();\n\n            // Trivially true that small correction conditions hold: one register\n            // set implies zeroes exist, and estimator trivially smaller than 5m/2.\n            // Small range correction: m * log(m/V)\n            final long expected = (long)Math.ceil(m * Math.log((double)m / (m - 1)/*# of zeroes*/));\n            assertEquals(cardinality, expected);\n        }\n\n        // all but one register set\n        {\n            final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n            for(int i=0; i<(m - 1); i++) {\n                hll.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, i/*ix*/, 1/*val*/));\n            }\n\n            // Trivially true that small correction conditions hold: all but\n            // one register set implies a zero exists, and estimator trivially\n            // smaller than 5m/2 since it's alpha / ((m-1)/2)\n            final long cardinality = hll.cardinality();\n\n            // Small range correction: m * log(m/V)\n            final long expected = (long)Math.ceil(m * Math.log((double)m / 1/*# of zeroes*/));\n            assertEquals(cardinality, expected);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}