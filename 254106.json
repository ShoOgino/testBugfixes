{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","commits":[{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n\n    String val = bucketVal.toString();\n    if (ranges != null) {\n      try {\n        Range range = parseRangeFromString(val, val);\n        final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n        bucket.add(\"val\", range.label);\n        return bucket;\n      } catch (SyntaxError e) {\n        // execution won't reach here as ranges are already validated\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n    Comparable low = calc.getValue(val);\n    Comparable high = calc.addGap(low, gap);\n    Comparable max_end = end;\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = max_end;\n      } else {\n        max_end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower = (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n        (include.contains(FacetParams.FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n    boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n        (include.contains(FacetParams.FacetRangeInclude.EDGE) && 0 == high.compareTo(max_end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n    // now refine this range\n\n    final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n    bucket.add(\"val\", range.label);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n\n    String val = bucketVal.toString();\n    if (ranges != null) {\n      try {\n        Range range = parseRangeFromString(val, val);\n        final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n        bucket.add(\"val\", range.label);\n        return bucket;\n      } catch (SyntaxError e) {\n        // execution won't reach here as ranges are already validated\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n    Comparable low = calc.getValue(val);\n    Comparable high = calc.addGap(low, gap);\n    Comparable max_end = end;\n    if (end.compareTo(high) < 0) {\n      if (freq.hardend) {\n        high = max_end;\n      } else {\n        max_end = high;\n      }\n    }\n    if (high.compareTo(low) < 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop (is gap negative? did the math overflow?)\");\n    }\n    if (high.compareTo(low) == 0) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n    }\n\n    boolean incLower = (include.contains(FacetRangeInclude.LOWER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n    boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n                        (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(max_end)));\n\n    Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n\n    // now refine this range\n\n    final SimpleOrderedMap<Object> bucket = refineRange(range, skip, facetInfo);\n    bucket.add(\"val\", range.label);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}