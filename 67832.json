{"path":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#test(BytesRef[],int).mjava","commits":[{"id":"4fad46319f3d6c1d3e0aa6838a968a25b8fbef07","date":1464190764,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"/dev/null","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    new StringMSBRadixSorter() {\n\n      @Override\n      protected BytesRef get(int i) {\n        return refs[i];\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"/dev/null","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    new StringMSBRadixSorter() {\n\n      @Override\n      protected BytesRef get(int i) {\n        return refs[i];\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"/dev/null","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    new StringMSBRadixSorter() {\n\n      @Override\n      protected BytesRef get(int i) {\n        return refs[i];\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"/dev/null","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    new StringMSBRadixSorter() {\n\n      @Override\n      protected BytesRef get(int i) {\n        return refs[i];\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#test(BytesRef[],int).mjava","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = ArrayUtil.copyOfSubArray(refs, 0, len);\n    Arrays.sort(expected);\n\n    new StringMSBRadixSorter() {\n\n      @Override\n      protected BytesRef get(int i) {\n        return refs[i];\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = ArrayUtil.copyOfSubArray(refs, 0, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    new StringMSBRadixSorter() {\n\n      @Override\n      protected BytesRef get(int i) {\n        return refs[i];\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#test(BytesRef[],int).mjava","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = ArrayUtil.copyOfSubArray(refs, 0, len);\n    Arrays.sort(expected);\n\n    new StringMSBRadixSorter() {\n\n      @Override\n      protected BytesRef get(int i) {\n        return refs[i];\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = ArrayUtil.copyOfSubArray(refs, 0, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    new StringMSBRadixSorter() {\n\n      @Override\n      protected BytesRef get(int i) {\n        return refs[i];\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestStringMSBRadixSorter#test(BytesRef[],int).mjava","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = ArrayUtil.copyOfSubArray(refs, 0, len);\n    Arrays.sort(expected);\n\n    new StringMSBRadixSorter() {\n\n      @Override\n      protected BytesRef get(int i) {\n        return refs[i];\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = ArrayUtil.copyOfSubArray(refs, 0, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    new StringMSBRadixSorter() {\n\n      @Override\n      protected BytesRef get(int i) {\n        return refs[i];\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4fad46319f3d6c1d3e0aa6838a968a25b8fbef07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["0e121d43b5a10f2df530f406f935102656e9c4e8","9798d0818e7a880546802b509792d3f3d57babd2"],"4fad46319f3d6c1d3e0aa6838a968a25b8fbef07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"9798d0818e7a880546802b509792d3f3d57babd2":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["0e121d43b5a10f2df530f406f935102656e9c4e8","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"0e121d43b5a10f2df530f406f935102656e9c4e8":["b70042a8a492f7054d480ccdd2be9796510d4327","83870855d82aba6819217abeff5a40779dbb28b4","9798d0818e7a880546802b509792d3f3d57babd2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e121d43b5a10f2df530f406f935102656e9c4e8","4fad46319f3d6c1d3e0aa6838a968a25b8fbef07","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"4fad46319f3d6c1d3e0aa6838a968a25b8fbef07":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}