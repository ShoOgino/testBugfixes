{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,int[],boolean).mjava","commits":[{"id":"cb767289784b682dea51f9e6d7222add811edb77","date":1362902138,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,int[],boolean).mjava","pathOld":"/dev/null","sourceNew":"    public SortingDocsAndPositionsEnum(final DocsAndPositionsEnum in, final int[] old2new, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      final RAMFile file = new RAMFile();\n      final IndexOutput out = new RAMOutputStream(file);\n      docs = new int[32];\n      offsets = new long[32];\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          docs = ArrayUtil.grow(docs, i + 1);\n          offsets = ArrayUtil.grow(offsets, i + 1);\n        }\n        docs[i] = old2new[doc];\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      SorterTemplate sorter = new DocOffsetSorterTemplate(docs, offsets);\n      sorter.quickSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a908e66554ec2deca439cefc3dd415afef0558f","date":1362914465,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,int[],boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,int[],boolean).mjava","sourceNew":"    public SortingDocsAndPositionsEnum(final DocsAndPositionsEnum in, final int[] old2new, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      final RAMFile file = new RAMFile();\n      final IndexOutput out = new RAMOutputStream(file);\n      docs = new int[32];\n      offsets = new long[32];\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          docs = ArrayUtil.grow(docs, docs.length + 1);\n          offsets = ArrayUtil.grow(offsets, offsets.length + 1);\n        }\n        docs[i] = old2new[doc];\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      SorterTemplate sorter = new DocOffsetSorterTemplate(docs, offsets);\n      sorter.quickSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    public SortingDocsAndPositionsEnum(final DocsAndPositionsEnum in, final int[] old2new, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      final RAMFile file = new RAMFile();\n      final IndexOutput out = new RAMOutputStream(file);\n      docs = new int[32];\n      offsets = new long[32];\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          docs = ArrayUtil.grow(docs, i + 1);\n          offsets = ArrayUtil.grow(offsets, i + 1);\n        }\n        docs[i] = old2new[doc];\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      SorterTemplate sorter = new DocOffsetSorterTemplate(docs, offsets);\n      sorter.quickSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dd097dae3a199a033e024104c3816d29f2905f6","date":1362922640,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,int[],boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,int[],boolean).mjava","sourceNew":"    public SortingDocsAndPositionsEnum(final DocsAndPositionsEnum in, final int[] old2new, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      final RAMFile file = new RAMFile();\n      final IndexOutput out = new RAMOutputStream(file);\n      docs = new int[32];\n      offsets = new long[32];\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          docs = ArrayUtil.grow(docs, docs.length + 1);\n          // don't grow() offsets since growing pattern for long and int is not the same.\n          // since we want docs and offsets at the same length, just grow it manually.\n          long[] tmp = new long[docs.length];\n          System.arraycopy(offsets, 0, tmp, 0, offsets.length);\n          offsets = tmp;\n        }\n        docs[i] = old2new[doc];\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      SorterTemplate sorter = new DocOffsetSorterTemplate(docs, offsets);\n      sorter.quickSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    public SortingDocsAndPositionsEnum(final DocsAndPositionsEnum in, final int[] old2new, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      final RAMFile file = new RAMFile();\n      final IndexOutput out = new RAMOutputStream(file);\n      docs = new int[32];\n      offsets = new long[32];\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          docs = ArrayUtil.grow(docs, docs.length + 1);\n          offsets = ArrayUtil.grow(offsets, offsets.length + 1);\n        }\n        docs[i] = old2new[doc];\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      SorterTemplate sorter = new DocOffsetSorterTemplate(docs, offsets);\n      sorter.quickSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","date":1363331426,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,int[],boolean).mjava","sourceNew":"    public SortingDocsAndPositionsEnum(final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      final RAMFile file = new RAMFile();\n      final IndexOutput out = new RAMOutputStream(file);\n      docs = new int[32];\n      offsets = new long[32];\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          docs = ArrayUtil.grow(docs, docs.length + 1);\n          // don't grow() offsets since growing pattern for long and int is not the same.\n          // since we want docs and offsets at the same length, just grow it manually.\n          long[] tmp = new long[docs.length];\n          System.arraycopy(offsets, 0, tmp, 0, offsets.length);\n          offsets = tmp;\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      SorterTemplate sorter = new DocOffsetSorterTemplate(docs, offsets);\n      sorter.quickSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    public SortingDocsAndPositionsEnum(final DocsAndPositionsEnum in, final int[] old2new, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      final RAMFile file = new RAMFile();\n      final IndexOutput out = new RAMOutputStream(file);\n      docs = new int[32];\n      offsets = new long[32];\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          docs = ArrayUtil.grow(docs, docs.length + 1);\n          // don't grow() offsets since growing pattern for long and int is not the same.\n          // since we want docs and offsets at the same length, just grow it manually.\n          long[] tmp = new long[docs.length];\n          System.arraycopy(offsets, 0, tmp, 0, offsets.length);\n          offsets = tmp;\n        }\n        docs[i] = old2new[doc];\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      SorterTemplate sorter = new DocOffsetSorterTemplate(docs, offsets);\n      sorter.quickSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4dd097dae3a199a033e024104c3816d29f2905f6":["5a908e66554ec2deca439cefc3dd415afef0558f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb767289784b682dea51f9e6d7222add811edb77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["4dd097dae3a199a033e024104c3816d29f2905f6"],"5a908e66554ec2deca439cefc3dd415afef0558f":["cb767289784b682dea51f9e6d7222add811edb77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"]},"commit2Childs":{"4dd097dae3a199a033e024104c3816d29f2905f6":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb767289784b682dea51f9e6d7222add811edb77"],"cb767289784b682dea51f9e6d7222add811edb77":["5a908e66554ec2deca439cefc3dd415afef0558f"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a908e66554ec2deca439cefc3dd415afef0558f":["4dd097dae3a199a033e024104c3816d29f2905f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}