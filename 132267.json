{"path":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","commits":[{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","pathOld":"/dev/null","sourceNew":"    public String getContentType() {\n      if(contentType==null) {\n        try {\n          char first = (char)new FileInputStream( file ).read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        }\n        catch(Exception ex) {}\n      }\n      return contentType;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb8fefbe3de65c4dd937adad85d9b35009578838","date":1345153841,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","sourceNew":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          IOUtils.closeWhileHandlingException(stream);\n        }\n      }\n      return contentType;\n    }\n\n","sourceOld":"    public String getContentType() {\n      if(contentType==null) {\n        try {\n          char first = (char)new FileInputStream( file ).read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        }\n        catch(Exception ex) {}\n      }\n      return contentType;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f69b4c6134c4b6b32b643cca94c47efe71296ac","date":1345154233,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","sourceNew":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          if (stream != null) try {\n            stream.close();\n          } catch (IOException ioe) {}\n        }\n      }\n      return contentType;\n    }\n\n","sourceOld":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          IOUtils.closeWhileHandlingException(stream);\n        }\n      }\n      return contentType;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","sourceNew":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          if (stream != null) try {\n            stream.close();\n          } catch (IOException ioe) {}\n        }\n      }\n      return contentType;\n    }\n\n","sourceOld":"    public String getContentType() {\n      if(contentType==null) {\n        try {\n          char first = (char)new FileInputStream( file ).read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        }\n        catch(Exception ex) {}\n      }\n      return contentType;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","sourceNew":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          if (stream != null) try {\n            stream.close();\n          } catch (IOException ioe) {}\n        }\n      }\n      return contentType;\n    }\n\n","sourceOld":"    public String getContentType() {\n      if(contentType==null) {\n        try {\n          char first = (char)new FileInputStream( file ).read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        }\n        catch(Exception ex) {}\n      }\n      return contentType;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","sourceNew":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          if (stream != null) try {\n            stream.close();\n          } catch (IOException ioe) {}\n        }\n      }\n      return contentType;\n    }\n\n","sourceOld":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          if (stream != null) try {\n            stream.close();\n          } catch (IOException ioe) {}\n        }\n      }\n      return contentType;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","sourceNew":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          if (stream != null) try {\n            stream.close();\n          } catch (IOException ioe) {}\n        }\n      }\n      return contentType;\n    }\n\n","sourceOld":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          if (stream != null) try {\n            stream.close();\n          } catch (IOException ioe) {}\n        }\n      }\n      return contentType;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d17ec5164debc23076db7fd11d0331f201583b5","date":1426658173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","sourceNew":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        // TODO: this is buggy... does not allow for whitespace, JSON comments, etc.\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          if (stream != null) try {\n            stream.close();\n          } catch (IOException ioe) {}\n        }\n      }\n      return contentType;\n    }\n\n","sourceOld":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          if (stream != null) try {\n            stream.close();\n          } catch (IOException ioe) {}\n        }\n      }\n      return contentType;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","sourceNew":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        // TODO: this is buggy... does not allow for whitespace, JSON comments, etc.\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          if (stream != null) try {\n            stream.close();\n          } catch (IOException ioe) {}\n        }\n      }\n      return contentType;\n    }\n\n","sourceOld":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          if (stream != null) try {\n            stream.close();\n          } catch (IOException ioe) {}\n        }\n      }\n      return contentType;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be58baf5760d4f17a711eb110f79091ab713ae36","date":1539906801,"type":3,"author":"Andrew Lundgren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.FileStream#getContentType().mjava","sourceNew":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        contentType = attemptToDetermineContentType();\n      }\n      return contentType;\n    }\n\n","sourceOld":"    @Override\n    public String getContentType() {\n      if(contentType==null) {\n        // TODO: this is buggy... does not allow for whitespace, JSON comments, etc.\n        InputStream stream = null;\n        try {\n          stream = new FileInputStream(file);\n          char first = (char)stream.read();\n          if(first == '<') {\n            return \"application/xml\";\n          }\n          if(first == '{') {\n            return \"application/json\";\n          }\n        } catch(Exception ex) {\n        } finally {\n          if (stream != null) try {\n            stream.close();\n          } catch (IOException ioe) {}\n        }\n      }\n      return contentType;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["19275ba31e621f6da1b83bf13af75233876fd3d4","0d17ec5164debc23076db7fd11d0331f201583b5"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["0f69b4c6134c4b6b32b643cca94c47efe71296ac","19275ba31e621f6da1b83bf13af75233876fd3d4"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["042e4d934397657ba04c82b46cc5665076bc5c58","0f69b4c6134c4b6b32b643cca94c47efe71296ac"],"0f69b4c6134c4b6b32b643cca94c47efe71296ac":["eb8fefbe3de65c4dd937adad85d9b35009578838"],"0d17ec5164debc23076db7fd11d0331f201583b5":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"042e4d934397657ba04c82b46cc5665076bc5c58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["042e4d934397657ba04c82b46cc5665076bc5c58","0f69b4c6134c4b6b32b643cca94c47efe71296ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["0f69b4c6134c4b6b32b643cca94c47efe71296ac"],"be58baf5760d4f17a711eb110f79091ab713ae36":["0d17ec5164debc23076db7fd11d0331f201583b5"],"eb8fefbe3de65c4dd937adad85d9b35009578838":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be58baf5760d4f17a711eb110f79091ab713ae36"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"0f69b4c6134c4b6b32b643cca94c47efe71296ac":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","19275ba31e621f6da1b83bf13af75233876fd3d4"],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","be58baf5760d4f17a711eb110f79091ab713ae36"],"042e4d934397657ba04c82b46cc5665076bc5c58":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","eb8fefbe3de65c4dd937adad85d9b35009578838"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["042e4d934397657ba04c82b46cc5665076bc5c58"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0d17ec5164debc23076db7fd11d0331f201583b5"],"be58baf5760d4f17a711eb110f79091ab713ae36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eb8fefbe3de65c4dd937adad85d9b35009578838":["0f69b4c6134c4b6b32b643cca94c47efe71296ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}