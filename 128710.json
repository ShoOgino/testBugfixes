{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    if (!uncaughtExceptions.isEmpty()) {\n      System.err.println(\"The following exceptions were thrown by threads:\");\n      for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n        System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n        entry.exception.printStackTrace(System.err);\n      }\n      fail(\"Some threads throwed uncaught exceptions!\");\n    }\n    \n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    if (!uncaughtExceptions.isEmpty()) {\n      System.err.println(\"The following exceptions were thrown by threads:\");\n      for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n        System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n        entry.exception.printStackTrace(System.err);\n      }\n      fail(\"Some threads throwed uncaught exceptions!\");\n    }\n    \n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f470b537db3da4e8d0c39bc72fae5f9865a9ec3c","date":1275494784,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    if (!uncaughtExceptions.isEmpty()) {\n      System.err.println(\"The following exceptions were thrown by threads:\");\n      for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n        System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n        entry.exception.printStackTrace(System.err);\n      }\n      fail(\"Some threads throwed uncaught exceptions!\");\n    }\n    \n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37087ea13c0fde1ce1a3b5579f60f827414045a9","date":1279206637,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":["5f0dc13f9e59664be282b46015a020c945dc2a48","5f0dc13f9e59664be282b46015a020c945dc2a48","5f0dc13f9e59664be282b46015a020c945dc2a48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e35534ac782c9c9d1227a10245ab7729d9eef22f","date":1279904940,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    // nocommit\n    if (codec.equals(\"PreFlex\")) {\n        CodecProvider.getDefault().unregister(new PreFlexRWCodec());\n    } \n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"236e69f7c6c636bfd65b7a9031c9e6fb15b508ec","date":1279906406,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    // nocommit\n    if (codec.equals(\"PreFlex\")) {\n        CodecProvider.getDefault().unregister(new PreFlexRWCodec());\n        CodecProvider.getDefault().register(new PreFlexCodec());\n    } \n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    // nocommit\n    if (codec.equals(\"PreFlex\")) {\n        CodecProvider.getDefault().unregister(new PreFlexRWCodec());\n    } \n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d","date":1279972526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    // Restore read-only PreFlex codec:\n    if (codec.equals(\"PreFlex\")) {\n      CodecProvider.getDefault().unregister(new PreFlexRWCodec(null));\n      CodecProvider.getDefault().register(new PreFlexCodec());\n    } \n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    // nocommit\n    if (codec.equals(\"PreFlex\")) {\n        CodecProvider.getDefault().unregister(new PreFlexRWCodec());\n        CodecProvider.getDefault().register(new PreFlexCodec());\n    } \n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"399a364d374f2132b6d9ff9fd7f997a9f2ef734f","date":1279978822,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    // Restore read-only PreFlex codec:\n    if (codec.equals(\"PreFlex\")) {\n      CodecProvider.getDefault().unregister(new PreFlexRWCodec());\n      CodecProvider.getDefault().register(new PreFlexCodec());\n    } \n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    // Restore read-only PreFlex codec:\n    if (codec.equals(\"PreFlex\")) {\n      CodecProvider.getDefault().unregister(new PreFlexRWCodec(null));\n      CodecProvider.getDefault().register(new PreFlexCodec());\n    } \n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97","date":1280158618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    // Restore read-only PreFlex codec:\n    if (codec.equals(\"PreFlex\")) {\n      LuceneTestCaseJ4.restorePreFlex(preFlexSav);\n    } \n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    // Restore read-only PreFlex codec:\n    if (codec.equals(\"PreFlex\")) {\n      CodecProvider.getDefault().unregister(new PreFlexRWCodec());\n      CodecProvider.getDefault().register(new PreFlexCodec());\n    } \n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    // Restore read-only PreFlex codec:\n    if (codec.equals(\"PreFlex\")) {\n      LuceneTestCaseJ4.restorePreFlex(preFlexSav);\n    } \n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    // Restore read-only PreFlex codec:\n    if (codec.equals(\"PreFlex\")) {\n      LuceneTestCaseJ4.restorePreFlex(preFlexSav);\n    } \n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"108e81824177a1a9f2507addadb8894e1cdf9afc","date":1280934266,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    LuceneTestCaseJ4.removeTestCodecs(codec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    // Restore read-only PreFlex codec:\n    if (codec.equals(\"PreFlex\")) {\n      LuceneTestCaseJ4.restorePreFlex(preFlexSav);\n    } \n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e49d7950c2623fba7129a12bfc1b773bdd38f1b","date":1281317143,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    LuceneTestCaseJ4.removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    LuceneTestCaseJ4.removeTestCodecs(codec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    LuceneTestCaseJ4.removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    // now look for unclosed resources\n    for (MockRAMDirectory d : stores.keySet()) {\n      if (d.isOpen()) {\n        StackTraceElement elements[] = stores.get(d);\n        StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n        fail(\"directory of testcase \" + getName() + \" was not closed, opened from: \" + element);\n      }\n    }\n    stores = null;\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    LuceneTestCaseJ4.removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    LuceneTestCaseJ4.removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    // now look for unclosed resources\n    for (MockDirectoryWrapper d : stores.keySet()) {\n      if (d.isOpen()) {\n        StackTraceElement elements[] = stores.get(d);\n        StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n        fail(\"directory of testcase \" + getName() + \" was not closed, opened from: \" + element);\n      }\n    }\n    stores = null;\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    LuceneTestCaseJ4.removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    // now look for unclosed resources\n    for (MockRAMDirectory d : stores.keySet()) {\n      if (d.isOpen()) {\n        StackTraceElement elements[] = stores.get(d);\n        StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n        fail(\"directory of testcase \" + getName() + \" was not closed, opened from: \" + element);\n      }\n    }\n    stores = null;\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e15e433a5cf81d3275a13920ec3461408b3f26b7","date":1283541243,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    LuceneTestCaseJ4.removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    // now look for unclosed resources\n    for (MockDirectoryWrapper d : stores.keySet()) {\n      if (d.isOpen()) {\n        StackTraceElement elements[] = stores.get(d);\n        StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n        fail(\"directory of testcase \" + getName() + \" was not closed, opened from: \" + element);\n      }\n    }\n    stores = null;\n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    LuceneTestCaseJ4.removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    // now look for unclosed resources\n    for (MockDirectoryWrapper d : stores.keySet()) {\n      if (d.isOpen()) {\n        StackTraceElement elements[] = stores.get(d);\n        StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n        fail(\"directory of testcase \" + getName() + \" was not closed, opened from: \" + element);\n      }\n    }\n    stores = null;\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    Assert.assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    LuceneTestCaseJ4.removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    // now look for unclosed resources\n    for (MockDirectoryWrapper d : stores.keySet()) {\n      if (d.isOpen()) {\n        StackTraceElement elements[] = stores.get(d);\n        StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n        fail(\"directory of testcase \" + getName() + \" was not closed, opened from: \" + element);\n      }\n    }\n    stores = null;\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f","date":1287243791,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    Assert.assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n  }\n\n","bugFix":null,"bugIntro":["5f0dc13f9e59664be282b46015a020c945dc2a48","5f0dc13f9e59664be282b46015a020c945dc2a48","5f0dc13f9e59664be282b46015a020c945dc2a48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    Assert.assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36dab8b0f369908af9460781f02512c5f364ba6a","date":1291918990,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea91947285bbf66f9f3839a31d6b1f9eb8ba4d4d","date":1291919334,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7fc5a2665a7fa1b9450097ae658193a11ee4d02c","date":1292699695,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    if (!getClass().getName().startsWith(\"org.apache.solr\"))\n      threadCleanup(\"test method: '\" + getName() + \"'\");\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"937baa6efeb42f311b60e55631e1e8b006ea8d84","date":1292701426,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    if (!getClass().getName().startsWith(\"org.apache.solr\"))\n      threadCleanup(\"test method: '\" + getName() + \"'\");\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    if (!getClass().getName().startsWith(\"org.apache.solr\"))\n      threadCleanup(\"test method: '\" + getName() + \"'\");\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1dccbb7b01a3abbed915804b0d7aa34238b966f","date":1292708876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    if (!getClass().getName().startsWith(\"org.apache.solr\")) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName() \n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now.\n        if (!testsFailed && uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    if (!getClass().getName().startsWith(\"org.apache.solr\"))\n      threadCleanup(\"test method: '\" + getName() + \"'\");\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    if (!getClass().getName().startsWith(\"org.apache.solr\")) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName() \n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now.\n        if (!testsFailed && uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    if (!getClass().getName().startsWith(\"org.apache.solr\")) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now.\n        if (!testsFailed && uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test\n      // classes call it directly from the scope where the index readers\n      // are used, because they could be gc'ed just before this tearDown\n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact\n      // \"violates\" FieldCache sanity, then you should either explicitly\n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are\n      // isolated in distinct test methods\n      assertSaneFieldCaches(getTestLabel());\n\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    // Restore read-only PreFlex codec:\n    if (codec.equals(\"PreFlex\")) {\n      LuceneTestCaseJ4.restorePreFlex(preFlexSav);\n    } \n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    \n    try {\n      Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n      if (!uncaughtExceptions.isEmpty()) {\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    if (!getClass().getName().startsWith(\"org.apache.solr\")) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName() \n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now.\n        if (!testsFailed && uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    if (!getClass().getName().startsWith(\"org.apache.solr\")) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName() \n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now.\n        if (!testsFailed && uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    if (!getClass().getName().startsWith(\"org.apache.solr\")) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName() \n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now.\n        if (!testsFailed && uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    if (!getClass().getName().startsWith(\"org.apache.solr\")) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName() \n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now.\n        if (!testsFailed && uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test \n      // classes call it directly from the scope where the index readers \n      // are used, because they could be gc'ed just before this tearDown \n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact \n      // \"violates\" FieldCache sanity, then you should either explicitly \n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are \n      // isolated in distinct test methods  \n      assertSaneFieldCaches(getTestLabel());\n\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    if (!getClass().getName().startsWith(\"org.apache.solr\")) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now.\n        if (!testsFailed && uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test\n      // classes call it directly from the scope where the index readers\n      // are used, because they could be gc'ed just before this tearDown\n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact\n      // \"violates\" FieldCache sanity, then you should either explicitly\n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are\n      // isolated in distinct test methods\n      assertSaneFieldCaches(getTestLabel());\n\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    assertTrue(\"ensure your setUp() calls super.setUp()!!!\", setup);\n    setup = false;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    if (!getClass().getName().startsWith(\"org.apache.solr\")) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now.\n        if (!testsFailed && uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    try {\n\n      if (!uncaughtExceptions.isEmpty()) {\n        testsFailed = true;\n        reportAdditionalFailureInfo();\n        System.err.println(\"The following exceptions were thrown by threads:\");\n        for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n          System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n          entry.exception.printStackTrace(System.err);\n        }\n        fail(\"Some threads threw uncaught exceptions!\");\n      }\n\n      // calling assertSaneFieldCaches here isn't as useful as having test\n      // classes call it directly from the scope where the index readers\n      // are used, because they could be gc'ed just before this tearDown\n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact\n      // \"violates\" FieldCache sanity, then you should either explicitly\n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are\n      // isolated in distinct test methods\n      assertSaneFieldCaches(getTestLabel());\n\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6e49d7950c2623fba7129a12bfc1b773bdd38f1b":["108e81824177a1a9f2507addadb8894e1cdf9afc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","f1dccbb7b01a3abbed915804b0d7aa34238b966f"],"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97":["399a364d374f2132b6d9ff9fd7f997a9f2ef734f"],"43b04c27924fe393e38e9f0986e32c634f261859":["e15e433a5cf81d3275a13920ec3461408b3f26b7"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["f1dccbb7b01a3abbed915804b0d7aa34238b966f"],"e35534ac782c9c9d1227a10245ab7729d9eef22f":["163fe85a71d778fd2b7747f65ca27b54829e2e57"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f":["43b04c27924fe393e38e9f0986e32c634f261859"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["236e69f7c6c636bfd65b7a9031c9e6fb15b508ec"],"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["ea91947285bbf66f9f3839a31d6b1f9eb8ba4d4d"],"937baa6efeb42f311b60e55631e1e8b006ea8d84":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["37087ea13c0fde1ce1a3b5579f60f827414045a9","c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["37087ea13c0fde1ce1a3b5579f60f827414045a9"],"e15e433a5cf81d3275a13920ec3461408b3f26b7":["a05409176bd65129d67a785ee70e881e238a9aef"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["6e49d7950c2623fba7129a12bfc1b773bdd38f1b"],"108e81824177a1a9f2507addadb8894e1cdf9afc":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"f1dccbb7b01a3abbed915804b0d7aa34238b966f":["937baa6efeb42f311b60e55631e1e8b006ea8d84"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","f1dccbb7b01a3abbed915804b0d7aa34238b966f"],"5f4e87790277826a2aea119328600dfb07761f32":["f470b537db3da4e8d0c39bc72fae5f9865a9ec3c","37087ea13c0fde1ce1a3b5579f60f827414045a9"],"36dab8b0f369908af9460781f02512c5f364ba6a":["e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"236e69f7c6c636bfd65b7a9031c9e6fb15b508ec":["e35534ac782c9c9d1227a10245ab7729d9eef22f"],"ea91947285bbf66f9f3839a31d6b1f9eb8ba4d4d":["36dab8b0f369908af9460781f02512c5f364ba6a"],"399a364d374f2132b6d9ff9fd7f997a9f2ef734f":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"37087ea13c0fde1ce1a3b5579f60f827414045a9":["f470b537db3da4e8d0c39bc72fae5f9865a9ec3c"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["43b04c27924fe393e38e9f0986e32c634f261859","e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"f470b537db3da4e8d0c39bc72fae5f9865a9ec3c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"]},"commit2Childs":{"6e49d7950c2623fba7129a12bfc1b773bdd38f1b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"43b04c27924fe393e38e9f0986e32c634f261859":["e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e35534ac782c9c9d1227a10245ab7729d9eef22f":["236e69f7c6c636bfd65b7a9031c9e6fb15b508ec"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["e15e433a5cf81d3275a13920ec3461408b3f26b7"],"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f":["36dab8b0f369908af9460781f02512c5f364ba6a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f470b537db3da4e8d0c39bc72fae5f9865a9ec3c"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["399a364d374f2132b6d9ff9fd7f997a9f2ef734f"],"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["937baa6efeb42f311b60e55631e1e8b006ea8d84"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"937baa6efeb42f311b60e55631e1e8b006ea8d84":["f1dccbb7b01a3abbed915804b0d7aa34238b966f"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["e35534ac782c9c9d1227a10245ab7729d9eef22f"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","108e81824177a1a9f2507addadb8894e1cdf9afc"],"e15e433a5cf81d3275a13920ec3461408b3f26b7":["43b04c27924fe393e38e9f0986e32c634f261859"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"108e81824177a1a9f2507addadb8894e1cdf9afc":["6e49d7950c2623fba7129a12bfc1b773bdd38f1b"],"f1dccbb7b01a3abbed915804b0d7aa34238b966f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"36dab8b0f369908af9460781f02512c5f364ba6a":["ea91947285bbf66f9f3839a31d6b1f9eb8ba4d4d"],"236e69f7c6c636bfd65b7a9031c9e6fb15b508ec":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"ea91947285bbf66f9f3839a31d6b1f9eb8ba4d4d":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"399a364d374f2132b6d9ff9fd7f997a9f2ef734f":["c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97"],"37087ea13c0fde1ce1a3b5579f60f827414045a9":["4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57","5f4e87790277826a2aea119328600dfb07761f32"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"f470b537db3da4e8d0c39bc72fae5f9865a9ec3c":["5f4e87790277826a2aea119328600dfb07761f32","37087ea13c0fde1ce1a3b5579f60f827414045a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}