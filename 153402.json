{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#anyoneElseActive().mjava","commits":[{"id":"7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44","date":1329921256,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#anyoneElseActive().mjava","pathOld":"/dev/null","sourceNew":"  private boolean anyoneElseActive() {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#anyoneElseActive().mjava","pathOld":"/dev/null","sourceNew":"  private boolean anyoneElseActive() {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#anyoneElseActive().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#anyoneElseActive().mjava","sourceNew":"  private boolean anyoneElseActive() {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean anyoneElseActive() {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#anyoneElseActive().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#anyoneElseActive().mjava","sourceNew":"  private boolean anyoneElseActive() {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean anyoneElseActive() {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#anyoneElseActive().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#anyoneElseActive().mjava","sourceNew":"  private boolean anyoneElseActive() {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean anyoneElseActive() {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#anyoneElseActive().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#anyoneElseActive().mjava","sourceNew":"  private boolean anyoneElseActive() {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n          ZkStateReader.NODE_NAME_PROP))) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean anyoneElseActive() {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#anyoneElseActive().mjava","sourceNew":null,"sourceOld":"  private boolean anyoneElseActive() {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n          ZkStateReader.NODE_NAME_PROP))) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44"],"a6378064655e76cd7b908b1cab4ce425b384b508":["fa64435b5902ce266c23755a4a00691a3285dab8"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44","3f767f8c99eaedb984df754fe61f21c5de260f94"],"7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6378064655e76cd7b908b1cab4ce425b384b508"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"a6378064655e76cd7b908b1cab4ce425b384b508":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["a6378064655e76cd7b908b1cab4ce425b384b508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44":["3f767f8c99eaedb984df754fe61f21c5de260f94","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}