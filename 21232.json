{"path":"lucene/facet/src/java/org/apache/lucene/facet/FloatRange#FloatRange(String,float,boolean,float,boolean).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FloatRange#FloatRange(String,float,boolean,float,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FloatRange#FloatRange(String,float,boolean,float,boolean).mjava","sourceNew":"  /** Create a FloatRange. */\n  public FloatRange(String label, float min, boolean minInclusive, float max, boolean maxInclusive) {\n    super(label);\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // TODO: if FloatDocValuesField used\n    // NumericUtils.floatToSortableInt format (instead of\n    // Float.floatToRawIntBits) we could do comparisons\n    // in int space \n\n    if (Float.isNaN(min)) {\n      throw new IllegalArgumentException(\"min cannot be NaN\");\n    }\n    if (!minInclusive) {\n      min = Math.nextUp(min);\n    }\n\n    if (Float.isNaN(max)) {\n      throw new IllegalArgumentException(\"max cannot be NaN\");\n    }\n    if (!maxInclusive) {\n      // Why no Math.nextDown?\n      max = Math.nextAfter(max, Float.NEGATIVE_INFINITY);\n    }\n\n    this.minIncl = min;\n    this.maxIncl = max;\n  }\n\n","sourceOld":"  /** Create a FloatRange. */\n  public FloatRange(String label, float min, boolean minInclusive, float max, boolean maxInclusive) {\n    super(label);\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // TODO: if FloatDocValuesField used\n    // NumericUtils.floatToSortableInt format (instead of\n    // Float.floatToRawIntBits) we could do comparisons\n    // in int space \n\n    if (Float.isNaN(min)) {\n      throw new IllegalArgumentException(\"min cannot be NaN\");\n    }\n    if (!minInclusive) {\n      min = Math.nextUp(min);\n    }\n\n    if (Float.isNaN(max)) {\n      throw new IllegalArgumentException(\"max cannot be NaN\");\n    }\n    if (!maxInclusive) {\n      // Why no Math.nextDown?\n      max = Math.nextAfter(max, Float.NEGATIVE_INFINITY);\n    }\n\n    this.minIncl = min;\n    this.maxIncl = max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd3ed8c8fa2a4b995f5dfca3f00e5ce80161de0e","date":1385900513,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FloatRange#FloatRange(String,float,boolean,float,boolean).mjava","sourceNew":null,"sourceOld":"  /** Create a FloatRange. */\n  public FloatRange(String label, float min, boolean minInclusive, float max, boolean maxInclusive) {\n    super(label);\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // TODO: if FloatDocValuesField used\n    // NumericUtils.floatToSortableInt format (instead of\n    // Float.floatToRawIntBits) we could do comparisons\n    // in int space \n\n    if (Float.isNaN(min)) {\n      throw new IllegalArgumentException(\"min cannot be NaN\");\n    }\n    if (!minInclusive) {\n      min = Math.nextUp(min);\n    }\n\n    if (Float.isNaN(max)) {\n      throw new IllegalArgumentException(\"max cannot be NaN\");\n    }\n    if (!maxInclusive) {\n      // Why no Math.nextDown?\n      max = Math.nextAfter(max, Float.NEGATIVE_INFINITY);\n    }\n\n    this.minIncl = min;\n    this.maxIncl = max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd3ed8c8fa2a4b995f5dfca3f00e5ce80161de0e":["21d36d0db865f7b84026b447bec653469a6e66df"],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd3ed8c8fa2a4b995f5dfca3f00e5ce80161de0e":[],"21d36d0db865f7b84026b447bec653469a6e66df":["bd3ed8c8fa2a4b995f5dfca3f00e5ce80161de0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bd3ed8c8fa2a4b995f5dfca3f00e5ce80161de0e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}