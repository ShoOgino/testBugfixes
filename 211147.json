{"path":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#sendRequestsInParallel(Collection[String],Function[String,MetricSamples]).mjava","commits":[{"id":"4cd8a9425419baa85ef4a56ed411ffb4c57964d3","date":1551677567,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#sendRequestsInParallel(Collection[String],Function[String,MetricSamples]).mjava","pathOld":"/dev/null","sourceNew":"  protected Map<String, MetricSamples> sendRequestsInParallel(\n      Collection<String> items,\n      Function<String, MetricSamples> samplesCallable) throws IOException {\n\n    List<CompletableFuture<Pair<String, MetricSamples>>> futures = items.stream()\n        .map(item -> CompletableFuture.supplyAsync(() -> new Pair<>(item, samplesCallable.apply(item)), executor))\n        .collect(Collectors.toList());\n\n    Future<List<Pair<String, MetricSamples>>> allComplete = Async.waitForAllSuccessfulResponses(futures);\n\n    try {\n      return allComplete.get().stream().collect(Collectors.toMap(Pair::first, Pair::second));\n    } catch (InterruptedException | ExecutionException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577","date":1597435180,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#sendRequestsInParallel(Collection[String],Function[String,MetricSamples]).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#sendRequestsInParallel(Collection[String],Function[String,MetricSamples]).mjava","sourceNew":"  protected Map<String, MetricSamples> sendRequestsInParallel(\n      Collection<String> items,\n      Function<String, MetricSamples> samplesCallable) throws IOException {\n\n    Map<String, MetricSamples> result = new HashMap<>(); // sync on this when adding to it below\n\n    try {\n      // invoke each samplesCallable with each item and putting the results in the above \"result\" map.\n      executor.invokeAll(\n          items.stream()\n              .map(item -> (Callable<MetricSamples>) () -> {\n                try {\n                  final MetricSamples samples = samplesCallable.apply(item);\n                  synchronized (result) {\n                    result.put(item, samples);\n                  }\n                } catch (Exception e) {\n                  // do NOT totally fail; just log and move on\n                  log.warn(\"Error occurred during metrics collection\", e);\n                }\n                return null;//not used\n              })\n              .collect(Collectors.toList())\n      );\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected Map<String, MetricSamples> sendRequestsInParallel(\n      Collection<String> items,\n      Function<String, MetricSamples> samplesCallable) throws IOException {\n\n    List<CompletableFuture<Pair<String, MetricSamples>>> futures = items.stream()\n        .map(item -> CompletableFuture.supplyAsync(() -> new Pair<>(item, samplesCallable.apply(item)), executor))\n        .collect(Collectors.toList());\n\n    Future<List<Pair<String, MetricSamples>>> allComplete = Async.waitForAllSuccessfulResponses(futures);\n\n    try {\n      return allComplete.get().stream().collect(Collectors.toMap(Pair::first, Pair::second));\n    } catch (InterruptedException | ExecutionException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}