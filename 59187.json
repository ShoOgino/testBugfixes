{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      // System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" +\n      // (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field())\n          .iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      // System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" +\n      // (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field())\n          .iterator();\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      // System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" +\n      // (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field())\n          .iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce8de354eb40085752030725cb2bee2b0ae536c","date":1469029371,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      if (termStates != null) {\n        // TermQuery either used as a Query or the term states have been provided at construction time\n        assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        final TermState state = termStates.get(context.ord);\n        if (state == null) { // term is not present in that reader\n          assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n          return null;\n        }\n        final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n        termsEnum.seekExact(term.bytes(), state);\n        return termsEnum;\n      } else {\n        // TermQuery used as a filter, so the term states have not been built up front\n        Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          return null;\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum;\n        } else {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      // System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" +\n      // (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field())\n          .iterator();\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":["3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35d7ed691d627802acc5be44a639b67b1360467b","date":1469032270,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      if (termStates != null) {\n        // TermQuery either used as a Query or the term states have been provided at construction time\n        assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        final TermState state = termStates.get(context.ord);\n        if (state == null) { // term is not present in that reader\n          assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n          return null;\n        }\n        final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n        termsEnum.seekExact(term.bytes(), state);\n        return termsEnum;\n      } else {\n        // TermQuery used as a filter, so the term states have not been built up front\n        Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          return null;\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum;\n        } else {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      // System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" +\n      // (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field())\n          .iterator();\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      if (termStates != null) {\n        // TermQuery either used as a Query or the term states have been provided at construction time\n        assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        final TermState state = termStates.get(context.ord);\n        if (state == null) { // term is not present in that reader\n          assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n          return null;\n        }\n        final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n        termsEnum.seekExact(term.bytes(), state);\n        return termsEnum;\n      } else {\n        // TermQuery used as a filter, so the term states have not been built up front\n        Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          return null;\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum;\n        } else {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      // System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" +\n      // (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field())\n          .iterator();\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bd3db3e8f35bef1d4d3f0411933b3190297302a","date":1485357107,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      if (termStates != null) {\n        // TermQuery either used as a Query or the term states have been provided at construction time\n        assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        final TermState state = termStates.get(context.ord);\n        if (state == null) { // term is not present in that reader\n          assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n          return null;\n        }\n        final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n        termsEnum.seekExact(term.bytes(), state);\n        return termsEnum;\n      } else {\n        // TermQuery used as a filter, so the term states have not been built up front\n        Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          return null;\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum;\n        } else {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      if (termStates != null) {\n        // TermQuery either used as a Query or the term states have been provided at construction time\n        assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        final TermState state = termStates.get(context.ord);\n        if (state == null) { // term is not present in that reader\n          assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n          return null;\n        }\n        final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n        termsEnum.seekExact(term.bytes(), state);\n        return termsEnum;\n      } else {\n        // TermQuery used as a filter, so the term states have not been built up front\n        Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          return null;\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum;\n        } else {\n          return null;\n        }\n      }\n    }\n\n","bugFix":["0ce8de354eb40085752030725cb2bee2b0ae536c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      if (termStates != null) {\n        // TermQuery either used as a Query or the term states have been provided at construction time\n        assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        final TermState state = termStates.get(context.ord);\n        if (state == null) { // term is not present in that reader\n          assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n          return null;\n        }\n        final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n        termsEnum.seekExact(term.bytes(), state);\n        return termsEnum;\n      } else {\n        // TermQuery used as a filter, so the term states have not been built up front\n        Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          return null;\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum;\n        } else {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      if (termStates != null) {\n        // TermQuery either used as a Query or the term states have been provided at construction time\n        assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        final TermState state = termStates.get(context.ord);\n        if (state == null) { // term is not present in that reader\n          assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n          return null;\n        }\n        final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n        termsEnum.seekExact(term.bytes(), state);\n        return termsEnum;\n      } else {\n        // TermQuery used as a filter, so the term states have not been built up front\n        Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          return null;\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum;\n        } else {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      assert termStates != null;\n      assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) :\n          \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates.get(context);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      if (termStates != null) {\n        // TermQuery either used as a Query or the term states have been provided at construction time\n        assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        final TermState state = termStates.get(context.ord);\n        if (state == null) { // term is not present in that reader\n          assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n          return null;\n        }\n        final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n        termsEnum.seekExact(term.bytes(), state);\n        return termsEnum;\n      } else {\n        // TermQuery used as a filter, so the term states have not been built up front\n        Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          return null;\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum;\n        } else {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(LeafReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      assert termStates != null;\n      assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) :\n          \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermState state = termStates.get(context);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(LeafReaderContext context) throws IOException {\n      if (termStates != null) {\n        // TermQuery either used as a Query or the term states have been provided at construction time\n        assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        final TermState state = termStates.get(context.ord);\n        if (state == null) { // term is not present in that reader\n          assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n          return null;\n        }\n        final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n        termsEnum.seekExact(term.bytes(), state);\n        return termsEnum;\n      } else {\n        // TermQuery used as a filter, so the term states have not been built up front\n        Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          return null;\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum;\n        } else {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["51f5280f31484820499077f41fcdfe92d527d9dc"],"b94236357aaa22b76c10629851fe4e376e0cea82":["3bd3db3e8f35bef1d4d3f0411933b3190297302a","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"0ce8de354eb40085752030725cb2bee2b0ae536c":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["35d7ed691d627802acc5be44a639b67b1360467b"],"51f5280f31484820499077f41fcdfe92d527d9dc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"35d7ed691d627802acc5be44a639b67b1360467b":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","0ce8de354eb40085752030725cb2bee2b0ae536c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","35d7ed691d627802acc5be44a639b67b1360467b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0ce8de354eb40085752030725cb2bee2b0ae536c","35d7ed691d627802acc5be44a639b67b1360467b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"0ce8de354eb40085752030725cb2bee2b0ae536c":["35d7ed691d627802acc5be44a639b67b1360467b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239","598b5d23aa7c9732bf473c21a9cd309c44599394"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["598b5d23aa7c9732bf473c21a9cd309c44599394"],"35d7ed691d627802acc5be44a639b67b1360467b":["3bd3db3e8f35bef1d4d3f0411933b3190297302a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["51f5280f31484820499077f41fcdfe92d527d9dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}