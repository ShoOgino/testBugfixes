{"path":"src/test/org/apache/lucene/analysis/TestNumericTokenStream#testLongStreamOldAPI().mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestNumericTokenStream#testLongStreamOldAPI().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongStreamOldAPI() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream(precisionStep).setLongValue(lvalue);\n    stream.setUseNewAPI(false);\n    Token tok=new Token();\n    for (int shift=0; shift<64; shift+=precisionStep) {\n      assertNotNull(\"New token is available\", tok=stream.next(tok));\n      assertEquals(\"Term is correctly encoded\", NumericUtils.longToPrefixCoded(lvalue, shift), tok.term());\n    }\n    assertNull(\"No more tokens available\", stream.next(tok));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426","date":1247563064,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestNumericTokenStream#testLongStreamOldAPI().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestNumericTokenStream#testLongStreamOldAPI().mjava","sourceNew":"  public void testLongStreamOldAPI() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream().setLongValue(lvalue);\n    stream.setUseNewAPI(false);\n    Token tok=new Token();\n    for (int shift=0; shift<64; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {\n      assertNotNull(\"New token is available\", tok=stream.next(tok));\n      assertEquals(\"Term is correctly encoded\", NumericUtils.longToPrefixCoded(lvalue, shift), tok.term());\n      assertEquals(\"Type correct\", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, tok.type());\n    }\n    assertNull(\"No more tokens available\", stream.next(tok));\n  }\n\n","sourceOld":"  public void testLongStreamOldAPI() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream(precisionStep).setLongValue(lvalue);\n    stream.setUseNewAPI(false);\n    Token tok=new Token();\n    for (int shift=0; shift<64; shift+=precisionStep) {\n      assertNotNull(\"New token is available\", tok=stream.next(tok));\n      assertEquals(\"Term is correctly encoded\", NumericUtils.longToPrefixCoded(lvalue, shift), tok.term());\n    }\n    assertNull(\"No more tokens available\", stream.next(tok));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestNumericTokenStream#testLongStreamOldAPI().mjava","sourceNew":null,"sourceOld":"  public void testLongStreamOldAPI() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream().setLongValue(lvalue);\n    stream.setUseNewAPI(false);\n    Token tok=new Token();\n    for (int shift=0; shift<64; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {\n      assertNotNull(\"New token is available\", tok=stream.next(tok));\n      assertEquals(\"Term is correctly encoded\", NumericUtils.longToPrefixCoded(lvalue, shift), tok.term());\n      assertEquals(\"Type correct\", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, tok.type());\n    }\n    assertNull(\"No more tokens available\", stream.next(tok));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["53b6c192847de8643a5da505cc433cbf8476a175"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"]},"commit2Childs":{"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}