{"path":"sandbox/contributions/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","commits":[{"id":"0d57805a939f8923b86ca8202ccef1f7cf548098","date":1105995946,"type":0,"author":"David Spencer","isMerge":false,"pathNew":"sandbox/contributions/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    private PriorityQueue retrieveTerms(int docNum) throws IOException {\n        Map termFreqMap = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text=d.get(fieldName);\n            \tif(text!=null)\n            \t{\n\t\t\t\t\taddTermFrequencies(new StringReader(text), termFreqMap, fieldName);\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"sandbox/contributions/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    private PriorityQueue retrieveTerms(int docNum) throws IOException {\n        Map termFreqMap = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text=d.get(fieldName);\n            \tif(text!=null)\n            \t{\n\t\t\t\t\taddTermFrequencies(new StringReader(text), termFreqMap, fieldName);\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    private PriorityQueue retrieveTerms(int docNum) throws IOException {\n        Map termFreqMap = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text=d.get(fieldName);\n            \tif(text!=null)\n            \t{\n\t\t\t\t\taddTermFrequencies(new StringReader(text), termFreqMap, fieldName);\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d57805a939f8923b86ca8202ccef1f7cf548098":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["0d57805a939f8923b86ca8202ccef1f7cf548098"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"]},"commit2Childs":{"0d57805a939f8923b86ca8202ccef1f7cf548098":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d57805a939f8923b86ca8202ccef1f7cf548098"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}