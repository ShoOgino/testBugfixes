{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","commits":[{"id":"624157c95774b85ad3edb6e1e623c4736d18a94c","date":1496392341,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"/dev/null","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\"));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\"));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\"));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\"));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12l,Clause.validate(\"sysLoadAvg\", \"12.46\"));\n    assertEquals(12l,Clause.validate(\"sysLoadAvg\", 12.46d));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\"));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69l,Clause.validate(\"heapUsage\", \"69.9\"));\n    assertEquals(69l,Clause.validate(\"heapUsage\", 69.9d));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"1000\",\"must be greater than\");\n    expectError(\"port\", 1000,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15","date":1496411842,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12l,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12l,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69l,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69l,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"1000\",\"must be greater than\");\n    expectError(\"port\", 1000,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\"));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\"));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\"));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\"));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12l,Clause.validate(\"sysLoadAvg\", \"12.46\"));\n    assertEquals(12l,Clause.validate(\"sysLoadAvg\", 12.46d));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\"));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69l,Clause.validate(\"heapUsage\", \"69.9\"));\n    assertEquals(69l,Clause.validate(\"heapUsage\", 69.9d));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"1000\",\"must be greater than\");\n    expectError(\"port\", 1000,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db505911df79fefd49f29212e44226b35e9e02e1","date":1496414878,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"1000\",\"must be greater than\");\n    expectError(\"port\", 1000,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12l,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12l,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69l,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69l,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"1000\",\"must be greater than\");\n    expectError(\"port\", 1000,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"0\",\"must be greater than\");\n    expectError(\"port\", 0,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"1000\",\"must be greater than\");\n    expectError(\"port\", 1000,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"/dev/null","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"0\",\"must be greater than\");\n    expectError(\"port\", 0,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"/dev/null","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"0\",\"must be greater than\");\n    expectError(\"port\", 0,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"0\",\"must be greater than\");\n    expectError(\"port\", 0,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"0\",\"must be greater than\");\n    expectError(\"port\", 0,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testValidate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testValidate().mjava","sourceNew":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"0\",\"must be greater than\");\n    expectError(\"port\", 0,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","sourceOld":"  public void testValidate() {\n    expectError(\"replica\", -1, \"must be greater than\" );\n    expectError(\"replica\",\"hello\", \"not a valid number\" );\n    assertEquals( 1l,   Clause.validate(\"replica\", \"1\", true));\n    assertEquals(\"c\",   Clause.validate(\"collection\", \"c\", true));\n    assertEquals( \"s\",   Clause.validate(\"shard\", \"s\",true));\n    assertEquals( \"overseer\",   Clause.validate(\"nodeRole\", \"overseer\",true));\n\n    expectError(\"nodeRole\", \"wrong\",\"must be one of\");\n\n    expectError(\"sysLoadAvg\", \"101\",\"must be less than \");\n    expectError(\"sysLoadAvg\", 101,\"must be less than \");\n    expectError(\"sysLoadAvg\", \"-1\",\"must be greater than\");\n    expectError(\"sysLoadAvg\", -1,\"must be greater than\");\n\n    assertEquals(12.46d,Clause.validate(\"sysLoadAvg\", \"12.46\",true));\n    assertEquals(12.46,Clause.validate(\"sysLoadAvg\", 12.46d,true));\n\n\n    expectError(\"ip_1\", \"300\",\"must be less than \");\n    expectError(\"ip_1\", 300,\"must be less than \");\n    expectError(\"ip_1\", \"-1\",\"must be greater than\");\n    expectError(\"ip_1\", -1,\"must be greater than\");\n\n    assertEquals(1l,Clause.validate(\"ip_1\", \"1\",true));\n\n    expectError(\"heapUsage\", \"-1\",\"must be greater than\");\n    expectError(\"heapUsage\", -1,\"must be greater than\");\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", \"69.9\",true));\n    assertEquals(69.9d,Clause.validate(\"heapUsage\", 69.9d,true));\n\n    expectError(\"port\", \"70000\",\"must be less than \");\n    expectError(\"port\", 70000,\"must be less than \");\n    expectError(\"port\", \"0\",\"must be greater than\");\n    expectError(\"port\", 0,\"must be greater than\");\n\n    expectError(\"cores\", \"-1\",\"must be greater than\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["e9017cf144952056066919f1ebc7897ff9bd71b1","e4848fb683db0790f2847173af06e2ad2d03328e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["624157c95774b85ad3edb6e1e623c4736d18a94c"],"db505911df79fefd49f29212e44226b35e9e02e1":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"624157c95774b85ad3edb6e1e623c4736d18a94c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["db505911df79fefd49f29212e44226b35e9e02e1"],"e4848fb683db0790f2847173af06e2ad2d03328e":["74aea047dff7f7c38a2d766827bd20d356f98c6a"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","e4848fb683db0790f2847173af06e2ad2d03328e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","624157c95774b85ad3edb6e1e623c4736d18a94c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["db505911df79fefd49f29212e44226b35e9e02e1"],"db505911df79fefd49f29212e44226b35e9e02e1":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"624157c95774b85ad3edb6e1e623c4736d18a94c":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}