{"path":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#ClassificationUpdateProcessor(String[],String,int,int,int,String,UpdateRequestProcessor,IndexReader,IndexSchema).mjava","commits":[{"id":"444d4b906d0e3398f87d6a5c4967c508f11a7f0b","date":1466507434,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#ClassificationUpdateProcessor(String[],String,int,int,int,String,UpdateRequestProcessor,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#ClassificationUpdateProcessor(String[],String,int,int,int,String,UpdateRequestProcessor,LeafReader,IndexSchema).mjava","sourceNew":"  /**\n   * Sole constructor\n   *\n   * @param inputFieldNames fields to be used as classifier's inputs\n   * @param classFieldName  field to be used as classifier's output\n   * @param minDf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq}, in case algorithm is {@code \"knn\"}\n   * @param minTf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq}, in case algorithm is {@code \"knn\"}\n   * @param k               setting for k nearest neighbors to analyze, in case algorithm is {@code \"knn\"}\n   * @param algorithm       the name of the classifier to use\n   * @param next            next update processor in the chain\n   * @param indexReader     index reader\n   * @param schema          schema\n   */\n  public ClassificationUpdateProcessor(String[] inputFieldNames, String classFieldName, int minDf, int minTf, int k, String algorithm,\n                                       UpdateRequestProcessor next, IndexReader indexReader, IndexSchema schema) {\n    super(next);\n    this.classFieldName = classFieldName;\n    Map<String, Analyzer> field2analyzer = new HashMap<String, Analyzer>();\n    for (String fieldName : inputFieldNames) {\n      SchemaField fieldFromSolrSchema = schema.getField(fieldName);\n      Analyzer indexAnalyzer = fieldFromSolrSchema.getType().getQueryAnalyzer();\n      field2analyzer.put(fieldName, indexAnalyzer);\n    }\n    switch (algorithm) {\n      case \"knn\":\n        classifier = new KNearestNeighborDocumentClassifier(indexReader, null, null, k, minDf, minTf, classFieldName, field2analyzer, inputFieldNames);\n        break;\n      case \"bayes\":\n        classifier = new SimpleNaiveBayesDocumentClassifier(indexReader, null, classFieldName, field2analyzer, inputFieldNames);\n        break;\n    }\n  }\n\n","sourceOld":"  /**\n   * Sole constructor\n   *\n   * @param inputFieldNames fields to be used as classifier's inputs\n   * @param classFieldName  field to be used as classifier's output\n   * @param minDf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq}, in case algorithm is {@code \"knn\"}\n   * @param minTf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq}, in case algorithm is {@code \"knn\"}\n   * @param k               setting for k nearest neighbors to analyze, in case algorithm is {@code \"knn\"}\n   * @param algorithm       the name of the classifier to use\n   * @param next            next update processor in the chain\n   * @param indexReader     index reader\n   * @param schema          schema\n   */\n  public ClassificationUpdateProcessor(String[] inputFieldNames, String classFieldName, int minDf, int minTf, int k, String algorithm,\n                                       UpdateRequestProcessor next, LeafReader indexReader, IndexSchema schema) {\n    super(next);\n    this.classFieldName = classFieldName;\n    Map<String, Analyzer> field2analyzer = new HashMap<String, Analyzer>();\n    for (String fieldName : inputFieldNames) {\n      SchemaField fieldFromSolrSchema = schema.getField(fieldName);\n      Analyzer indexAnalyzer = fieldFromSolrSchema.getType().getQueryAnalyzer();\n      field2analyzer.put(fieldName, indexAnalyzer);\n    }\n    switch (algorithm) {\n      case \"knn\":\n        classifier = new KNearestNeighborDocumentClassifier(indexReader, null, null, k, minDf, minTf, classFieldName, field2analyzer, inputFieldNames);\n        break;\n      case \"bayes\":\n        classifier = new SimpleNaiveBayesDocumentClassifier(indexReader, null, classFieldName, field2analyzer, inputFieldNames);\n        break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#ClassificationUpdateProcessor(String[],String,int,int,int,String,UpdateRequestProcessor,IndexReader,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sole constructor\n   *\n   * @param inputFieldNames fields to be used as classifier's inputs\n   * @param classFieldName  field to be used as classifier's output\n   * @param minDf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq}, in case algorithm is {@code \"knn\"}\n   * @param minTf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq}, in case algorithm is {@code \"knn\"}\n   * @param k               setting for k nearest neighbors to analyze, in case algorithm is {@code \"knn\"}\n   * @param algorithm       the name of the classifier to use\n   * @param next            next update processor in the chain\n   * @param indexReader     index reader\n   * @param schema          schema\n   */\n  public ClassificationUpdateProcessor(String[] inputFieldNames, String classFieldName, int minDf, int minTf, int k, String algorithm,\n                                       UpdateRequestProcessor next, IndexReader indexReader, IndexSchema schema) {\n    super(next);\n    this.classFieldName = classFieldName;\n    Map<String, Analyzer> field2analyzer = new HashMap<String, Analyzer>();\n    for (String fieldName : inputFieldNames) {\n      SchemaField fieldFromSolrSchema = schema.getField(fieldName);\n      Analyzer indexAnalyzer = fieldFromSolrSchema.getType().getQueryAnalyzer();\n      field2analyzer.put(fieldName, indexAnalyzer);\n    }\n    switch (algorithm) {\n      case \"knn\":\n        classifier = new KNearestNeighborDocumentClassifier(indexReader, null, null, k, minDf, minTf, classFieldName, field2analyzer, inputFieldNames);\n        break;\n      case \"bayes\":\n        classifier = new SimpleNaiveBayesDocumentClassifier(indexReader, null, classFieldName, field2analyzer, inputFieldNames);\n        break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1ec46dc24c2330c5e9dd0edefaede91c962926","date":1480027437,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#ClassificationUpdateProcessor(ClassificationUpdateProcessorParams,UpdateRequestProcessor,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#ClassificationUpdateProcessor(String[],String,int,int,int,String,UpdateRequestProcessor,IndexReader,IndexSchema).mjava","sourceNew":"  /**\n   * Sole constructor\n   *\n   * @param classificationParams classification advanced params\n   * @param next            next update processor in the chain\n   * @param indexReader     index reader\n   * @param schema          schema\n   */\n  public ClassificationUpdateProcessor(ClassificationUpdateProcessorParams classificationParams, UpdateRequestProcessor next, IndexReader indexReader, IndexSchema schema) {\n    super(next);\n    this.trainingClassField = classificationParams.getTrainingClassField();\n    this.predictedClassField = classificationParams.getPredictedClassField();\n    this.maxOutputClasses = classificationParams.getMaxPredictedClasses();\n    String[] inputFieldNamesWithBoost = classificationParams.getInputFieldNames();\n    Algorithm classificationAlgorithm = classificationParams.getAlgorithm();\n\n    Map<String, Analyzer> field2analyzer = new HashMap<>();\n    String[] inputFieldNames = this.removeBoost(inputFieldNamesWithBoost);\n    for (String fieldName : inputFieldNames) {\n      SchemaField fieldFromSolrSchema = schema.getField(fieldName);\n      Analyzer indexAnalyzer = fieldFromSolrSchema.getType().getQueryAnalyzer();\n      field2analyzer.put(fieldName, indexAnalyzer);\n    }\n    switch (classificationAlgorithm) {\n      case KNN:\n        classifier = new KNearestNeighborDocumentClassifier(indexReader, null, classificationParams.getTrainingFilterQuery(), classificationParams.getK(), classificationParams.getMinDf(), classificationParams.getMinTf(), trainingClassField, field2analyzer, inputFieldNamesWithBoost);\n        break;\n      case BAYES:\n        classifier = new SimpleNaiveBayesDocumentClassifier(indexReader, null, trainingClassField, field2analyzer, inputFieldNamesWithBoost);\n        break;\n    }\n  }\n\n","sourceOld":"  /**\n   * Sole constructor\n   *\n   * @param inputFieldNames fields to be used as classifier's inputs\n   * @param classFieldName  field to be used as classifier's output\n   * @param minDf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq}, in case algorithm is {@code \"knn\"}\n   * @param minTf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq}, in case algorithm is {@code \"knn\"}\n   * @param k               setting for k nearest neighbors to analyze, in case algorithm is {@code \"knn\"}\n   * @param algorithm       the name of the classifier to use\n   * @param next            next update processor in the chain\n   * @param indexReader     index reader\n   * @param schema          schema\n   */\n  public ClassificationUpdateProcessor(String[] inputFieldNames, String classFieldName, int minDf, int minTf, int k, String algorithm,\n                                       UpdateRequestProcessor next, IndexReader indexReader, IndexSchema schema) {\n    super(next);\n    this.classFieldName = classFieldName;\n    Map<String, Analyzer> field2analyzer = new HashMap<String, Analyzer>();\n    for (String fieldName : inputFieldNames) {\n      SchemaField fieldFromSolrSchema = schema.getField(fieldName);\n      Analyzer indexAnalyzer = fieldFromSolrSchema.getType().getQueryAnalyzer();\n      field2analyzer.put(fieldName, indexAnalyzer);\n    }\n    switch (algorithm) {\n      case \"knn\":\n        classifier = new KNearestNeighborDocumentClassifier(indexReader, null, null, k, minDf, minTf, classFieldName, field2analyzer, inputFieldNames);\n        break;\n      case \"bayes\":\n        classifier = new SimpleNaiveBayesDocumentClassifier(indexReader, null, classFieldName, field2analyzer, inputFieldNames);\n        break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#ClassificationUpdateProcessor(ClassificationUpdateProcessorParams,UpdateRequestProcessor,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#ClassificationUpdateProcessor(String[],String,int,int,int,String,UpdateRequestProcessor,IndexReader,IndexSchema).mjava","sourceNew":"  /**\n   * Sole constructor\n   *\n   * @param classificationParams classification advanced params\n   * @param next            next update processor in the chain\n   * @param indexReader     index reader\n   * @param schema          schema\n   */\n  public ClassificationUpdateProcessor(ClassificationUpdateProcessorParams classificationParams, UpdateRequestProcessor next, IndexReader indexReader, IndexSchema schema) {\n    super(next);\n    this.trainingClassField = classificationParams.getTrainingClassField();\n    this.predictedClassField = classificationParams.getPredictedClassField();\n    this.maxOutputClasses = classificationParams.getMaxPredictedClasses();\n    String[] inputFieldNamesWithBoost = classificationParams.getInputFieldNames();\n    Algorithm classificationAlgorithm = classificationParams.getAlgorithm();\n\n    Map<String, Analyzer> field2analyzer = new HashMap<>();\n    String[] inputFieldNames = this.removeBoost(inputFieldNamesWithBoost);\n    for (String fieldName : inputFieldNames) {\n      SchemaField fieldFromSolrSchema = schema.getField(fieldName);\n      Analyzer indexAnalyzer = fieldFromSolrSchema.getType().getQueryAnalyzer();\n      field2analyzer.put(fieldName, indexAnalyzer);\n    }\n    switch (classificationAlgorithm) {\n      case KNN:\n        classifier = new KNearestNeighborDocumentClassifier(indexReader, null, classificationParams.getTrainingFilterQuery(), classificationParams.getK(), classificationParams.getMinDf(), classificationParams.getMinTf(), trainingClassField, field2analyzer, inputFieldNamesWithBoost);\n        break;\n      case BAYES:\n        classifier = new SimpleNaiveBayesDocumentClassifier(indexReader, null, trainingClassField, field2analyzer, inputFieldNamesWithBoost);\n        break;\n    }\n  }\n\n","sourceOld":"  /**\n   * Sole constructor\n   *\n   * @param inputFieldNames fields to be used as classifier's inputs\n   * @param classFieldName  field to be used as classifier's output\n   * @param minDf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq}, in case algorithm is {@code \"knn\"}\n   * @param minTf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq}, in case algorithm is {@code \"knn\"}\n   * @param k               setting for k nearest neighbors to analyze, in case algorithm is {@code \"knn\"}\n   * @param algorithm       the name of the classifier to use\n   * @param next            next update processor in the chain\n   * @param indexReader     index reader\n   * @param schema          schema\n   */\n  public ClassificationUpdateProcessor(String[] inputFieldNames, String classFieldName, int minDf, int minTf, int k, String algorithm,\n                                       UpdateRequestProcessor next, IndexReader indexReader, IndexSchema schema) {\n    super(next);\n    this.classFieldName = classFieldName;\n    Map<String, Analyzer> field2analyzer = new HashMap<String, Analyzer>();\n    for (String fieldName : inputFieldNames) {\n      SchemaField fieldFromSolrSchema = schema.getField(fieldName);\n      Analyzer indexAnalyzer = fieldFromSolrSchema.getType().getQueryAnalyzer();\n      field2analyzer.put(fieldName, indexAnalyzer);\n    }\n    switch (algorithm) {\n      case \"knn\":\n        classifier = new KNearestNeighborDocumentClassifier(indexReader, null, null, k, minDf, minTf, classFieldName, field2analyzer, inputFieldNames);\n        break;\n      case \"bayes\":\n        classifier = new SimpleNaiveBayesDocumentClassifier(indexReader, null, classFieldName, field2analyzer, inputFieldNames);\n        break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#ClassificationUpdateProcessor(ClassificationUpdateProcessorParams,UpdateRequestProcessor,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#ClassificationUpdateProcessor(String[],String,int,int,int,String,UpdateRequestProcessor,IndexReader,IndexSchema).mjava","sourceNew":"  /**\n   * Sole constructor\n   *\n   * @param classificationParams classification advanced params\n   * @param next            next update processor in the chain\n   * @param indexReader     index reader\n   * @param schema          schema\n   */\n  public ClassificationUpdateProcessor(ClassificationUpdateProcessorParams classificationParams, UpdateRequestProcessor next, IndexReader indexReader, IndexSchema schema) {\n    super(next);\n    this.trainingClassField = classificationParams.getTrainingClassField();\n    this.predictedClassField = classificationParams.getPredictedClassField();\n    this.maxOutputClasses = classificationParams.getMaxPredictedClasses();\n    String[] inputFieldNamesWithBoost = classificationParams.getInputFieldNames();\n    Algorithm classificationAlgorithm = classificationParams.getAlgorithm();\n\n    Map<String, Analyzer> field2analyzer = new HashMap<>();\n    String[] inputFieldNames = this.removeBoost(inputFieldNamesWithBoost);\n    for (String fieldName : inputFieldNames) {\n      SchemaField fieldFromSolrSchema = schema.getField(fieldName);\n      Analyzer indexAnalyzer = fieldFromSolrSchema.getType().getQueryAnalyzer();\n      field2analyzer.put(fieldName, indexAnalyzer);\n    }\n    switch (classificationAlgorithm) {\n      case KNN:\n        classifier = new KNearestNeighborDocumentClassifier(indexReader, null, classificationParams.getTrainingFilterQuery(), classificationParams.getK(), classificationParams.getMinDf(), classificationParams.getMinTf(), trainingClassField, field2analyzer, inputFieldNamesWithBoost);\n        break;\n      case BAYES:\n        classifier = new SimpleNaiveBayesDocumentClassifier(indexReader, null, trainingClassField, field2analyzer, inputFieldNamesWithBoost);\n        break;\n    }\n  }\n\n","sourceOld":"  /**\n   * Sole constructor\n   *\n   * @param inputFieldNames fields to be used as classifier's inputs\n   * @param classFieldName  field to be used as classifier's output\n   * @param minDf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq}, in case algorithm is {@code \"knn\"}\n   * @param minTf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq}, in case algorithm is {@code \"knn\"}\n   * @param k               setting for k nearest neighbors to analyze, in case algorithm is {@code \"knn\"}\n   * @param algorithm       the name of the classifier to use\n   * @param next            next update processor in the chain\n   * @param indexReader     index reader\n   * @param schema          schema\n   */\n  public ClassificationUpdateProcessor(String[] inputFieldNames, String classFieldName, int minDf, int minTf, int k, String algorithm,\n                                       UpdateRequestProcessor next, IndexReader indexReader, IndexSchema schema) {\n    super(next);\n    this.classFieldName = classFieldName;\n    Map<String, Analyzer> field2analyzer = new HashMap<String, Analyzer>();\n    for (String fieldName : inputFieldNames) {\n      SchemaField fieldFromSolrSchema = schema.getField(fieldName);\n      Analyzer indexAnalyzer = fieldFromSolrSchema.getType().getQueryAnalyzer();\n      field2analyzer.put(fieldName, indexAnalyzer);\n    }\n    switch (algorithm) {\n      case \"knn\":\n        classifier = new KNearestNeighborDocumentClassifier(indexReader, null, null, k, minDf, minTf, classFieldName, field2analyzer, inputFieldNames);\n        break;\n      case \"bayes\":\n        classifier = new SimpleNaiveBayesDocumentClassifier(indexReader, null, classFieldName, field2analyzer, inputFieldNames);\n        break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f1ec46dc24c2330c5e9dd0edefaede91c962926":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","75babd1dfc2521603bfeb0968042e921d8c6c652"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b","9f1ec46dc24c2330c5e9dd0edefaede91c962926"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75babd1dfc2521603bfeb0968042e921d8c6c652"]},"commit2Childs":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["9f1ec46dc24c2330c5e9dd0edefaede91c962926","75babd1dfc2521603bfeb0968042e921d8c6c652","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9f1ec46dc24c2330c5e9dd0edefaede91c962926":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"75babd1dfc2521603bfeb0968042e921d8c6c652":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}