{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testIntervalFacetsResponse().mjava","commits":[{"id":"4b74869edee26aa619609ae7a51351466ba06d39","date":1407454039,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testIntervalFacetsResponse().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntervalFacetsResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    try(SolrResourceLoader loader = new SolrResourceLoader(null, null)) {\n      InputStream is = loader.openResource(\"solrj/sampleIntervalFacetsResponse.xml\");\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n      NamedList<Object> response = parser.processResponse(in);\n      in.close();\n      \n      QueryResponse qr = new QueryResponse(response, null);\n      assertNotNull(qr);\n      assertNotNull(qr.getIntervalFacets());\n      assertEquals(2, qr.getIntervalFacets().size());\n      \n      IntervalFacet facet = qr.getIntervalFacets().get(0);\n      assertEquals(\"price\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"[0,10]\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"(10,100]\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"(100,*]\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(4, facet.getIntervals().get(1).getCount());\n      assertEquals(9, facet.getIntervals().get(2).getCount());\n      \n      \n      facet = qr.getIntervalFacets().get(1);\n      assertEquals(\"popularity\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"bad\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"average\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"good\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(10, facet.getIntervals().get(1).getCount());\n      assertEquals(2, facet.getIntervals().get(2).getCount());\n      \n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testIntervalFacetsResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testIntervalFacetsResponse().mjava","sourceNew":"  public void testIntervalFacetsResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    try(SolrResourceLoader loader = new SolrResourceLoader()) {\n      InputStream is = loader.openResource(\"solrj/sampleIntervalFacetsResponse.xml\");\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n      NamedList<Object> response = parser.processResponse(in);\n      in.close();\n      \n      QueryResponse qr = new QueryResponse(response, null);\n      assertNotNull(qr);\n      assertNotNull(qr.getIntervalFacets());\n      assertEquals(2, qr.getIntervalFacets().size());\n      \n      IntervalFacet facet = qr.getIntervalFacets().get(0);\n      assertEquals(\"price\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"[0,10]\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"(10,100]\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"(100,*]\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(4, facet.getIntervals().get(1).getCount());\n      assertEquals(9, facet.getIntervals().get(2).getCount());\n      \n      \n      facet = qr.getIntervalFacets().get(1);\n      assertEquals(\"popularity\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"bad\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"average\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"good\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(10, facet.getIntervals().get(1).getCount());\n      assertEquals(2, facet.getIntervals().get(2).getCount());\n      \n    }\n    \n  }\n\n","sourceOld":"  public void testIntervalFacetsResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    try(SolrResourceLoader loader = new SolrResourceLoader(null, null)) {\n      InputStream is = loader.openResource(\"solrj/sampleIntervalFacetsResponse.xml\");\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n      NamedList<Object> response = parser.processResponse(in);\n      in.close();\n      \n      QueryResponse qr = new QueryResponse(response, null);\n      assertNotNull(qr);\n      assertNotNull(qr.getIntervalFacets());\n      assertEquals(2, qr.getIntervalFacets().size());\n      \n      IntervalFacet facet = qr.getIntervalFacets().get(0);\n      assertEquals(\"price\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"[0,10]\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"(10,100]\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"(100,*]\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(4, facet.getIntervals().get(1).getCount());\n      assertEquals(9, facet.getIntervals().get(2).getCount());\n      \n      \n      facet = qr.getIntervalFacets().get(1);\n      assertEquals(\"popularity\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"bad\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"average\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"good\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(10, facet.getIntervals().get(1).getCount());\n      assertEquals(2, facet.getIntervals().get(2).getCount());\n      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testIntervalFacetsResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testIntervalFacetsResponse().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIntervalFacetsResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    try(SolrResourceLoader loader = new SolrResourceLoader()) {\n      InputStream is = loader.openResource(\"solrj/sampleIntervalFacetsResponse.xml\");\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n      NamedList<Object> response = parser.processResponse(in);\n      in.close();\n      \n      QueryResponse qr = new QueryResponse(response, null);\n      assertNotNull(qr);\n      assertNotNull(qr.getIntervalFacets());\n      assertEquals(2, qr.getIntervalFacets().size());\n      \n      IntervalFacet facet = qr.getIntervalFacets().get(0);\n      assertEquals(\"price\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"[0,10]\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"(10,100]\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"(100,*]\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(4, facet.getIntervals().get(1).getCount());\n      assertEquals(9, facet.getIntervals().get(2).getCount());\n      \n      \n      facet = qr.getIntervalFacets().get(1);\n      assertEquals(\"popularity\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"bad\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"average\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"good\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(10, facet.getIntervals().get(1).getCount());\n      assertEquals(2, facet.getIntervals().get(2).getCount());\n      \n    }\n    \n  }\n\n","sourceOld":"  public void testIntervalFacetsResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    try(SolrResourceLoader loader = new SolrResourceLoader()) {\n      InputStream is = loader.openResource(\"solrj/sampleIntervalFacetsResponse.xml\");\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n      NamedList<Object> response = parser.processResponse(in);\n      in.close();\n      \n      QueryResponse qr = new QueryResponse(response, null);\n      assertNotNull(qr);\n      assertNotNull(qr.getIntervalFacets());\n      assertEquals(2, qr.getIntervalFacets().size());\n      \n      IntervalFacet facet = qr.getIntervalFacets().get(0);\n      assertEquals(\"price\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"[0,10]\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"(10,100]\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"(100,*]\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(4, facet.getIntervals().get(1).getCount());\n      assertEquals(9, facet.getIntervals().get(2).getCount());\n      \n      \n      facet = qr.getIntervalFacets().get(1);\n      assertEquals(\"popularity\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"bad\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"average\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"good\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(10, facet.getIntervals().get(1).getCount());\n      assertEquals(2, facet.getIntervals().get(2).getCount());\n      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testIntervalFacetsResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testIntervalFacetsResponse().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIntervalFacetsResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    try(SolrResourceLoader loader = new SolrResourceLoader()) {\n      InputStream is = loader.openResource(\"solrj/sampleIntervalFacetsResponse.xml\");\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n      NamedList<Object> response = parser.processResponse(in);\n      in.close();\n      \n      QueryResponse qr = new QueryResponse(response, null);\n      assertNotNull(qr);\n      assertNotNull(qr.getIntervalFacets());\n      assertEquals(2, qr.getIntervalFacets().size());\n      \n      IntervalFacet facet = qr.getIntervalFacets().get(0);\n      assertEquals(\"price\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"[0,10]\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"(10,100]\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"(100,*]\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(4, facet.getIntervals().get(1).getCount());\n      assertEquals(9, facet.getIntervals().get(2).getCount());\n      \n      \n      facet = qr.getIntervalFacets().get(1);\n      assertEquals(\"popularity\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"bad\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"average\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"good\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(10, facet.getIntervals().get(1).getCount());\n      assertEquals(2, facet.getIntervals().get(2).getCount());\n      \n    }\n    \n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIntervalFacetsResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    try(SolrResourceLoader loader = new SolrResourceLoader()) {\n      InputStream is = loader.openResource(\"solrj/sampleIntervalFacetsResponse.xml\");\n      assertNotNull(is);\n      Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n      NamedList<Object> response = parser.processResponse(in);\n      in.close();\n      \n      QueryResponse qr = new QueryResponse(response, null);\n      assertNotNull(qr);\n      assertNotNull(qr.getIntervalFacets());\n      assertEquals(2, qr.getIntervalFacets().size());\n      \n      IntervalFacet facet = qr.getIntervalFacets().get(0);\n      assertEquals(\"price\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"[0,10]\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"(10,100]\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"(100,*]\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(4, facet.getIntervals().get(1).getCount());\n      assertEquals(9, facet.getIntervals().get(2).getCount());\n      \n      \n      facet = qr.getIntervalFacets().get(1);\n      assertEquals(\"popularity\", facet.getField());\n      assertEquals(3, facet.getIntervals().size());\n      \n      assertEquals(\"bad\", facet.getIntervals().get(0).getKey());\n      assertEquals(\"average\", facet.getIntervals().get(1).getKey());\n      assertEquals(\"good\", facet.getIntervals().get(2).getKey());\n      \n      assertEquals(3, facet.getIntervals().get(0).getCount());\n      assertEquals(10, facet.getIntervals().get(1).getCount());\n      assertEquals(2, facet.getIntervals().get(2).getCount());\n      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a626ec4d1c92e59fe390724d6220081047b03ce7":["4b74869edee26aa619609ae7a51351466ba06d39"],"4b74869edee26aa619609ae7a51351466ba06d39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"]},"commit2Childs":{"a626ec4d1c92e59fe390724d6220081047b03ce7":["4cba13865da71de3b9b0937fcbc66d726089356d"],"4b74869edee26aa619609ae7a51351466ba06d39":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b74869edee26aa619609ae7a51351466ba06d39"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}