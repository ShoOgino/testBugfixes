{"path":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ParseContextConfig#extract(Element,SolrResourceLoader).mjava","commits":[{"id":"c05ecea3671609c138d91d6fe0d0aa71dd86e992","date":1446668020,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ParseContextConfig#extract(Element,SolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  private void extract(Element element, SolrResourceLoader loader) throws Exception {\n    final NodeList xmlEntries = element.getElementsByTagName(\"entry\");\n    for (int i = 0, c1 = xmlEntries.getLength(); i < c1; i++) {\n      final NamedNodeMap xmlEntryAttributes = xmlEntries.item(i).getAttributes();\n      final String className = xmlEntryAttributes.getNamedItem(\"class\").getNodeValue();\n      final String implementationName = xmlEntryAttributes.getNamedItem(\"impl\").getNodeValue();\n\n      final NodeList xmlProperties = ((Element)xmlEntries.item(i)).getElementsByTagName(\"property\");\n\n      final Class<?> interfaceClass = loader.findClass(className, Object.class);\n      final BeanInfo beanInfo = Introspector.getBeanInfo(interfaceClass, Introspector.IGNORE_ALL_BEANINFO);\n      \n      final HashMap<String, PropertyDescriptor> descriptorMap = new HashMap<>();\n      for (final PropertyDescriptor pd : beanInfo.getPropertyDescriptors()) {\n        descriptorMap.put(pd.getName(), pd);\n      }\n\n      final Object instance = loader.newInstance(implementationName, Object.class);\n      if (!interfaceClass.isInstance(instance)) {\n        throw new IllegalArgumentException(\"Implementation class does not extend \" + interfaceClass.getName());\n      }\n\n      for (int j = 0, c2 = xmlProperties.getLength(); j < c2; j++) {\n        final Node xmlProperty = xmlProperties.item(j);\n        final NamedNodeMap xmlPropertyAttributes = xmlProperty.getAttributes();\n\n        final String propertyName = xmlPropertyAttributes.getNamedItem(\"name\").getNodeValue();\n        final String propertyValue = xmlPropertyAttributes.getNamedItem(\"value\").getNodeValue();\n\n        final PropertyDescriptor propertyDescriptor = descriptorMap.get(propertyName);\n        propertyDescriptor.getWriteMethod().invoke(instance, getValueFromString(propertyDescriptor.getPropertyType(), propertyValue));\n      }\n\n      entries.put(interfaceClass, instance);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b17fae0d6d14ed41611b37dc1ef3aa1a60fda2cd","date":1446676320,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ParseContextConfig#extract(Element,SolrResourceLoader).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ParseContextConfig#extract(Element,SolrResourceLoader).mjava","sourceNew":"  private void extract(Element element, SolrResourceLoader loader) throws Exception {\n    final NodeList xmlEntries = element.getElementsByTagName(\"entry\");\n    for (int i = 0, c1 = xmlEntries.getLength(); i < c1; i++) {\n      final NamedNodeMap xmlEntryAttributes = xmlEntries.item(i).getAttributes();\n      final String className = xmlEntryAttributes.getNamedItem(\"class\").getNodeValue();\n      final String implementationName = xmlEntryAttributes.getNamedItem(\"impl\").getNodeValue();\n\n      final NodeList xmlProperties = ((Element)xmlEntries.item(i)).getElementsByTagName(\"property\");\n\n      final Class<?> interfaceClass = loader.findClass(className, Object.class);\n      final BeanInfo beanInfo = Introspector.getBeanInfo(interfaceClass, Introspector.IGNORE_ALL_BEANINFO);\n      \n      final HashMap<String, PropertyDescriptor> descriptorMap = new HashMap<>();\n      for (final PropertyDescriptor pd : beanInfo.getPropertyDescriptors()) {\n        descriptorMap.put(pd.getName(), pd);\n      }\n\n      final Object instance = loader.newInstance(implementationName, Object.class);\n      if (!interfaceClass.isInstance(instance)) {\n        throw new IllegalArgumentException(\"Implementation class does not extend \" + interfaceClass.getName());\n      }\n\n      for (int j = 0, c2 = xmlProperties.getLength(); j < c2; j++) {\n        final Node xmlProperty = xmlProperties.item(j);\n        final NamedNodeMap xmlPropertyAttributes = xmlProperty.getAttributes();\n\n        final String propertyName = xmlPropertyAttributes.getNamedItem(\"name\").getNodeValue();\n        final String propertyValue = xmlPropertyAttributes.getNamedItem(\"value\").getNodeValue();\n\n        final PropertyDescriptor propertyDescriptor = descriptorMap.get(propertyName);\n        if (propertyDescriptor == null) {\n          throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"Unknown bean property %s in class %s\",\n              propertyName, interfaceClass.getName()));\n        }\n        final Method method = propertyDescriptor.getWriteMethod();\n        if (method == null) {\n          throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"Cannot set bean property %s in class %s (no write method available)\",\n              propertyName, interfaceClass.getName()));\n        }\n        method.invoke(instance, getValueFromString(propertyDescriptor.getPropertyType(), propertyValue));\n      }\n\n      entries.put(interfaceClass, instance);\n    }\n  }\n\n","sourceOld":"  private void extract(Element element, SolrResourceLoader loader) throws Exception {\n    final NodeList xmlEntries = element.getElementsByTagName(\"entry\");\n    for (int i = 0, c1 = xmlEntries.getLength(); i < c1; i++) {\n      final NamedNodeMap xmlEntryAttributes = xmlEntries.item(i).getAttributes();\n      final String className = xmlEntryAttributes.getNamedItem(\"class\").getNodeValue();\n      final String implementationName = xmlEntryAttributes.getNamedItem(\"impl\").getNodeValue();\n\n      final NodeList xmlProperties = ((Element)xmlEntries.item(i)).getElementsByTagName(\"property\");\n\n      final Class<?> interfaceClass = loader.findClass(className, Object.class);\n      final BeanInfo beanInfo = Introspector.getBeanInfo(interfaceClass, Introspector.IGNORE_ALL_BEANINFO);\n      \n      final HashMap<String, PropertyDescriptor> descriptorMap = new HashMap<>();\n      for (final PropertyDescriptor pd : beanInfo.getPropertyDescriptors()) {\n        descriptorMap.put(pd.getName(), pd);\n      }\n\n      final Object instance = loader.newInstance(implementationName, Object.class);\n      if (!interfaceClass.isInstance(instance)) {\n        throw new IllegalArgumentException(\"Implementation class does not extend \" + interfaceClass.getName());\n      }\n\n      for (int j = 0, c2 = xmlProperties.getLength(); j < c2; j++) {\n        final Node xmlProperty = xmlProperties.item(j);\n        final NamedNodeMap xmlPropertyAttributes = xmlProperty.getAttributes();\n\n        final String propertyName = xmlPropertyAttributes.getNamedItem(\"name\").getNodeValue();\n        final String propertyValue = xmlPropertyAttributes.getNamedItem(\"value\").getNodeValue();\n\n        final PropertyDescriptor propertyDescriptor = descriptorMap.get(propertyName);\n        propertyDescriptor.getWriteMethod().invoke(instance, getValueFromString(propertyDescriptor.getPropertyType(), propertyValue));\n      }\n\n      entries.put(interfaceClass, instance);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b17fae0d6d14ed41611b37dc1ef3aa1a60fda2cd":["c05ecea3671609c138d91d6fe0d0aa71dd86e992"],"c05ecea3671609c138d91d6fe0d0aa71dd86e992":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b17fae0d6d14ed41611b37dc1ef3aa1a60fda2cd"]},"commit2Childs":{"b17fae0d6d14ed41611b37dc1ef3aa1a60fda2cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c05ecea3671609c138d91d6fe0d0aa71dd86e992":["b17fae0d6d14ed41611b37dc1ef3aa1a60fda2cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c05ecea3671609c138d91d6fe0d0aa71dd86e992"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}