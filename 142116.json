{"path":"src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Resolves the {@link DocumentAnalysisRequest} from the given solr request.\n   *\n   * @param req The solr request.\n   *\n   * @return The resolved document analysis request.\n   *\n   * @throws IOException        Thrown when reading/parsing the content stream of the request fails.\n   * @throws XMLStreamException Thrown when reading/parsing the content stream of the request fails.\n   */\n  DocumentAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) throws IOException, XMLStreamException {\n\n    DocumentAnalysisRequest request = new DocumentAnalysisRequest();\n\n    SolrParams params = req.getParams();\n\n    String query = params.get(AnalysisParams.QUERY, params.get(CommonParams.Q, null));\n    request.setQuery(query);\n\n    boolean showMatch = params.getBool(AnalysisParams.SHOW_MATCH, false);\n    request.setShowMatch(showMatch);\n\n    ContentStream stream = extractSingleContentStream(req);\n    Reader reader = stream.getReader();\n    XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n\n    try {\n\n      while (true) {\n        int event = parser.next();\n        switch (event) {\n          case XMLStreamConstants.END_DOCUMENT: {\n            parser.close();\n            return request;\n          }\n          case XMLStreamConstants.START_ELEMENT: {\n            String currTag = parser.getLocalName();\n            if (\"doc\".equals(currTag)) {\n              log.trace(\"Reading doc...\");\n              SolrInputDocument document = readDocument(parser, req.getSchema());\n              request.addDocument(document);\n            }\n            break;\n          }\n        }\n      }\n\n    } finally {\n      parser.close();\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Resolves the {@link DocumentAnalysisRequest} from the given solr request.\n   *\n   * @param req The solr request.\n   *\n   * @return The resolved document analysis request.\n   *\n   * @throws IOException        Thrown when reading/parsing the content stream of the request fails.\n   * @throws XMLStreamException Thrown when reading/parsing the content stream of the request fails.\n   */\n  DocumentAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) throws IOException, XMLStreamException {\n\n    DocumentAnalysisRequest request = new DocumentAnalysisRequest();\n\n    SolrParams params = req.getParams();\n\n    String query = params.get(AnalysisParams.QUERY, params.get(CommonParams.Q, null));\n    request.setQuery(query);\n\n    boolean showMatch = params.getBool(AnalysisParams.SHOW_MATCH, false);\n    request.setShowMatch(showMatch);\n\n    ContentStream stream = extractSingleContentStream(req);\n    Reader reader = stream.getReader();\n    XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n\n    try {\n\n      while (true) {\n        int event = parser.next();\n        switch (event) {\n          case XMLStreamConstants.END_DOCUMENT: {\n            parser.close();\n            return request;\n          }\n          case XMLStreamConstants.START_ELEMENT: {\n            String currTag = parser.getLocalName();\n            if (\"doc\".equals(currTag)) {\n              log.trace(\"Reading doc...\");\n              SolrInputDocument document = readDocument(parser, req.getSchema());\n              request.addDocument(document);\n            }\n            break;\n          }\n        }\n      }\n\n    } finally {\n      parser.close();\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  /**\n   * Resolves the {@link DocumentAnalysisRequest} from the given solr request.\n   *\n   * @param req The solr request.\n   *\n   * @return The resolved document analysis request.\n   *\n   * @throws IOException        Thrown when reading/parsing the content stream of the request fails.\n   * @throws XMLStreamException Thrown when reading/parsing the content stream of the request fails.\n   */\n  DocumentAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) throws IOException, XMLStreamException {\n\n    DocumentAnalysisRequest request = new DocumentAnalysisRequest();\n\n    SolrParams params = req.getParams();\n\n    String query = params.get(AnalysisParams.QUERY, params.get(CommonParams.Q, null));\n    request.setQuery(query);\n\n    boolean showMatch = params.getBool(AnalysisParams.SHOW_MATCH, false);\n    request.setShowMatch(showMatch);\n\n    ContentStream stream = extractSingleContentStream(req);\n    Reader reader = stream.getReader();\n    XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n\n    try {\n\n      while (true) {\n        int event = parser.next();\n        switch (event) {\n          case XMLStreamConstants.END_DOCUMENT: {\n            parser.close();\n            return request;\n          }\n          case XMLStreamConstants.START_ELEMENT: {\n            String currTag = parser.getLocalName();\n            if (\"doc\".equals(currTag)) {\n              log.trace(\"Reading doc...\");\n              SolrInputDocument document = readDocument(parser, req.getSchema());\n              request.addDocument(document);\n            }\n            break;\n          }\n        }\n      }\n\n    } finally {\n      parser.close();\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}