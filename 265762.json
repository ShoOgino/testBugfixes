{"path":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    Collections.sort(mergeThreads, new CompareByMergeDocCount());\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    Collections.sort(mergeThreads, new CompareByMergeDocCount());\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    CollectionUtil.mergeSort(mergeThreads, compareByMergeDocCount);\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    Collections.sort(mergeThreads, new CompareByMergeDocCount());\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    CollectionUtil.mergeSort(mergeThreads, compareByMergeDocCount);\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    Collections.sort(mergeThreads, new CompareByMergeDocCount());\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db603debe12d21cac9f37467b795dd3a8559496a","date":1292767070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      final boolean doPause;\n      if (threadIdx < activeMergeCount-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    CollectionUtil.mergeSort(mergeThreads, compareByMergeDocCount);\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["60679157c78fc286ee35471398529a1e5749621c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eb1b144119d471f0d0af58fe8cf3af07b40f72be","date":1292778444,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    CollectionUtil.mergeSort(mergeThreads, compareByMergeDocCount);\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      final boolean doPause;\n      if (threadIdx < activeMergeCount-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["60679157c78fc286ee35471398529a1e5749621c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60679157c78fc286ee35471398529a1e5749621c","date":1292841330,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      final boolean doPause;\n      if (threadIdx < activeMergeCount-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    CollectionUtil.mergeSort(mergeThreads, compareByMergeDocCount);\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":["eb1b144119d471f0d0af58fe8cf3af07b40f72be","db603debe12d21cac9f37467b795dd3a8559496a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      final boolean doPause;\n      if (threadIdx < activeMergeCount-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    Collections.sort(mergeThreads, new CompareByMergeDocCount());\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      final boolean doPause;\n      if (threadIdx < activeMergeCount-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    CollectionUtil.mergeSort(mergeThreads, compareByMergeDocCount);\n    \n    final int count = mergeThreads.size();\n    int pri = mergeThreadPriority;\n    for(int i=0;i<count;i++) {\n      final MergeThread mergeThread = mergeThreads.get(i);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) {\n        continue;\n      }\n      final boolean doPause;\n      if (i < count-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abba363b04df5f50b5ec36177b5cd17c3fe73d6b","date":1295268568,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /**\n   * Called whenever the running merges have changed, to pause & unpause\n   * threads. This method sorts the merge threads by their merge size in\n   * descending order and then pauses/unpauses threads from first to lsat --\n   * that way, smaller merges are guaranteed to run before larger ones.\n   */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    // Sort the merge threads in descending order.\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      // pause the thread if maxThreadCount is smaller than the number of merge threads.\n      final boolean doPause = threadIdx < activeMergeCount - maxThreadCount;\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      final boolean doPause;\n      if (threadIdx < activeMergeCount-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /**\n   * Called whenever the running merges have changed, to pause & unpause\n   * threads. This method sorts the merge threads by their merge size in\n   * descending order and then pauses/unpauses threads from first to lsat --\n   * that way, smaller merges are guaranteed to run before larger ones.\n   */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    // Sort the merge threads in descending order.\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      // pause the thread if maxThreadCount is smaller than the number of merge threads.\n      final boolean doPause = threadIdx < activeMergeCount - maxThreadCount;\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      final boolean doPause;\n      if (threadIdx < activeMergeCount-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7235f072992928845d8cfd2dfc1c90362360e1e","date":1296426876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /**\n   * Called whenever the running merges have changed, to pause & unpause\n   * threads. This method sorts the merge threads by their merge size in\n   * descending order and then pauses/unpauses threads from first to last --\n   * that way, smaller merges are guaranteed to run before larger ones.\n   */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    // Sort the merge threads in descending order.\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      // pause the thread if maxThreadCount is smaller than the number of merge threads.\n      final boolean doPause = threadIdx < activeMergeCount - maxThreadCount;\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Called whenever the running merges have changed, to pause & unpause\n   * threads. This method sorts the merge threads by their merge size in\n   * descending order and then pauses/unpauses threads from first to lsat --\n   * that way, smaller merges are guaranteed to run before larger ones.\n   */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    // Sort the merge threads in descending order.\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      // pause the thread if maxThreadCount is smaller than the number of merge threads.\n      final boolean doPause = threadIdx < activeMergeCount - maxThreadCount;\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /**\n   * Called whenever the running merges have changed, to pause & unpause\n   * threads. This method sorts the merge threads by their merge size in\n   * descending order and then pauses/unpauses threads from first to last --\n   * that way, smaller merges are guaranteed to run before larger ones.\n   */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    // Sort the merge threads in descending order.\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      // pause the thread if maxThreadCount is smaller than the number of merge threads.\n      final boolean doPause = threadIdx < activeMergeCount - maxThreadCount;\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called whenever the running merges have changed, to\n   *  pause & unpause threads. */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      final boolean doPause;\n      if (threadIdx < activeMergeCount-maxThreadCount) {\n        doPause = true;\n      } else {\n        doPause = false;\n      }\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /**\n   * Called whenever the running merges have changed, to pause & unpause\n   * threads. This method sorts the merge threads by their merge size in\n   * descending order and then pauses/unpauses threads from first to last --\n   * that way, smaller merges are guaranteed to run before larger ones.\n   */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    // Sort the merge threads in descending order.\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      // pause the thread if maxThreadCount is smaller than the number of merge threads.\n      final boolean doPause = threadIdx < activeMergeCount - maxThreadCount;\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Called whenever the running merges have changed, to pause & unpause\n   * threads. This method sorts the merge threads by their merge size in\n   * descending order and then pauses/unpauses threads from first to lsat --\n   * that way, smaller merges are guaranteed to run before larger ones.\n   */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    // Sort the merge threads in descending order.\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      // pause the thread if maxThreadCount is smaller than the number of merge threads.\n      final boolean doPause = threadIdx < activeMergeCount - maxThreadCount;\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#updateMergeThreads().mjava","sourceNew":"  /**\n   * Called whenever the running merges have changed, to pause & unpause\n   * threads. This method sorts the merge threads by their merge size in\n   * descending order and then pauses/unpauses threads from first to last --\n   * that way, smaller merges are guaranteed to run before larger ones.\n   */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    // Sort the merge threads in descending order.\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      // pause the thread if maxThreadCount is smaller than the number of merge threads.\n      final boolean doPause = threadIdx < activeMergeCount - maxThreadCount;\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Called whenever the running merges have changed, to pause & unpause\n   * threads. This method sorts the merge threads by their merge size in\n   * descending order and then pauses/unpauses threads from first to last --\n   * that way, smaller merges are guaranteed to run before larger ones.\n   */\n  protected synchronized void updateMergeThreads() {\n\n    // Only look at threads that are alive & not in the\n    // process of stopping (ie have an active merge):\n    final List<MergeThread> activeMerges = new ArrayList<MergeThread>();\n\n    int threadIdx = 0;\n    while (threadIdx < mergeThreads.size()) {\n      final MergeThread mergeThread = mergeThreads.get(threadIdx);\n      if (!mergeThread.isAlive()) {\n        // Prune any dead threads\n        mergeThreads.remove(threadIdx);\n        continue;\n      }\n      if (mergeThread.getCurrentMerge() != null) {\n        activeMerges.add(mergeThread);\n      }\n      threadIdx++;\n    }\n\n    // Sort the merge threads in descending order.\n    CollectionUtil.mergeSort(activeMerges, compareByMergeDocCount);\n    \n    int pri = mergeThreadPriority;\n    final int activeMergeCount = activeMerges.size();\n    for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) {\n      final MergeThread mergeThread = activeMerges.get(threadIdx);\n      final MergePolicy.OneMerge merge = mergeThread.getCurrentMerge();\n      if (merge == null) { \n        continue;\n      }\n\n      // pause the thread if maxThreadCount is smaller than the number of merge threads.\n      final boolean doPause = threadIdx < activeMergeCount - maxThreadCount;\n\n      if (verbose()) {\n        if (doPause != merge.getPause()) {\n          if (doPause) {\n            message(\"pause thread \" + mergeThread.getName());\n          } else {\n            message(\"unpause thread \" + mergeThread.getName());\n          }\n        }\n      }\n      if (doPause != merge.getPause()) {\n        merge.setPause(doPause);\n      }\n\n      if (!doPause) {\n        if (verbose()) {\n          message(\"set priority of merge thread \" + mergeThread.getName() + \" to \" + pri);\n        }\n        mergeThread.setThreadPriority(pri);\n        pri = Math.min(Thread.MAX_PRIORITY, 1+pri);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","60679157c78fc286ee35471398529a1e5749621c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7235f072992928845d8cfd2dfc1c90362360e1e"],"db603debe12d21cac9f37467b795dd3a8559496a":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","60679157c78fc286ee35471398529a1e5749621c"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","abba363b04df5f50b5ec36177b5cd17c3fe73d6b"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"60679157c78fc286ee35471398529a1e5749621c":["eb1b144119d471f0d0af58fe8cf3af07b40f72be"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","c7235f072992928845d8cfd2dfc1c90362360e1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"abba363b04df5f50b5ec36177b5cd17c3fe73d6b":["60679157c78fc286ee35471398529a1e5749621c"],"c7235f072992928845d8cfd2dfc1c90362360e1e":["abba363b04df5f50b5ec36177b5cd17c3fe73d6b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["9454a6510e2db155fb01faa5c049b06ece95fab9","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"eb1b144119d471f0d0af58fe8cf3af07b40f72be":["db603debe12d21cac9f37467b795dd3a8559496a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","c7235f072992928845d8cfd2dfc1c90362360e1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db603debe12d21cac9f37467b795dd3a8559496a":["eb1b144119d471f0d0af58fe8cf3af07b40f72be"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["db603debe12d21cac9f37467b795dd3a8559496a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"60679157c78fc286ee35471398529a1e5749621c":["70ad682703b8585f5d0a637efec044d57ec05efb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","abba363b04df5f50b5ec36177b5cd17c3fe73d6b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"abba363b04df5f50b5ec36177b5cd17c3fe73d6b":["e79a6d080bdd5b2a8f56342cf571b5476de04180","c7235f072992928845d8cfd2dfc1c90362360e1e"],"c7235f072992928845d8cfd2dfc1c90362360e1e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["70ad682703b8585f5d0a637efec044d57ec05efb"],"eb1b144119d471f0d0af58fe8cf3af07b40f72be":["60679157c78fc286ee35471398529a1e5749621c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}