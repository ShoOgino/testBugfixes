{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props);\n    coreStates.put(shardZkNodeName, coreState);\n    final String nodePath = \"/node_states/\" + getNodeName();\n\n    try {\n      zkClient.setData(nodePath, ZkStateReader.toJSON(coreStates.values()),\n          true);\n      \n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props);\n    coreStates.put(shardZkNodeName, coreState);\n    final String nodePath = \"/node_states/\" + getNodeName();\n\n    try {\n      zkClient.setData(nodePath, ZkStateReader.toJSON(coreStates.values()),\n          true);\n      \n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props);\n    coreStates.put(shardZkNodeName, coreState);\n    final String nodePath = \"/node_states/\" + getNodeName();\n\n    try {\n      zkClient.setData(nodePath, ZkStateReader.toJSON(coreStates.values()),\n          true);\n      \n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6101715a4732c1fe39eae50ce4a23fec6fc270d0","date":1328795951,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","sourceNew":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n    Integer numShards = cloudDesc.getNumShards();\n    if (numShards == null) {\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props, numShards);\n    coreStates.put(shardZkNodeName, coreState);\n    final String nodePath = \"/node_states/\" + getNodeName();\n\n    try {\n      zkClient.setData(nodePath, ZkStateReader.toJSON(coreStates.values()),\n          true);\n      \n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    }\n  }\n\n","sourceOld":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props);\n    coreStates.put(shardZkNodeName, coreState);\n    final String nodePath = \"/node_states/\" + getNodeName();\n\n    try {\n      zkClient.setData(nodePath, ZkStateReader.toJSON(coreStates.values()),\n          true);\n      \n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"393a891e62928e4f83120431cca1060f1c7343fa","date":1329863433,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","sourceNew":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n    Integer numShards = cloudDesc.getNumShards();\n    if (numShards == null) {\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props, numShards);\n    final String nodePath = \"/node_states/\" + getNodeName();\n    \n    synchronized (coreStates) {\n      coreStates.put(shardZkNodeName, coreState);\n      try {\n        zkClient.setData(nodePath, ZkStateReader.toJSON(coreStates.values()),\n            true);\n        \n      } catch (KeeperException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"could not publish node state\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"could not publish node state\", e);\n      }\n    }\n\n  }\n\n","sourceOld":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n    Integer numShards = cloudDesc.getNumShards();\n    if (numShards == null) {\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props, numShards);\n    coreStates.put(shardZkNodeName, coreState);\n    final String nodePath = \"/node_states/\" + getNodeName();\n\n    try {\n      zkClient.setData(nodePath, ZkStateReader.toJSON(coreStates.values()),\n          true);\n      \n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","sourceNew":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n    Integer numShards = cloudDesc.getNumShards();\n    if (numShards == null) {\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props, numShards);\n    \n    synchronized (coreStates) {\n      coreStates.put(shardZkNodeName, coreState);\n    }\n    \n    publishState();\n  }\n\n","sourceOld":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n    Integer numShards = cloudDesc.getNumShards();\n    if (numShards == null) {\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props, numShards);\n    final String nodePath = \"/node_states/\" + getNodeName();\n    \n    synchronized (coreStates) {\n      coreStates.put(shardZkNodeName, coreState);\n      try {\n        zkClient.setData(nodePath, ZkStateReader.toJSON(coreStates.values()),\n            true);\n        \n      } catch (KeeperException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"could not publish node state\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"could not publish node state\", e);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcc2d78a3da72b8259df3f88453b4d81638b416b","date":1330135232,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","sourceNew":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n    Integer numShards = cloudDesc.getNumShards();\n    if (numShards == null) {\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props, numShards);\n    \n    synchronized (coreStates) {\n      coreStates.put(coreName, coreState);\n    }\n    \n    publishState();\n  }\n\n","sourceOld":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n    Integer numShards = cloudDesc.getNumShards();\n    if (numShards == null) {\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props, numShards);\n    \n    synchronized (coreStates) {\n      coreStates.put(shardZkNodeName, coreState);\n    }\n    \n    publishState();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","sourceNew":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n    Integer numShards = cloudDesc.getNumShards();\n    if (numShards == null) {\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props, numShards);\n    \n    synchronized (coreStates) {\n      coreStates.put(coreName, coreState);\n    }\n    \n    publishState();\n  }\n\n","sourceOld":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n    Integer numShards = cloudDesc.getNumShards();\n    if (numShards == null) {\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props, numShards);\n    coreStates.put(shardZkNodeName, coreState);\n    final String nodePath = \"/node_states/\" + getNodeName();\n\n    try {\n      zkClient.setData(nodePath, ZkStateReader.toJSON(coreStates.values()),\n          true);\n      \n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"could not publish node state\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":4,"author":"Sami Siren","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doPublish(String,String,Map[String,String],CloudDescriptor).mjava","sourceNew":null,"sourceOld":"  private void doPublish(String shardZkNodeName, String coreName,\n      Map<String,String> props, CloudDescriptor cloudDesc) {\n    Integer numShards = cloudDesc.getNumShards();\n    if (numShards == null) {\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    CoreState coreState = new CoreState(coreName,\n        cloudDesc.getCollectionName(), props, numShards);\n    \n    synchronized (coreStates) {\n      coreStates.put(coreName, coreState);\n    }\n    \n    publishState();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcc2d78a3da72b8259df3f88453b4d81638b416b":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["6101715a4732c1fe39eae50ce4a23fec6fc270d0","bcc2d78a3da72b8259df3f88453b4d81638b416b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["bcc2d78a3da72b8259df3f88453b4d81638b416b"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"393a891e62928e4f83120431cca1060f1c7343fa":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5093a9e893633cc091cf2f729d7863671c2b715"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["393a891e62928e4f83120431cca1060f1c7343fa"]},"commit2Childs":{"bcc2d78a3da72b8259df3f88453b4d81638b416b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a5093a9e893633cc091cf2f729d7863671c2b715":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","393a891e62928e4f83120431cca1060f1c7343fa"],"393a891e62928e4f83120431cca1060f1c7343fa":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["bcc2d78a3da72b8259df3f88453b4d81638b416b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}