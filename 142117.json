{"path":"lucene/contrib/analyzers/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","pathOld":"contrib/analyzers/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","sourceNew":"    /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n    protected int replace_s(int c_bra, int c_ket, CharSequence s)\n    {\n\tfinal int adjustment = s.length() - (c_ket - c_bra);\n\tfinal int newLength = limit + adjustment;\n\t//resize if necessary\n\tif (newLength > current.length) {\n\t  char newBuffer[] = new char[ArrayUtil.oversize(newLength, RamUsageEstimator.NUM_BYTES_CHAR)];\n\t  System.arraycopy(current, 0, newBuffer, 0, limit);\n\t  current = newBuffer;\n\t}\n\t// if the substring being replaced is longer or shorter than the\n\t// replacement, need to shift things around\n\tif (adjustment != 0 && c_ket < limit) {\n\t  System.arraycopy(current, c_ket, current, c_bra + s.length(), \n\t      limit - c_ket);\n\t}\n\t// insert the replacement text\n\t// Note, faster is s.getChars(0, s.length(), current, c_bra);\n\t// but would have to duplicate this method for both String and StringBuilder\n\tfor (int i = 0; i < s.length(); i++)\n\t  current[c_bra + i] = s.charAt(i);\n\t\n\tlimit += adjustment;\n\tif (cursor >= c_ket) cursor += adjustment;\n\telse if (cursor > c_bra) cursor = c_bra;\n\treturn adjustment;\n    }\n\n","sourceOld":"    /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n    protected int replace_s(int c_bra, int c_ket, CharSequence s)\n    {\n\tfinal int adjustment = s.length() - (c_ket - c_bra);\n\tfinal int newLength = limit + adjustment;\n\t//resize if necessary\n\tif (newLength > current.length) {\n\t  char newBuffer[] = new char[ArrayUtil.oversize(newLength, RamUsageEstimator.NUM_BYTES_CHAR)];\n\t  System.arraycopy(current, 0, newBuffer, 0, limit);\n\t  current = newBuffer;\n\t}\n\t// if the substring being replaced is longer or shorter than the\n\t// replacement, need to shift things around\n\tif (adjustment != 0 && c_ket < limit) {\n\t  System.arraycopy(current, c_ket, current, c_bra + s.length(), \n\t      limit - c_ket);\n\t}\n\t// insert the replacement text\n\t// Note, faster is s.getChars(0, s.length(), current, c_bra);\n\t// but would have to duplicate this method for both String and StringBuilder\n\tfor (int i = 0; i < s.length(); i++)\n\t  current[c_bra + i] = s.charAt(i);\n\t\n\tlimit += adjustment;\n\tif (cursor >= c_ket) cursor += adjustment;\n\telse if (cursor > c_bra) cursor = c_bra;\n\treturn adjustment;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","sourceNew":"    /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n    protected int replace_s(int c_bra, int c_ket, CharSequence s)\n    {\n\tfinal int adjustment = s.length() - (c_ket - c_bra);\n\tfinal int newLength = limit + adjustment;\n\t//resize if necessary\n\tif (newLength > current.length) {\n\t  char newBuffer[] = new char[ArrayUtil.oversize(newLength, RamUsageEstimator.NUM_BYTES_CHAR)];\n\t  System.arraycopy(current, 0, newBuffer, 0, limit);\n\t  current = newBuffer;\n\t}\n\t// if the substring being replaced is longer or shorter than the\n\t// replacement, need to shift things around\n\tif (adjustment != 0 && c_ket < limit) {\n\t  System.arraycopy(current, c_ket, current, c_bra + s.length(), \n\t      limit - c_ket);\n\t}\n\t// insert the replacement text\n\t// Note, faster is s.getChars(0, s.length(), current, c_bra);\n\t// but would have to duplicate this method for both String and StringBuilder\n\tfor (int i = 0; i < s.length(); i++)\n\t  current[c_bra + i] = s.charAt(i);\n\t\n\tlimit += adjustment;\n\tif (cursor >= c_ket) cursor += adjustment;\n\telse if (cursor > c_bra) cursor = c_bra;\n\treturn adjustment;\n    }\n\n","sourceOld":"    /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n    protected int replace_s(int c_bra, int c_ket, CharSequence s)\n    {\n\tfinal int adjustment = s.length() - (c_ket - c_bra);\n\tfinal int newLength = limit + adjustment;\n\t//resize if necessary\n\tif (newLength > current.length) {\n\t  char newBuffer[] = new char[ArrayUtil.oversize(newLength, RamUsageEstimator.NUM_BYTES_CHAR)];\n\t  System.arraycopy(current, 0, newBuffer, 0, limit);\n\t  current = newBuffer;\n\t}\n\t// if the substring being replaced is longer or shorter than the\n\t// replacement, need to shift things around\n\tif (adjustment != 0 && c_ket < limit) {\n\t  System.arraycopy(current, c_ket, current, c_bra + s.length(), \n\t      limit - c_ket);\n\t}\n\t// insert the replacement text\n\t// Note, faster is s.getChars(0, s.length(), current, c_bra);\n\t// but would have to duplicate this method for both String and StringBuilder\n\tfor (int i = 0; i < s.length(); i++)\n\t  current[c_bra + i] = s.charAt(i);\n\t\n\tlimit += adjustment;\n\tif (cursor >= c_ket) cursor += adjustment;\n\telse if (cursor > c_bra) cursor = c_bra;\n\treturn adjustment;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}