{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"759d2c8462a6935ee9b8e23c16cc0a096fb329b7","date":1363901479,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        ((PhraseQuery) query).setSlop(slop);\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":["3cdb67100dc016748799a77218aa409478372d79"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n        query.setBoost(pq.getBoost());\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        ((PhraseQuery) query).setSlop(slop);\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n        query.setBoost(pq.getBoost());\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true, false);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true, false);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true, false);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n\n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true, false);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true, false);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n\n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true, false);\n\n    // only set slop of the phrase query was a result of this parser\n    // and not a sub-parser.\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["e9e1499c5d26c936238506df90a3c02c76707722"],"759d2c8462a6935ee9b8e23c16cc0a096fb329b7":["3cdb67100dc016748799a77218aa409478372d79"],"c03778630c4604270d88c148afb8c7de35b51d3c":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"e55782fb51a6e9789542818eb2161a3247f39ace":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"727bb765ff2542275f6d31f67be18d7104bae148":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"e9e1499c5d26c936238506df90a3c02c76707722":["759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["2dfdf766e55e943d942055d7de53c7ad6bc45283","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e55782fb51a6e9789542818eb2161a3247f39ace"]},"commit2Childs":{"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"759d2c8462a6935ee9b8e23c16cc0a096fb329b7":["e9e1499c5d26c936238506df90a3c02c76707722"],"c03778630c4604270d88c148afb8c7de35b51d3c":[],"e55782fb51a6e9789542818eb2161a3247f39ace":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"e9e1499c5d26c936238506df90a3c02c76707722":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["727bb765ff2542275f6d31f67be18d7104bae148","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace","727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","c03778630c4604270d88c148afb8c7de35b51d3c","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}