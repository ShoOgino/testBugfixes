{"path":"lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight weight = query.createWeight(searcher, needsScores);\n    return new Weight(RandomApproximationQuery.this) {\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return weight.explain(context, doc);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return weight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        weight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final Scorer scorer = weight.scorer(context, acceptDocs);\n        if (scorer == null) {\n          return null;\n        }\n        final RandomTwoPhaseView twoPhaseView = new RandomTwoPhaseView(random, scorer);\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n            return twoPhaseView;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score();\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return scorer.freq();\n          }\n\n          @Override\n          public int nextPosition() throws IOException {\n            return scorer.nextPosition();\n          }\n\n          @Override\n          public int startOffset() throws IOException {\n            return scorer.startOffset();\n          }\n\n          @Override\n          public int endOffset() throws IOException {\n            return scorer.endOffset();\n          }\n\n          @Override\n          public BytesRef getPayload() throws IOException {\n            return scorer.getPayload();\n          }\n\n          @Override\n          public int docID() {\n            return scorer.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return scorer.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return scorer.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return scorer.cost();\n          }\n          \n        };\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"facd1a5feb997241362708c0fa9f0c04cb5a203b","date":1424187094,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight weight = query.createWeight(searcher, needsScores);\n    return new RandomApproximationWeight(weight, new Random(random.nextLong()));\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight weight = query.createWeight(searcher, needsScores);\n    return new Weight(RandomApproximationQuery.this) {\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return weight.explain(context, doc);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return weight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        weight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final Scorer scorer = weight.scorer(context, acceptDocs);\n        if (scorer == null) {\n          return null;\n        }\n        final RandomTwoPhaseView twoPhaseView = new RandomTwoPhaseView(random, scorer);\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n            return twoPhaseView;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score();\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return scorer.freq();\n          }\n\n          @Override\n          public int nextPosition() throws IOException {\n            return scorer.nextPosition();\n          }\n\n          @Override\n          public int startOffset() throws IOException {\n            return scorer.startOffset();\n          }\n\n          @Override\n          public int endOffset() throws IOException {\n            return scorer.endOffset();\n          }\n\n          @Override\n          public BytesRef getPayload() throws IOException {\n            return scorer.getPayload();\n          }\n\n          @Override\n          public int docID() {\n            return scorer.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return scorer.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return scorer.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return scorer.cost();\n          }\n          \n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight weight = query.createWeight(searcher, needsScores, boost);\n    return new RandomApproximationWeight(weight, new Random(random.nextLong()));\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight weight = query.createWeight(searcher, needsScores);\n    return new RandomApproximationWeight(weight, new Random(random.nextLong()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/RandomApproximationQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight weight = query.createWeight(searcher, needsScores);\n    return new RandomApproximationWeight(weight, new Random(random.nextLong()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"facd1a5feb997241362708c0fa9f0c04cb5a203b":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["facd1a5feb997241362708c0fa9f0c04cb5a203b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["facd1a5feb997241362708c0fa9f0c04cb5a203b","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["facd1a5feb997241362708c0fa9f0c04cb5a203b"],"facd1a5feb997241362708c0fa9f0c04cb5a203b":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}