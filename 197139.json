{"path":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      FixedBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(byteIndexValue + \"\", 0, br.length);\n          // make sure we advance at least until base\n        }\n      }\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      FixedBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(byteIndexValue + \"\", 0, br.length);\n          // make sure we advance at least until base\n        }\n      }\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      FixedBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(byteIndexValue + \"\", 0, br.length);\n          // make sure we advance at least until base\n        }\n      }\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      FixedBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(byteIndexValue + \"\", 0, br.length);\n          // make sure we advance at least until base\n        }\n      }\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}