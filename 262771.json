{"path":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermStates(IndexReaderContext,TermStates[],Term[]).mjava","commits":[{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermStates(IndexReaderContext,TermStates[],Term[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermContext(IndexReaderContext,TermContext[],Term[]).mjava","sourceNew":"  private static void collectTermStates(IndexReaderContext topReaderContext, TermStates[] contextArray,\n                                        Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermStates termStates = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termStates == null) {\n            termStates = new TermStates(topReaderContext);\n            contextArray[i] = termStates;\n          }\n          termStates.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void collectTermContext(IndexReaderContext topReaderContext, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermContext termContext = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            termContext = new TermContext(topReaderContext);\n            contextArray[i] = termContext;\n          }\n          termContext.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#collectTermStates(IndexReaderContext,TermStates[],Term[]).mjava","pathOld":"/dev/null","sourceNew":"  private static void collectTermStates(IndexReaderContext topReaderContext, TermStates[] contextArray,\n                                        Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : topReaderContext.leaves()) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        TermStates termStates = contextArray[i];\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termStates == null) {\n            termStates = new TermStates(topReaderContext);\n            contextArray[i] = termStates;\n          }\n          termStates.accumulateStatistics(termsEnum.docFreq(), termsEnum.totalTermFreq());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}