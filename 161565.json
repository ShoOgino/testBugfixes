{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testZeroOrMin().mjava","commits":[{"id":"bf317f41f8247db62a955791ebb8a5ab3e7c8d47","date":1366724337,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testZeroOrMin().mjava","pathOld":"/dev/null","sourceNew":"  public void testZeroOrMin() throws Exception {\n    // try to make GCD compression fail if the format did not anticipate that\n    // the GCD of 0 and MIN_VALUE is negative\n    int numIterations = atLeast(1);\n    for (int i = 0; i < numIterations; i++) {\n      final LongProducer longs = new LongProducer() {\n        @Override\n        long next() {\n          return random().nextBoolean() ? 0 : Long.MIN_VALUE;\n        }\n      };\n      doTestNumericsVsStoredFields(longs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testZeroOrMin().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testZeroOrMin().mjava","sourceNew":"  public void testZeroOrMin() throws Exception {\n    // try to make GCD compression fail if the format did not anticipate that\n    // the GCD of 0 and MIN_VALUE is negative\n    int numIterations = atLeast(1);\n    for (int i = 0; i < numIterations; i++) {\n      final LongSupplier longs = () -> {\n        return random().nextBoolean() ? 0 : Long.MIN_VALUE;\n      };\n      doTestNumericsVsStoredFields(1, longs);\n    }\n  }\n\n","sourceOld":"  public void testZeroOrMin() throws Exception {\n    // try to make GCD compression fail if the format did not anticipate that\n    // the GCD of 0 and MIN_VALUE is negative\n    int numIterations = atLeast(1);\n    for (int i = 0; i < numIterations; i++) {\n      final LongProducer longs = new LongProducer() {\n        @Override\n        long next() {\n          return random().nextBoolean() ? 0 : Long.MIN_VALUE;\n        }\n      };\n      doTestNumericsVsStoredFields(longs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testZeroOrMin().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testZeroOrMin().mjava","sourceNew":"  public void testZeroOrMin() throws Exception {\n    // try to make GCD compression fail if the format did not anticipate that\n    // the GCD of 0 and MIN_VALUE is negative\n    int numIterations = atLeast(1);\n    for (int i = 0; i < numIterations; i++) {\n      final LongSupplier longs = () -> {\n        return random().nextBoolean() ? 0 : Long.MIN_VALUE;\n      };\n      doTestNumericsVsStoredFields(1, longs);\n    }\n  }\n\n","sourceOld":"  public void testZeroOrMin() throws Exception {\n    // try to make GCD compression fail if the format did not anticipate that\n    // the GCD of 0 and MIN_VALUE is negative\n    int numIterations = atLeast(1);\n    for (int i = 0; i < numIterations; i++) {\n      final LongProducer longs = new LongProducer() {\n        @Override\n        long next() {\n          return random().nextBoolean() ? 0 : Long.MIN_VALUE;\n        }\n      };\n      doTestNumericsVsStoredFields(longs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testZeroOrMin().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testZeroOrMin().mjava","sourceNew":"  public void testZeroOrMin() throws Exception {\n    // try to make GCD compression fail if the format did not anticipate that\n    // the GCD of 0 and MIN_VALUE is negative\n    int numIterations = atLeast(1);\n    for (int i = 0; i < numIterations; i++) {\n      final LongSupplier longs = () -> {\n        return random().nextBoolean() ? 0 : Long.MIN_VALUE;\n      };\n      doTestNumericsVsStoredFields(1, longs);\n    }\n  }\n\n","sourceOld":"  public void testZeroOrMin() throws Exception {\n    // try to make GCD compression fail if the format did not anticipate that\n    // the GCD of 0 and MIN_VALUE is negative\n    int numIterations = atLeast(1);\n    for (int i = 0; i < numIterations; i++) {\n      final LongProducer longs = new LongProducer() {\n        @Override\n        long next() {\n          return random().nextBoolean() ? 0 : Long.MIN_VALUE;\n        }\n      };\n      doTestNumericsVsStoredFields(longs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"]},"commit2Childs":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["11134e449dabe11d6d0ff6a564d84b82cbe93722","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}