{"path":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","commits":[{"id":"3a10198efba39d45c46f8714efe9a15616f9c79d","date":1001608022,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct a {@link Lock}.\n   * @param name the name of the lock file\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n\tpublic boolean obtain() throws IOException {\n\t  return lockFile.createNewFile();\n\t}\n\tpublic void release() {\n\t  lockFile.delete();\n\t}\n\tpublic String toString() {\n\t  return \"Lock@\" + lockFile;\n\t}\n      };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e29e464adcbdf13eb1fa1096eff9283ad1dca5","date":1002730421,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /** Construct a {@link Lock}.\n   * @param name the name of the lock file\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n\tpublic boolean obtain() throws IOException {\n          if (Constants.JAVA_1_1) return true;    // locks disabled in jdk 1.1\n          return lockFile.createNewFile();\n\t}\n\tpublic void release() {\n          if (Constants.JAVA_1_1) return;         // locks disabled in jdk 1.1\n\t  lockFile.delete();\n\t}\n\tpublic String toString() {\n\t  return \"Lock@\" + lockFile;\n\t}\n      };\n  }\n\n","sourceOld":"  /** Construct a {@link Lock}.\n   * @param name the name of the lock file\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n\tpublic boolean obtain() throws IOException {\n\t  return lockFile.createNewFile();\n\t}\n\tpublic void release() {\n\t  lockFile.delete();\n\t}\n\tpublic String toString() {\n\t  return \"Lock@\" + lockFile;\n\t}\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb0e18fe095dc286e389089b0df827f7a4552b79","date":1024671466,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /**\n   * Constructs a {@link Lock} with the specified name.\n   * If JDK 1.1 is used the lock file is not really made.\n   * If system property <I>disableLocks</I> has the value of 'true'\n   * the lock will not be created.  Assigning this property any other value\n   * will <B>not</B> prevent creation of locks.\n   * <BR>\n   * This is useful for using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n\tpublic boolean obtain() throws IOException {\n          if (Constants.JAVA_1_1)\n\t      return true;    // locks disabled in jdk 1.1\n\t  if (DISABLE_LOCKS)\n\t      return true;\n          return lockFile.createNewFile();\n\t}\n\tpublic void release() {\n          if (Constants.JAVA_1_1)\n\t      return;         // locks disabled in jdk 1.1\n\t  lockFile.delete();\n\t}\n\tpublic String toString() {\n\t  return \"Lock@\" + lockFile;\n\t}\n      };\n  }\n\n","sourceOld":"  /** Construct a {@link Lock}.\n   * @param name the name of the lock file\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n\tpublic boolean obtain() throws IOException {\n          if (Constants.JAVA_1_1) return true;    // locks disabled in jdk 1.1\n          return lockFile.createNewFile();\n\t}\n\tpublic void release() {\n          if (Constants.JAVA_1_1) return;         // locks disabled in jdk 1.1\n\t  lockFile.delete();\n\t}\n\tpublic String toString() {\n\t  return \"Lock@\" + lockFile;\n\t}\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200","date":1025021355,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /**\n   * Constructs a {@link Lock} with the specified name.\n   * If JDK 1.1 is used the lock file is not really made.\n   * If system property <I>disableLocks</I> has the value of 'true'\n   * the lock will not be created.  Assigning this property any other value\n   * will <B>not</B> prevent creation of locks.\n   * <BR>\n   * This is useful for using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n\tpublic boolean obtain() throws IOException {\n\t  if (DISABLE_LOCKS)\n\t      return true;\n          return lockFile.createNewFile();\n\t}\n\tpublic void release() {\n\t  if (DISABLE_LOCKS)\n\t      return;\n\t  lockFile.delete();\n\t}\n\tpublic String toString() {\n\t  return \"Lock@\" + lockFile;\n\t}\n      };\n  }\n\n","sourceOld":"  /**\n   * Constructs a {@link Lock} with the specified name.\n   * If JDK 1.1 is used the lock file is not really made.\n   * If system property <I>disableLocks</I> has the value of 'true'\n   * the lock will not be created.  Assigning this property any other value\n   * will <B>not</B> prevent creation of locks.\n   * <BR>\n   * This is useful for using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n\tpublic boolean obtain() throws IOException {\n          if (Constants.JAVA_1_1)\n\t      return true;    // locks disabled in jdk 1.1\n\t  if (DISABLE_LOCKS)\n\t      return true;\n          return lockFile.createNewFile();\n\t}\n\tpublic void release() {\n          if (Constants.JAVA_1_1)\n\t      return;         // locks disabled in jdk 1.1\n\t  lockFile.delete();\n\t}\n\tpublic String toString() {\n\t  return \"Lock@\" + lockFile;\n\t}\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39838f894cb1fafc6cf891eb5747c6da86785fe3","date":1025112611,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /**\n   * Constructs a {@link Lock} with the specified name.\n   * If JDK 1.1 is used the lock file is not really made.\n   * If system property <I>disableLuceneLocks</I> has the value of 'true'\n   * the lock will not be created.  Assigning this property any other value\n   * will <B>not</B> prevent creation of locks.\n   * <BR>\n   * This is useful for using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n\tpublic boolean obtain() throws IOException {\n\t  if (DISABLE_LOCKS)\n\t      return true;\n          return lockFile.createNewFile();\n\t}\n\tpublic void release() {\n\t  if (DISABLE_LOCKS)\n\t      return;\n\t  lockFile.delete();\n\t}\n\tpublic String toString() {\n\t  return \"Lock@\" + lockFile;\n\t}\n      };\n  }\n\n","sourceOld":"  /**\n   * Constructs a {@link Lock} with the specified name.\n   * If JDK 1.1 is used the lock file is not really made.\n   * If system property <I>disableLocks</I> has the value of 'true'\n   * the lock will not be created.  Assigning this property any other value\n   * will <B>not</B> prevent creation of locks.\n   * <BR>\n   * This is useful for using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n\tpublic boolean obtain() throws IOException {\n\t  if (DISABLE_LOCKS)\n\t      return true;\n          return lockFile.createNewFile();\n\t}\n\tpublic void release() {\n\t  if (DISABLE_LOCKS)\n\t      return;\n\t  lockFile.delete();\n\t}\n\tpublic String toString() {\n\t  return \"Lock@\" + lockFile;\n\t}\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"823c992e3b766654f2a25f9b125dc5e849b4775e","date":1028137634,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n\tpublic boolean obtain() throws IOException {\n\t  if (DISABLE_LOCKS)\n\t      return true;\n          return lockFile.createNewFile();\n\t}\n\tpublic void release() {\n\t  if (DISABLE_LOCKS)\n\t      return;\n\t  lockFile.delete();\n\t}\n\tpublic String toString() {\n\t  return \"Lock@\" + lockFile;\n\t}\n      };\n  }\n\n","sourceOld":"  /**\n   * Constructs a {@link Lock} with the specified name.\n   * If JDK 1.1 is used the lock file is not really made.\n   * If system property <I>disableLuceneLocks</I> has the value of 'true'\n   * the lock will not be created.  Assigning this property any other value\n   * will <B>not</B> prevent creation of locks.\n   * <BR>\n   * This is useful for using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n\tpublic boolean obtain() throws IOException {\n\t  if (DISABLE_LOCKS)\n\t      return true;\n          return lockFile.createNewFile();\n\t}\n\tpublic void release() {\n\t  if (DISABLE_LOCKS)\n\t      return;\n\t  lockFile.delete();\n\t}\n\tpublic String toString() {\n\t  return \"Lock@\" + lockFile;\n\t}\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5256e856e1442a6e1250d26f1236a33380632dc2","date":1046725105,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n            return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","sourceOld":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n\tpublic boolean obtain() throws IOException {\n\t  if (DISABLE_LOCKS)\n\t      return true;\n          return lockFile.createNewFile();\n\t}\n\tpublic void release() {\n\t  if (DISABLE_LOCKS)\n\t      return;\n\t  lockFile.delete();\n\t}\n\tpublic String toString() {\n\t  return \"Lock@\" + lockFile;\n\t}\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12ee37ea5a0061cfa8d91d87109b11dcf89142c4","date":1051818618,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    // the fully-qualified file name which uniquely identifies this lock \n    String fullName;\n    try {\n      fullName = new File(directory, name).getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString());\n    }\n\n    // hash full name to create the tmp file name\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(fullName.getBytes());\n    }\n    StringBuffer buf = new StringBuffer();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n    buf.append(\".lock\");\n\n    // make the lock file in tmp, where anyone can create files.\n    final File lockFile = new File(System.getProperty(\"java.io.tmpdir\"),\n                                   buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","sourceOld":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    final File lockFile = new File(directory, name);\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n            return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16df95df890d76f133a069351e752080aada6c46","date":1054239498,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // make the lock file in tmp, where anyone can create files.\n    final File lockFile = new File(System.getProperty(\"java.io.tmpdir\"),\n                                   buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","sourceOld":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    // the fully-qualified file name which uniquely identifies this lock \n    String fullName;\n    try {\n      fullName = new File(directory, name).getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString());\n    }\n\n    // hash full name to create the tmp file name\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(fullName.getBytes());\n    }\n    StringBuffer buf = new StringBuffer();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n    buf.append(\".lock\");\n\n    // make the lock file in tmp, where anyone can create files.\n    final File lockFile = new File(System.getProperty(\"java.io.tmpdir\"),\n                                   buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09627d3c8ba7784d4c31705fe1e8ea4d7b697ad4","date":1079639085,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","sourceOld":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // make the lock file in tmp, where anyone can create files.\n    final File lockFile = new File(System.getProperty(\"java.io.tmpdir\"),\n                                   buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1425bf3470c9f39dfa4622997c93e061da354a0","date":1084106507,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock(lockFile) {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","sourceOld":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85540c3d0b253bd20f0bbe6792106fef9a9b1548","date":1084232816,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock(lockFile.getAbsolutePath()) {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","sourceOld":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock(lockFile) {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2993c486daad7c2eadd1973c500ea7b570928398","date":1084297408,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","sourceOld":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock(lockFile.getAbsolutePath()) {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98428c062f6310c5aae8ba98844c6dbd98871ef2","date":1084981593,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n\n        if (!lockDir.exists()) {\n          if (!lockDir.mkdirs()) {\n            throw new IOException(\"Cannot create lock directory: \" + lockDir);\n          }\n        }\n\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","sourceOld":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4b73bc272a820ddda9d6f3e9017fdc565b5891c","date":1094580376,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n\n        if (!lockDir.exists()) {\n          if (!lockDir.mkdirs()) {\n            throw new IOException(\"Cannot create lock directory: \" + lockDir);\n          }\n        }\n\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","sourceOld":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public final Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n\n        if (!lockDir.exists()) {\n          if (!lockDir.mkdirs()) {\n            throw new IOException(\"Cannot create lock directory: \" + lockDir);\n          }\n        }\n\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad7ff31520157b51c170c15b282e01b97236b23c","date":1123618370,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile()}.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (disableLocks)\n          return true;\n\n        if (!lockDir.exists()) {\n          if (!lockDir.mkdirs()) {\n            throw new IOException(\"Cannot create lock directory: \" + lockDir);\n          }\n        }\n\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (disableLocks)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (disableLocks)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","sourceOld":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile() }.\n   *\n   * <p>In JDK 1.1 or if system property <I>disableLuceneLocks</I> is the\n   * string \"true\", locks are disabled.  Assigning this property any other\n   * string will <B>not</B> prevent creation of lock files.  This is useful for\n   * using Lucene on read-only medium, such as CD-ROM.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (DISABLE_LOCKS)\n          return true;\n\n        if (!lockDir.exists()) {\n          if (!lockDir.mkdirs()) {\n            throw new IOException(\"Cannot create lock directory: \" + lockDir);\n          }\n        }\n\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (DISABLE_LOCKS)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (DISABLE_LOCKS)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/store/FSDirectory#makeLock(String).mjava","sourceNew":null,"sourceOld":"  /** Constructs a {@link Lock} with the specified name.  Locks are implemented\n   * with {@link File#createNewFile()}.\n   *\n   * @param name the name of the lock file\n   * @return an instance of <code>Lock</code> holding the lock\n   */\n  public Lock makeLock(String name) {\n    StringBuffer buf = getLockPrefix();\n    buf.append(\"-\");\n    buf.append(name);\n\n    // create a lock file\n    final File lockFile = new File(lockDir, buf.toString());\n\n    return new Lock() {\n      public boolean obtain() throws IOException {\n        if (disableLocks)\n          return true;\n\n        if (!lockDir.exists()) {\n          if (!lockDir.mkdirs()) {\n            throw new IOException(\"Cannot create lock directory: \" + lockDir);\n          }\n        }\n\n        return lockFile.createNewFile();\n      }\n      public void release() {\n        if (disableLocks)\n          return;\n        lockFile.delete();\n      }\n      public boolean isLocked() {\n        if (disableLocks)\n          return false;\n        return lockFile.exists();\n      }\n\n      public String toString() {\n        return \"Lock@\" + lockFile;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98428c062f6310c5aae8ba98844c6dbd98871ef2":["2993c486daad7c2eadd1973c500ea7b570928398"],"16df95df890d76f133a069351e752080aada6c46":["12ee37ea5a0061cfa8d91d87109b11dcf89142c4"],"d4b73bc272a820ddda9d6f3e9017fdc565b5891c":["98428c062f6310c5aae8ba98844c6dbd98871ef2"],"823c992e3b766654f2a25f9b125dc5e849b4775e":["39838f894cb1fafc6cf891eb5747c6da86785fe3"],"3a10198efba39d45c46f8714efe9a15616f9c79d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09627d3c8ba7784d4c31705fe1e8ea4d7b697ad4":["16df95df890d76f133a069351e752080aada6c46"],"cb0e18fe095dc286e389089b0df827f7a4552b79":["19e29e464adcbdf13eb1fa1096eff9283ad1dca5"],"39838f894cb1fafc6cf891eb5747c6da86785fe3":["933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200"],"5256e856e1442a6e1250d26f1236a33380632dc2":["823c992e3b766654f2a25f9b125dc5e849b4775e"],"e1425bf3470c9f39dfa4622997c93e061da354a0":["09627d3c8ba7784d4c31705fe1e8ea4d7b697ad4"],"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["ad7ff31520157b51c170c15b282e01b97236b23c"],"ad7ff31520157b51c170c15b282e01b97236b23c":["d4b73bc272a820ddda9d6f3e9017fdc565b5891c"],"85540c3d0b253bd20f0bbe6792106fef9a9b1548":["e1425bf3470c9f39dfa4622997c93e061da354a0"],"2993c486daad7c2eadd1973c500ea7b570928398":["85540c3d0b253bd20f0bbe6792106fef9a9b1548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12ee37ea5a0061cfa8d91d87109b11dcf89142c4":["5256e856e1442a6e1250d26f1236a33380632dc2"],"933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200":["cb0e18fe095dc286e389089b0df827f7a4552b79"],"19e29e464adcbdf13eb1fa1096eff9283ad1dca5":["3a10198efba39d45c46f8714efe9a15616f9c79d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"]},"commit2Childs":{"98428c062f6310c5aae8ba98844c6dbd98871ef2":["d4b73bc272a820ddda9d6f3e9017fdc565b5891c"],"16df95df890d76f133a069351e752080aada6c46":["09627d3c8ba7784d4c31705fe1e8ea4d7b697ad4"],"d4b73bc272a820ddda9d6f3e9017fdc565b5891c":["ad7ff31520157b51c170c15b282e01b97236b23c"],"823c992e3b766654f2a25f9b125dc5e849b4775e":["5256e856e1442a6e1250d26f1236a33380632dc2"],"3a10198efba39d45c46f8714efe9a15616f9c79d":["19e29e464adcbdf13eb1fa1096eff9283ad1dca5"],"09627d3c8ba7784d4c31705fe1e8ea4d7b697ad4":["e1425bf3470c9f39dfa4622997c93e061da354a0"],"cb0e18fe095dc286e389089b0df827f7a4552b79":["933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200"],"39838f894cb1fafc6cf891eb5747c6da86785fe3":["823c992e3b766654f2a25f9b125dc5e849b4775e"],"5256e856e1442a6e1250d26f1236a33380632dc2":["12ee37ea5a0061cfa8d91d87109b11dcf89142c4"],"e1425bf3470c9f39dfa4622997c93e061da354a0":["85540c3d0b253bd20f0bbe6792106fef9a9b1548"],"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad7ff31520157b51c170c15b282e01b97236b23c":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"85540c3d0b253bd20f0bbe6792106fef9a9b1548":["2993c486daad7c2eadd1973c500ea7b570928398"],"2993c486daad7c2eadd1973c500ea7b570928398":["98428c062f6310c5aae8ba98844c6dbd98871ef2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a10198efba39d45c46f8714efe9a15616f9c79d"],"12ee37ea5a0061cfa8d91d87109b11dcf89142c4":["16df95df890d76f133a069351e752080aada6c46"],"19e29e464adcbdf13eb1fa1096eff9283ad1dca5":["cb0e18fe095dc286e389089b0df827f7a4552b79"],"933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200":["39838f894cb1fafc6cf891eb5747c6da86785fe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}