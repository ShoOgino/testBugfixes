{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestConcurrentFacetedIndexing#newTaxoWriterCache(int).mjava","commits":[{"id":"209b03e6aa9098ac043cc757e46f758400427b15","date":1355045906,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestConcurrentFacetedIndexing#newTaxoWriterCache(int).mjava","pathOld":"/dev/null","sourceNew":"  static TaxonomyWriterCache newTaxoWriterCache(int ndocs) {\n    final double d = random().nextDouble();\n    if (d < 0.7) {\n      // this is the fastest, yet most memory consuming\n      return new Cl2oTaxonomyWriterCache(1024, 0.15f, 3);\n    } else if (TEST_NIGHTLY && d > 0.98) {\n      // this is the slowest, but tests the writer concurrency when no caching is done.\n      // only pick it during NIGHTLY tests, and even then, with very low chances.\n      return NO_OP_CACHE;\n    } else {\n      // this is slower than CL2O, but less memory consuming, and exercises finding categories on disk too.\n      return new LruTaxonomyWriterCache(ndocs / 10);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestConcurrentFacetedIndexing#newTaxoWriterCache(int).mjava","pathOld":"/dev/null","sourceNew":"  static TaxonomyWriterCache newTaxoWriterCache(int ndocs) {\n    final double d = random().nextDouble();\n    if (d < 0.7) {\n      // this is the fastest, yet most memory consuming\n      return new Cl2oTaxonomyWriterCache(1024, 0.15f, 3);\n    } else if (TEST_NIGHTLY && d > 0.98) {\n      // this is the slowest, but tests the writer concurrency when no caching is done.\n      // only pick it during NIGHTLY tests, and even then, with very low chances.\n      return NO_OP_CACHE;\n    } else {\n      // this is slower than CL2O, but less memory consuming, and exercises finding categories on disk too.\n      return new LruTaxonomyWriterCache(ndocs / 10);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ae0982c0457fa3cfe0cda93a327c573fbe6f874","date":1507039114,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestConcurrentFacetedIndexing#newTaxoWriterCache(int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestConcurrentFacetedIndexing#newTaxoWriterCache(int).mjava","sourceNew":"  static TaxonomyWriterCache newTaxoWriterCache(int ndocs) {\n    final double d = random().nextDouble();\n    if (d < 0.7) {\n      // this is the fastest, yet most memory consuming\n      return new UTF8TaxonomyWriterCache();\n    } else if (TEST_NIGHTLY && d > 0.98) {\n      // this is the slowest, but tests the writer concurrency when no caching is done.\n      // only pick it during NIGHTLY tests, and even then, with very low chances.\n      return NO_OP_CACHE;\n    } else {\n      // this is slower than UTF8, but less memory consuming, and exercises finding categories on disk too.\n      return new LruTaxonomyWriterCache(ndocs / 10);\n    }\n  }\n\n","sourceOld":"  static TaxonomyWriterCache newTaxoWriterCache(int ndocs) {\n    final double d = random().nextDouble();\n    if (d < 0.7) {\n      // this is the fastest, yet most memory consuming\n      return new Cl2oTaxonomyWriterCache(1024, 0.15f, 3);\n    } else if (TEST_NIGHTLY && d > 0.98) {\n      // this is the slowest, but tests the writer concurrency when no caching is done.\n      // only pick it during NIGHTLY tests, and even then, with very low chances.\n      return NO_OP_CACHE;\n    } else {\n      // this is slower than CL2O, but less memory consuming, and exercises finding categories on disk too.\n      return new LruTaxonomyWriterCache(ndocs / 10);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ae0982c0457fa3cfe0cda93a327c573fbe6f874":["209b03e6aa9098ac043cc757e46f758400427b15"],"209b03e6aa9098ac043cc757e46f758400427b15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","209b03e6aa9098ac043cc757e46f758400427b15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ae0982c0457fa3cfe0cda93a327c573fbe6f874"]},"commit2Childs":{"2ae0982c0457fa3cfe0cda93a327c573fbe6f874":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"209b03e6aa9098ac043cc757e46f758400427b15":["2ae0982c0457fa3cfe0cda93a327c573fbe6f874","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["209b03e6aa9098ac043cc757e46f758400427b15","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}