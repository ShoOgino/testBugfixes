{"path":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","commits":[{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(context, scorerContext);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(similarity, disi, this);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(context, scoreDocsInOrder, topScorer);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(similarity, disi, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(context, scorerContext);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(similarity, disi, this);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(context, scorerContext);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(disi, this);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(context, scorerContext);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(similarity, disi, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(context, scorerContext);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(disi, this);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(context, scorerContext);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(similarity, disi, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(context, scorerContext);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(disi, this);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scorerContext);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(context, scorerContext);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(disi, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scorerContext);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(context, scorerContext);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(disi, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scorerContext);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null)\n          return null;\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi =\n          innerWeight.scorer(context, scorerContext);\n      }\n      if (disi == null)\n        return null;\n      return new ConstantScorer(disi, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scorerContext);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this, queryWeight);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scorerContext);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scorerContext);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this, queryWeight);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scorerContext);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scorerContext);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this, queryWeight);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scorerContext);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this, queryWeight);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scorerContext);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this, queryWeight);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["e5e679b9c5f68f1f331de920ae8366af75b44060","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","e5e679b9c5f68f1f331de920ae8366af75b44060"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["e5e679b9c5f68f1f331de920ae8366af75b44060","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["817d8435e9135b756f08ce6710ab0baac51bdf88","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5e679b9c5f68f1f331de920ae8366af75b44060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5e679b9c5f68f1f331de920ae8366af75b44060":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"]},"commit2Childs":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["0f3cee3d20b0c786e6fca20539454262e29edcab","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["e5e679b9c5f68f1f331de920ae8366af75b44060","868da859b43505d9d2a023bfeae6dd0c795f5295"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","e79a6d080bdd5b2a8f56342cf571b5476de04180","817d8435e9135b756f08ce6710ab0baac51bdf88","29ef99d61cda9641b6250bf9567329a6e65f901d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}