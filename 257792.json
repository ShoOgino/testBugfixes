{"path":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testRowsStartForSubqueryAndScores().mjava","commits":[{"id":"561c2351baf6dd64061addef891359954c1a7faa","date":1462788487,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testRowsStartForSubqueryAndScores().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRowsStartForSubqueryAndScores() throws Exception {\n    \n    String johnDeptsIds = h.query(req(new String[]{\"q\",\"{!join from=dept_ss_dv to=dept_id_s}name_s:john\", \n        \"wt\",\"csv\",\n        \"csv.header\",\"false\",\n        \"fl\",\"id\",\n        \"rows\",\"\"+deptMultiplier,\n        \"sort\", \"id_i desc\"\n      }));\n    \n    ArrayList<Object> deptIds = Collections.list(\n        new StringTokenizer( johnDeptsIds));\n    \n    final int a = random().nextInt(deptMultiplier+1);\n    final int b = random().nextInt(deptMultiplier+1);\n    final int start = Math.min(a, b) ;\n    final int toIndex = Math.max(a, b) ;\n    List<Object> expectIds = deptIds.subList(start , toIndex);\n    ArrayList<String> assertions = new ArrayList<>();\n    // count((//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc/str[@name='id'])\n   // random().nextInt(peopleMultiplier);\n    assertions.add(\"count((//result/doc/str[@name='name_s_dv'][.='john']/..\"\n        + \"/result[@name='depts'][@numFound='\"+deptMultiplier+\"'][@start='\"+start+\"'])[\"+\n        (random().nextInt(peopleMultiplier)+1)\n        +\"]/doc/str[@name='id'])=\" +(toIndex-start));\n    \n   // System.out.println(expectIds);\n    \n    for (int i=0; i< expectIds.size(); i++) {\n      // (//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc[1]/str[@name='id']='15'\n      String ithDoc = \"(//result/doc/str[@name='name_s_dv'][.='john']/..\"\n                + \"/result[@name='depts'][@numFound='\"+deptMultiplier+\"'][@start='\"+start+\"'])[\"+ \n                (random().nextInt(peopleMultiplier)+1) +\n                \"]/doc[\" +(i+1)+ \"]\";\n      assertions.add(ithDoc+\"/str[@name='id'][.='\"+expectIds.get(i)+\"']\");\n      // let's test scores right there\n      assertions.add(ithDoc+\"/float[@name='score'][.='\"+expectIds.get(i)+\".0']\");\n      \n    }\n    \n    String[] john = new String[]{\"q\",\"name_s:john\", \"indent\",\"true\",\n        \"fl\",\"name_s_dv,depts:[subquery]\",\n        \"rows\",\"\" + (2 * peopleMultiplier),\n        \"depts.q\",\"+{!term f=dept_id_s v=$row.dept_ss_dv}^=0 _val_:id_i\", \n        \"depts.fl\",\"id\",\n        \"depts.fl\",\"score\",\n        \"depts.indent\",\"true\",\n        \"depts.rows\",\"\"+(toIndex-start),\n        \"depts.start\",\"\"+start};\n        \n    assertQ(req(john), assertions.toArray(new String[]{}));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testRowsStartForSubqueryAndScores().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRowsStartForSubqueryAndScores() throws Exception {\n    \n    String johnDeptsIds = h.query(req(new String[]{\"q\",\"{!join from=dept_ss_dv to=dept_id_s}name_s:john\", \n        \"wt\",\"csv\",\n        \"csv.header\",\"false\",\n        \"fl\",\"id\",\n        \"rows\",\"\"+deptMultiplier,\n        \"sort\", \"id_i desc\"\n      }));\n    \n    ArrayList<Object> deptIds = Collections.list(\n        new StringTokenizer( johnDeptsIds));\n    \n    final int a = random().nextInt(deptMultiplier+1);\n    final int b = random().nextInt(deptMultiplier+1);\n    final int start = Math.min(a, b) ;\n    final int toIndex = Math.max(a, b) ;\n    List<Object> expectIds = deptIds.subList(start , toIndex);\n    ArrayList<String> assertions = new ArrayList<>();\n    // count((//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc/str[@name='id'])\n   // random().nextInt(peopleMultiplier);\n    assertions.add(\"count((//result/doc/str[@name='name_s_dv'][.='john']/..\"\n        + \"/result[@name='depts'][@numFound='\"+deptMultiplier+\"'][@start='\"+start+\"'])[\"+\n        (random().nextInt(peopleMultiplier)+1)\n        +\"]/doc/str[@name='id'])=\" +(toIndex-start));\n    \n   // System.out.println(expectIds);\n    \n    for (int i=0; i< expectIds.size(); i++) {\n      // (//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc[1]/str[@name='id']='15'\n      String ithDoc = \"(//result/doc/str[@name='name_s_dv'][.='john']/..\"\n                + \"/result[@name='depts'][@numFound='\"+deptMultiplier+\"'][@start='\"+start+\"'])[\"+ \n                (random().nextInt(peopleMultiplier)+1) +\n                \"]/doc[\" +(i+1)+ \"]\";\n      assertions.add(ithDoc+\"/str[@name='id'][.='\"+expectIds.get(i)+\"']\");\n      // let's test scores right there\n      assertions.add(ithDoc+\"/float[@name='score'][.='\"+expectIds.get(i)+\".0']\");\n      \n    }\n    \n    String[] john = new String[]{\"q\",\"name_s:john\", \"indent\",\"true\",\n        \"fl\",\"name_s_dv,depts:[subquery]\",\n        \"rows\",\"\" + (2 * peopleMultiplier),\n        \"depts.q\",\"+{!term f=dept_id_s v=$row.dept_ss_dv}^=0 _val_:id_i\", \n        \"depts.fl\",\"id\",\n        \"depts.fl\",\"score\",\n        \"depts.indent\",\"true\",\n        \"depts.rows\",\"\"+(toIndex-start),\n        \"depts.start\",\"\"+start};\n        \n    assertQ(req(john), assertions.toArray(new String[]{}));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testRowsStartForSubqueryAndScores().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRowsStartForSubqueryAndScores() throws Exception {\n    \n    String johnDeptsIds = h.query(req(new String[]{\"q\",\"{!join from=dept_ss_dv to=dept_id_s}name_s:john\", \n        \"wt\",\"csv\",\n        \"csv.header\",\"false\",\n        \"fl\",\"id\",\n        \"rows\",\"\"+deptMultiplier,\n        \"sort\", \"id_i desc\"\n      }));\n    \n    ArrayList<Object> deptIds = Collections.list(\n        new StringTokenizer( johnDeptsIds));\n    \n    final int a = random().nextInt(deptMultiplier+1);\n    final int b = random().nextInt(deptMultiplier+1);\n    final int start = Math.min(a, b) ;\n    final int toIndex = Math.max(a, b) ;\n    List<Object> expectIds = deptIds.subList(start , toIndex);\n    ArrayList<String> assertions = new ArrayList<>();\n    // count((//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc/str[@name='id'])\n   // random().nextInt(peopleMultiplier);\n    assertions.add(\"count((//result/doc/str[@name='name_s_dv'][.='john']/..\"\n        + \"/result[@name='depts'][@numFound='\"+deptMultiplier+\"'][@start='\"+start+\"'])[\"+\n        (random().nextInt(peopleMultiplier)+1)\n        +\"]/doc/str[@name='id'])=\" +(toIndex-start));\n    \n   // System.out.println(expectIds);\n    \n    for (int i=0; i< expectIds.size(); i++) {\n      // (//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc[1]/str[@name='id']='15'\n      String ithDoc = \"(//result/doc/str[@name='name_s_dv'][.='john']/..\"\n                + \"/result[@name='depts'][@numFound='\"+deptMultiplier+\"'][@start='\"+start+\"'])[\"+ \n                (random().nextInt(peopleMultiplier)+1) +\n                \"]/doc[\" +(i+1)+ \"]\";\n      assertions.add(ithDoc+\"/str[@name='id'][.='\"+expectIds.get(i)+\"']\");\n      // let's test scores right there\n      assertions.add(ithDoc+\"/float[@name='score'][.='\"+expectIds.get(i)+\".0']\");\n      \n    }\n    \n    String[] john = new String[]{\"q\",\"name_s:john\", \"indent\",\"true\",\n        \"fl\",\"name_s_dv,depts:[subquery]\",\n        \"rows\",\"\" + (2 * peopleMultiplier),\n        \"depts.q\",\"+{!term f=dept_id_s v=$row.dept_ss_dv}^=0 _val_:id_i\", \n        \"depts.fl\",\"id\",\n        \"depts.fl\",\"score\",\n        \"depts.indent\",\"true\",\n        \"depts.rows\",\"\"+(toIndex-start),\n        \"depts.start\",\"\"+start};\n        \n    assertQ(req(john), assertions.toArray(new String[]{}));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac","date":1467877935,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testRowsStartForSubqueryAndScores().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testRowsStartForSubqueryAndScores().mjava","sourceNew":"  @Test\n  public void testRowsStartForSubqueryAndScores() throws Exception {\n    \n    String johnDeptsIds = h.query(req(new String[]{\"q\",\"{!join from=dept_ss_dv to=dept_id_s}name_s:john\", \n        \"wt\",\"csv\",\n        \"csv.header\",\"false\",\n        \"fl\",\"id\",\n        \"rows\",\"\"+deptMultiplier,\n        \"sort\", \"id_i desc\"\n      }));\n    \n    ArrayList<Object> deptIds = Collections.list(\n        new StringTokenizer( johnDeptsIds));\n    \n    final int a = random().nextInt(deptMultiplier+1);\n    final int b = random().nextInt(deptMultiplier+1);\n    final int start = Math.min(a, b) ;\n    final int toIndex = Math.max(a, b) ;\n    List<Object> expectIds = deptIds.subList(start , toIndex);\n    ArrayList<String> assertions = new ArrayList<>();\n    // count((//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc/str[@name='id'])\n   // random().nextInt(peopleMultiplier);\n    assertions.add(\"count((//result/doc/str[@name='name_s_dv'][.='john']/..\"\n        + \"/result[@name='depts'][@numFound='\"+deptMultiplier+\"'][@start='\"+start+\"'])[\"+\n        (random().nextInt(peopleMultiplier)+1)\n        +\"]/doc/str[@name='id'])=\" +(toIndex-start));\n    \n   // System.out.println(expectIds);\n    \n    for (int i=0; i< expectIds.size(); i++) {\n      // (//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc[1]/str[@name='id']='15'\n      String ithDoc = \"(//result/doc/str[@name='name_s_dv'][.='john']/..\"\n                + \"/result[@name='depts'][@numFound='\"+deptMultiplier+\"'][@start='\"+start+\"'])[\"+ \n                (random().nextInt(peopleMultiplier)+1) +\n                \"]/doc[\" +(i+1)+ \"]\";\n      assertions.add(ithDoc+\"/str[@name='id'][.='\"+expectIds.get(i)+\"']\");\n      // let's test scores right there\n      assertions.add(ithDoc+\"/float[@name='score'][.='\"+expectIds.get(i)+\".0']\");\n      \n    }\n    \n    String[] john = new String[]{\"q\",\"name_s:john\", \"indent\",\"true\",\n        \"fl\",\"dept_ss_dv,name_s_dv,depts:[subquery]\",\n        \"rows\",\"\" + (2 * peopleMultiplier),\n        \"depts.q\",\"+{!term f=dept_id_s v=$row.dept_ss_dv}^=0 _val_:id_i\", \n        \"depts.fl\",\"id\",\n        \"depts.fl\",\"score\",\n        \"depts.indent\",\"true\",\n        \"depts.rows\",\"\"+(toIndex-start),\n        \"depts.start\",\"\"+start};\n        \n    assertQ(req(john), assertions.toArray(new String[]{}));\n  }\n\n","sourceOld":"  @Test\n  public void testRowsStartForSubqueryAndScores() throws Exception {\n    \n    String johnDeptsIds = h.query(req(new String[]{\"q\",\"{!join from=dept_ss_dv to=dept_id_s}name_s:john\", \n        \"wt\",\"csv\",\n        \"csv.header\",\"false\",\n        \"fl\",\"id\",\n        \"rows\",\"\"+deptMultiplier,\n        \"sort\", \"id_i desc\"\n      }));\n    \n    ArrayList<Object> deptIds = Collections.list(\n        new StringTokenizer( johnDeptsIds));\n    \n    final int a = random().nextInt(deptMultiplier+1);\n    final int b = random().nextInt(deptMultiplier+1);\n    final int start = Math.min(a, b) ;\n    final int toIndex = Math.max(a, b) ;\n    List<Object> expectIds = deptIds.subList(start , toIndex);\n    ArrayList<String> assertions = new ArrayList<>();\n    // count((//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc/str[@name='id'])\n   // random().nextInt(peopleMultiplier);\n    assertions.add(\"count((//result/doc/str[@name='name_s_dv'][.='john']/..\"\n        + \"/result[@name='depts'][@numFound='\"+deptMultiplier+\"'][@start='\"+start+\"'])[\"+\n        (random().nextInt(peopleMultiplier)+1)\n        +\"]/doc/str[@name='id'])=\" +(toIndex-start));\n    \n   // System.out.println(expectIds);\n    \n    for (int i=0; i< expectIds.size(); i++) {\n      // (//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc[1]/str[@name='id']='15'\n      String ithDoc = \"(//result/doc/str[@name='name_s_dv'][.='john']/..\"\n                + \"/result[@name='depts'][@numFound='\"+deptMultiplier+\"'][@start='\"+start+\"'])[\"+ \n                (random().nextInt(peopleMultiplier)+1) +\n                \"]/doc[\" +(i+1)+ \"]\";\n      assertions.add(ithDoc+\"/str[@name='id'][.='\"+expectIds.get(i)+\"']\");\n      // let's test scores right there\n      assertions.add(ithDoc+\"/float[@name='score'][.='\"+expectIds.get(i)+\".0']\");\n      \n    }\n    \n    String[] john = new String[]{\"q\",\"name_s:john\", \"indent\",\"true\",\n        \"fl\",\"name_s_dv,depts:[subquery]\",\n        \"rows\",\"\" + (2 * peopleMultiplier),\n        \"depts.q\",\"+{!term f=dept_id_s v=$row.dept_ss_dv}^=0 _val_:id_i\", \n        \"depts.fl\",\"id\",\n        \"depts.fl\",\"score\",\n        \"depts.indent\",\"true\",\n        \"depts.rows\",\"\"+(toIndex-start),\n        \"depts.start\",\"\"+start};\n        \n    assertQ(req(john), assertions.toArray(new String[]{}));\n  }\n\n","bugFix":["561c2351baf6dd64061addef891359954c1a7faa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testRowsStartForSubqueryAndScores().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRowsStartForSubqueryAndScores() throws Exception {\n    \n    String johnDeptsIds = h.query(req(new String[]{\"q\",\"{!join from=dept_ss_dv to=dept_id_s}name_s:john\", \n        \"wt\",\"csv\",\n        \"csv.header\",\"false\",\n        \"fl\",\"id\",\n        \"rows\",\"\"+deptMultiplier,\n        \"sort\", \"id_i desc\"\n      }));\n    \n    ArrayList<Object> deptIds = Collections.list(\n        new StringTokenizer( johnDeptsIds));\n    \n    final int a = random().nextInt(deptMultiplier+1);\n    final int b = random().nextInt(deptMultiplier+1);\n    final int start = Math.min(a, b) ;\n    final int toIndex = Math.max(a, b) ;\n    List<Object> expectIds = deptIds.subList(start , toIndex);\n    ArrayList<String> assertions = new ArrayList<>();\n    // count((//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc/str[@name='id'])\n   // random().nextInt(peopleMultiplier);\n    assertions.add(\"count((//result/doc/str[@name='name_s_dv'][.='john']/..\"\n        + \"/result[@name='depts'][@numFound='\"+deptMultiplier+\"'][@start='\"+start+\"'])[\"+\n        (random().nextInt(peopleMultiplier)+1)\n        +\"]/doc/str[@name='id'])=\" +(toIndex-start));\n    \n   // System.out.println(expectIds);\n    \n    for (int i=0; i< expectIds.size(); i++) {\n      // (//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc[1]/str[@name='id']='15'\n      String ithDoc = \"(//result/doc/str[@name='name_s_dv'][.='john']/..\"\n                + \"/result[@name='depts'][@numFound='\"+deptMultiplier+\"'][@start='\"+start+\"'])[\"+ \n                (random().nextInt(peopleMultiplier)+1) +\n                \"]/doc[\" +(i+1)+ \"]\";\n      assertions.add(ithDoc+\"/str[@name='id'][.='\"+expectIds.get(i)+\"']\");\n      // let's test scores right there\n      assertions.add(ithDoc+\"/float[@name='score'][.='\"+expectIds.get(i)+\".0']\");\n      \n    }\n    \n    String[] john = new String[]{\"q\",\"name_s:john\", \"indent\",\"true\",\n        \"fl\",\"dept_ss_dv,name_s_dv,depts:[subquery]\",\n        \"rows\",\"\" + (2 * peopleMultiplier),\n        \"depts.q\",\"+{!term f=dept_id_s v=$row.dept_ss_dv}^=0 _val_:id_i\", \n        \"depts.fl\",\"id\",\n        \"depts.fl\",\"score\",\n        \"depts.indent\",\"true\",\n        \"depts.rows\",\"\"+(toIndex-start),\n        \"depts.start\",\"\"+start};\n        \n    assertQ(req(john), assertions.toArray(new String[]{}));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"],"561c2351baf6dd64061addef891359954c1a7faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"]},"commit2Childs":{"36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e66a459d38c1c4a2f97128433dab546f683a9fed","561c2351baf6dd64061addef891359954c1a7faa","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"561c2351baf6dd64061addef891359954c1a7faa":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}