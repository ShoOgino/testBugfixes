{"path":"src/java/org/apache/solr/core/Config#getClassLoader().mjava","commits":[{"id":"88e7c7b9fdd71ab3f2261395347caff22f89cce0","date":1163469932,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getClassLoader().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the singleton classloader to be use when loading resources\n   * specified in any configs.\n   *\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources useing any jar files\n   * found in the \"lib/\" directory in the \"Solr Home\" directory.\n   * <p>\n   */\n  static ClassLoader getClassLoader() {\n    if (null == classLoader) {\n      classLoader = Thread.currentThread().getContextClassLoader();\n      \n      File f = new File(getInstanceDir() + \"lib/\");\n      if (f.canRead() && f.isDirectory()) {\n        File[] jarFiles = f.listFiles();\n        URL[] jars = new URL[jarFiles.length];\n        try {\n          for (int j = 0; j < jarFiles.length; j++) {\n            jars[j] = jarFiles[j].toURI().toURL();\n            log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n          }\n          classLoader = URLClassLoader.newInstance(jars, classLoader);\n        } catch (MalformedURLException e) {\n          SolrException.log(log,\"Can't construct solr lib class loader\", e);\n        }\n      }\n    }\n    return classLoader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"810d380561c984370e8bfcbf778486c08f7e2cc0","date":1171644169,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getClassLoader().mjava","pathOld":"src/java/org/apache/solr/core/Config#getClassLoader().mjava","sourceNew":"  /**\n   * Returns the singleton classloader to be use when loading resources\n   * specified in any configs.\n   *\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources useing any jar files\n   * found in the \"lib/\" directory in the \"Solr Home\" directory.\n   * <p>\n   */\n  static ClassLoader getClassLoader() {\n    if (null == classLoader) {\n      classLoader = Thread.currentThread().getContextClassLoader();\n\n      File f = new File(getInstanceDir() + \"lib/\");\n      if (f.canRead() && f.isDirectory()) {\n        File[] jarFiles = f.listFiles();\n        URL[] jars = new URL[jarFiles.length];\n        try {\n          for (int j = 0; j < jarFiles.length; j++) {\n            jars[j] = jarFiles[j].toURI().toURL();\n            log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n          }\n          classLoader = URLClassLoader.newInstance(jars, classLoader);\n        } catch (MalformedURLException e) {\n          SolrException.log(log,\"Can't construct solr lib class loader\", e);\n        }\n      }\n    }\n    return classLoader;\n  }\n\n","sourceOld":"  /**\n   * Returns the singleton classloader to be use when loading resources\n   * specified in any configs.\n   *\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources useing any jar files\n   * found in the \"lib/\" directory in the \"Solr Home\" directory.\n   * <p>\n   */\n  static ClassLoader getClassLoader() {\n    if (null == classLoader) {\n      classLoader = Thread.currentThread().getContextClassLoader();\n      \n      File f = new File(getInstanceDir() + \"lib/\");\n      if (f.canRead() && f.isDirectory()) {\n        File[] jarFiles = f.listFiles();\n        URL[] jars = new URL[jarFiles.length];\n        try {\n          for (int j = 0; j < jarFiles.length; j++) {\n            jars[j] = jarFiles[j].toURI().toURL();\n            log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n          }\n          classLoader = URLClassLoader.newInstance(jars, classLoader);\n        } catch (MalformedURLException e) {\n          SolrException.log(log,\"Can't construct solr lib class loader\", e);\n        }\n      }\n    }\n    return classLoader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getClassLoader().mjava","pathOld":"src/java/org/apache/solr/core/Config#getClassLoader().mjava","sourceNew":"  /**\n   * Returns the singleton classloader to be use when loading resources\n   * specified in any configs.\n   *\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources useing any jar files\n   * found in the \"lib/\" directory in the \"Solr Home\" directory.\n   * <p>\n   */\n  static ClassLoader getClassLoader() {\n    if (null == classLoader) {\n      // NB5.5/win32/1.5_10: need to go thru local var or classLoader is not set!\n      ClassLoader loader = Thread.currentThread().getContextClassLoader();\n\n      File f = new File(getInstanceDir() + \"lib/\");\n      if (f.canRead() && f.isDirectory()) {\n        File[] jarFiles = f.listFiles();\n        URL[] jars = new URL[jarFiles.length];\n        try {\n          for (int j = 0; j < jarFiles.length; j++) {\n            jars[j] = jarFiles[j].toURI().toURL();\n            log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n          }\n          loader = URLClassLoader.newInstance(jars, loader);\n        } catch (MalformedURLException e) {\n          SolrException.log(log,\"Can't construct solr lib class loader\", e);\n        }\n      }\n      classLoader = loader;\n    }\n    return classLoader;\n  }\n\n","sourceOld":"  /**\n   * Returns the singleton classloader to be use when loading resources\n   * specified in any configs.\n   *\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources useing any jar files\n   * found in the \"lib/\" directory in the \"Solr Home\" directory.\n   * <p>\n   */\n  static ClassLoader getClassLoader() {\n    if (null == classLoader) {\n      classLoader = Thread.currentThread().getContextClassLoader();\n\n      File f = new File(getInstanceDir() + \"lib/\");\n      if (f.canRead() && f.isDirectory()) {\n        File[] jarFiles = f.listFiles();\n        URL[] jars = new URL[jarFiles.length];\n        try {\n          for (int j = 0; j < jarFiles.length; j++) {\n            jars[j] = jarFiles[j].toURI().toURL();\n            log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n          }\n          classLoader = URLClassLoader.newInstance(jars, classLoader);\n        } catch (MalformedURLException e) {\n          SolrException.log(log,\"Can't construct solr lib class loader\", e);\n        }\n      }\n    }\n    return classLoader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7","date":1189312484,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getClassLoader().mjava","pathOld":"src/java/org/apache/solr/core/Config#getClassLoader().mjava","sourceNew":"  /**\n   * Returns the singleton classloader to be use when loading resources\n   * specified in any configs.\n   *\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources useing any jar files\n   * found in the \"lib/\" directory in the \"Solr Home\" directory.\n   * <p>\n   */\n  ClassLoader getClassLoader() {\n    if (null == classLoader) {\n      // NB5.5/win32/1.5_10: need to go thru local var or classLoader is not set!\n      ClassLoader loader = Thread.currentThread().getContextClassLoader();\n\n      File f = new File(getInstanceDir() + \"lib/\");\n      if (f.canRead() && f.isDirectory()) {\n        File[] jarFiles = f.listFiles();\n        URL[] jars = new URL[jarFiles.length];\n        try {\n          for (int j = 0; j < jarFiles.length; j++) {\n            jars[j] = jarFiles[j].toURI().toURL();\n            log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n          }\n          loader = URLClassLoader.newInstance(jars, loader);\n        } catch (MalformedURLException e) {\n          SolrException.log(log,\"Can't construct solr lib class loader\", e);\n        }\n      }\n      classLoader = loader;\n    }\n    return classLoader;\n  }\n\n","sourceOld":"  /**\n   * Returns the singleton classloader to be use when loading resources\n   * specified in any configs.\n   *\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources useing any jar files\n   * found in the \"lib/\" directory in the \"Solr Home\" directory.\n   * <p>\n   */\n  static ClassLoader getClassLoader() {\n    if (null == classLoader) {\n      // NB5.5/win32/1.5_10: need to go thru local var or classLoader is not set!\n      ClassLoader loader = Thread.currentThread().getContextClassLoader();\n\n      File f = new File(getInstanceDir() + \"lib/\");\n      if (f.canRead() && f.isDirectory()) {\n        File[] jarFiles = f.listFiles();\n        URL[] jars = new URL[jarFiles.length];\n        try {\n          for (int j = 0; j < jarFiles.length; j++) {\n            jars[j] = jarFiles[j].toURI().toURL();\n            log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n          }\n          loader = URLClassLoader.newInstance(jars, loader);\n        } catch (MalformedURLException e) {\n          SolrException.log(log,\"Can't construct solr lib class loader\", e);\n        }\n      }\n      classLoader = loader;\n    }\n    return classLoader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abbfb3ad1f90df8ebf4751c8e72b2756ace50699","date":1190497478,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getClassLoader().mjava","pathOld":"src/java/org/apache/solr/core/Config#getClassLoader().mjava","sourceNew":"  /**\n   * Returns the singleton classloader to be use when loading resources\n   * specified in any configs.\n   *\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources useing any jar files\n   * found in the \"lib/\" directory in the \"Solr Home\" directory.\n   * <p>\n   */\n  private ClassLoader getClassLoader() {\n    if (null == classLoader) {\n      // NB5.5/win32/1.5_10: need to go thru local var or classLoader is not set!\n      ClassLoader loader = Thread.currentThread().getContextClassLoader();\n\n      File f = new File(instanceDir + \"lib/\");\n      if (f.canRead() && f.isDirectory()) {\n        File[] jarFiles = f.listFiles();\n        URL[] jars = new URL[jarFiles.length];\n        try {\n          for (int j = 0; j < jarFiles.length; j++) {\n            jars[j] = jarFiles[j].toURI().toURL();\n            log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n          }\n          loader = URLClassLoader.newInstance(jars, loader);\n        } catch (MalformedURLException e) {\n          SolrException.log(log,\"Can't construct solr lib class loader\", e);\n        }\n      }\n      classLoader = loader;\n    }\n    return classLoader;\n  }\n\n","sourceOld":"  /**\n   * Returns the singleton classloader to be use when loading resources\n   * specified in any configs.\n   *\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources useing any jar files\n   * found in the \"lib/\" directory in the \"Solr Home\" directory.\n   * <p>\n   */\n  ClassLoader getClassLoader() {\n    if (null == classLoader) {\n      // NB5.5/win32/1.5_10: need to go thru local var or classLoader is not set!\n      ClassLoader loader = Thread.currentThread().getContextClassLoader();\n\n      File f = new File(getInstanceDir() + \"lib/\");\n      if (f.canRead() && f.isDirectory()) {\n        File[] jarFiles = f.listFiles();\n        URL[] jars = new URL[jarFiles.length];\n        try {\n          for (int j = 0; j < jarFiles.length; j++) {\n            jars[j] = jarFiles[j].toURI().toURL();\n            log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n          }\n          loader = URLClassLoader.newInstance(jars, loader);\n        } catch (MalformedURLException e) {\n          SolrException.log(log,\"Can't construct solr lib class loader\", e);\n        }\n      }\n      classLoader = loader;\n    }\n    return classLoader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2aff158239a5f4dfdff56648c869c628a48de10","date":1193374011,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getClassLoader().mjava","pathOld":"src/java/org/apache/solr/core/Config#getClassLoader().mjava","sourceNew":"  /**\n   * Returns the classloader to be use when loading resources\n   * specified in this config\n   *\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources useing any jar files\n   * found in the \"lib/\" directory in the \"Solr Home\" directory.\n   * <p>\n   */\n  private ClassLoader getClassLoader() {\n    if (null == classLoader) {\n      // NB5.5/win32/1.5_10: need to go thru local var or classLoader is not set!\n      ClassLoader loader = Thread.currentThread().getContextClassLoader();\n\n      File f = new File(instanceDir + \"lib/\");\n      if (f.canRead() && f.isDirectory()) {\n        File[] jarFiles = f.listFiles();\n        URL[] jars = new URL[jarFiles.length];\n        try {\n          for (int j = 0; j < jarFiles.length; j++) {\n            jars[j] = jarFiles[j].toURI().toURL();\n            log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n          }\n          loader = URLClassLoader.newInstance(jars, loader);\n        } catch (MalformedURLException e) {\n          SolrException.log(log,\"Can't construct solr lib class loader\", e);\n        }\n      }\n      classLoader = loader;\n    }\n    return classLoader;\n  }\n\n","sourceOld":"  /**\n   * Returns the singleton classloader to be use when loading resources\n   * specified in any configs.\n   *\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources useing any jar files\n   * found in the \"lib/\" directory in the \"Solr Home\" directory.\n   * <p>\n   */\n  private ClassLoader getClassLoader() {\n    if (null == classLoader) {\n      // NB5.5/win32/1.5_10: need to go thru local var or classLoader is not set!\n      ClassLoader loader = Thread.currentThread().getContextClassLoader();\n\n      File f = new File(instanceDir + \"lib/\");\n      if (f.canRead() && f.isDirectory()) {\n        File[] jarFiles = f.listFiles();\n        URL[] jars = new URL[jarFiles.length];\n        try {\n          for (int j = 0; j < jarFiles.length; j++) {\n            jars[j] = jarFiles[j].toURI().toURL();\n            log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n          }\n          loader = URLClassLoader.newInstance(jars, loader);\n        } catch (MalformedURLException e) {\n          SolrException.log(log,\"Can't construct solr lib class loader\", e);\n        }\n      }\n      classLoader = loader;\n    }\n    return classLoader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/core/Config#getClassLoader().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the classloader to be use when loading resources\n   * specified in this config\n   *\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources useing any jar files\n   * found in the \"lib/\" directory in the \"Solr Home\" directory.\n   * <p>\n   */\n  private ClassLoader getClassLoader() {\n    if (null == classLoader) {\n      // NB5.5/win32/1.5_10: need to go thru local var or classLoader is not set!\n      ClassLoader loader = Thread.currentThread().getContextClassLoader();\n\n      File f = new File(instanceDir + \"lib/\");\n      if (f.canRead() && f.isDirectory()) {\n        File[] jarFiles = f.listFiles();\n        URL[] jars = new URL[jarFiles.length];\n        try {\n          for (int j = 0; j < jarFiles.length; j++) {\n            jars[j] = jarFiles[j].toURI().toURL();\n            log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n          }\n          loader = URLClassLoader.newInstance(jars, loader);\n        } catch (MalformedURLException e) {\n          SolrException.log(log,\"Can't construct solr lib class loader\", e);\n        }\n      }\n      classLoader = loader;\n    }\n    return classLoader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88e7c7b9fdd71ab3f2261395347caff22f89cce0":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6d6338c87060be5f66757a94945975f3bbd377a9":["810d380561c984370e8bfcbf778486c08f7e2cc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["e2aff158239a5f4dfdff56648c869c628a48de10"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["6d6338c87060be5f66757a94945975f3bbd377a9"],"810d380561c984370e8bfcbf778486c08f7e2cc0":["88e7c7b9fdd71ab3f2261395347caff22f89cce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e2aff158239a5f4dfdff56648c869c628a48de10":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"]},"commit2Childs":{"88e7c7b9fdd71ab3f2261395347caff22f89cce0":["810d380561c984370e8bfcbf778486c08f7e2cc0"],"6d6338c87060be5f66757a94945975f3bbd377a9":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["88e7c7b9fdd71ab3f2261395347caff22f89cce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":[],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["e2aff158239a5f4dfdff56648c869c628a48de10"],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"810d380561c984370e8bfcbf778486c08f7e2cc0":["6d6338c87060be5f66757a94945975f3bbd377a9"],"e2aff158239a5f4dfdff56648c869c628a48de10":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}