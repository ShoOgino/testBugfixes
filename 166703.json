{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","commits":[{"id":"dded3df9e710f258905cff1def2f25eb51c62e0f","date":1475158173,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx);\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, \"org.apache.solr.cloud.rule.ImplicitSnitch\", null);\n  }\n\n","sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx);\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, ImplicitSnitch.class.getName(), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx);\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, \"org.apache.solr.cloud.rule.ImplicitSnitch\", null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx);\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, \"org.apache.solr.cloud.rule.ImplicitSnitch\", null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd7cebd53a1b7af73c5ca163a8a64808c9cf159d","date":1491310508,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE) || requestedTags.contains(NODEROLE)) fillRole(solrNode, ctx);\n\n    addIpTags(solrNode, requestedTags, ctx);\n\n    getRemoteInfo(solrNode, requestedTags, ctx);\n  }\n\n","sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx);\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, \"org.apache.solr.cloud.rule.ImplicitSnitch\", null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961a14d298363c1efe0c3135a9f8b762dafd0d99","date":1496035169,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx, ROLE);\n    if (requestedTags.contains(NODEROLE)) fillRole(solrNode, ctx, NODEROLE);// for new policy framework\n\n    addIpTags(solrNode, requestedTags, ctx);\n\n    getRemoteInfo(solrNode, requestedTags, ctx);\n  }\n\n","sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE) || requestedTags.contains(NODEROLE)) fillRole(solrNode, ctx);\n\n    addIpTags(solrNode, requestedTags, ctx);\n\n    getRemoteInfo(solrNode, requestedTags, ctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx, ROLE);\n    if (requestedTags.contains(NODEROLE)) fillRole(solrNode, ctx, NODEROLE);// for new policy framework\n\n    addIpTags(solrNode, requestedTags, ctx);\n\n    getRemoteInfo(solrNode, requestedTags, ctx);\n  }\n\n","sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx);\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, \"org.apache.solr.cloud.rule.ImplicitSnitch\", null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    try {\n      if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n      if (requestedTags.contains(HOST)) {\n        Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n        if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n      }\n      if (requestedTags.contains(PORT)) {\n        Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n        if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n      }\n      if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx, ROLE);\n      if (requestedTags.contains(NODEROLE)) fillRole(solrNode, ctx, NODEROLE);// for new policy framework\n\n      addIpTags(solrNode, requestedTags, ctx);\n\n      getRemoteInfo(solrNode, requestedTags, ctx);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx, ROLE);\n    if (requestedTags.contains(NODEROLE)) fillRole(solrNode, ctx, NODEROLE);// for new policy framework\n\n    addIpTags(solrNode, requestedTags, ctx);\n\n    getRemoteInfo(solrNode, requestedTags, ctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    try {\n      if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n      if (requestedTags.contains(HOST)) {\n        Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n        if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n      }\n      if (requestedTags.contains(PORT)) {\n        Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n        if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n      }\n      if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx, ROLE);\n      if (requestedTags.contains(NODEROLE)) fillRole(solrNode, ctx, NODEROLE);// for new policy framework\n\n      addIpTags(solrNode, requestedTags, ctx);\n\n      getRemoteInfo(solrNode, requestedTags, ctx);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx);\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, \"org.apache.solr.cloud.rule.ImplicitSnitch\", null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    try {\n      if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n      if (requestedTags.contains(HOST)) {\n        Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n        if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n      }\n      if (requestedTags.contains(PORT)) {\n        Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n        if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n      }\n      if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx, ROLE);\n      if (requestedTags.contains(NODEROLE)) fillRole(solrNode, ctx, NODEROLE);// for new policy framework\n\n      addIpTags(solrNode, requestedTags, ctx);\n\n      getRemoteInfo(solrNode, requestedTags, ctx);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx, ROLE);\n    if (requestedTags.contains(NODEROLE)) fillRole(solrNode, ctx, NODEROLE);// for new policy framework\n\n    addIpTags(solrNode, requestedTags, ctx);\n\n    getRemoteInfo(solrNode, requestedTags, ctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    try {\n      if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n      if (requestedTags.contains(HOST)) {\n        Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n        if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n      }\n      if (requestedTags.contains(PORT)) {\n        Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n        if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n      }\n      if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx, ROLE);\n      if (requestedTags.contains(NODEROLE)) fillRole(solrNode, ctx, NODEROLE);// for new policy framework\n\n      addIpTags(solrNode, requestedTags, ctx);\n\n      getRemoteInfo(solrNode, requestedTags, ctx);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx);\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, \"org.apache.solr.cloud.rule.ImplicitSnitch\", null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"961a14d298363c1efe0c3135a9f8b762dafd0d99":["cd7cebd53a1b7af73c5ca163a8a64808c9cf159d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["961a14d298363c1efe0c3135a9f8b762dafd0d99","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dded3df9e710f258905cff1def2f25eb51c62e0f"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd7cebd53a1b7af73c5ca163a8a64808c9cf159d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["a513b6a92751e54c76fb5447948c9e7d437163a7"]},"commit2Childs":{"961a14d298363c1efe0c3135a9f8b762dafd0d99":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","cd7cebd53a1b7af73c5ca163a8a64808c9cf159d","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","dded3df9e710f258905cff1def2f25eb51c62e0f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"cd7cebd53a1b7af73c5ca163a8a64808c9cf159d":["961a14d298363c1efe0c3135a9f8b762dafd0d99"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}