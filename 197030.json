{"path":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    long start = bufferStart + bufferPosition;\n    long end = start + bufferSize;\n    if (end > length())\t\t\t\t  // don't read past EOF\n      end = length();\n    int newLength = (int)(end - start);\n    if (newLength <= 0)\n      throw new EOFException(\"read past EOF: \" + this);\n\n    if (buffer == null) {\n      newBuffer(new byte[bufferSize]);  // allocate buffer lazily\n      seekInternal(bufferStart);\n    }\n    readInternal(buffer, 0, newLength);\n    bufferLength = newLength;\n    bufferStart = start;\n    bufferPosition = 0;\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    long start = bufferStart + bufferPosition;\n    long end = start + bufferSize;\n    if (end > length())\t\t\t\t  // don't read past EOF\n      end = length();\n    int newLength = (int)(end - start);\n    if (newLength <= 0)\n      throw new EOFException(\"read past EOF: \" + this);\n\n    if (buffer == null) {\n      newBuffer(new byte[bufferSize]);  // allocate buffer lazily\n      seekInternal(bufferStart);\n    }\n    readInternal(buffer, 0, newLength);\n    bufferLength = newLength;\n    bufferStart = start;\n    bufferPosition = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    long start = bufferStart + bufferPosition;\n    long end = start + bufferSize;\n    if (end > length())  // don't read past EOF\n      end = length();\n    int newLength = (int)(end - start);\n    if (newLength <= 0)\n      throw new EOFException(\"read past EOF: \" + this);\n\n    if (buffer == null) {\n      newBuffer(new byte[bufferSize]);  // allocate buffer lazily\n      seekInternal(bufferStart);\n    }\n    readInternal(buffer, 0, newLength);\n    bufferLength = newLength;\n    bufferStart = start;\n    bufferPosition = 0;\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    long start = bufferStart + bufferPosition;\n    long end = start + bufferSize;\n    if (end > length())\t\t\t\t  // don't read past EOF\n      end = length();\n    int newLength = (int)(end - start);\n    if (newLength <= 0)\n      throw new EOFException(\"read past EOF: \" + this);\n\n    if (buffer == null) {\n      newBuffer(new byte[bufferSize]);  // allocate buffer lazily\n      seekInternal(bufferStart);\n    }\n    readInternal(buffer, 0, newLength);\n    bufferLength = newLength;\n    bufferStart = start;\n    bufferPosition = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af9ce763a9d61cb88781e638d593430b71efa7dc","date":1586259009,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    long start = bufferStart + buffer.position();\n    long end = start + bufferSize;\n    if (end > length())  // don't read past EOF\n      end = length();\n    int newLength = (int)(end - start);\n    if (newLength <= 0)\n      throw new EOFException(\"read past EOF: \" + this);\n\n    if (buffer == EMPTY_BYTEBUFFER) {\n      buffer = ByteBuffer.allocate(bufferSize);  // allocate buffer lazily\n      seekInternal(bufferStart);\n    }\n    buffer.position(0);\n    buffer.limit(newLength);\n    bufferStart = start;\n    readInternal(buffer);\n    // Make sure sub classes don't mess up with the buffer.\n    assert buffer.order() == ByteOrder.BIG_ENDIAN : buffer.order();\n    assert buffer.remaining() == 0 : \"should have thrown EOFException\";\n    assert buffer.position() == newLength;\n    buffer.flip();\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    long start = bufferStart + bufferPosition;\n    long end = start + bufferSize;\n    if (end > length())  // don't read past EOF\n      end = length();\n    int newLength = (int)(end - start);\n    if (newLength <= 0)\n      throw new EOFException(\"read past EOF: \" + this);\n\n    if (buffer == null) {\n      newBuffer(new byte[bufferSize]);  // allocate buffer lazily\n      seekInternal(bufferStart);\n    }\n    readInternal(buffer, 0, newLength);\n    bufferLength = newLength;\n    bufferStart = start;\n    bufferPosition = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af9ce763a9d61cb88781e638d593430b71efa7dc":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af9ce763a9d61cb88781e638d593430b71efa7dc"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"af9ce763a9d61cb88781e638d593430b71efa7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["af9ce763a9d61cb88781e638d593430b71efa7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}