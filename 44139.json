{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","commits":[{"id":"17c1f75cbc80446a0380e76b64210cdf8e3858d7","date":1359394908,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = numeric(reader, \"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query.build(), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query.build(), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlyLeafReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query.build(), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["17c1f75cbc80446a0380e76b64210cdf8e3858d7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query.build(), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlyLeafReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.advance(i));\n      assertEquals(i, docValues.longValue());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query.build(), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlyLeafReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query.build(), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlyLeafReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.advance(i));\n      assertEquals(i, docValues.longValue());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query.build(), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlyLeafReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query.build(), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlyLeafReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.advance(i));\n      assertEquals(i, docValues.longValue());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query.build(), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlyLeafReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query.build(), 10);\n    assertEquals(5, search.totalHits.value);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlyLeafReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.advance(i));\n      assertEquals(i, docValues.longValue());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n  \n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query.build(), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlyLeafReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.advance(i));\n      assertEquals(i, docValues.longValue());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"17c1f75cbc80446a0380e76b64210cdf8e3858d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a45bec74b98f6fc05f52770cfb425739e6563960":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17c1f75cbc80446a0380e76b64210cdf8e3858d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["a45bec74b98f6fc05f52770cfb425739e6563960"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"17c1f75cbc80446a0380e76b64210cdf8e3858d7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a45bec74b98f6fc05f52770cfb425739e6563960":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17c1f75cbc80446a0380e76b64210cdf8e3858d7","d4d69c535930b5cce125cff868d40f6373dc27d4"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","83788ad129a5154d5c6562c4e8ce3db48793aada"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}