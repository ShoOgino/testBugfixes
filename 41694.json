{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","commits":[{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"/dev/null","sourceNew":"  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    // apply all deletes before we flush and release the delete slice\n    deleteSlice.apply(pendingDeletes, numDocsInRAM);\n    deleteSlice = null;\n    return globalDeletes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["022c694e37d984e7719cbf18c4a027a17f5d41ba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"022c694e37d984e7719cbf18c4a027a17f5d41ba","date":1302856277,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","sourceNew":"  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      deleteSlice = null;\n    }\n    return globalDeletes;\n  }\n\n","sourceOld":"  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    // apply all deletes before we flush and release the delete slice\n    deleteSlice.apply(pendingDeletes, numDocsInRAM);\n    deleteSlice = null;\n    return globalDeletes;\n  }\n\n","bugFix":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc","date":1303831082,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice = null;\n    }\n    return globalDeletes;\n  }\n\n","sourceOld":"  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      deleteSlice = null;\n    }\n    return globalDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice = null;\n    }\n    return globalDeletes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice = null;\n    }\n    return globalDeletes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice = null;\n    }\n    return globalDeletes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice = null;\n    }\n    return globalDeletes;\n  }\n\n","sourceOld":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice = null;\n    }\n    return globalDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc":["022c694e37d984e7719cbf18c4a027a17f5d41ba"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4f6945f5eb72bd7d9722ab064a98eb1d8543afc"],"022c694e37d984e7719cbf18c4a027a17f5d41ba":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"022c694e37d984e7719cbf18c4a027a17f5d41ba":["f4f6945f5eb72bd7d9722ab064a98eb1d8543afc"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["022c694e37d984e7719cbf18c4a027a17f5d41ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}