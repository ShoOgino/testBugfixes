{"path":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","commits":[{"id":"cc9c42f0c1f89f2b3964f2d39efe57860e578838","date":1438774812,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      create.setRouterName(router);\n      create.setShards(\"a,b,c\");\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setNumShards(2);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","sourceNew":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      create.setRouterName(router);\n      create.setShards(\"a,b,c\");\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setNumShards(2);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","sourceNew":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      create.setRouterName(router);\n      create.setShards(\"a,b,c\");\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setNumShards(2);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","sourceNew":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      create.setRouterName(router);\n      create.setShards(\"a,b,c\");\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setNumShards(2);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","sourceNew":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      create.setRouterName(router);\n      create.setShards(\"a,b,c\");\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setNumShards(2);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","sourceNew":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 3, 3);\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 2, 2);\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n  }\n\n","sourceOld":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","bugFix":["cc9c42f0c1f89f2b3964f2d39efe57860e578838"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#createCollection(String,String,String).mjava","sourceNew":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 3, 3);\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 2, 2);\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n  }\n\n","sourceOld":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 3, 3);\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 2, 2);\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["cc9c42f0c1f89f2b3964f2d39efe57860e578838","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3217321f3e1d7922898c6c633d17acfa840d6875"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["cc9c42f0c1f89f2b3964f2d39efe57860e578838"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3217321f3e1d7922898c6c633d17acfa840d6875":["cc9c42f0c1f89f2b3964f2d39efe57860e578838","ac97ea104d893f16aab430d9904473bc1f233f3c"],"cc9c42f0c1f89f2b3964f2d39efe57860e578838":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["cc9c42f0c1f89f2b3964f2d39efe57860e578838","3217321f3e1d7922898c6c633d17acfa840d6875"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc9c42f0c1f89f2b3964f2d39efe57860e578838"],"3217321f3e1d7922898c6c633d17acfa840d6875":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"cc9c42f0c1f89f2b3964f2d39efe57860e578838":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}