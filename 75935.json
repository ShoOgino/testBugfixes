{"path":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\"), false));\n    \n    DocsEnum de = _TestUtil.docs(random, reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\"), false));\n    \n    DocsEnum de = _TestUtil.docs(random, reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\"), false));\n    \n    DocsEnum de = _TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\"), false));\n    \n    DocsEnum de = _TestUtil.docs(random, reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\"), false));\n    \n    DocsEnum de = _TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\"), false));\n    \n    DocsEnum de = _TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = _TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\"), false));\n    \n    DocsEnum de = _TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = _TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, DocsEnum.FLAG_FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = _TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = _TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, DocsEnum.FLAG_FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\"), false));\n    \n    DocsEnum de = _TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = _TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, DocsEnum.FLAG_FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\"), false));\n    \n    DocsEnum de = _TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, DocsEnum.FLAG_FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = _TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, DocsEnum.FLAG_FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.shutdown();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, DocsEnum.FLAG_FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, DocsEnum.FLAG_FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, DocsEnum.FLAG_FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.shutdown();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, DocsEnum.FLAG_FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    PostingsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, PostingsEnum.FLAG_FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, DocsEnum.FLAG_FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    PostingsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, PostingsEnum.FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    PostingsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, PostingsEnum.FLAG_FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35626481458234c265343dd28af158e8b0099068","date":1427831707,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNotNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    PostingsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, PostingsEnum.FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    PostingsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, PostingsEnum.FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNotNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    PostingsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, PostingsEnum.FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    PostingsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, PostingsEnum.FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNotNull(MultiFields.getTermPositionsEnum(reader, \"foo\", new BytesRef(\"test\")));\n    \n    PostingsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, PostingsEnum.FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNotNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    PostingsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, null, PostingsEnum.FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNotNull(MultiTerms.getTermPostingsEnum(reader, \"foo\", new BytesRef(\"test\")));\n    \n    PostingsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, PostingsEnum.FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNotNull(MultiFields.getTermPositionsEnum(reader, \"foo\", new BytesRef(\"test\")));\n    \n    PostingsEnum de = TestUtil.docs(random(), reader, \"foo\", new BytesRef(\"test\"), null, PostingsEnum.FREQS);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["02331260bb246364779cb6f04919ca47900d01bb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"35626481458234c265343dd28af158e8b0099068":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","35626481458234c265343dd28af158e8b0099068"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["04f07771a2a7dd3a395700665ed839c3dae2def2","02331260bb246364779cb6f04919ca47900d01bb"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["04f07771a2a7dd3a395700665ed839c3dae2def2","02331260bb246364779cb6f04919ca47900d01bb"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"02331260bb246364779cb6f04919ca47900d01bb":["322360ac5185a8446d3e0b530b2068bef67cd3d5"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"35626481458234c265343dd28af158e8b0099068":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["35626481458234c265343dd28af158e8b0099068","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["6613659748fe4411a7dcf85266e55db1f95f7315","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}