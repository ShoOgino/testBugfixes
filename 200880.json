{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"/dev/null","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toObject(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            String indexedValue = ((BytesRef) sortValue).utf8ToChars(spare).toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0a78ab521623caecbd36991301ea579bd377775c","a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0","date":1322229341,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toObject(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toObject(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            String indexedValue = ((BytesRef) sortValue).utf8ToChars(spare).toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":["a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a78ab521623caecbd36991301ea579bd377775c","date":1328025398,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toObject(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72","date":1344218343,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":["a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null \n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25","date":1389830331,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null \n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue != null) {\n            sortValue = fieldType.marshalSortValue(sortValue);\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null \n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":["f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72","ccc08aa684aee4964baee0644a6ba047bfd70829","da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null \n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue != null) {\n            sortValue = fieldType.marshalSortValue(sortValue);\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null \n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue instanceof BytesRef) {\n            UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n            String indexedValue = spare.toString();\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n          } else if (sortValue instanceof String) {\n            sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null \n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue != null) {\n            sortValue = fieldType.marshalSortValue(sortValue);\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<Object>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<NamedList>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<Object>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null \n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue != null) {\n            sortValue = fieldType.marshalSortValue(sortValue);\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","date":1448513807,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getTopDocs().getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue != null) {\n            sortValue = fieldType.marshalSortValue(sortValue);\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    if (rb.getGroupingSpec().isNeedScore()) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    CharsRef spare = new CharsRef();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (rb.getGroupingSpec().isNeedScore())  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue;\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null \n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue != null) {\n            sortValue = fieldType.marshalSortValue(sortValue);\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getTopDocs().getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue != null) {\n            sortValue = fieldType.marshalSortValue(sortValue);\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getTopDocs().getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      StoredDocument doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue != null) {\n            sortValue = fieldType.marshalSortValue(sortValue);\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bab0702ffbb627ce10bd5af1c669b3c1f999002","date":1487156075,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getTopDocs().getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        convertedSortValues[j] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getTopDocs().getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        if (field != null) {\n          FieldType fieldType = field.getType();\n          if (sortValue != null) {\n            sortValue = fieldType.marshalSortValue(sortValue);\n          }\n        }\n        convertedSortValues[j] = sortValue;\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getTopDocs().getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        convertedSortValues[j] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getTopDocs().getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        convertedSortValues[j] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getTopDocs().getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        convertedSortValues[j] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getTopDocs().getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        convertedSortValues[j] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        convertedSortValues[j] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getTopDocs().getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        convertedSortValues[j] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        convertedSortValues[j] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getTopDocs().getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getTopDocs().getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        convertedSortValues[j] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    TopDocs topDocs = result.getTopDocs();\n    assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n    queryResult.add(\"totalHits\", topDocs.totalHits.value);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        convertedSortValues[j] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    queryResult.add(\"totalHits\", result.getTopDocs().totalHits);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        convertedSortValues[j] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85bef26bbc598445704c1f9c6d7953f3942d5426","date":1562162588,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopDocs(QueryCommandResult).mjava","sourceNew":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    TopDocs topDocs = result.getTopDocs();\n    assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n    queryResult.add(\"totalHits\", topDocs.totalHits.value);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSortSpec().getSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        convertedSortValues[j] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","sourceOld":"  protected NamedList serializeTopDocs(QueryCommandResult result) throws IOException {\n    NamedList<Object> queryResult = new NamedList<>();\n    queryResult.add(\"matches\", result.getMatches());\n    TopDocs topDocs = result.getTopDocs();\n    assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n    queryResult.add(\"totalHits\", topDocs.totalHits.value);\n    // debug: assert !Float.isNaN(result.getTopDocs().getMaxScore()) == rb.getGroupingSpec().isNeedScore();\n    if (!Float.isNaN(result.getMaxScore())) {\n      queryResult.add(\"maxScore\", result.getMaxScore());\n    }\n    List<NamedList> documents = new ArrayList<>();\n    queryResult.add(\"documents\", documents);\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {\n      NamedList<Object> document = new NamedList<>();\n      documents.add(document);\n\n      Document doc = retrieveDocument(uniqueField, scoreDoc.doc);\n      document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n      if (!Float.isNaN(scoreDoc.score))  {\n        document.add(\"score\", scoreDoc.score);\n      }\n      if (!FieldDoc.class.isInstance(scoreDoc)) {\n        continue; // thus don't add sortValues below\n      }\n\n      FieldDoc fieldDoc = (FieldDoc) scoreDoc;\n      Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n      for (int j = 0; j < fieldDoc.fields.length; j++) {\n        Object sortValue  = fieldDoc.fields[j];\n        Sort groupSort = rb.getGroupingSpec().getGroupSort();\n        SchemaField field = groupSort.getSort()[j].getField() != null\n                          ? schema.getFieldOrNull(groupSort.getSort()[j].getField()) : null;\n        convertedSortValues[j] = ShardResultTransformerUtils.marshalSortValue(sortValue, field);\n      }\n      document.add(\"sortValues\", convertedSortValues);\n    }\n\n    return queryResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["08970e5b8411182a29412c177eff67ec1110095b","a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["5bab0702ffbb627ce10bd5af1c669b3c1f999002"],"5bab0702ffbb627ce10bd5af1c669b3c1f999002":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["1d028314cced5858683a1bb4741423d0f934257b"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["5bab0702ffbb627ce10bd5af1c669b3c1f999002"],"1d028314cced5858683a1bb4741423d0f934257b":["f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6d2dadc1f5ca8703d8659f4964961f9967935d75","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72":["0a78ab521623caecbd36991301ea579bd377775c"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["0a78ab521623caecbd36991301ea579bd377775c","f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72"],"0a78ab521623caecbd36991301ea579bd377775c":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"85bef26bbc598445704c1f9c6d7953f3942d5426":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a7e4907084808af8fdb14b9809e6dceaccf6867b","f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["0a78ab521623caecbd36991301ea579bd377775c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85bef26bbc598445704c1f9c6d7953f3942d5426"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["0a78ab521623caecbd36991301ea579bd377775c"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"5bab0702ffbb627ce10bd5af1c669b3c1f999002":["6d2dadc1f5ca8703d8659f4964961f9967935d75","e5fa6615014cd2288fe930f8c8bb726f9504961d"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"08970e5b8411182a29412c177eff67ec1110095b":["27ab7b234eab0cbc020836989b96ed430e1065bb","a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"1d028314cced5858683a1bb4741423d0f934257b":["08970e5b8411182a29412c177eff67ec1110095b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72":["1d028314cced5858683a1bb4741423d0f934257b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"0a78ab521623caecbd36991301ea579bd377775c":["f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72","c7869f64c874ebf7f317d22c00baf2b6857797a6","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"85bef26bbc598445704c1f9c6d7953f3942d5426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["1d028314cced5858683a1bb4741423d0f934257b"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["85bef26bbc598445704c1f9c6d7953f3942d5426"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["5bab0702ffbb627ce10bd5af1c669b3c1f999002"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c7869f64c874ebf7f317d22c00baf2b6857797a6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}