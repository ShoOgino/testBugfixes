{"path":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#ensureConsistent().mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#ensureConsistent().mjava","pathOld":"/dev/null","sourceNew":"  // returns a boolean so that it can be called from assert\n  // the return value is useless: it always returns true\n  private boolean ensureConsistent() {\n    long maxScoreSum = 0;\n    for (int i = 0; i < tailSize; ++i) {\n      assert tail[i].doc < doc;\n      maxScoreSum = Math.addExact(maxScoreSum, tail[i].maxScore);\n    }\n    assert maxScoreSum == tailMaxScore : maxScoreSum + \" \" + tailMaxScore;\n\n    maxScoreSum = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      assert w.doc == doc;\n      maxScoreSum = Math.addExact(maxScoreSum, w.maxScore);\n    }\n    assert maxScoreSum == leadMaxScore : maxScoreSum + \" \" + leadMaxScore;\n\n    for (DisiWrapper w : head) {\n      assert w.doc > doc;\n    }\n\n    assert tailSize == 0 || tailMaxScore < minCompetitiveScore;\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#ensureConsistent().mjava","pathOld":"/dev/null","sourceNew":"  // returns a boolean so that it can be called from assert\n  // the return value is useless: it always returns true\n  private boolean ensureConsistent() {\n    long maxScoreSum = 0;\n    for (int i = 0; i < tailSize; ++i) {\n      assert tail[i].doc < doc;\n      maxScoreSum = Math.addExact(maxScoreSum, tail[i].maxScore);\n    }\n    assert maxScoreSum == tailMaxScore : maxScoreSum + \" \" + tailMaxScore;\n\n    maxScoreSum = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      assert w.doc == doc;\n      maxScoreSum = Math.addExact(maxScoreSum, w.maxScore);\n    }\n    assert maxScoreSum == leadMaxScore : maxScoreSum + \" \" + leadMaxScore;\n\n    for (DisiWrapper w : head) {\n      assert w.doc > doc;\n    }\n\n    assert tailSize == 0 || tailMaxScore < minCompetitiveScore;\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#ensureConsistent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#ensureConsistent().mjava","sourceNew":"  // returns a boolean so that it can be called from assert\n  // the return value is useless: it always returns true\n  private boolean ensureConsistent() {\n    long maxScoreSum = 0;\n    for (int i = 0; i < tailSize; ++i) {\n      assert tail[i].doc < doc;\n      maxScoreSum = Math.addExact(maxScoreSum, tail[i].maxScore);\n    }\n    assert maxScoreSum == tailMaxScore : maxScoreSum + \" \" + tailMaxScore;\n\n    maxScoreSum = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      assert w.doc == doc;\n      maxScoreSum = Math.addExact(maxScoreSum, w.maxScore);\n    }\n    assert maxScoreSum == leadMaxScore : maxScoreSum + \" \" + leadMaxScore;\n\n    for (DisiWrapper w : head) {\n      assert w.doc > doc;\n    }\n\n    assert minCompetitiveScore == 0 || tailMaxScore < minCompetitiveScore;\n\n    return true;\n  }\n\n","sourceOld":"  // returns a boolean so that it can be called from assert\n  // the return value is useless: it always returns true\n  private boolean ensureConsistent() {\n    long maxScoreSum = 0;\n    for (int i = 0; i < tailSize; ++i) {\n      assert tail[i].doc < doc;\n      maxScoreSum = Math.addExact(maxScoreSum, tail[i].maxScore);\n    }\n    assert maxScoreSum == tailMaxScore : maxScoreSum + \" \" + tailMaxScore;\n\n    maxScoreSum = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      assert w.doc == doc;\n      maxScoreSum = Math.addExact(maxScoreSum, w.maxScore);\n    }\n    assert maxScoreSum == leadMaxScore : maxScoreSum + \" \" + leadMaxScore;\n\n    for (DisiWrapper w : head) {\n      assert w.doc > doc;\n    }\n\n    assert tailSize == 0 || tailMaxScore < minCompetitiveScore;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f25eddf3c27255ac101c0ce6044684cfe24c785","date":1576772095,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#ensureConsistent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#ensureConsistent().mjava","sourceNew":"  // returns a boolean so that it can be called from assert\n  // the return value is useless: it always returns true\n  private boolean ensureConsistent() {\n    long maxScoreSum = 0;\n    for (int i = 0; i < tailSize; ++i) {\n      assert tail[i].doc < doc;\n      maxScoreSum = Math.addExact(maxScoreSum, tail[i].maxScore);\n    }\n    assert maxScoreSum == tailMaxScore : maxScoreSum + \" \" + tailMaxScore;\n\n    maxScoreSum = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      assert w.doc == doc;\n      maxScoreSum = Math.addExact(maxScoreSum, w.maxScore);\n    }\n    assert maxScoreSum == leadMaxScore : maxScoreSum + \" \" + leadMaxScore;\n\n    for (DisiWrapper w : head) {\n      assert w.doc > doc;\n    }\n\n    assert minCompetitiveScore == 0 || tailMaxScore < minCompetitiveScore;\n    assert doc <= upTo;\n\n    return true;\n  }\n\n","sourceOld":"  // returns a boolean so that it can be called from assert\n  // the return value is useless: it always returns true\n  private boolean ensureConsistent() {\n    long maxScoreSum = 0;\n    for (int i = 0; i < tailSize; ++i) {\n      assert tail[i].doc < doc;\n      maxScoreSum = Math.addExact(maxScoreSum, tail[i].maxScore);\n    }\n    assert maxScoreSum == tailMaxScore : maxScoreSum + \" \" + tailMaxScore;\n\n    maxScoreSum = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      assert w.doc == doc;\n      maxScoreSum = Math.addExact(maxScoreSum, w.maxScore);\n    }\n    assert maxScoreSum == leadMaxScore : maxScoreSum + \" \" + leadMaxScore;\n\n    for (DisiWrapper w : head) {\n      assert w.doc > doc;\n    }\n\n    assert minCompetitiveScore == 0 || tailMaxScore < minCompetitiveScore;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#ensureConsistent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#ensureConsistent().mjava","sourceNew":"  // returns a boolean so that it can be called from assert\n  // the return value is useless: it always returns true\n  private boolean ensureConsistent() {\n    long maxScoreSum = 0;\n    for (int i = 0; i < tailSize; ++i) {\n      assert tail[i].doc < doc;\n      maxScoreSum = Math.addExact(maxScoreSum, tail[i].maxScore);\n    }\n    assert maxScoreSum == tailMaxScore : maxScoreSum + \" \" + tailMaxScore;\n\n    maxScoreSum = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      assert w.doc == doc;\n      maxScoreSum = Math.addExact(maxScoreSum, w.maxScore);\n    }\n    assert maxScoreSum == leadMaxScore : maxScoreSum + \" \" + leadMaxScore;\n\n    for (DisiWrapper w : head) {\n      assert w.doc > doc;\n    }\n\n    assert minCompetitiveScore == 0 || tailMaxScore < minCompetitiveScore;\n    assert doc <= upTo;\n\n    return true;\n  }\n\n","sourceOld":"  // returns a boolean so that it can be called from assert\n  // the return value is useless: it always returns true\n  private boolean ensureConsistent() {\n    long maxScoreSum = 0;\n    for (int i = 0; i < tailSize; ++i) {\n      assert tail[i].doc < doc;\n      maxScoreSum = Math.addExact(maxScoreSum, tail[i].maxScore);\n    }\n    assert maxScoreSum == tailMaxScore : maxScoreSum + \" \" + tailMaxScore;\n\n    maxScoreSum = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      assert w.doc == doc;\n      maxScoreSum = Math.addExact(maxScoreSum, w.maxScore);\n    }\n    assert maxScoreSum == leadMaxScore : maxScoreSum + \" \" + leadMaxScore;\n\n    for (DisiWrapper w : head) {\n      assert w.doc > doc;\n    }\n\n    assert minCompetitiveScore == 0 || tailMaxScore < minCompetitiveScore;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f25eddf3c27255ac101c0ce6044684cfe24c785":["523cc6563c99a55527ef7993efc5413c6648852d"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["523cc6563c99a55527ef7993efc5413c6648852d","0f25eddf3c27255ac101c0ce6044684cfe24c785"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f25eddf3c27255ac101c0ce6044684cfe24c785"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"0f25eddf3c27255ac101c0ce6044684cfe24c785":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"523cc6563c99a55527ef7993efc5413c6648852d":["0f25eddf3c27255ac101c0ce6044684cfe24c785","4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}