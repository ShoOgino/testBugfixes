{"path":"lucene/src/java/org/apache/lucene/document/Field#setValue(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#setValue(String).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/Field#setValue(String).mjava","sourceNew":"  /** <p>Expert: change the value of this field.  This can\n   *  be used during indexing to re-use a single Field\n   *  instance to improve indexing speed by avoiding GC cost\n   *  of new'ing and reclaiming Field instances.  Typically\n   *  a single {@link Document} instance is re-used as\n   *  well.  This helps most on small documents.</p>\n   * \n   *  <p>Each Field instance should only be used once\n   *  within a single {@link Document} instance.  See <a\n   *  href=\"http://wiki.apache.org/lucene-java/ImproveIndexingSpeed\">ImproveIndexingSpeed</a>\n   *  for details.</p> */\n  public void setValue(String value) {\n    if (isBinary) {\n      throw new IllegalArgumentException(\"cannot set a String value on a binary field\");\n    }\n    fieldsData = value;\n  }\n\n","sourceOld":"  /** <p>Expert: change the value of this field.  This can\n   *  be used during indexing to re-use a single Field\n   *  instance to improve indexing speed by avoiding GC cost\n   *  of new'ing and reclaiming Field instances.  Typically\n   *  a single {@link Document} instance is re-used as\n   *  well.  This helps most on small documents.</p>\n   * \n   *  <p>Each Field instance should only be used once\n   *  within a single {@link Document} instance.  See <a\n   *  href=\"http://wiki.apache.org/lucene-java/ImproveIndexingSpeed\">ImproveIndexingSpeed</a>\n   *  for details.</p> */\n  public void setValue(String value) {\n    if (isBinary) {\n      throw new IllegalArgumentException(\"cannot set a String value on a binary field\");\n    }\n    fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#setValue(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#setValue(String).mjava","sourceNew":"  /**\n   * <p>\n   * Expert: change the value of this field. This can be used during indexing to\n   * re-use a single Field instance to improve indexing speed by avoiding GC\n   * cost of new'ing and reclaiming Field instances. Typically a single\n   * {@link Document} instance is re-used as well. This helps most on small\n   * documents.\n   * </p>\n   * \n   * <p>\n   * Each Field instance should only be used once within a single\n   * {@link Document} instance. See <a\n   * href=\"http://wiki.apache.org/lucene-java/ImproveIndexingSpeed\"\n   * >ImproveIndexingSpeed</a> for details.\n   * </p>\n   */\n  public void setValue(String value) {\n    if (isBinary()) {\n      throw new IllegalArgumentException(\n          \"cannot set a String value on a binary field\");\n    }\n    fieldsData = value;\n  }\n\n","sourceOld":"  /** <p>Expert: change the value of this field.  This can\n   *  be used during indexing to re-use a single Field\n   *  instance to improve indexing speed by avoiding GC cost\n   *  of new'ing and reclaiming Field instances.  Typically\n   *  a single {@link Document} instance is re-used as\n   *  well.  This helps most on small documents.</p>\n   * \n   *  <p>Each Field instance should only be used once\n   *  within a single {@link Document} instance.  See <a\n   *  href=\"http://wiki.apache.org/lucene-java/ImproveIndexingSpeed\">ImproveIndexingSpeed</a>\n   *  for details.</p> */\n  public void setValue(String value) {\n    if (isBinary) {\n      throw new IllegalArgumentException(\"cannot set a String value on a binary field\");\n    }\n    fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#setValue(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#setValue(String).mjava","sourceNew":"  /**\n   * <p>\n   * Expert: change the value of this field. This can be used during indexing to\n   * re-use a single Field instance to improve indexing speed by avoiding GC\n   * cost of new'ing and reclaiming Field instances. Typically a single\n   * {@link Document} instance is re-used as well. This helps most on small\n   * documents.\n   * </p>\n   * \n   * <p>\n   * Each Field instance should only be used once within a single\n   * {@link Document} instance. See <a\n   * href=\"http://wiki.apache.org/lucene-java/ImproveIndexingSpeed\"\n   * >ImproveIndexingSpeed</a> for details.\n   * </p>\n   */\n  public void setValue(String value) {\n    if (!(fieldsData instanceof String)) {\n      throw new IllegalArgumentException(\"cannot change value type from \" + fieldsData.getClass().getSimpleName() + \" to String\");\n    }\n    fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Expert: change the value of this field. This can be used during indexing to\n   * re-use a single Field instance to improve indexing speed by avoiding GC\n   * cost of new'ing and reclaiming Field instances. Typically a single\n   * {@link Document} instance is re-used as well. This helps most on small\n   * documents.\n   * </p>\n   * \n   * <p>\n   * Each Field instance should only be used once within a single\n   * {@link Document} instance. See <a\n   * href=\"http://wiki.apache.org/lucene-java/ImproveIndexingSpeed\"\n   * >ImproveIndexingSpeed</a> for details.\n   * </p>\n   */\n  public void setValue(String value) {\n    if (isBinary()) {\n      throw new IllegalArgumentException(\n          \"cannot set a String value on a binary field\");\n    }\n    fieldsData = value;\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#setValue(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#setValue(String).mjava","sourceNew":"  /**\n   * <p>\n   * Expert: change the value of this field. This can be used during indexing to\n   * re-use a single Field instance to improve indexing speed by avoiding GC\n   * cost of new'ing and reclaiming Field instances. Typically a single\n   * {@link Document} instance is re-used as well. This helps most on small\n   * documents.\n   * </p>\n   * \n   * <p>\n   * Each Field instance should only be used once within a single\n   * {@link Document} instance. See <a\n   * href=\"http://wiki.apache.org/lucene-java/ImproveIndexingSpeed\"\n   * >ImproveIndexingSpeed</a> for details.\n   * </p>\n   */\n  public void setValue(String value) {\n    if (!(fieldsData instanceof String)) {\n      throw new IllegalArgumentException(\"cannot change value type from \" + fieldsData.getClass().getSimpleName() + \" to String\");\n    }\n    fieldsData = value;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Expert: change the value of this field. This can be used during indexing to\n   * re-use a single Field instance to improve indexing speed by avoiding GC\n   * cost of new'ing and reclaiming Field instances. Typically a single\n   * {@link Document} instance is re-used as well. This helps most on small\n   * documents.\n   * </p>\n   * \n   * <p>\n   * Each Field instance should only be used once within a single\n   * {@link Document} instance. See <a\n   * href=\"http://wiki.apache.org/lucene-java/ImproveIndexingSpeed\"\n   * >ImproveIndexingSpeed</a> for details.\n   * </p>\n   */\n  public void setValue(String value) {\n    if (!(fieldsData instanceof String)) {\n      throw new IllegalArgumentException(\"cannot change value type from \" + fieldsData.getClass().getSimpleName() + \" to String\");\n    }\n    fieldsData = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["fa0f44f887719e97183771e977cfc4bfb485b766"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}