{"path":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finishAdd(int).mjava","commits":[{"id":"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7","date":1309190785,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finishAdd(int).mjava","pathOld":"/dev/null","sourceNew":"    private final void finishAdd(int docCount) throws IOException {\n      if (!started) {\n        minValue = maxValue = 0;\n      }\n      byte headerType = typeOrd;\n      if (typeOrd == PACKED) {\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          writePackedInts(docCount);\n          return; // done\n        } else {\n          headerType = FIXED_64;\n        }\n      }\n      initDataOut(headerType);\n      array.write(datOut, docCount);\n      assert datOut != null; \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finishAdd(int).mjava","pathOld":"/dev/null","sourceNew":"    private final void finishAdd(int docCount) throws IOException {\n      if (!started) {\n        minValue = maxValue = 0;\n      }\n      byte headerType = typeOrd;\n      if (typeOrd == PACKED) {\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          writePackedInts(docCount);\n          return; // done\n        } else {\n          headerType = FIXED_64;\n        }\n      }\n      initDataOut(headerType);\n      array.write(datOut, docCount);\n      assert datOut != null; \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finishAdd(int).mjava","pathOld":"/dev/null","sourceNew":"    private final void finishAdd(int docCount) throws IOException {\n      if (!started) {\n        minValue = maxValue = 0;\n      }\n      byte headerType = typeOrd;\n      if (typeOrd == PACKED) {\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          writePackedInts(docCount);\n          return; // done\n        } else {\n          headerType = FIXED_64;\n        }\n      }\n      initDataOut(headerType);\n      array.write(datOut, docCount);\n      assert datOut != null; \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finishAdd(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      final IndexOutput dataOut = getOrCreateDataOut();\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          dataOut.writeByte(PACKED);\n          writePackedInts(dataOut, docCount);\n          return; // done\n        } else {\n          dataOut.writeByte(FIXED_64);\n        }\n        writeData(dataOut);\n        writeZeros(docCount - (lastDocID + 1), dataOut);\n        success = true;\n      } finally {\n        resetPool();\n        if (success) {\n          IOUtils.close(dataOut);\n        } else {\n          IOUtils.closeWhileHandlingException(dataOut);\n        }\n      }\n    }\n\n","sourceOld":"    private final void finishAdd(int docCount) throws IOException {\n      if (!started) {\n        minValue = maxValue = 0;\n      }\n      byte headerType = typeOrd;\n      if (typeOrd == PACKED) {\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          writePackedInts(docCount);\n          return; // done\n        } else {\n          headerType = FIXED_64;\n        }\n      }\n      initDataOut(headerType);\n      array.write(datOut, docCount);\n      assert datOut != null; \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85eb75e0c0203e44dcf686f35876cf6080f3a671"]},"commit2Childs":{"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["85eb75e0c0203e44dcf686f35876cf6080f3a671","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}