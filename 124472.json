{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/SortedBytesMergeUtils#buildSlices(MergeState,DocValues[],MergeContext).mjava","commits":[{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/SortedBytesMergeUtils#buildSlices(MergeState,DocValues[],MergeContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/SortedBytesMergeUtils#buildSlices(MergeState,IndexDocValues[],MergeContext).mjava","sourceNew":"  static List<SortedSourceSlice> buildSlices(MergeState mergeState,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), mergeState, ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            mergeState, ctx.docToEntry);\n      }\n      createOrdMapping(mergeState, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","sourceOld":"  static List<SortedSourceSlice> buildSlices(MergeState mergeState,\n      IndexDocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), mergeState, ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            mergeState, ctx.docToEntry);\n      }\n      createOrdMapping(mergeState, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1263e37167e93fb2e178a37536df562455e7a587","date":1323545884,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(MergeState,DocValues[],MergeContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/SortedBytesMergeUtils#buildSlices(MergeState,DocValues[],MergeContext).mjava","sourceNew":"  public static List<SortedSourceSlice> buildSlices(MergeState mergeState,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), mergeState, ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            mergeState, ctx.docToEntry);\n      }\n      createOrdMapping(mergeState, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","sourceOld":"  static List<SortedSourceSlice> buildSlices(MergeState mergeState,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), mergeState, ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            mergeState, ctx.docToEntry);\n      }\n      createOrdMapping(mergeState, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1263e37167e93fb2e178a37536df562455e7a587":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1263e37167e93fb2e178a37536df562455e7a587":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["1263e37167e93fb2e178a37536df562455e7a587"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1263e37167e93fb2e178a37536df562455e7a587","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}