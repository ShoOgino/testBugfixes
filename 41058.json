{"path":"src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","commits":[{"id":"427a073cccde1c1b6612d63c06b1503a8edf43d9","date":1161831085,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = r.nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      if (validate) {\n\n      }\n      } // outer\n\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b77550c47735d804ddb8767848f5af9b02b88c84","date":1162245631,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","sourceNew":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = r.nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = r.nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      if (validate) {\n\n      }\n      } // outer\n\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a251547210ad8523f10c15c461496a2ad4bb3df4","date":1195837134,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","sourceNew":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = r.nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","sourceOld":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = r.nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n\n    return ret;\n  }\n\n","bugFix":["427a073cccde1c1b6612d63c06b1503a8edf43d9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","sourceNew":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = r.nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","sourceOld":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = r.nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","sourceNew":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = r.nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","sourceOld":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = r.nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"427a073cccde1c1b6612d63c06b1503a8edf43d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a251547210ad8523f10c15c461496a2ad4bb3df4":["b77550c47735d804ddb8767848f5af9b02b88c84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42607aa380c892dc1ec0ab26e86a575c28e13618":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"b77550c47735d804ddb8767848f5af9b02b88c84":["427a073cccde1c1b6612d63c06b1503a8edf43d9"]},"commit2Childs":{"427a073cccde1c1b6612d63c06b1503a8edf43d9":["b77550c47735d804ddb8767848f5af9b02b88c84"],"a251547210ad8523f10c15c461496a2ad4bb3df4":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["427a073cccde1c1b6612d63c06b1503a8edf43d9"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b77550c47735d804ddb8767848f5af9b02b88c84":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}