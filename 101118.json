{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52#decode(long[],int,long[],int,int).mjava","commits":[{"id":"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f","date":1345677220,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52#decode(long[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long block0 = blocks[blocksOffset++];\n        values[valuesOffset++] = block0 >>> 12;\n        final long block1 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block0 & 4095L) << 40) | (block1 >>> 24);\n        final long block2 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block1 & 16777215L) << 28) | (block2 >>> 36);\n        final long block3 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block2 & 68719476735L) << 16) | (block3 >>> 48);\n        final long block4 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block3 & 281474976710655L) << 4) | (block4 >>> 60);\n        values[valuesOffset++] = (block4 >>> 8) & 4503599627370495L;\n        final long block5 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block4 & 255L) << 44) | (block5 >>> 20);\n        final long block6 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block5 & 1048575L) << 32) | (block6 >>> 32);\n        final long block7 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block6 & 4294967295L) << 20) | (block7 >>> 44);\n        final long block8 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block7 & 17592186044415L) << 8) | (block8 >>> 56);\n        values[valuesOffset++] = (block8 >>> 4) & 4503599627370495L;\n        final long block9 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block8 & 15L) << 48) | (block9 >>> 16);\n        final long block10 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block9 & 65535L) << 36) | (block10 >>> 28);\n        final long block11 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block10 & 268435455L) << 24) | (block11 >>> 40);\n        final long block12 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block11 & 1099511627775L) << 12) | (block12 >>> 52);\n        values[valuesOffset++] = block12 & 4503599627370495L;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353f5909b00345d98d079a7db9a1bbe7485b1ea6","date":1345745476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52#decode(long[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52#decode(long[],int,long[],int,int).mjava","sourceNew":"    @Override\n    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long block0 = blocks[blocksOffset++];\n        values[valuesOffset++] = block0 >>> 12;\n        final long block1 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block0 & 4095L) << 40) | (block1 >>> 24);\n        final long block2 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block1 & 16777215L) << 28) | (block2 >>> 36);\n        final long block3 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block2 & 68719476735L) << 16) | (block3 >>> 48);\n        final long block4 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block3 & 281474976710655L) << 4) | (block4 >>> 60);\n        values[valuesOffset++] = (block4 >>> 8) & 4503599627370495L;\n        final long block5 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block4 & 255L) << 44) | (block5 >>> 20);\n        final long block6 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block5 & 1048575L) << 32) | (block6 >>> 32);\n        final long block7 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block6 & 4294967295L) << 20) | (block7 >>> 44);\n        final long block8 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block7 & 17592186044415L) << 8) | (block8 >>> 56);\n        values[valuesOffset++] = (block8 >>> 4) & 4503599627370495L;\n        final long block9 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block8 & 15L) << 48) | (block9 >>> 16);\n        final long block10 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block9 & 65535L) << 36) | (block10 >>> 28);\n        final long block11 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block10 & 268435455L) << 24) | (block11 >>> 40);\n        final long block12 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block11 & 1099511627775L) << 12) | (block12 >>> 52);\n        values[valuesOffset++] = block12 & 4503599627370495L;\n      }\n    }\n\n","sourceOld":"    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long block0 = blocks[blocksOffset++];\n        values[valuesOffset++] = block0 >>> 12;\n        final long block1 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block0 & 4095L) << 40) | (block1 >>> 24);\n        final long block2 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block1 & 16777215L) << 28) | (block2 >>> 36);\n        final long block3 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block2 & 68719476735L) << 16) | (block3 >>> 48);\n        final long block4 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block3 & 281474976710655L) << 4) | (block4 >>> 60);\n        values[valuesOffset++] = (block4 >>> 8) & 4503599627370495L;\n        final long block5 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block4 & 255L) << 44) | (block5 >>> 20);\n        final long block6 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block5 & 1048575L) << 32) | (block6 >>> 32);\n        final long block7 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block6 & 4294967295L) << 20) | (block7 >>> 44);\n        final long block8 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block7 & 17592186044415L) << 8) | (block8 >>> 56);\n        values[valuesOffset++] = (block8 >>> 4) & 4503599627370495L;\n        final long block9 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block8 & 15L) << 48) | (block9 >>> 16);\n        final long block10 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block9 & 65535L) << 36) | (block10 >>> 28);\n        final long block11 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block10 & 268435455L) << 24) | (block11 >>> 40);\n        final long block12 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block11 & 1099511627775L) << 12) | (block12 >>> 52);\n        values[valuesOffset++] = block12 & 4503599627370495L;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52#decode(long[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long block0 = blocks[blocksOffset++];\n        values[valuesOffset++] = block0 >>> 12;\n        final long block1 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block0 & 4095L) << 40) | (block1 >>> 24);\n        final long block2 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block1 & 16777215L) << 28) | (block2 >>> 36);\n        final long block3 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block2 & 68719476735L) << 16) | (block3 >>> 48);\n        final long block4 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block3 & 281474976710655L) << 4) | (block4 >>> 60);\n        values[valuesOffset++] = (block4 >>> 8) & 4503599627370495L;\n        final long block5 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block4 & 255L) << 44) | (block5 >>> 20);\n        final long block6 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block5 & 1048575L) << 32) | (block6 >>> 32);\n        final long block7 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block6 & 4294967295L) << 20) | (block7 >>> 44);\n        final long block8 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block7 & 17592186044415L) << 8) | (block8 >>> 56);\n        values[valuesOffset++] = (block8 >>> 4) & 4503599627370495L;\n        final long block9 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block8 & 15L) << 48) | (block9 >>> 16);\n        final long block10 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block9 & 65535L) << 36) | (block10 >>> 28);\n        final long block11 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block10 & 268435455L) << 24) | (block11 >>> 40);\n        final long block12 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block11 & 1099511627775L) << 12) | (block12 >>> 52);\n        values[valuesOffset++] = block12 & 4503599627370495L;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d488e3fd72dfc95fa76fcb24f58e90c343323c","date":1346235723,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52#decode(long[],int,long[],int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long block0 = blocks[blocksOffset++];\n        values[valuesOffset++] = block0 >>> 12;\n        final long block1 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block0 & 4095L) << 40) | (block1 >>> 24);\n        final long block2 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block1 & 16777215L) << 28) | (block2 >>> 36);\n        final long block3 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block2 & 68719476735L) << 16) | (block3 >>> 48);\n        final long block4 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block3 & 281474976710655L) << 4) | (block4 >>> 60);\n        values[valuesOffset++] = (block4 >>> 8) & 4503599627370495L;\n        final long block5 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block4 & 255L) << 44) | (block5 >>> 20);\n        final long block6 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block5 & 1048575L) << 32) | (block6 >>> 32);\n        final long block7 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block6 & 4294967295L) << 20) | (block7 >>> 44);\n        final long block8 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block7 & 17592186044415L) << 8) | (block8 >>> 56);\n        values[valuesOffset++] = (block8 >>> 4) & 4503599627370495L;\n        final long block9 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block8 & 15L) << 48) | (block9 >>> 16);\n        final long block10 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block9 & 65535L) << 36) | (block10 >>> 28);\n        final long block11 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block10 & 268435455L) << 24) | (block11 >>> 40);\n        final long block12 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block11 & 1099511627775L) << 12) | (block12 >>> 52);\n        values[valuesOffset++] = block12 & 4503599627370495L;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52#decode(long[],int,long[],int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long block0 = blocks[blocksOffset++];\n        values[valuesOffset++] = block0 >>> 12;\n        final long block1 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block0 & 4095L) << 40) | (block1 >>> 24);\n        final long block2 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block1 & 16777215L) << 28) | (block2 >>> 36);\n        final long block3 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block2 & 68719476735L) << 16) | (block3 >>> 48);\n        final long block4 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block3 & 281474976710655L) << 4) | (block4 >>> 60);\n        values[valuesOffset++] = (block4 >>> 8) & 4503599627370495L;\n        final long block5 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block4 & 255L) << 44) | (block5 >>> 20);\n        final long block6 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block5 & 1048575L) << 32) | (block6 >>> 32);\n        final long block7 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block6 & 4294967295L) << 20) | (block7 >>> 44);\n        final long block8 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block7 & 17592186044415L) << 8) | (block8 >>> 56);\n        values[valuesOffset++] = (block8 >>> 4) & 4503599627370495L;\n        final long block9 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block8 & 15L) << 48) | (block9 >>> 16);\n        final long block10 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block9 & 65535L) << 36) | (block10 >>> 28);\n        final long block11 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block10 & 268435455L) << 24) | (block11 >>> 40);\n        final long block12 = blocks[blocksOffset++];\n        values[valuesOffset++] = ((block11 & 1099511627775L) << 12) | (block12 >>> 52);\n        values[valuesOffset++] = block12 & 4503599627370495L;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["001b25b42373b22a52f399dbf072f1224632e8e6","58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58d488e3fd72dfc95fa76fcb24f58e90c343323c"]},"commit2Childs":{"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["001b25b42373b22a52f399dbf072f1224632e8e6","58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"001b25b42373b22a52f399dbf072f1224632e8e6":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}