{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#createMethod(SolrRequest).mjava","sourceNew":"  protected HttpRequestBase createMethod(final SolrRequest request) throws IOException, SolrServerException {\n    HttpRequestBase method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n    \n    int tries = maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new HttpGet( baseUrl + path + ClientUtils.toQueryString( wparams, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod() ) {\n\n            String url = baseUrl + path;\n            boolean hasNullStreamName = false;\n            if (streams != null) {\n              for (ContentStream cs : streams) {\n                if (cs.getName() == null) {\n                  hasNullStreamName = true;\n                  break;\n                }\n              }\n            }\n            boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n              || ( streams != null && streams.size() > 1 )) && !hasNullStreamName;\n\n            LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n            if (streams == null || isMultipart) {\n              // send server list and request list as query string params\n              ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n              queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n              String fullQueryUrl = url + ClientUtils.toQueryString( queryParams, false );\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n              if (!isMultipart) {\n                postOrPut.addHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<FormBodyPart> parts = new LinkedList<>();\n              Iterator<String> iter = wparams.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = wparams.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (isMultipart) {\n                      parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n                    } else {\n                      postOrPutParams.add(new BasicNameValuePair(p, v));\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart && streams != null) {\n                for (ContentStream content : streams) {\n                  String contentType = content.getContentType();\n                  if(contentType==null) {\n                    contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n                  }\n                  String name = content.getName();\n                  if(name==null) {\n                    name = \"\";\n                  }\n                  parts.add(new FormBodyPart(name, \n                       new InputStreamBody(\n                           content.getStream(), \n                           contentType, \n                           content.getName())));\n                }\n              }\n              \n              if (parts.size() > 0) {\n                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n                for(FormBodyPart p: parts) {\n                  entity.addPart(p);\n                }\n                postOrPut.setEntity(entity);\n              } else {\n                //not using multipart\n                postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n              }\n\n              method = postOrPut;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(wparams, false);\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(url + pstr) : new HttpPut(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                  \n                });\n              } else {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                });\n              }\n              method = postOrPut;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if (tries < 1) {\n            throw r;\n          }\n        }\n      }\n    } catch (IOException ex) {\n      throw new SolrServerException(\"error reading streams\", ex);\n    }\n    \n    return method;\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request) throws IOException, SolrServerException {\n    HttpRequestBase method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n    \n    int tries = maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new HttpGet( baseUrl + path + ClientUtils.toQueryString( wparams, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod() ) {\n\n            String url = baseUrl + path;\n            boolean hasNullStreamName = false;\n            if (streams != null) {\n              for (ContentStream cs : streams) {\n                if (cs.getName() == null) {\n                  hasNullStreamName = true;\n                  break;\n                }\n              }\n            }\n            boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n              || ( streams != null && streams.size() > 1 )) && !hasNullStreamName;\n\n            LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n            if (streams == null || isMultipart) {\n              // send server list and request list as query string params\n              ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n              queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n              String fullQueryUrl = url + ClientUtils.toQueryString( queryParams, false );\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n              if (!isMultipart) {\n                postOrPut.addHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<FormBodyPart> parts = new LinkedList<>();\n              Iterator<String> iter = wparams.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = wparams.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (isMultipart) {\n                      parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n                    } else {\n                      postOrPutParams.add(new BasicNameValuePair(p, v));\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart && streams != null) {\n                for (ContentStream content : streams) {\n                  String contentType = content.getContentType();\n                  if(contentType==null) {\n                    contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n                  }\n                  String name = content.getName();\n                  if(name==null) {\n                    name = \"\";\n                  }\n                  parts.add(new FormBodyPart(name, \n                       new InputStreamBody(\n                           content.getStream(), \n                           contentType, \n                           content.getName())));\n                }\n              }\n              \n              if (parts.size() > 0) {\n                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n                for(FormBodyPart p: parts) {\n                  entity.addPart(p);\n                }\n                postOrPut.setEntity(entity);\n              } else {\n                //not using multipart\n                postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n              }\n\n              method = postOrPut;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(wparams, false);\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(url + pstr) : new HttpPut(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                  \n                });\n              } else {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                });\n              }\n              method = postOrPut;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if (tries < 1) {\n            throw r;\n          }\n        }\n      }\n    } catch (IOException ex) {\n      throw new SolrServerException(\"error reading streams\", ex);\n    }\n    \n    return method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f","date":1425902085,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest).mjava","sourceNew":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n    HttpRequestBase method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n    \n    int tries = maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new HttpGet(basePath + path + ClientUtils.toQueryString(wparams, false));\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod() ) {\n\n            String url = basePath + path;\n            boolean hasNullStreamName = false;\n            if (streams != null) {\n              for (ContentStream cs : streams) {\n                if (cs.getName() == null) {\n                  hasNullStreamName = true;\n                  break;\n                }\n              }\n            }\n            boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n              || ( streams != null && streams.size() > 1 )) && !hasNullStreamName;\n\n            LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n            if (streams == null || isMultipart) {\n              // send server list and request list as query string params\n              ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n              queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n              String fullQueryUrl = url + ClientUtils.toQueryString( queryParams, false );\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n              if (!isMultipart) {\n                postOrPut.addHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<FormBodyPart> parts = new LinkedList<>();\n              Iterator<String> iter = wparams.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = wparams.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (isMultipart) {\n                      parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n                    } else {\n                      postOrPutParams.add(new BasicNameValuePair(p, v));\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart && streams != null) {\n                for (ContentStream content : streams) {\n                  String contentType = content.getContentType();\n                  if(contentType==null) {\n                    contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n                  }\n                  String name = content.getName();\n                  if(name==null) {\n                    name = \"\";\n                  }\n                  parts.add(new FormBodyPart(name, \n                       new InputStreamBody(\n                           content.getStream(), \n                           contentType, \n                           content.getName())));\n                }\n              }\n              \n              if (parts.size() > 0) {\n                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n                for(FormBodyPart p: parts) {\n                  entity.addPart(p);\n                }\n                postOrPut.setEntity(entity);\n              } else {\n                //not using multipart\n                postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n              }\n\n              method = postOrPut;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(wparams, false);\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(url + pstr) : new HttpPut(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                  \n                });\n              } else {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                });\n              }\n              method = postOrPut;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if (tries < 1) {\n            throw r;\n          }\n        }\n      }\n    } catch (IOException ex) {\n      throw new SolrServerException(\"error reading streams\", ex);\n    }\n    \n    return method;\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request) throws IOException, SolrServerException {\n    HttpRequestBase method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n    \n    int tries = maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new HttpGet( baseUrl + path + ClientUtils.toQueryString( wparams, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod() ) {\n\n            String url = baseUrl + path;\n            boolean hasNullStreamName = false;\n            if (streams != null) {\n              for (ContentStream cs : streams) {\n                if (cs.getName() == null) {\n                  hasNullStreamName = true;\n                  break;\n                }\n              }\n            }\n            boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n              || ( streams != null && streams.size() > 1 )) && !hasNullStreamName;\n\n            LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n            if (streams == null || isMultipart) {\n              // send server list and request list as query string params\n              ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n              queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n              String fullQueryUrl = url + ClientUtils.toQueryString( queryParams, false );\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n              if (!isMultipart) {\n                postOrPut.addHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<FormBodyPart> parts = new LinkedList<>();\n              Iterator<String> iter = wparams.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = wparams.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (isMultipart) {\n                      parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n                    } else {\n                      postOrPutParams.add(new BasicNameValuePair(p, v));\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart && streams != null) {\n                for (ContentStream content : streams) {\n                  String contentType = content.getContentType();\n                  if(contentType==null) {\n                    contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n                  }\n                  String name = content.getName();\n                  if(name==null) {\n                    name = \"\";\n                  }\n                  parts.add(new FormBodyPart(name, \n                       new InputStreamBody(\n                           content.getStream(), \n                           contentType, \n                           content.getName())));\n                }\n              }\n              \n              if (parts.size() > 0) {\n                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n                for(FormBodyPart p: parts) {\n                  entity.addPart(p);\n                }\n                postOrPut.setEntity(entity);\n              } else {\n                //not using multipart\n                postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n              }\n\n              method = postOrPut;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(wparams, false);\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(url + pstr) : new HttpPut(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                  \n                });\n              } else {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                });\n              }\n              method = postOrPut;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if (tries < 1) {\n            throw r;\n          }\n        }\n      }\n    } catch (IOException ex) {\n      throw new SolrServerException(\"error reading streams\", ex);\n    }\n    \n    return method;\n  }\n\n","bugFix":null,"bugIntro":["3022960bd0a67a6f828074db6d078b29b254d1f5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest).mjava","sourceNew":null,"sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request) throws IOException, SolrServerException {\n    HttpRequestBase method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n    \n    int tries = maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new HttpGet( baseUrl + path + ClientUtils.toQueryString( wparams, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod() ) {\n\n            String url = baseUrl + path;\n            boolean hasNullStreamName = false;\n            if (streams != null) {\n              for (ContentStream cs : streams) {\n                if (cs.getName() == null) {\n                  hasNullStreamName = true;\n                  break;\n                }\n              }\n            }\n            boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n              || ( streams != null && streams.size() > 1 )) && !hasNullStreamName;\n\n            LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n            if (streams == null || isMultipart) {\n              // send server list and request list as query string params\n              ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n              queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n              String fullQueryUrl = url + ClientUtils.toQueryString( queryParams, false );\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n              if (!isMultipart) {\n                postOrPut.addHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<FormBodyPart> parts = new LinkedList<>();\n              Iterator<String> iter = wparams.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = wparams.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (isMultipart) {\n                      parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n                    } else {\n                      postOrPutParams.add(new BasicNameValuePair(p, v));\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart && streams != null) {\n                for (ContentStream content : streams) {\n                  String contentType = content.getContentType();\n                  if(contentType==null) {\n                    contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n                  }\n                  String name = content.getName();\n                  if(name==null) {\n                    name = \"\";\n                  }\n                  parts.add(new FormBodyPart(name, \n                       new InputStreamBody(\n                           content.getStream(), \n                           contentType, \n                           content.getName())));\n                }\n              }\n              \n              if (parts.size() > 0) {\n                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n                for(FormBodyPart p: parts) {\n                  entity.addPart(p);\n                }\n                postOrPut.setEntity(entity);\n              } else {\n                //not using multipart\n                postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n              }\n\n              method = postOrPut;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(wparams, false);\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(url + pstr) : new HttpPut(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                  \n                });\n              } else {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                });\n              }\n              method = postOrPut;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if (tries < 1) {\n            throw r;\n          }\n        }\n      }\n    } catch (IOException ex) {\n      throw new SolrServerException(\"error reading streams\", ex);\n    }\n    \n    return method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"],"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"],"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}