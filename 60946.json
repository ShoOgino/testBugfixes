{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String],boolean).mjava","commits":[{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files, boolean useCompoundFile) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        if (useCompoundFile) {\n          files.add(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          files.add(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)); \n          assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION)); \n          return;\n        } else {\n          switch (fieldInfo.getDocValues()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_STRAIGHT:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            break;\n        \n          default:\n            assert false;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files, boolean useCompoundFile) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        if (useCompoundFile) {\n          files.add(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          files.add(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)); \n          assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION)); \n          return;\n        } else {\n          switch (fieldInfo.getDocValues()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_STRAIGHT:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            break;\n        \n          default:\n            assert false;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files, boolean useCompoundFile) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        if (useCompoundFile) {\n          files.add(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          files.add(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)); \n          assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION)); \n          return;\n        } else {\n          switch (fieldInfo.getDocValues()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_STRAIGHT:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            break;\n        \n          default:\n            assert false;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37f149c99eae8edb6c2f44fda36f194e0e345565","date":1317419618,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#files(Directory,SegmentInfo,int,Set[String],boolean).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId, fieldInfo.number);\n        switch (fieldInfo.getDocValues()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_STRAIGHT:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            break;\n        \n          default:\n            assert false;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public static void files(Directory dir, SegmentInfo segmentInfo, int codecId,\n      Set<String> files, boolean useCompoundFile) throws IOException {\n    FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == codecId && fieldInfo.hasDocValues()) {\n        String filename = docValuesId(segmentInfo.name, codecId,\n            fieldInfo.number);\n        if (useCompoundFile) {\n          files.add(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          files.add(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n          assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION)); \n          assert dir.fileExists(IndexFileNames.segmentFileName(segmentInfo.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION)); \n          return;\n        } else {\n          switch (fieldInfo.getDocValues()) {\n          case BYTES_FIXED_DEREF:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_STRAIGHT:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.INDEX_EXTENSION));\n            // until here all types use an index\n          case BYTES_FIXED_STRAIGHT:\n          case FLOAT_32:\n          case FLOAT_64:\n          case VAR_INTS:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FIXED_INTS_8:\n            files.add(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            assert dir.fileExists(IndexFileNames.segmentFileName(filename, \"\",\n                Writer.DATA_EXTENSION));\n            break;\n        \n          default:\n            assert false;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc0b8069918917b33f361011899a1af0cdd2d462"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc0b8069918917b33f361011899a1af0cdd2d462"],"37f149c99eae8edb6c2f44fda36f194e0e345565":["bc0b8069918917b33f361011899a1af0cdd2d462"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc0b8069918917b33f361011899a1af0cdd2d462":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["37f149c99eae8edb6c2f44fda36f194e0e345565"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","bc0b8069918917b33f361011899a1af0cdd2d462"],"37f149c99eae8edb6c2f44fda36f194e0e345565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc0b8069918917b33f361011899a1af0cdd2d462":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","37f149c99eae8edb6c2f44fda36f194e0e345565"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}