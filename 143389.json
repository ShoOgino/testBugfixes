{"path":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param collection\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param collection\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param collection\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f16d28cc015e89676eb4465f05e003f430057587","date":1296442780,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["f16d28cc015e89676eb4465f05e003f430057587"],"f16d28cc015e89676eb4465f05e003f430057587":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c26f00b574427b55127e869b935845554afde1fa":["f16d28cc015e89676eb4465f05e003f430057587","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","f16d28cc015e89676eb4465f05e003f430057587"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f16d28cc015e89676eb4465f05e003f430057587"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f16d28cc015e89676eb4465f05e003f430057587"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["f16d28cc015e89676eb4465f05e003f430057587","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"f16d28cc015e89676eb4465f05e003f430057587":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}