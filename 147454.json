{"path":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#finishTerm(TermStats).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    // TODO: -- wasteful we are counting this in two places?\n    assert stats.docFreq > 0;\n    assert stats.docFreq == df;\n\n    final IntIndexOutput.Index docIndexCopy = docOut.index();\n    docIndexCopy.copyFrom(docIndex, false);\n\n    final IntIndexOutput.Index freqIndexCopy;\n    final IntIndexOutput.Index posIndexCopy;\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      freqIndexCopy = freqOut.index();\n      freqIndexCopy.copyFrom(freqIndex, false);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        posIndexCopy = posOut.index();\n        posIndexCopy.copyFrom(posIndex, false);\n      } else {\n        posIndexCopy = null;\n      }\n    } else {\n      freqIndexCopy = null;\n      posIndexCopy = null;\n    }\n\n    final long skipFP;\n    if (df >= skipMinimum) {\n      skipFP = skipOut.getFilePointer();\n      //System.out.println(\"  skipFP=\" + skipFP);\n      skipListWriter.writeSkip(skipOut);\n      //System.out.println(\"    numBytes=\" + (skipOut.getFilePointer()-skipFP));\n    } else {\n      skipFP = -1;\n    }\n\n    lastDocID = 0;\n    df = 0;\n\n    pendingTerms.add(new PendingTerm(docIndexCopy,\n                                     freqIndexCopy,\n                                     posIndexCopy,\n                                     payloadStart,\n                                     skipFP));\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    // TODO: -- wasteful we are counting this in two places?\n    assert stats.docFreq > 0;\n    assert stats.docFreq == df;\n\n    final IntIndexOutput.Index docIndexCopy = docOut.index();\n    docIndexCopy.copyFrom(docIndex, false);\n\n    final IntIndexOutput.Index freqIndexCopy;\n    final IntIndexOutput.Index posIndexCopy;\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      freqIndexCopy = freqOut.index();\n      freqIndexCopy.copyFrom(freqIndex, false);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        posIndexCopy = posOut.index();\n        posIndexCopy.copyFrom(posIndex, false);\n      } else {\n        posIndexCopy = null;\n      }\n    } else {\n      freqIndexCopy = null;\n      posIndexCopy = null;\n    }\n\n    final long skipFP;\n    if (df >= skipMinimum) {\n      skipFP = skipOut.getFilePointer();\n      //System.out.println(\"  skipFP=\" + skipFP);\n      skipListWriter.writeSkip(skipOut);\n      //System.out.println(\"    numBytes=\" + (skipOut.getFilePointer()-skipFP));\n    } else {\n      skipFP = -1;\n    }\n\n    lastDocID = 0;\n    df = 0;\n\n    pendingTerms.add(new PendingTerm(docIndexCopy,\n                                     freqIndexCopy,\n                                     posIndexCopy,\n                                     payloadStart,\n                                     skipFP));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    // TODO: -- wasteful we are counting this in two places?\n    assert stats.docFreq > 0;\n    assert stats.docFreq == df;\n\n    final IntIndexOutput.Index docIndexCopy = docOut.index();\n    docIndexCopy.copyFrom(docIndex, false);\n\n    final IntIndexOutput.Index freqIndexCopy;\n    final IntIndexOutput.Index posIndexCopy;\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      freqIndexCopy = freqOut.index();\n      freqIndexCopy.copyFrom(freqIndex, false);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        posIndexCopy = posOut.index();\n        posIndexCopy.copyFrom(posIndex, false);\n      } else {\n        posIndexCopy = null;\n      }\n    } else {\n      freqIndexCopy = null;\n      posIndexCopy = null;\n    }\n\n    final long skipFP;\n    if (df >= skipMinimum) {\n      skipFP = skipOut.getFilePointer();\n      //System.out.println(\"  skipFP=\" + skipFP);\n      skipListWriter.writeSkip(skipOut);\n      //System.out.println(\"    numBytes=\" + (skipOut.getFilePointer()-skipFP));\n    } else {\n      skipFP = -1;\n    }\n\n    lastDocID = 0;\n    df = 0;\n\n    pendingTerms.add(new PendingTerm(docIndexCopy,\n                                     freqIndexCopy,\n                                     posIndexCopy,\n                                     payloadStart,\n                                     skipFP));\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    // TODO: -- wasteful we are counting this in two places?\n    assert stats.docFreq > 0;\n    assert stats.docFreq == df;\n\n    final IntIndexOutput.Index docIndexCopy = docOut.index();\n    docIndexCopy.copyFrom(docIndex, false);\n\n    final IntIndexOutput.Index freqIndexCopy;\n    final IntIndexOutput.Index posIndexCopy;\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      freqIndexCopy = freqOut.index();\n      freqIndexCopy.copyFrom(freqIndex, false);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        posIndexCopy = posOut.index();\n        posIndexCopy.copyFrom(posIndex, false);\n      } else {\n        posIndexCopy = null;\n      }\n    } else {\n      freqIndexCopy = null;\n      posIndexCopy = null;\n    }\n\n    final long skipFP;\n    if (df >= skipMinimum) {\n      skipFP = skipOut.getFilePointer();\n      //System.out.println(\"  skipFP=\" + skipFP);\n      skipListWriter.writeSkip(skipOut);\n      //System.out.println(\"    numBytes=\" + (skipOut.getFilePointer()-skipFP));\n    } else {\n      skipFP = -1;\n    }\n\n    lastDocID = 0;\n    df = 0;\n\n    pendingTerms.add(new PendingTerm(docIndexCopy,\n                                     freqIndexCopy,\n                                     posIndexCopy,\n                                     payloadStart,\n                                     skipFP));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}