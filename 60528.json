{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/BugfixDeflater_JDK8252739#detectBuggyJDK().mjava","commits":[{"id":"0830ac90eb1444b953b84ce674e347f2601674f9","date":1599145226,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/BugfixDeflater_JDK8252739#detectBuggyJDK().mjava","pathOld":"/dev/null","sourceNew":"  private static boolean detectBuggyJDK() {\r\n    final byte[] testData = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };\r\n    final byte[] compressed = new byte[32]; // way enough space\r\n    final Deflater deflater = new Deflater(6, true);\r\n    int compressedSize;\r\n    try {\r\n      deflater.reset();\r\n      deflater.setDictionary(testData, 4, 4);\r\n      deflater.setInput(testData);\r\n      deflater.finish();\r\n      compressedSize = deflater.deflate(compressed, 0, compressed.length, Deflater.FULL_FLUSH);\r\n    } finally {\r\n      deflater.end();\r\n    }\r\n    \r\n    // in nowrap mode we need extra 0-byte as padding, add explicit:\r\n    compressed[compressedSize] = 0;\r\n    compressedSize++;\r\n    \r\n    final Inflater inflater = new Inflater(true);\r\n    final byte[] restored = new byte[testData.length];\r\n    try {\r\n      inflater.reset();\r\n      inflater.setDictionary(testData, 4, 4);\r\n      inflater.setInput(compressed, 0, compressedSize);\r\n      final int restoredLength = inflater.inflate(restored);\r\n      if (restoredLength != testData.length) {\r\n        return true;\r\n      }\r\n    } catch (DataFormatException e) {\r\n      return true;\r\n    } catch(RuntimeException e) {\r\n      return true;\r\n    } finally {\r\n      inflater.end();\r\n    }\r\n\r\n    if (Arrays.equals(testData, restored) == false) {\r\n      return true;\r\n    }\r\n    \r\n    // all fine\r\n    return false;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed895147bd2a42a346cf4711e35fbe452fc1df6f","date":1599729179,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/BugfixDeflater_JDK8252739#detectBuggyJDK().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/BugfixDeflater_JDK8252739#detectBuggyJDK().mjava","sourceNew":"  @SuppressForbidden(reason = \"Detector for the bug, so it must call buggy method\")\r\n  private static boolean detectBuggyJDK() {\r\n    final byte[] testData = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };\r\n    final byte[] compressed = new byte[32]; // way enough space\r\n    final Deflater deflater = new Deflater(6, true);\r\n    int compressedSize;\r\n    try {\r\n      deflater.reset();\r\n      deflater.setDictionary(testData, 4, 4);\r\n      deflater.setInput(testData);\r\n      deflater.finish();\r\n      compressedSize = deflater.deflate(compressed, 0, compressed.length, Deflater.FULL_FLUSH);\r\n    } finally {\r\n      deflater.end();\r\n    }\r\n    \r\n    // in nowrap mode we need extra 0-byte as padding, add explicit:\r\n    compressed[compressedSize] = 0;\r\n    compressedSize++;\r\n    \r\n    final Inflater inflater = new Inflater(true);\r\n    final byte[] restored = new byte[testData.length];\r\n    try {\r\n      inflater.reset();\r\n      inflater.setDictionary(testData, 4, 4);\r\n      inflater.setInput(compressed, 0, compressedSize);\r\n      final int restoredLength = inflater.inflate(restored);\r\n      if (restoredLength != testData.length) {\r\n        return true;\r\n      }\r\n    } catch (DataFormatException e) {\r\n      return true;\r\n    } catch(RuntimeException e) {\r\n      return true;\r\n    } finally {\r\n      inflater.end();\r\n    }\r\n\r\n    if (Arrays.equals(testData, restored) == false) {\r\n      return true;\r\n    }\r\n    \r\n    // all fine\r\n    return false;\r\n  }\r\n\n","sourceOld":"  private static boolean detectBuggyJDK() {\r\n    final byte[] testData = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };\r\n    final byte[] compressed = new byte[32]; // way enough space\r\n    final Deflater deflater = new Deflater(6, true);\r\n    int compressedSize;\r\n    try {\r\n      deflater.reset();\r\n      deflater.setDictionary(testData, 4, 4);\r\n      deflater.setInput(testData);\r\n      deflater.finish();\r\n      compressedSize = deflater.deflate(compressed, 0, compressed.length, Deflater.FULL_FLUSH);\r\n    } finally {\r\n      deflater.end();\r\n    }\r\n    \r\n    // in nowrap mode we need extra 0-byte as padding, add explicit:\r\n    compressed[compressedSize] = 0;\r\n    compressedSize++;\r\n    \r\n    final Inflater inflater = new Inflater(true);\r\n    final byte[] restored = new byte[testData.length];\r\n    try {\r\n      inflater.reset();\r\n      inflater.setDictionary(testData, 4, 4);\r\n      inflater.setInput(compressed, 0, compressedSize);\r\n      final int restoredLength = inflater.inflate(restored);\r\n      if (restoredLength != testData.length) {\r\n        return true;\r\n      }\r\n    } catch (DataFormatException e) {\r\n      return true;\r\n    } catch(RuntimeException e) {\r\n      return true;\r\n    } finally {\r\n      inflater.end();\r\n    }\r\n\r\n    if (Arrays.equals(testData, restored) == false) {\r\n      return true;\r\n    }\r\n    \r\n    // all fine\r\n    return false;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0830ac90eb1444b953b84ce674e347f2601674f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed895147bd2a42a346cf4711e35fbe452fc1df6f"],"ed895147bd2a42a346cf4711e35fbe452fc1df6f":["0830ac90eb1444b953b84ce674e347f2601674f9"]},"commit2Childs":{"0830ac90eb1444b953b84ce674e347f2601674f9":["ed895147bd2a42a346cf4711e35fbe452fc1df6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0830ac90eb1444b953b84ce674e347f2601674f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ed895147bd2a42a346cf4711e35fbe452fc1df6f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}