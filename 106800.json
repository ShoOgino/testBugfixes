{"path":"src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(\"sort\");\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation\n      String fl = sreq.params.get(\"fl\");\n      if (fl != null) {\n       sreq.params.set(\"fl\", fl+','+uniqueField.getName());\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(\"ids\", StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["52c7a21951a44948544c782d645588d404cace61","a63520843c1d9af055af89fbaeb67eae848f28ae","a63520843c1d9af055af89fbaeb67eae848f28ae","a63520843c1d9af055af89fbaeb67eae848f28ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6c6e4e06160d2ad231072e8743988a623ab14c9","date":1213500516,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","sourceNew":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n       sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","sourceOld":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(\"sort\");\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation\n      String fl = sreq.params.get(\"fl\");\n      if (fl != null) {\n       sreq.params.set(\"fl\", fl+','+uniqueField.getName());\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(\"ids\", StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["52c7a21951a44948544c782d645588d404cace61","a63520843c1d9af055af89fbaeb67eae848f28ae","a63520843c1d9af055af89fbaeb67eae848f28ae","a63520843c1d9af055af89fbaeb67eae848f28ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"52c7a21951a44948544c782d645588d404cace61","date":1259040420,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","sourceNew":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation.\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","sourceOld":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n       sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","bugFix":["a6c6e4e06160d2ad231072e8743988a623ab14c9","5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"bugIntro":["a63520843c1d9af055af89fbaeb67eae848f28ae","a63520843c1d9af055af89fbaeb67eae848f28ae","a63520843c1d9af055af89fbaeb67eae848f28ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","sourceNew":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation.\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","sourceOld":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation.\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a6c6e4e06160d2ad231072e8743988a623ab14c9":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["52c7a21951a44948544c782d645588d404cace61"],"52c7a21951a44948544c782d645588d404cace61":["a6c6e4e06160d2ad231072e8743988a623ab14c9"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a6c6e4e06160d2ad231072e8743988a623ab14c9":["52c7a21951a44948544c782d645588d404cace61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["a6c6e4e06160d2ad231072e8743988a623ab14c9"],"52c7a21951a44948544c782d645588d404cace61":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}