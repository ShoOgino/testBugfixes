{"path":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#bits(IndexReader).mjava","commits":[{"id":"175da89dff77515cdda7604b3c6cf6de96d4ac23","date":1143444217,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#bits(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"\t/**\r\n\t * Returns the a BitSet representing the Boolean composition\r\n\t * of the filters that have been added.\r\n\t */\r\n\t\r\n\tpublic BitSet bits(IndexReader reader) throws IOException\r\n\t{\r\n\t\t//create a new bitSet\r\n\t\tBitSet returnBits = null;\r\n\t\t\r\n\t\t//SHOULD filters\r\n\t\tif (shouldFilters!=null)\r\n\t\t{\r\n\t\t\treturnBits = ((Filter)shouldFilters.get(0)).bits(reader);\r\n\t\t\tif (shouldFilters.size() > 1)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tfor (int i = 1; i < shouldFilters.size(); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits.or(((Filter)shouldFilters.get(i)).bits(reader));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//NOT filters\r\n\t\tif (notFilters!=null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < notFilters.size(); i++)\r\n\t\t\t{\r\n\t\t\t\tBitSet notBits=((Filter)notFilters.get(i)).bits(reader);\r\n\t\t\t\tif(returnBits==null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits=notBits;\r\n\t\t\t\t\treturnBits.flip(0,reader.maxDoc());\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits.andNot(notBits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//MUST filters\r\n\t\tif (mustFilters!=null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < mustFilters.size(); i++)\r\n\t\t\t{\r\n\t\t\t\tBitSet mustBits=((Filter)mustFilters.get(i)).bits(reader);\r\n\t\t\t\tif(returnBits==null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits=mustBits;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits.and(mustBits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(returnBits==null)\r\n\t\t{\r\n\t\t\treturnBits=new BitSet(reader.maxDoc());\r\n\t\t}\r\n\t\treturn returnBits;\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f6acc8528202b4b03c54aa53f2237ff202f37a3","date":1169677145,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#bits(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#bits(IndexReader).mjava","sourceNew":"\t/**\r\n\t * Returns the a BitSet representing the Boolean composition\r\n\t * of the filters that have been added.\r\n\t */\r\n\t\r\n\tpublic BitSet bits(IndexReader reader) throws IOException\r\n\t{\r\n\t\t//create a new bitSet\r\n\t\tBitSet returnBits = null;\r\n\t\t\r\n\t\t//SHOULD filters\r\n\t\tif (shouldFilters!=null)\r\n\t\t{\r\n\t\t\treturnBits = ((Filter)shouldFilters.get(0)).bits(reader);\r\n//\t\t\tavoid changing the original bitset - it may be cached\r\n\t\t\treturnBits=(BitSet) returnBits.clone(); \r\n\t\t\tif (shouldFilters.size() > 1)\r\n\t\t\t{\r\n\t\t\t\tfor (int i = 1; i < shouldFilters.size(); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits.or(((Filter)shouldFilters.get(i)).bits(reader));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//NOT filters\r\n\t\tif (notFilters!=null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < notFilters.size(); i++)\r\n\t\t\t{\r\n\t\t\t\tBitSet notBits=((Filter)notFilters.get(i)).bits(reader);\r\n\t\t\t\tif(returnBits==null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits=(BitSet) notBits.clone();\t\t\t\t\t\r\n\t\t\t\t\treturnBits.flip(0,reader.maxDoc());\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits.andNot(notBits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//MUST filters\r\n\t\tif (mustFilters!=null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < mustFilters.size(); i++)\r\n\t\t\t{\r\n\t\t\t\tBitSet mustBits=((Filter)mustFilters.get(i)).bits(reader);\r\n\t\t\t\tif(returnBits==null)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(mustFilters.size()==1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturnBits=mustBits;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//don't mangle the bitset\r\n\t\t\t\t\t\treturnBits=(BitSet) mustBits.clone();\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits.and(mustBits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(returnBits==null)\r\n\t\t{\r\n\t\t\treturnBits=new BitSet(reader.maxDoc());\r\n\t\t}\r\n\t\treturn returnBits;\r\n\t}\r\n\n","sourceOld":"\t/**\r\n\t * Returns the a BitSet representing the Boolean composition\r\n\t * of the filters that have been added.\r\n\t */\r\n\t\r\n\tpublic BitSet bits(IndexReader reader) throws IOException\r\n\t{\r\n\t\t//create a new bitSet\r\n\t\tBitSet returnBits = null;\r\n\t\t\r\n\t\t//SHOULD filters\r\n\t\tif (shouldFilters!=null)\r\n\t\t{\r\n\t\t\treturnBits = ((Filter)shouldFilters.get(0)).bits(reader);\r\n\t\t\tif (shouldFilters.size() > 1)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tfor (int i = 1; i < shouldFilters.size(); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits.or(((Filter)shouldFilters.get(i)).bits(reader));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//NOT filters\r\n\t\tif (notFilters!=null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < notFilters.size(); i++)\r\n\t\t\t{\r\n\t\t\t\tBitSet notBits=((Filter)notFilters.get(i)).bits(reader);\r\n\t\t\t\tif(returnBits==null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits=notBits;\r\n\t\t\t\t\treturnBits.flip(0,reader.maxDoc());\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits.andNot(notBits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//MUST filters\r\n\t\tif (mustFilters!=null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < mustFilters.size(); i++)\r\n\t\t\t{\r\n\t\t\t\tBitSet mustBits=((Filter)mustFilters.get(i)).bits(reader);\r\n\t\t\t\tif(returnBits==null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits=mustBits;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits.and(mustBits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(returnBits==null)\r\n\t\t{\r\n\t\t\treturnBits=new BitSet(reader.maxDoc());\r\n\t\t}\r\n\t\treturn returnBits;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a27a24aac4a53ec0af1f168a3b1ab4a06a042250","date":1211570705,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#bits(IndexReader).mjava","sourceNew":null,"sourceOld":"\t/**\r\n\t * Returns the a BitSet representing the Boolean composition\r\n\t * of the filters that have been added.\r\n\t */\r\n\t\r\n\tpublic BitSet bits(IndexReader reader) throws IOException\r\n\t{\r\n\t\t//create a new bitSet\r\n\t\tBitSet returnBits = null;\r\n\t\t\r\n\t\t//SHOULD filters\r\n\t\tif (shouldFilters!=null)\r\n\t\t{\r\n\t\t\treturnBits = ((Filter)shouldFilters.get(0)).bits(reader);\r\n//\t\t\tavoid changing the original bitset - it may be cached\r\n\t\t\treturnBits=(BitSet) returnBits.clone(); \r\n\t\t\tif (shouldFilters.size() > 1)\r\n\t\t\t{\r\n\t\t\t\tfor (int i = 1; i < shouldFilters.size(); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits.or(((Filter)shouldFilters.get(i)).bits(reader));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//NOT filters\r\n\t\tif (notFilters!=null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < notFilters.size(); i++)\r\n\t\t\t{\r\n\t\t\t\tBitSet notBits=((Filter)notFilters.get(i)).bits(reader);\r\n\t\t\t\tif(returnBits==null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits=(BitSet) notBits.clone();\t\t\t\t\t\r\n\t\t\t\t\treturnBits.flip(0,reader.maxDoc());\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits.andNot(notBits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//MUST filters\r\n\t\tif (mustFilters!=null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < mustFilters.size(); i++)\r\n\t\t\t{\r\n\t\t\t\tBitSet mustBits=((Filter)mustFilters.get(i)).bits(reader);\r\n\t\t\t\tif(returnBits==null)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(mustFilters.size()==1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturnBits=mustBits;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//don't mangle the bitset\r\n\t\t\t\t\t\treturnBits=(BitSet) mustBits.clone();\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturnBits.and(mustBits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(returnBits==null)\r\n\t\t{\r\n\t\t\treturnBits=new BitSet(reader.maxDoc());\r\n\t\t}\r\n\t\treturn returnBits;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"175da89dff77515cdda7604b3c6cf6de96d4ac23":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f6acc8528202b4b03c54aa53f2237ff202f37a3":["175da89dff77515cdda7604b3c6cf6de96d4ac23"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["2f6acc8528202b4b03c54aa53f2237ff202f37a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"]},"commit2Childs":{"175da89dff77515cdda7604b3c6cf6de96d4ac23":["2f6acc8528202b4b03c54aa53f2237ff202f37a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["175da89dff77515cdda7604b3c6cf6de96d4ac23"],"2f6acc8528202b4b03c54aa53f2237ff202f37a3":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}