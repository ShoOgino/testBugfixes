{"path":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexInput.Index#read(DataInput,boolean).mjava","commits":[{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexInput.Index#read(DataInput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexInput.Index#read(IndexInput,boolean).mjava","sourceNew":"    @Override\n    public void read(final DataInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readVInt();\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto += indexIn.readVInt();\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readVInt();\n        }\n      }\n      assert upto < blockSize;\n    }\n\n","sourceOld":"    @Override\n    public void read(final IndexInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readVInt();\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto += indexIn.readVInt();\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readVInt();\n        }\n      }\n      assert upto < blockSize;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexInput.Index#read(DataInput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexInput.Index#read(IndexInput,boolean).mjava","sourceNew":"    @Override\n    public void read(final DataInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readVInt();\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto += indexIn.readVInt();\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readVInt();\n        }\n      }\n      assert upto < blockSize;\n    }\n\n","sourceOld":"    @Override\n    public void read(final IndexInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readVInt();\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto += indexIn.readVInt();\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readVInt();\n        }\n      }\n      assert upto < blockSize;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexInput.Index#read(DataInput,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void read(final DataInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readVInt();\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto += indexIn.readVInt();\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readVInt();\n        }\n      }\n      assert upto < blockSize;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403fdca7693ef4212494b59ca9e73661615f170c","date":1297453315,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexInput.Index#read(DataInput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexInput.Index#read(DataInput,boolean).mjava","sourceNew":"    @Override\n    public void read(final DataInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        upto = indexIn.readVInt();\n        fp = indexIn.readVLong();\n      } else {\n        final int uptoDelta = indexIn.readVInt();\n        if ((uptoDelta & 1) == 1) {\n          // same block\n          upto += uptoDelta >>> 1;\n        } else {\n          // new block\n          upto = uptoDelta >>> 1;\n          fp += indexIn.readVLong();\n        }\n      }\n      assert upto < blockSize;\n    }\n\n","sourceOld":"    @Override\n    public void read(final DataInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readVInt();\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto += indexIn.readVInt();\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readVInt();\n        }\n      }\n      assert upto < blockSize;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexInput.Index#read(DataInput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexInput.Index#read(DataInput,boolean).mjava","sourceNew":"    @Override\n    public void read(final DataInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        upto = indexIn.readVInt();\n        fp = indexIn.readVLong();\n      } else {\n        final int uptoDelta = indexIn.readVInt();\n        if ((uptoDelta & 1) == 1) {\n          // same block\n          upto += uptoDelta >>> 1;\n        } else {\n          // new block\n          upto = uptoDelta >>> 1;\n          fp += indexIn.readVLong();\n        }\n      }\n      assert upto < blockSize;\n    }\n\n","sourceOld":"    @Override\n    public void read(final DataInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readVInt();\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto += indexIn.readVInt();\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readVInt();\n        }\n      }\n      assert upto < blockSize;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexInput.Index#read(DataInput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexInput.Index#read(DataInput,boolean).mjava","sourceNew":"    @Override\n    public void read(final DataInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        upto = indexIn.readVInt();\n        fp = indexIn.readVLong();\n      } else {\n        final int uptoDelta = indexIn.readVInt();\n        if ((uptoDelta & 1) == 1) {\n          // same block\n          upto += uptoDelta >>> 1;\n        } else {\n          // new block\n          upto = uptoDelta >>> 1;\n          fp += indexIn.readVLong();\n        }\n      }\n      assert upto < blockSize;\n    }\n\n","sourceOld":"    @Override\n    public void read(final DataInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readVInt();\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto += indexIn.readVInt();\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readVInt();\n        }\n      }\n      assert upto < blockSize;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Index#read(DataInput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/FixedIntBlockIndexInput.Index#read(DataInput,boolean).mjava","sourceNew":"    @Override\n    public void read(final DataInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        upto = indexIn.readVInt();\n        fp = indexIn.readVLong();\n      } else {\n        final int uptoDelta = indexIn.readVInt();\n        if ((uptoDelta & 1) == 1) {\n          // same block\n          upto += uptoDelta >>> 1;\n        } else {\n          // new block\n          upto = uptoDelta >>> 1;\n          fp += indexIn.readVLong();\n        }\n      }\n      assert upto < blockSize;\n    }\n\n","sourceOld":"    @Override\n    public void read(final DataInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        upto = indexIn.readVInt();\n        fp = indexIn.readVLong();\n      } else {\n        final int uptoDelta = indexIn.readVInt();\n        if ((uptoDelta & 1) == 1) {\n          // same block\n          upto += uptoDelta >>> 1;\n        } else {\n          // new block\n          upto = uptoDelta >>> 1;\n          fp += indexIn.readVLong();\n        }\n      }\n      assert upto < blockSize;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","403fdca7693ef4212494b59ca9e73661615f170c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"403fdca7693ef4212494b59ca9e73661615f170c":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["403fdca7693ef4212494b59ca9e73661615f170c"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","403fdca7693ef4212494b59ca9e73661615f170c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["29ef99d61cda9641b6250bf9567329a6e65f901d","403fdca7693ef4212494b59ca9e73661615f170c","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"403fdca7693ef4212494b59ca9e73661615f170c":["f1bdbf92da222965b46c0a942c3857ba56e5c638","a0ae5e3ed1232483b7b8a014f175a5fe43595982","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}