{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMPerThreadHardLimitMB(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMPerThreadHardLimitMB(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMPerThreadHardLimitMB(int).mjava","sourceNew":"  /**\n   * Expert: Sets the maximum memory consumption per thread triggering a forced\n   * flush if exceeded. A {@link DocumentsWriterPerThread} is forcefully flushed\n   * once it exceeds this limit even if the {@link #getRAMBufferSizeMB()} has\n   * not been exceeded. This is a safety limit to prevent a\n   * {@link DocumentsWriterPerThread} from address space exhaustion due to its\n   * internal 32 bit signed integer based memory addressing.\n   * The given value must be less that 2GB (2048MB)\n   * \n   * @see #DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB\n   */\n  public IndexWriterConfig setRAMPerThreadHardLimitMB(int perThreadHardLimitMB) {\n    if (perThreadHardLimitMB <= 0 || perThreadHardLimitMB >= 2048) {\n      throw new IllegalArgumentException(\"PerThreadHardLimit must be greater than 0 and less than 2048MB\");\n    }\n    this.perThreadHardLimitMB = perThreadHardLimitMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: Sets the maximum memory consumption per thread triggering a forced\n   * flush if exceeded. A {@link DocumentsWriterPerThread} is forcefully flushed\n   * once it exceeds this limit even if the {@link #getRAMBufferSizeMB()} has\n   * not been exceeded. This is a safety limit to prevent a\n   * {@link DocumentsWriterPerThread} from address space exhaustion due to its\n   * internal 32 bit signed integer based memory addressing.\n   * The given value must be less that 2GB (2048MB)\n   * \n   * @see #DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB\n   */\n  public IndexWriterConfig setRAMPerThreadHardLimitMB(int perThreadHardLimitMB) {\n    if (perThreadHardLimitMB <= 0 || perThreadHardLimitMB >= 2048) {\n      throw new IllegalArgumentException(\"PerThreadHardLimit must be greater than 0 and less than 2048MB\");\n    }\n    this.perThreadHardLimitMB = perThreadHardLimitMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}