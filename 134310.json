{"path":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin.MuteRules#parseRule(Object).mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin.MuteRules#parseRule(Object).mjava","pathOld":"/dev/null","sourceNew":"    private MuteRule parseRule(Object ruleObj) {\n      try {\n        String rule = (String) ruleObj;\n        if (rule.startsWith(\"type:\")) {\n          AuditEvent.RequestType muteType = AuditEvent.RequestType.valueOf(rule.substring(\"type:\".length()));\n          return event -> event.getRequestType() != null && event.getRequestType().equals(muteType);          \n        }\n        if (rule.startsWith(\"collection:\")) {\n          return event -> event.getCollections() != null && event.getCollections().contains(rule.substring(\"collection:\".length()));\n        }\n        if (rule.startsWith(\"user:\")) {\n          return event -> event.getUsername() != null && event.getUsername().equals(rule.substring(\"user:\".length()));\n        }\n        if (rule.startsWith(\"path:\")) {\n          return event -> event.getResource() != null && event.getResource().startsWith(rule.substring(\"path:\".length()));\n        }\n        if (rule.startsWith(\"ip:\")) {\n          return event -> event.getClientIp() != null && event.getClientIp().equals(rule.substring(\"ip:\".length()));\n        }\n        if (rule.startsWith(\"param:\")) {\n          String[] kv = rule.substring(\"param:\".length()).split(\"=\");\n          if (kv.length == 2) {\n            return event -> event.getSolrParams() != null && kv[1].equals(event.getSolrParamAsString(kv[0]));\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The 'param' muteRule must be of format 'param:key=value', got \" + rule);\n          }\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unkonwn mute rule \" + rule);\n      } catch (ClassCastException | IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"There was a problem parsing muteRules. Must be a list of valid rule strings\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"]},"commit2Childs":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}