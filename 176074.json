{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,boolean,String,Class[#-extends-LineParser],int,String).mjava","commits":[{"id":"7d8d7a81c29a594c8d28e66f3a9029ed7458af42","date":1300719582,"type":1,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,boolean,String,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, boolean setBZCompress,\n      String bz2CompressVal, Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2944372726ed00fc05229687367002194c6c81","date":1300969333,"type":5,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,boolean,String,Class[#-extends-LineParser],int,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTestWithRepeats(File file, boolean setBZCompress,\n      String bz2CompressVal, Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d8d7a81c29a594c8d28e66f3a9029ed7458af42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e2944372726ed00fc05229687367002194c6c81"],"6e2944372726ed00fc05229687367002194c6c81":["7d8d7a81c29a594c8d28e66f3a9029ed7458af42"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d8d7a81c29a594c8d28e66f3a9029ed7458af42"],"7d8d7a81c29a594c8d28e66f3a9029ed7458af42":["6e2944372726ed00fc05229687367002194c6c81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6e2944372726ed00fc05229687367002194c6c81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}