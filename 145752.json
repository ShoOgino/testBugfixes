{"path":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","sourceNew":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<String>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<String>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","sourceNew":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<String>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<String>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","sourceNew":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<String>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<String>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","sourceNew":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<String>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","date":1566455239,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","sourceNew":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.emptyList();\n\n    List<String> result = new ArrayList<>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","sourceNew":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.emptyList();\n\n    List<String> result = new ArrayList<>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitFileNames(String).mjava","sourceNew":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  public static List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.emptyList();\n\n    List<String> result = new ArrayList<>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c44cc06c26e456fe9c215072b79fce30babe3975":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}