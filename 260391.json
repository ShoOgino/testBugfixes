{"path":"lucene/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","pathOld":"src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","sourceNew":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.length());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.length());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1efe3edca215dd9891cb42af283fed96f792ca0","date":1320428891,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","sourceNew":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.length());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.length());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestHugeRamFile#testHugeFile().mjava","sourceNew":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.length());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. (LUCENE-957) */\n  public void testHugeFile() throws IOException {\n    DenseRAMFile f = new DenseRAMFile();\n    // output part\n    RAMOutputStream out = new RAMOutputStream(f);\n    byte b1[] = new byte[RAMOutputStream.BUFFER_SIZE];\n    byte b2[] = new byte[RAMOutputStream.BUFFER_SIZE / 3];\n    for (int i = 0; i < b1.length; i++) {\n      b1[i] = (byte) (i & 0x0007F);\n    }\n    for (int i = 0; i < b2.length; i++) {\n      b2[i] = (byte) (i & 0x0003F);\n    }\n    long n = 0;\n    assertEquals(\"output length must match\",n,out.length());\n    while (n <= MAX_VALUE - b1.length) {\n      out.writeBytes(b1,0,b1.length);\n      out.flush();\n      n += b1.length;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    //System.out.println(\"after writing b1's, length = \"+out.length()+\" (MAX_VALUE=\"+MAX_VALUE+\")\");\n    int m = b2.length;\n    long L = 12;\n    for (int j=0; j<L; j++) {\n      for (int i = 0; i < b2.length; i++) {\n        b2[i]++;\n      }\n      out.writeBytes(b2,0,m);\n      out.flush();\n      n += m;\n      assertEquals(\"output length must match\",n,out.length());\n    }\n    out.close();\n    // input part\n    RAMInputStream in = new RAMInputStream(\"testcase\", f);\n    assertEquals(\"input length must match\",n,in.length());\n    //System.out.println(\"input length = \"+in.length()+\" % 1024 = \"+in.length()%1024);\n    for (int j=0; j<L; j++) {\n      long loc = n - (L-j)*m; \n      in.seek(loc/3);\n      in.seek(loc);\n      for (int i=0; i<m; i++) {\n        byte bt = in.readByte();\n        byte expected = (byte) (1 + j + (i & 0x0003F));\n        assertEquals(\"must read same value that was written! j=\"+j+\" i=\"+i,expected,bt);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}