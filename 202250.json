{"path":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","commits":[{"id":"edfb471a48a4bd226eefc6d6fd96195d9ce1db73","date":1260015437,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    executor.awaitTermination(5, TimeUnit.SECONDS);\n    \n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(workers[i].failed);\n      assertTrue(workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e4f15ea6a947401cf63f93da0ed8bc1107ec6f0","date":1265279022,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    \n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    executor.awaitTermination(5, TimeUnit.SECONDS);\n    \n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(workers[i].failed);\n      assertTrue(workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    \n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e4f15ea6a947401cf63f93da0ed8bc1107ec6f0":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2e4f15ea6a947401cf63f93da0ed8bc1107ec6f0"]},"commit2Childs":{"2e4f15ea6a947401cf63f93da0ed8bc1107ec6f0":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["2e4f15ea6a947401cf63f93da0ed8bc1107ec6f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}