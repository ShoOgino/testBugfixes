{"path":"solr/core/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","sourceNew":"  /** \n   * Given a field name and an IndexReader, get a random hash seed.  \n   * Using dynamic fields, you can force the random order to change \n   */\n  private static int getSeed(String fieldName, AtomicReaderContext context) {\n    final IndexReader top = ReaderUtil.getTopLevelContext(context).reader;\n    // calling getVersion() on a segment will currently give you a null pointer exception, so\n    // we use the top-level reader.\n    return fieldName.hashCode() + context.docBase + (int)top.getVersion();\n  }\n\n","sourceOld":"  /** \n   * Given a field name and an IndexReader, get a random hash seed.  \n   * Using dynamic fields, you can force the random order to change \n   */\n  private static int getSeed(String fieldName, AtomicReaderContext context) {\n    final IndexReader top = ReaderUtil.getTopLevelContext(context).reader;\n    // calling getVersion() on a segment will currently give you a null pointer exception, so\n    // we use the top-level reader.\n    return fieldName.hashCode() + context.docBase + (int)top.getVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","sourceNew":"  /** \n   * Given a field name and an IndexReader, get a random hash seed.  \n   * Using dynamic fields, you can force the random order to change \n   */\n  private static int getSeed(String fieldName, AtomicReaderContext context) {\n    final IndexReader top = ReaderUtil.getTopLevelContext(context).reader;\n    // calling getVersion() on a segment will currently give you a null pointer exception, so\n    // we use the top-level reader.\n    return fieldName.hashCode() + context.docBase + (int)top.getVersion();\n  }\n\n","sourceOld":"  /** \n   * Given a field name and an IndexReader, get a random hash seed.  \n   * Using dynamic fields, you can force the random order to change \n   */\n  private static int getSeed(String fieldName, AtomicReaderContext context) {\n    final IndexReader top = ReaderUtil.getTopLevelContext(context).reader;\n    // calling getVersion() on a segment will currently give you a null pointer exception, so\n    // we use the top-level reader.\n    return fieldName.hashCode() + context.docBase + (int)top.getVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","sourceNew":"  /** \n   * Given a field name and an IndexReader, get a random hash seed.  \n   * Using dynamic fields, you can force the random order to change \n   */\n  private static int getSeed(String fieldName, AtomicReaderContext context) {\n    final IndexReader top = ReaderUtil.getTopLevelContext(context).reader;\n    // calling getVersion() on a segment will currently give you a null pointer exception, so\n    // we use the top-level reader.\n    return fieldName.hashCode() + context.docBase + (int)top.getVersion();\n  }\n\n","sourceOld":"  /** \n   * Given a field name and an IndexReader, get a random hash seed.  \n   * Using dynamic fields, you can force the random order to change \n   */\n  private static int getSeed(String fieldName, AtomicReaderContext context) {\n    final IndexReader top = ReaderUtil.getTopLevelContext(context).reader;\n    // calling getVersion() on a segment will currently give you a null pointer exception, so\n    // we use the top-level reader.\n    return fieldName.hashCode() + context.docBase + (int)top.getVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","sourceNew":"  /** \n   * Given a field name and an IndexReader, get a random hash seed.  \n   * Using dynamic fields, you can force the random order to change \n   */\n  private static int getSeed(String fieldName, AtomicReaderContext context) {\n    final DirectoryReader top = (DirectoryReader) ReaderUtil.getTopLevelContext(context).reader();\n    // calling getVersion() on a segment will currently give you a null pointer exception, so\n    // we use the top-level reader.\n    return fieldName.hashCode() + context.docBase + (int)top.getVersion();\n  }\n\n","sourceOld":"  /** \n   * Given a field name and an IndexReader, get a random hash seed.  \n   * Using dynamic fields, you can force the random order to change \n   */\n  private static int getSeed(String fieldName, AtomicReaderContext context) {\n    final IndexReader top = ReaderUtil.getTopLevelContext(context).reader;\n    // calling getVersion() on a segment will currently give you a null pointer exception, so\n    // we use the top-level reader.\n    return fieldName.hashCode() + context.docBase + (int)top.getVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","sourceNew":"  /** \n   * Given a field name and an IndexReader, get a random hash seed.  \n   * Using dynamic fields, you can force the random order to change \n   */\n  private static int getSeed(String fieldName, AtomicReaderContext context) {\n    final DirectoryReader top = (DirectoryReader) ReaderUtil.getTopLevelContext(context).reader();\n    // calling getVersion() on a segment will currently give you a null pointer exception, so\n    // we use the top-level reader.\n    return fieldName.hashCode() + context.docBase + (int)top.getVersion();\n  }\n\n","sourceOld":"  /** \n   * Given a field name and an IndexReader, get a random hash seed.  \n   * Using dynamic fields, you can force the random order to change \n   */\n  private static int getSeed(String fieldName, AtomicReaderContext context) {\n    final IndexReader top = ReaderUtil.getTopLevelContext(context).reader;\n    // calling getVersion() on a segment will currently give you a null pointer exception, so\n    // we use the top-level reader.\n    return fieldName.hashCode() + context.docBase + (int)top.getVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","sourceNew":"  /** \n   * Given a field name and an IndexReader, get a random hash seed.\n   * Using dynamic fields, you can force the random order to change \n   */\n  private static int getSeed(String fieldName, AtomicReaderContext context) {\n    final DirectoryReader top = (DirectoryReader) ReaderUtil.getTopLevelContext(context).reader();\n    // calling getVersion() on a segment will currently give you a null pointer exception, so\n    // we use the top-level reader.\n    return fieldName.hashCode() + context.docBase + (int)top.getVersion();\n  }\n\n","sourceOld":"  /** \n   * Given a field name and an IndexReader, get a random hash seed.  \n   * Using dynamic fields, you can force the random order to change \n   */\n  private static int getSeed(String fieldName, AtomicReaderContext context) {\n    final DirectoryReader top = (DirectoryReader) ReaderUtil.getTopLevelContext(context).reader();\n    // calling getVersion() on a segment will currently give you a null pointer exception, so\n    // we use the top-level reader.\n    return fieldName.hashCode() + context.docBase + (int)top.getVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/RandomSortField#getSeed(String,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  /** \n   * Given a field name and an IndexReader, get a random hash seed.\n   * Using dynamic fields, you can force the random order to change \n   */\n  private static int getSeed(String fieldName, AtomicReaderContext context) {\n    final DirectoryReader top = (DirectoryReader) ReaderUtil.getTopLevelContext(context).reader();\n    // calling getVersion() on a segment will currently give you a null pointer exception, so\n    // we use the top-level reader.\n    return fieldName.hashCode() + context.docBase + (int)top.getVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa64435b5902ce266c23755a4a00691a3285dab8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96d207426bd26fa5c1014e26d21d87603aea68b7":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["fa64435b5902ce266c23755a4a00691a3285dab8"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["c26f00b574427b55127e869b935845554afde1fa","96d207426bd26fa5c1014e26d21d87603aea68b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fa64435b5902ce266c23755a4a00691a3285dab8":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c26f00b574427b55127e869b935845554afde1fa":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["fa64435b5902ce266c23755a4a00691a3285dab8"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}