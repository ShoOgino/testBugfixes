{"path":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || getComparator().compare(t, actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t, false) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || getComparator().compare(t, actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t, false) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || getComparator().compare(t, actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || getComparator().compare(t, actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t, false) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || getComparator().compare(t, actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || getComparator().compare(t, actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t, false) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || t.compareTo(actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || getComparator().compare(t, actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0974f33be0e2189e71f36b67f1017f4072b1a126","date":1398347867,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || t.compareTo(actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n        // NO: we just fall through and iterate again\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || t.compareTo(actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || t.compareTo(actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n        // NO: we just fall through and iterate again\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || t.compareTo(actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8aec170a0a7ea13ccd5bbcb73e8d8971ece5a8d","date":1518457294,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || t.compareTo(actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n        case NO:\n          // we just iterate again\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || t.compareTo(actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n        // NO: we just fall through and iterate again\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FilteredTermsEnum#next().mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || t.compareTo(actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n        case NO:\n          // we just iterate again\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public BytesRef next() throws IOException {\n    //System.out.println(\"FTE.next doSeek=\" + doSeek);\n    //new Throwable().printStackTrace(System.out);\n    for (;;) {\n      // Seek or forward the iterator\n      if (doSeek) {\n        doSeek = false;\n        final BytesRef t = nextSeekTerm(actualTerm);\n        //System.out.println(\"  seek to t=\" + (t == null ? \"null\" : t.utf8ToString()) + \" tenum=\" + tenum);\n        // Make sure we always seek forward:\n        assert actualTerm == null || t == null || t.compareTo(actualTerm) > 0: \"curTerm=\" + actualTerm + \" seekTerm=\" + t;\n        if (t == null || tenum.seekCeil(t) == SeekStatus.END) {\n          // no more terms to seek to or enum exhausted\n          //System.out.println(\"  return null\");\n          return null;\n        }\n        actualTerm = tenum.term();\n        //System.out.println(\"  got term=\" + actualTerm.utf8ToString());\n      } else {\n        actualTerm = tenum.next();\n        if (actualTerm == null) {\n          // enum exhausted\n          return null;\n        }\n      }\n      \n      // check if term is accepted\n      switch (accept(actualTerm)) {\n        case YES_AND_SEEK:\n          doSeek = true;\n          // term accepted, but we need to seek so fall-through\n        case YES:\n          // term accepted\n          return actualTerm;\n        case NO_AND_SEEK:\n          // invalid term, seek next time\n          doSeek = true;\n          break;\n        case END:\n          // we are supposed to end the enum\n          return null;\n        // NO: we just fall through and iterate again\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0974f33be0e2189e71f36b67f1017f4072b1a126":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","0974f33be0e2189e71f36b67f1017f4072b1a126"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["0974f33be0e2189e71f36b67f1017f4072b1a126","f8aec170a0a7ea13ccd5bbcb73e8d8971ece5a8d"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8aec170a0a7ea13ccd5bbcb73e8d8971ece5a8d":["0974f33be0e2189e71f36b67f1017f4072b1a126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"]},"commit2Childs":{"0974f33be0e2189e71f36b67f1017f4072b1a126":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","bfcdec9fcf0409223f35c5ec3bc14094314941b4","f8aec170a0a7ea13ccd5bbcb73e8d8971ece5a8d"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["0974f33be0e2189e71f36b67f1017f4072b1a126","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"f8aec170a0a7ea13ccd5bbcb73e8d8971ece5a8d":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}