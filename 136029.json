{"path":"lucene/core/src/java/org/apache/lucene/document/DocValuesField#DocValuesField(String,float,DocValues.Type).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DocValuesField#DocValuesField(String,float,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DocValuesField#DocValuesField(String,float,DocValues.Type).mjava","sourceNew":"  public DocValuesField(String name, float value, DocValues.Type docValueType) {\n    super(name, getFieldType(docValueType));\n    if (docValueType != DocValues.Type.FLOAT_32 &&\n        docValueType != DocValues.Type.FLOAT_64) {\n      throw new IllegalArgumentException(\"docValueType must be FLOAT_32/64; got \" + docValueType);\n    }\n    fieldsData = Float.valueOf(value);\n  }\n\n","sourceOld":"  public DocValuesField(String name, float value, DocValues.Type docValueType) {\n    super(name, getFieldType(docValueType));\n    if (docValueType != DocValues.Type.FLOAT_32 &&\n        docValueType != DocValues.Type.FLOAT_64) {\n      throw new IllegalArgumentException(\"docValueType must be FLOAT_32/64; got \" + docValueType);\n    }\n    fieldsData = Float.valueOf(value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/DocValuesField#DocValuesField(String,float,DocValues.Type).mjava","sourceNew":null,"sourceOld":"  public DocValuesField(String name, float value, DocValues.Type docValueType) {\n    super(name, getFieldType(docValueType));\n    if (docValueType != DocValues.Type.FLOAT_32 &&\n        docValueType != DocValues.Type.FLOAT_64) {\n      throw new IllegalArgumentException(\"docValueType must be FLOAT_32/64; got \" + docValueType);\n    }\n    fieldsData = Float.valueOf(value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}