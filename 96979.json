{"path":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testRangeFacetFilterVsDocValuesRandom().mjava","commits":[{"id":"e135e47842b3fd6a4797b7e4787241b06817efa2","date":1429817254,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testRangeFacetFilterVsDocValuesRandom().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testRangeFacetFilterVsDocValuesRandom() throws Exception {\n    for (int i = 0; i < atLeast(100); i++) {\n      ModifiableSolrParams params = null;\n      int fieldType = i%3;\n      switch (fieldType) {\n        case 0: params = getRandomParamsDate(); break;\n        case 1: params = getRandomParamsInt(); break;\n        case 2: params = getRandomParamsFloat(); break;\n      }\n      String field = params.get(\"facet.range\");\n      params.add(\"q\", getRandomQuery());\n      \n      \n      params.add(\"facet\", \"true\");\n      if (random().nextBoolean()) {\n        params.add(\"facet.range.method\", FacetRangeMethod.FILTER.toString());\n      }\n      \n      NamedList<Object> rangeFacetsFilter;\n      NamedList<Object> rangeFacetsDv;\n      \n      SolrQueryRequest req = req(params);\n      log.info(\"Using Params: \" + params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"standard\", req);\n        rangeFacetsFilter = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      params.add(\"facet.range.method\", FacetRangeMethod.DV.toString());\n      req = req(params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"standard\", req);\n        rangeFacetsDv = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      \n      assertNotNull(rangeFacetsFilter.get(field));\n      assertNotNull(rangeFacetsDv.get(field));\n      \n      assertSameResults(\"Different results obtained when using 'filter' and 'dv' methods for Range Facets using params.\"\n          + params + \"\\n\" + \"Filter:\" + rangeFacetsFilter + \"\\n DV: \" + rangeFacetsDv, \n          (NamedList<Object>)rangeFacetsFilter.get(field), (NamedList<Object>)rangeFacetsDv.get(field));\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testRangeFacetFilterVsDocValuesRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testRangeFacetFilterVsDocValuesRandom().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testRangeFacetFilterVsDocValuesRandom() throws Exception {\n    for (int i = 0; i < atLeast(100); i++) {\n      ModifiableSolrParams params = null;\n      int fieldType = i%3;\n      switch (fieldType) {\n        case 0: params = getRandomParamsDate(); break;\n        case 1: params = getRandomParamsInt(); break;\n        case 2: params = getRandomParamsFloat(); break;\n      }\n      String field = params.get(\"facet.range\");\n      params.add(\"q\", getRandomQuery());\n      \n      \n      params.add(\"facet\", \"true\");\n      if (random().nextBoolean()) {\n        params.add(\"facet.range.method\", FacetRangeMethod.FILTER.toString());\n      }\n      \n      NamedList<Object> rangeFacetsFilter;\n      NamedList<Object> rangeFacetsDv;\n      \n      SolrQueryRequest req = req(params);\n      log.info(\"Using Params: \" + params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n        rangeFacetsFilter = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      params.add(\"facet.range.method\", FacetRangeMethod.DV.toString());\n      req = req(params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n        rangeFacetsDv = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      \n      assertNotNull(rangeFacetsFilter.get(field));\n      assertNotNull(rangeFacetsDv.get(field));\n      \n      assertSameResults(\"Different results obtained when using 'filter' and 'dv' methods for Range Facets using params.\"\n          + params + \"\\n\" + \"Filter:\" + rangeFacetsFilter + \"\\n DV: \" + rangeFacetsDv, \n          (NamedList<Object>)rangeFacetsFilter.get(field), (NamedList<Object>)rangeFacetsDv.get(field));\n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testRangeFacetFilterVsDocValuesRandom() throws Exception {\n    for (int i = 0; i < atLeast(100); i++) {\n      ModifiableSolrParams params = null;\n      int fieldType = i%3;\n      switch (fieldType) {\n        case 0: params = getRandomParamsDate(); break;\n        case 1: params = getRandomParamsInt(); break;\n        case 2: params = getRandomParamsFloat(); break;\n      }\n      String field = params.get(\"facet.range\");\n      params.add(\"q\", getRandomQuery());\n      \n      \n      params.add(\"facet\", \"true\");\n      if (random().nextBoolean()) {\n        params.add(\"facet.range.method\", FacetRangeMethod.FILTER.toString());\n      }\n      \n      NamedList<Object> rangeFacetsFilter;\n      NamedList<Object> rangeFacetsDv;\n      \n      SolrQueryRequest req = req(params);\n      log.info(\"Using Params: \" + params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"standard\", req);\n        rangeFacetsFilter = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      params.add(\"facet.range.method\", FacetRangeMethod.DV.toString());\n      req = req(params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"standard\", req);\n        rangeFacetsDv = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      \n      assertNotNull(rangeFacetsFilter.get(field));\n      assertNotNull(rangeFacetsDv.get(field));\n      \n      assertSameResults(\"Different results obtained when using 'filter' and 'dv' methods for Range Facets using params.\"\n          + params + \"\\n\" + \"Filter:\" + rangeFacetsFilter + \"\\n DV: \" + rangeFacetsDv, \n          (NamedList<Object>)rangeFacetsFilter.get(field), (NamedList<Object>)rangeFacetsDv.get(field));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testRangeFacetFilterVsDocValuesRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testRangeFacetFilterVsDocValuesRandom().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testRangeFacetFilterVsDocValuesRandom() throws Exception {\n    for (int i = 0; i < atLeast(100); i++) {\n      ModifiableSolrParams params = null;\n      int fieldType = i%3;\n      switch (fieldType) {\n        case 0: params = getRandomParamsDate(); break;\n        case 1: params = getRandomParamsInt(); break;\n        case 2: params = getRandomParamsFloat(); break;\n      }\n      String field = params.get(\"facet.range\");\n      params.add(\"q\", getRandomQuery());\n      \n      \n      params.add(\"facet\", \"true\");\n      if (random().nextBoolean()) {\n        params.add(\"facet.range.method\", FacetRangeMethod.FILTER.toString());\n      }\n      \n      NamedList<Object> rangeFacetsFilter;\n      NamedList<Object> rangeFacetsDv;\n      \n      SolrQueryRequest req = req(params);\n      log.info(\"Using Params: \" + params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n        rangeFacetsFilter = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      params.add(\"facet.range.method\", FacetRangeMethod.DV.toString());\n      req = req(params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n        rangeFacetsDv = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      \n      assertNotNull(rangeFacetsFilter.get(field));\n      assertNotNull(rangeFacetsDv.get(field));\n      \n      assertSameResults(\"Different results obtained when using 'filter' and 'dv' methods for Range Facets using params.\"\n          + params + \"\\n\" + \"Filter:\" + rangeFacetsFilter + \"\\n DV: \" + rangeFacetsDv, \n          (NamedList<Object>)rangeFacetsFilter.get(field), (NamedList<Object>)rangeFacetsDv.get(field));\n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testRangeFacetFilterVsDocValuesRandom() throws Exception {\n    for (int i = 0; i < atLeast(100); i++) {\n      ModifiableSolrParams params = null;\n      int fieldType = i%3;\n      switch (fieldType) {\n        case 0: params = getRandomParamsDate(); break;\n        case 1: params = getRandomParamsInt(); break;\n        case 2: params = getRandomParamsFloat(); break;\n      }\n      String field = params.get(\"facet.range\");\n      params.add(\"q\", getRandomQuery());\n      \n      \n      params.add(\"facet\", \"true\");\n      if (random().nextBoolean()) {\n        params.add(\"facet.range.method\", FacetRangeMethod.FILTER.toString());\n      }\n      \n      NamedList<Object> rangeFacetsFilter;\n      NamedList<Object> rangeFacetsDv;\n      \n      SolrQueryRequest req = req(params);\n      log.info(\"Using Params: \" + params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"standard\", req);\n        rangeFacetsFilter = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      params.add(\"facet.range.method\", FacetRangeMethod.DV.toString());\n      req = req(params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"standard\", req);\n        rangeFacetsDv = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      \n      assertNotNull(rangeFacetsFilter.get(field));\n      assertNotNull(rangeFacetsDv.get(field));\n      \n      assertSameResults(\"Different results obtained when using 'filter' and 'dv' methods for Range Facets using params.\"\n          + params + \"\\n\" + \"Filter:\" + rangeFacetsFilter + \"\\n DV: \" + rangeFacetsDv, \n          (NamedList<Object>)rangeFacetsFilter.get(field), (NamedList<Object>)rangeFacetsDv.get(field));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testRangeFacetFilterVsDocValuesRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testRangeFacetFilterVsDocValuesRandom().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testRangeFacetFilterVsDocValuesRandom() throws Exception {\n    for (int i = 0; i < atLeast(100); i++) {\n      ModifiableSolrParams params = null;\n      int fieldType = i%3;\n      switch (fieldType) {\n        case 0: params = getRandomParamsDate(); break;\n        case 1: params = getRandomParamsInt(); break;\n        case 2: params = getRandomParamsFloat(); break;\n      }\n      String field = params.get(\"facet.range\");\n      params.add(\"q\", getRandomQuery());\n      \n      \n      params.add(\"facet\", \"true\");\n      if (random().nextBoolean()) {\n        params.add(\"facet.range.method\", FacetRangeMethod.FILTER.toString());\n      }\n      \n      NamedList<Object> rangeFacetsFilter;\n      NamedList<Object> rangeFacetsDv;\n      \n      SolrQueryRequest req = req(params);\n      log.info(\"Using Params: \" + params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n        rangeFacetsFilter = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      params.add(\"facet.range.method\", FacetRangeMethod.DV.toString());\n      req = req(params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n        rangeFacetsDv = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      \n      assertNotNull(rangeFacetsFilter.get(field));\n      assertNotNull(rangeFacetsDv.get(field));\n      \n      assertSameResults(\"Different results obtained when using 'filter' and 'dv' methods for Range Facets using params.\"\n          + params + \"\\n\" + \"Filter:\" + rangeFacetsFilter + \"\\n DV: \" + rangeFacetsDv, \n          (NamedList<Object>)rangeFacetsFilter.get(field), (NamedList<Object>)rangeFacetsDv.get(field));\n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testRangeFacetFilterVsDocValuesRandom() throws Exception {\n    for (int i = 0; i < atLeast(100); i++) {\n      ModifiableSolrParams params = null;\n      int fieldType = i%3;\n      switch (fieldType) {\n        case 0: params = getRandomParamsDate(); break;\n        case 1: params = getRandomParamsInt(); break;\n        case 2: params = getRandomParamsFloat(); break;\n      }\n      String field = params.get(\"facet.range\");\n      params.add(\"q\", getRandomQuery());\n      \n      \n      params.add(\"facet\", \"true\");\n      if (random().nextBoolean()) {\n        params.add(\"facet.range.method\", FacetRangeMethod.FILTER.toString());\n      }\n      \n      NamedList<Object> rangeFacetsFilter;\n      NamedList<Object> rangeFacetsDv;\n      \n      SolrQueryRequest req = req(params);\n      log.info(\"Using Params: \" + params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"standard\", req);\n        rangeFacetsFilter = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      params.add(\"facet.range.method\", FacetRangeMethod.DV.toString());\n      req = req(params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"standard\", req);\n        rangeFacetsDv = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      \n      assertNotNull(rangeFacetsFilter.get(field));\n      assertNotNull(rangeFacetsDv.get(field));\n      \n      assertSameResults(\"Different results obtained when using 'filter' and 'dv' methods for Range Facets using params.\"\n          + params + \"\\n\" + \"Filter:\" + rangeFacetsFilter + \"\\n DV: \" + rangeFacetsDv, \n          (NamedList<Object>)rangeFacetsFilter.get(field), (NamedList<Object>)rangeFacetsDv.get(field));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testRangeFacetFilterVsDocValuesRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testRangeFacetFilterVsDocValuesRandom().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testRangeFacetFilterVsDocValuesRandom() throws Exception {\n    for (int i = 0; i < atLeast(100); i++) {\n      ModifiableSolrParams params = null;\n      int fieldType = i%3;\n      switch (fieldType) {\n        case 0: params = getRandomParamsDate(); break;\n        case 1: params = getRandomParamsInt(); break;\n        case 2: params = getRandomParamsFloat(); break;\n      }\n      String field = params.get(\"facet.range\");\n      params.add(\"q\", getRandomQuery());\n      \n      \n      params.add(\"facet\", \"true\");\n      if (random().nextBoolean()) {\n        params.add(\"facet.range.method\", FacetRangeMethod.FILTER.toString());\n      }\n      \n      NamedList<Object> rangeFacetsFilter;\n      NamedList<Object> rangeFacetsDv;\n      \n      SolrQueryRequest req = req(params);\n      log.info(\"Using Params: {}\", params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n        rangeFacetsFilter = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      params.add(\"facet.range.method\", FacetRangeMethod.DV.toString());\n      req = req(params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n        rangeFacetsDv = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      \n      assertNotNull(rangeFacetsFilter.get(field));\n      assertNotNull(rangeFacetsDv.get(field));\n      \n      assertSameResults(\"Different results obtained when using 'filter' and 'dv' methods for Range Facets using params.\"\n          + params + \"\\n\" + \"Filter:\" + rangeFacetsFilter + \"\\n DV: \" + rangeFacetsDv, \n          (NamedList<Object>)rangeFacetsFilter.get(field), (NamedList<Object>)rangeFacetsDv.get(field));\n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testRangeFacetFilterVsDocValuesRandom() throws Exception {\n    for (int i = 0; i < atLeast(100); i++) {\n      ModifiableSolrParams params = null;\n      int fieldType = i%3;\n      switch (fieldType) {\n        case 0: params = getRandomParamsDate(); break;\n        case 1: params = getRandomParamsInt(); break;\n        case 2: params = getRandomParamsFloat(); break;\n      }\n      String field = params.get(\"facet.range\");\n      params.add(\"q\", getRandomQuery());\n      \n      \n      params.add(\"facet\", \"true\");\n      if (random().nextBoolean()) {\n        params.add(\"facet.range.method\", FacetRangeMethod.FILTER.toString());\n      }\n      \n      NamedList<Object> rangeFacetsFilter;\n      NamedList<Object> rangeFacetsDv;\n      \n      SolrQueryRequest req = req(params);\n      log.info(\"Using Params: \" + params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n        rangeFacetsFilter = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      params.add(\"facet.range.method\", FacetRangeMethod.DV.toString());\n      req = req(params);\n      try {\n        SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n        rangeFacetsDv = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_ranges\");\n      } finally {\n        req.close();\n      }\n      \n      assertNotNull(rangeFacetsFilter.get(field));\n      assertNotNull(rangeFacetsDv.get(field));\n      \n      assertSameResults(\"Different results obtained when using 'filter' and 'dv' methods for Range Facets using params.\"\n          + params + \"\\n\" + \"Filter:\" + rangeFacetsFilter + \"\\n DV: \" + rangeFacetsDv, \n          (NamedList<Object>)rangeFacetsFilter.get(field), (NamedList<Object>)rangeFacetsDv.get(field));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["e135e47842b3fd6a4797b7e4787241b06817efa2","28288370235ed02234a64753cdbf0c6ec096304a"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["e135e47842b3fd6a4797b7e4787241b06817efa2","5ff704ef91e9ae30ca59babb23ece85720701b60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["e135e47842b3fd6a4797b7e4787241b06817efa2"]},"commit2Childs":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e135e47842b3fd6a4797b7e4787241b06817efa2"],"30c8e5574b55d57947e989443dfde611646530ee":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}