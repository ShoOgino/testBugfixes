{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkCollectionParameters().mjava","commits":[{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkCollectionParameters().mjava","pathOld":"/dev/null","sourceNew":"  private void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(\"multicollection1\")) {\n\n      createCollection(\"multicollection1\", client, 2, 2);\n      createCollection(\"multicollection2\", client, 2, 2);\n      waitForRecoveriesToFinish(\"multicollection1\", false);\n      waitForRecoveriesToFinish(\"multicollection2\", false);\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     // default - will add them to multicollection1\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkCollectionParameters().mjava","pathOld":"/dev/null","sourceNew":"  private void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(\"multicollection1\")) {\n\n      createCollection(\"multicollection1\", client, 2, 2);\n      createCollection(\"multicollection2\", client, 2, 2);\n      waitForRecoveriesToFinish(\"multicollection1\", false);\n      waitForRecoveriesToFinish(\"multicollection2\", false);\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     // default - will add them to multicollection1\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkCollectionParameters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkCollectionParameters().mjava","sourceNew":"  @Test\n  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"multicollection1\", client.getZkStateReader(), false, true, TIMEOUT);\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"multicollection2\", client.getZkStateReader(), false, true, TIMEOUT);\n\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     // default - will add them to multicollection1\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n\n","sourceOld":"  private void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(\"multicollection1\")) {\n\n      createCollection(\"multicollection1\", client, 2, 2);\n      createCollection(\"multicollection2\", client, 2, 2);\n      waitForRecoveriesToFinish(\"multicollection1\", false);\n      waitForRecoveriesToFinish(\"multicollection2\", false);\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     // default - will add them to multicollection1\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkCollectionParameters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkCollectionParameters().mjava","sourceNew":"  @Test\n  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"multicollection1\", client.getZkStateReader(), false, true, TIMEOUT);\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"multicollection2\", client.getZkStateReader(), false, true, TIMEOUT);\n\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     // default - will add them to multicollection1\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n\n","sourceOld":"  private void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(\"multicollection1\")) {\n\n      createCollection(\"multicollection1\", client, 2, 2);\n      createCollection(\"multicollection2\", client, 2, 2);\n      waitForRecoveriesToFinish(\"multicollection1\", false);\n      waitForRecoveriesToFinish(\"multicollection2\", false);\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     // default - will add them to multicollection1\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkCollectionParameters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkCollectionParameters().mjava","sourceNew":"  @Test\n  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"multicollection1\", client.getZkStateReader(), false, true, TIMEOUT);\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"multicollection2\", client.getZkStateReader(), false, true, TIMEOUT);\n\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     // default - will add them to multicollection1\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n\n","sourceOld":"  private void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(\"multicollection1\")) {\n\n      createCollection(\"multicollection1\", client, 2, 2);\n      createCollection(\"multicollection2\", client, 2, 2);\n      waitForRecoveriesToFinish(\"multicollection1\", false);\n      waitForRecoveriesToFinish(\"multicollection2\", false);\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     // default - will add them to multicollection1\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkCollectionParameters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkCollectionParameters().mjava","sourceNew":"  @Test\n  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"multicollection1\", client.getZkStateReader(), false, true, TIMEOUT);\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"multicollection2\", client.getZkStateReader(), false, true, TIMEOUT);\n\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     // default - will add them to multicollection1\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n\n","sourceOld":"  private void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(\"multicollection1\")) {\n\n      createCollection(\"multicollection1\", client, 2, 2);\n      createCollection(\"multicollection2\", client, 2, 2);\n      waitForRecoveriesToFinish(\"multicollection1\", false);\n      waitForRecoveriesToFinish(\"multicollection2\", false);\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     // default - will add them to multicollection1\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkCollectionParameters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#checkCollectionParameters().mjava","sourceNew":"  @Test\n  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      cluster.waitForActiveCollection(\"multicollection1\", 2, 2);\n      cluster.waitForActiveCollection(\"multicollection2\", 2, 2);\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     // default - will add them to multicollection1\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"multicollection1\", client.getZkStateReader(), false, true, TIMEOUT);\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"multicollection2\", client.getZkStateReader(), false, true, TIMEOUT);\n\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     // default - will add them to multicollection1\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n\n","bugFix":["b940572a59da1b42b6c20ab5278155b12816807a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","b940572a59da1b42b6c20ab5278155b12816807a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["73450c0955930295d34703e7ddbfc6973b7a121a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b940572a59da1b42b6c20ab5278155b12816807a":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"bd78ba595fa6cdd7fff930f26d154d13a823fa47":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73450c0955930295d34703e7ddbfc6973b7a121a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","b940572a59da1b42b6c20ab5278155b12816807a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}