{"path":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeAnalyzer(SimpleOrderedMap[Object],String).mjava","commits":[{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeAnalyzer(SimpleOrderedMap[Object],String).mjava","pathOld":"/dev/null","sourceNew":"  private void writeAnalyzer(SimpleOrderedMap<Object> analyzerProperties, String analyzerType) throws IOException {\n    openStartTag(FieldType.ANALYZER);\n    if (null != analyzerType) {\n      writeAttr(FieldType.TYPE, analyzerType);\n    }\n    List<SimpleOrderedMap<Object>> charFilterPropertiesList = null;\n    SimpleOrderedMap<Object> tokenizerProperties = null;\n    List<SimpleOrderedMap<Object>> filterPropertiesList = null;\n    for (int i = 0 ; i < analyzerProperties.size() ; ++i) {\n      String name = analyzerProperties.getName(i);\n      if (name.equals(FieldType.CHAR_FILTERS)) {\n        charFilterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.TOKENIZER)) {\n        tokenizerProperties = (SimpleOrderedMap<Object>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.FILTERS)) {\n        filterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.CLASS_NAME)) {\n        if ( ! \"solr.TokenizerChain\".equals(analyzerProperties.getVal(i))) {\n          writeAttr(name, analyzerProperties.getVal(i).toString());\n        }\n      }\n    }\n    boolean isEmptyTag\n        = null == charFilterPropertiesList && null == tokenizerProperties && null == filterPropertiesList;\n    if (isEmptyTag) {\n      closeStartTag(true);\n    } else {\n      closeStartTag(false);\n      incLevel();\n      if (null != charFilterPropertiesList) {\n        for (SimpleOrderedMap<Object> charFilterProperties : charFilterPropertiesList) {\n          openStartTag(FieldType.CHAR_FILTER);\n          for (int i = 0 ; i < charFilterProperties.size() ; ++i) {\n            writeAttr(charFilterProperties.getName(i), charFilterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      if (null != tokenizerProperties) {\n        openStartTag(FieldType.TOKENIZER);\n        for (int i = 0 ; i < tokenizerProperties.size() ; ++i) {\n          writeAttr(tokenizerProperties.getName(i), tokenizerProperties.getVal(i).toString());\n        }\n        closeStartTag(true);\n      }\n      if (null != filterPropertiesList) {\n        for (SimpleOrderedMap<Object> filterProperties : filterPropertiesList) {\n          openStartTag(FieldType.FILTER);\n          for (int i = 0 ; i < filterProperties.size() ; ++i) {\n            writeAttr(filterProperties.getName(i), filterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      decLevel();\n      endTag(FieldType.ANALYZER);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b91012493e4750b9dc169cf1ae8cdd91493b42","date":1569935879,"type":3,"author":"Thomas WÃ¶ckinger","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeAnalyzer(SimpleOrderedMap[Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeAnalyzer(SimpleOrderedMap[Object],String).mjava","sourceNew":"  private void writeAnalyzer(SimpleOrderedMap<Object> analyzerProperties, String analyzerType) throws IOException {\n    openStartTag(FieldType.ANALYZER);\n    if (null != analyzerType) {\n      writeAttr(FieldType.TYPE, analyzerType);\n    }\n    List<SimpleOrderedMap<Object>> charFilterPropertiesList = null;\n    SimpleOrderedMap<Object> tokenizerProperties = null;\n    List<SimpleOrderedMap<Object>> filterPropertiesList = null;\n    for (int i = 0 ; i < analyzerProperties.size() ; ++i) {\n      String name = analyzerProperties.getName(i);\n      if (name.equals(FieldType.CHAR_FILTERS)) {\n        charFilterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.TOKENIZER)) {\n        tokenizerProperties = (SimpleOrderedMap<Object>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.FILTERS)) {\n        filterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.CLASS_NAME)) {\n        if ( ! \"solr.TokenizerChain\".equals(analyzerProperties.getVal(i))) {\n          writeAttr(name, analyzerProperties.getVal(i).toString());\n        }\n      } else if (name.equals(IndexSchema.LUCENE_MATCH_VERSION_PARAM)) {\n        writeAttr(name, analyzerProperties.getVal(i).toString());\n      }\n    }\n    boolean isEmptyTag\n        = null == charFilterPropertiesList && null == tokenizerProperties && null == filterPropertiesList;\n    if (isEmptyTag) {\n      closeStartTag(true);\n    } else {\n      closeStartTag(false);\n      incLevel();\n      if (null != charFilterPropertiesList) {\n        for (SimpleOrderedMap<Object> charFilterProperties : charFilterPropertiesList) {\n          openStartTag(FieldType.CHAR_FILTER);\n          for (int i = 0 ; i < charFilterProperties.size() ; ++i) {\n            writeAttr(charFilterProperties.getName(i), charFilterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      if (null != tokenizerProperties) {\n        openStartTag(FieldType.TOKENIZER);\n        for (int i = 0 ; i < tokenizerProperties.size() ; ++i) {\n          writeAttr(tokenizerProperties.getName(i), tokenizerProperties.getVal(i).toString());\n        }\n        closeStartTag(true);\n      }\n      if (null != filterPropertiesList) {\n        for (SimpleOrderedMap<Object> filterProperties : filterPropertiesList) {\n          openStartTag(FieldType.FILTER);\n          for (int i = 0 ; i < filterProperties.size() ; ++i) {\n            writeAttr(filterProperties.getName(i), filterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      decLevel();\n      endTag(FieldType.ANALYZER);\n    }\n  }\n\n","sourceOld":"  private void writeAnalyzer(SimpleOrderedMap<Object> analyzerProperties, String analyzerType) throws IOException {\n    openStartTag(FieldType.ANALYZER);\n    if (null != analyzerType) {\n      writeAttr(FieldType.TYPE, analyzerType);\n    }\n    List<SimpleOrderedMap<Object>> charFilterPropertiesList = null;\n    SimpleOrderedMap<Object> tokenizerProperties = null;\n    List<SimpleOrderedMap<Object>> filterPropertiesList = null;\n    for (int i = 0 ; i < analyzerProperties.size() ; ++i) {\n      String name = analyzerProperties.getName(i);\n      if (name.equals(FieldType.CHAR_FILTERS)) {\n        charFilterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.TOKENIZER)) {\n        tokenizerProperties = (SimpleOrderedMap<Object>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.FILTERS)) {\n        filterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.CLASS_NAME)) {\n        if ( ! \"solr.TokenizerChain\".equals(analyzerProperties.getVal(i))) {\n          writeAttr(name, analyzerProperties.getVal(i).toString());\n        }\n      }\n    }\n    boolean isEmptyTag\n        = null == charFilterPropertiesList && null == tokenizerProperties && null == filterPropertiesList;\n    if (isEmptyTag) {\n      closeStartTag(true);\n    } else {\n      closeStartTag(false);\n      incLevel();\n      if (null != charFilterPropertiesList) {\n        for (SimpleOrderedMap<Object> charFilterProperties : charFilterPropertiesList) {\n          openStartTag(FieldType.CHAR_FILTER);\n          for (int i = 0 ; i < charFilterProperties.size() ; ++i) {\n            writeAttr(charFilterProperties.getName(i), charFilterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      if (null != tokenizerProperties) {\n        openStartTag(FieldType.TOKENIZER);\n        for (int i = 0 ; i < tokenizerProperties.size() ; ++i) {\n          writeAttr(tokenizerProperties.getName(i), tokenizerProperties.getVal(i).toString());\n        }\n        closeStartTag(true);\n      }\n      if (null != filterPropertiesList) {\n        for (SimpleOrderedMap<Object> filterProperties : filterPropertiesList) {\n          openStartTag(FieldType.FILTER);\n          for (int i = 0 ; i < filterProperties.size() ; ++i) {\n            writeAttr(filterProperties.getName(i), filterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      decLevel();\n      endTag(FieldType.ANALYZER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeAnalyzer(SimpleOrderedMap[Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeAnalyzer(SimpleOrderedMap[Object],String).mjava","sourceNew":"  private void writeAnalyzer(SimpleOrderedMap<Object> analyzerProperties, String analyzerType) throws IOException {\n    openStartTag(FieldType.ANALYZER);\n    if (null != analyzerType) {\n      writeAttr(FieldType.TYPE, analyzerType);\n    }\n    List<SimpleOrderedMap<Object>> charFilterPropertiesList = null;\n    SimpleOrderedMap<Object> tokenizerProperties = null;\n    List<SimpleOrderedMap<Object>> filterPropertiesList = null;\n    for (int i = 0 ; i < analyzerProperties.size() ; ++i) {\n      String name = analyzerProperties.getName(i);\n      if (name.equals(FieldType.CHAR_FILTERS)) {\n        charFilterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.TOKENIZER)) {\n        tokenizerProperties = (SimpleOrderedMap<Object>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.FILTERS)) {\n        filterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.CLASS_NAME)) {\n        if ( ! \"solr.TokenizerChain\".equals(analyzerProperties.getVal(i))) {\n          writeAttr(name, analyzerProperties.getVal(i).toString());\n        }\n      } else if (name.equals(IndexSchema.LUCENE_MATCH_VERSION_PARAM)) {\n        writeAttr(name, analyzerProperties.getVal(i).toString());\n      }\n    }\n    boolean isEmptyTag\n        = null == charFilterPropertiesList && null == tokenizerProperties && null == filterPropertiesList;\n    if (isEmptyTag) {\n      closeStartTag(true);\n    } else {\n      closeStartTag(false);\n      incLevel();\n      if (null != charFilterPropertiesList) {\n        for (SimpleOrderedMap<Object> charFilterProperties : charFilterPropertiesList) {\n          openStartTag(FieldType.CHAR_FILTER);\n          for (int i = 0 ; i < charFilterProperties.size() ; ++i) {\n            writeAttr(charFilterProperties.getName(i), charFilterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      if (null != tokenizerProperties) {\n        openStartTag(FieldType.TOKENIZER);\n        for (int i = 0 ; i < tokenizerProperties.size() ; ++i) {\n          writeAttr(tokenizerProperties.getName(i), tokenizerProperties.getVal(i).toString());\n        }\n        closeStartTag(true);\n      }\n      if (null != filterPropertiesList) {\n        for (SimpleOrderedMap<Object> filterProperties : filterPropertiesList) {\n          openStartTag(FieldType.FILTER);\n          for (int i = 0 ; i < filterProperties.size() ; ++i) {\n            writeAttr(filterProperties.getName(i), filterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      decLevel();\n      endTag(FieldType.ANALYZER);\n    }\n  }\n\n","sourceOld":"  private void writeAnalyzer(SimpleOrderedMap<Object> analyzerProperties, String analyzerType) throws IOException {\n    openStartTag(FieldType.ANALYZER);\n    if (null != analyzerType) {\n      writeAttr(FieldType.TYPE, analyzerType);\n    }\n    List<SimpleOrderedMap<Object>> charFilterPropertiesList = null;\n    SimpleOrderedMap<Object> tokenizerProperties = null;\n    List<SimpleOrderedMap<Object>> filterPropertiesList = null;\n    for (int i = 0 ; i < analyzerProperties.size() ; ++i) {\n      String name = analyzerProperties.getName(i);\n      if (name.equals(FieldType.CHAR_FILTERS)) {\n        charFilterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.TOKENIZER)) {\n        tokenizerProperties = (SimpleOrderedMap<Object>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.FILTERS)) {\n        filterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.CLASS_NAME)) {\n        if ( ! \"solr.TokenizerChain\".equals(analyzerProperties.getVal(i))) {\n          writeAttr(name, analyzerProperties.getVal(i).toString());\n        }\n      }\n    }\n    boolean isEmptyTag\n        = null == charFilterPropertiesList && null == tokenizerProperties && null == filterPropertiesList;\n    if (isEmptyTag) {\n      closeStartTag(true);\n    } else {\n      closeStartTag(false);\n      incLevel();\n      if (null != charFilterPropertiesList) {\n        for (SimpleOrderedMap<Object> charFilterProperties : charFilterPropertiesList) {\n          openStartTag(FieldType.CHAR_FILTER);\n          for (int i = 0 ; i < charFilterProperties.size() ; ++i) {\n            writeAttr(charFilterProperties.getName(i), charFilterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      if (null != tokenizerProperties) {\n        openStartTag(FieldType.TOKENIZER);\n        for (int i = 0 ; i < tokenizerProperties.size() ; ++i) {\n          writeAttr(tokenizerProperties.getName(i), tokenizerProperties.getVal(i).toString());\n        }\n        closeStartTag(true);\n      }\n      if (null != filterPropertiesList) {\n        for (SimpleOrderedMap<Object> filterProperties : filterPropertiesList) {\n          openStartTag(FieldType.FILTER);\n          for (int i = 0 ; i < filterProperties.size() ; ++i) {\n            writeAttr(filterProperties.getName(i), filterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      decLevel();\n      endTag(FieldType.ANALYZER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeAnalyzer(SimpleOrderedMap[Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeAnalyzer(SimpleOrderedMap[Object],String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void writeAnalyzer(SimpleOrderedMap<Object> analyzerProperties, String analyzerType) throws IOException {\n    openStartTag(FieldType.ANALYZER);\n    if (null != analyzerType) {\n      writeAttr(FieldType.TYPE, analyzerType);\n    }\n    List<SimpleOrderedMap<Object>> charFilterPropertiesList = null;\n    SimpleOrderedMap<Object> tokenizerProperties = null;\n    List<SimpleOrderedMap<Object>> filterPropertiesList = null;\n    for (int i = 0 ; i < analyzerProperties.size() ; ++i) {\n      String name = analyzerProperties.getName(i);\n      if (name.equals(FieldType.CHAR_FILTERS)) {\n        charFilterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.TOKENIZER)) {\n        tokenizerProperties = (SimpleOrderedMap<Object>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.FILTERS)) {\n        filterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.CLASS_NAME)) {\n        if ( ! \"solr.TokenizerChain\".equals(analyzerProperties.getVal(i))) {\n          writeAttr(name, analyzerProperties.getVal(i).toString());\n        }\n      } else if (name.equals(IndexSchema.LUCENE_MATCH_VERSION_PARAM)) {\n        writeAttr(name, analyzerProperties.getVal(i).toString());\n      }\n    }\n    boolean isEmptyTag\n        = null == charFilterPropertiesList && null == tokenizerProperties && null == filterPropertiesList;\n    if (isEmptyTag) {\n      closeStartTag(true);\n    } else {\n      closeStartTag(false);\n      incLevel();\n      if (null != charFilterPropertiesList) {\n        for (SimpleOrderedMap<Object> charFilterProperties : charFilterPropertiesList) {\n          openStartTag(FieldType.CHAR_FILTER);\n          for (int i = 0 ; i < charFilterProperties.size() ; ++i) {\n            writeAttr(charFilterProperties.getName(i), charFilterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      if (null != tokenizerProperties) {\n        openStartTag(FieldType.TOKENIZER);\n        for (int i = 0 ; i < tokenizerProperties.size() ; ++i) {\n          writeAttr(tokenizerProperties.getName(i), tokenizerProperties.getVal(i).toString());\n        }\n        closeStartTag(true);\n      }\n      if (null != filterPropertiesList) {\n        for (SimpleOrderedMap<Object> filterProperties : filterPropertiesList) {\n          openStartTag(FieldType.FILTER);\n          for (int i = 0 ; i < filterProperties.size() ; ++i) {\n            writeAttr(filterProperties.getName(i), filterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      decLevel();\n      endTag(FieldType.ANALYZER);\n    }\n  }\n\n","sourceOld":"  private void writeAnalyzer(SimpleOrderedMap<Object> analyzerProperties, String analyzerType) throws IOException {\n    openStartTag(FieldType.ANALYZER);\n    if (null != analyzerType) {\n      writeAttr(FieldType.TYPE, analyzerType);\n    }\n    List<SimpleOrderedMap<Object>> charFilterPropertiesList = null;\n    SimpleOrderedMap<Object> tokenizerProperties = null;\n    List<SimpleOrderedMap<Object>> filterPropertiesList = null;\n    for (int i = 0 ; i < analyzerProperties.size() ; ++i) {\n      String name = analyzerProperties.getName(i);\n      if (name.equals(FieldType.CHAR_FILTERS)) {\n        charFilterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.TOKENIZER)) {\n        tokenizerProperties = (SimpleOrderedMap<Object>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.FILTERS)) {\n        filterPropertiesList = (List<SimpleOrderedMap<Object>>)analyzerProperties.getVal(i);\n      } else if (name.equals(FieldType.CLASS_NAME)) {\n        if ( ! \"solr.TokenizerChain\".equals(analyzerProperties.getVal(i))) {\n          writeAttr(name, analyzerProperties.getVal(i).toString());\n        }\n      } else if (name.equals(IndexSchema.LUCENE_MATCH_VERSION_PARAM)) {\n        writeAttr(name, analyzerProperties.getVal(i).toString());\n      }\n    }\n    boolean isEmptyTag\n        = null == charFilterPropertiesList && null == tokenizerProperties && null == filterPropertiesList;\n    if (isEmptyTag) {\n      closeStartTag(true);\n    } else {\n      closeStartTag(false);\n      incLevel();\n      if (null != charFilterPropertiesList) {\n        for (SimpleOrderedMap<Object> charFilterProperties : charFilterPropertiesList) {\n          openStartTag(FieldType.CHAR_FILTER);\n          for (int i = 0 ; i < charFilterProperties.size() ; ++i) {\n            writeAttr(charFilterProperties.getName(i), charFilterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      if (null != tokenizerProperties) {\n        openStartTag(FieldType.TOKENIZER);\n        for (int i = 0 ; i < tokenizerProperties.size() ; ++i) {\n          writeAttr(tokenizerProperties.getName(i), tokenizerProperties.getVal(i).toString());\n        }\n        closeStartTag(true);\n      }\n      if (null != filterPropertiesList) {\n        for (SimpleOrderedMap<Object> filterProperties : filterPropertiesList) {\n          openStartTag(FieldType.FILTER);\n          for (int i = 0 ; i < filterProperties.size() ; ++i) {\n            writeAttr(filterProperties.getName(i), filterProperties.getVal(i).toString());\n          }\n          closeStartTag(true);\n        }\n      }\n      decLevel();\n      endTag(FieldType.ANALYZER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["73b91012493e4750b9dc169cf1ae8cdd91493b42"],"73b91012493e4750b9dc169cf1ae8cdd91493b42":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"b0b597c65628ca9e73913a07e81691f8229bae35":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","73b91012493e4750b9dc169cf1ae8cdd91493b42"]},"commit2Childs":{"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["73b91012493e4750b9dc169cf1ae8cdd91493b42","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73b91012493e4750b9dc169cf1ae8cdd91493b42":["06a8891f085f71282bb3ece1b1732b68f07813a3","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}