{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.LimitedStoredFieldVisitor#stringField(FieldInfo,byte[]).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.LimitedStoredFieldVisitor#stringField(FieldInfo,byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, byte[] byteValue) throws IOException {\n      String value = new String(byteValue, StandardCharsets.UTF_8);\n      assert currentField >= 0;\n      CharSequence curValue = values[currentField];\n      if (curValue == null) {\n        //question: if truncate due to maxLength, should we try and avoid keeping the other chars in-memory on\n        //  the backing char[]?\n        values[currentField] = value.substring(0, Math.min(maxLength, value.length()));//note: may return 'this'\n        return;\n      }\n      final int lengthBudget = maxLength - curValue.length();\n      if (lengthBudget <= 0) {\n        return;\n      }\n      StringBuilder curValueBuilder;\n      if (curValue instanceof StringBuilder) {\n        curValueBuilder = (StringBuilder) curValue;\n      } else {\n        // upgrade String to StringBuilder. Choose a good initial size.\n        curValueBuilder = new StringBuilder(curValue.length() + Math.min(lengthBudget, value.length() + 256));\n        curValueBuilder.append(curValue);\n      }\n      curValueBuilder.append(valueSeparator);\n      curValueBuilder.append(value.substring(0, Math.min(lengthBudget - 1, value.length())));\n      values[currentField] = curValueBuilder;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.LimitedStoredFieldVisitor#stringField(FieldInfo,byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, byte[] byteValue) throws IOException {\n      String value = new String(byteValue, StandardCharsets.UTF_8);\n      assert currentField >= 0;\n      CharSequence curValue = values[currentField];\n      if (curValue == null) {\n        //question: if truncate due to maxLength, should we try and avoid keeping the other chars in-memory on\n        //  the backing char[]?\n        values[currentField] = value.substring(0, Math.min(maxLength, value.length()));//note: may return 'this'\n        return;\n      }\n      final int lengthBudget = maxLength - curValue.length();\n      if (lengthBudget <= 0) {\n        return;\n      }\n      StringBuilder curValueBuilder;\n      if (curValue instanceof StringBuilder) {\n        curValueBuilder = (StringBuilder) curValue;\n      } else {\n        // upgrade String to StringBuilder. Choose a good initial size.\n        curValueBuilder = new StringBuilder(curValue.length() + Math.min(lengthBudget, value.length() + 256));\n        curValueBuilder.append(curValue);\n      }\n      curValueBuilder.append(valueSeparator);\n      curValueBuilder.append(value.substring(0, Math.min(lengthBudget - 1, value.length())));\n      values[currentField] = curValueBuilder;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500188ac33da6ce742a5b18858f34701ef16c77a","date":1558462722,"type":5,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.LimitedStoredFieldVisitor#stringField(FieldInfo,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter.LimitedStoredFieldVisitor#stringField(FieldInfo,byte[]).mjava","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      assert currentField >= 0;\n      Objects.requireNonNull(value, \"String value should not be null\");\n      CharSequence curValue = values[currentField];\n      if (curValue == null) {\n        //question: if truncate due to maxLength, should we try and avoid keeping the other chars in-memory on\n        //  the backing char[]?\n        values[currentField] = value.substring(0, Math.min(maxLength, value.length()));//note: may return 'this'\n        return;\n      }\n      final int lengthBudget = maxLength - curValue.length();\n      if (lengthBudget <= 0) {\n        return;\n      }\n      StringBuilder curValueBuilder;\n      if (curValue instanceof StringBuilder) {\n        curValueBuilder = (StringBuilder) curValue;\n      } else {\n        // upgrade String to StringBuilder. Choose a good initial size.\n        curValueBuilder = new StringBuilder(curValue.length() + Math.min(lengthBudget, value.length() + 256));\n        curValueBuilder.append(curValue);\n      }\n      curValueBuilder.append(valueSeparator);\n      curValueBuilder.append(value.substring(0, Math.min(lengthBudget - 1, value.length())));\n      values[currentField] = curValueBuilder;\n    }\n\n","sourceOld":"    @Override\n    public void stringField(FieldInfo fieldInfo, byte[] byteValue) throws IOException {\n      String value = new String(byteValue, StandardCharsets.UTF_8);\n      assert currentField >= 0;\n      CharSequence curValue = values[currentField];\n      if (curValue == null) {\n        //question: if truncate due to maxLength, should we try and avoid keeping the other chars in-memory on\n        //  the backing char[]?\n        values[currentField] = value.substring(0, Math.min(maxLength, value.length()));//note: may return 'this'\n        return;\n      }\n      final int lengthBudget = maxLength - curValue.length();\n      if (lengthBudget <= 0) {\n        return;\n      }\n      StringBuilder curValueBuilder;\n      if (curValue instanceof StringBuilder) {\n        curValueBuilder = (StringBuilder) curValue;\n      } else {\n        // upgrade String to StringBuilder. Choose a good initial size.\n        curValueBuilder = new StringBuilder(curValue.length() + Math.min(lengthBudget, value.length() + 256));\n        curValueBuilder.append(curValue);\n      }\n      curValueBuilder.append(valueSeparator);\n      curValueBuilder.append(value.substring(0, Math.min(lengthBudget - 1, value.length())));\n      values[currentField] = curValueBuilder;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"500188ac33da6ce742a5b18858f34701ef16c77a":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["500188ac33da6ce742a5b18858f34701ef16c77a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["500188ac33da6ce742a5b18858f34701ef16c77a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"500188ac33da6ce742a5b18858f34701ef16c77a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}