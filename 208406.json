{"path":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000*_TestUtil.getRandomMultiplier(); l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000*_TestUtil.getRandomMultiplier(); l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000*_TestUtil.getRandomMultiplier(); l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000*_TestUtil.getRandomMultiplier(); l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000*_TestUtil.getRandomMultiplier(); l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000*_TestUtil.getRandomMultiplier(); l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000*_TestUtil.getRandomMultiplier(); l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000*_TestUtil.getRandomMultiplier(); l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000*_TestUtil.getRandomMultiplier(); l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000*_TestUtil.getRandomMultiplier(); l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000*_TestUtil.getRandomMultiplier(); l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000*_TestUtil.getRandomMultiplier(); l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000*_TestUtil.getRandomMultiplier(); l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    MockRAMDirectory directory = newDirectory(rnd);\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    Directory directory = newDirectory(rnd);\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    MockRAMDirectory directory = newDirectory(rnd);\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    Directory directory = newDirectory(rnd);\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rnd, directory);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=new IndexSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = (TEST_NIGHTLY ? 5000 : 500) * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = (TEST_NIGHTLY ? 5000 : 500) * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = (TEST_NIGHTLY ? 5000 : 500) * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = 5000 * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = (TEST_NIGHTLY ? 5000 : 500) * RANDOM_MULTIPLIER;\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = 50 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new NumericField(\"trie\").setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new NumericField(\"trie\").setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new NumericField(\"trie\").setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new NumericField(\"trie\").setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new NumericField(\"trie\").setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new NumericField(\"trie\", value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new NumericField(\"trie\").setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new NumericField(\"trie\", value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new NumericField(\"trie\", value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["1509f151d7692d84fae414b2b799ac06ba60fcb4","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","150488c1317972164a9a824be05b1ba2ba0fc68c"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"fa0f44f887719e97183771e977cfc4bfb485b766":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","f83af14a2a8131b14d7aee6274c740334e0363d3"],"70ad682703b8585f5d0a637efec044d57ec05efb":["150488c1317972164a9a824be05b1ba2ba0fc68c","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["2aafd88401639311b0404e67c94e829e123a0e45"],"2aafd88401639311b0404e67c94e829e123a0e45":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a3776dccca01c11e7046323cfad46a3b4a471233":["3e492fb0f2bb0b4b47208286f9331ff55963c656","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","f83af14a2a8131b14d7aee6274c740334e0363d3"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["1509f151d7692d84fae414b2b799ac06ba60fcb4","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","fa0f44f887719e97183771e977cfc4bfb485b766"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2aafd88401639311b0404e67c94e829e123a0e45"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f83af14a2a8131b14d7aee6274c740334e0363d3","79c2cb24929f2649a8875fb629086171f914d5ce"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"2aafd88401639311b0404e67c94e829e123a0e45":["d572389229127c297dd1fa5ce4758e1cec41e799"],"962d04139994fce5193143ef35615499a9a96d78":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","790e1fde4caa765b3faaad3fbcd25c6973450336","868da859b43505d9d2a023bfeae6dd0c795f5295"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"150488c1317972164a9a824be05b1ba2ba0fc68c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}