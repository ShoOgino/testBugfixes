{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSolrQueryEscapingEvaluator().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSolrQueryEscapingEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSolrQueryEscapingEvaluator().mjava","sourceNew":"  /**\n   * <p/>Returns an <code>Evaluator</code> instance meant to be used for escaping reserved characters in Solr\n   * queries</p>\n   *\n   * @return an <code>Evaluator</code> instance capable of escaping reserved characters in solr queries.\n   *\n   * @see org.apache.solr.client.solrj.util.ClientUtils#escapeQueryChars(String)\n   */\n  public static Evaluator getSolrQueryEscapingEvaluator() {\n    return new Evaluator() {\n      @Override\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'escapeQueryChars' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n        return ClientUtils.escapeQueryChars(s);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/>Returns an <code>Evaluator</code> instance meant to be used for escaping reserved characters in Solr\n   * queries</p>\n   *\n   * @return an <code>Evaluator</code> instance capable of escaping reserved characters in solr queries.\n   *\n   * @see org.apache.solr.client.solrj.util.ClientUtils#escapeQueryChars(String)\n   */\n  public static Evaluator getSolrQueryEscapingEvaluator() {\n    return new Evaluator() {\n      @Override\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'escapeQueryChars' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n        return ClientUtils.escapeQueryChars(s);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSolrQueryEscapingEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSolrQueryEscapingEvaluator().mjava","sourceNew":"  /**\n   * <p/>Returns an <code>Evaluator</code> instance meant to be used for escaping reserved characters in Solr\n   * queries</p>\n   *\n   * @return an <code>Evaluator</code> instance capable of escaping reserved characters in solr queries.\n   *\n   * @see org.apache.solr.client.solrj.util.ClientUtils#escapeQueryChars(String)\n   */\n  public static Evaluator getSolrQueryEscapingEvaluator() {\n    return new Evaluator() {\n      @Override\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'escapeQueryChars' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n        return ClientUtils.escapeQueryChars(s);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/>Returns an <code>Evaluator</code> instance meant to be used for escaping reserved characters in Solr\n   * queries</p>\n   *\n   * @return an <code>Evaluator</code> instance capable of escaping reserved characters in solr queries.\n   *\n   * @see org.apache.solr.client.solrj.util.ClientUtils#escapeQueryChars(String)\n   */\n  public static Evaluator getSolrQueryEscapingEvaluator() {\n    return new Evaluator() {\n      @Override\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'escapeQueryChars' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n        return ClientUtils.escapeQueryChars(s);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSolrQueryEscapingEvaluator().mjava","sourceNew":null,"sourceOld":"  /**\n   * <p/>Returns an <code>Evaluator</code> instance meant to be used for escaping reserved characters in Solr\n   * queries</p>\n   *\n   * @return an <code>Evaluator</code> instance capable of escaping reserved characters in solr queries.\n   *\n   * @see org.apache.solr.client.solrj.util.ClientUtils#escapeQueryChars(String)\n   */\n  public static Evaluator getSolrQueryEscapingEvaluator() {\n    return new Evaluator() {\n      @Override\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'escapeQueryChars' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n        return ClientUtils.escapeQueryChars(s);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSolrQueryEscapingEvaluator().mjava","sourceNew":null,"sourceOld":"  /**\n   * <p/>Returns an <code>Evaluator</code> instance meant to be used for escaping reserved characters in Solr\n   * queries</p>\n   *\n   * @return an <code>Evaluator</code> instance capable of escaping reserved characters in solr queries.\n   *\n   * @see org.apache.solr.client.solrj.util.ClientUtils#escapeQueryChars(String)\n   */\n  public static Evaluator getSolrQueryEscapingEvaluator() {\n    return new Evaluator() {\n      @Override\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'escapeQueryChars' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n        return ClientUtils.escapeQueryChars(s);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c7b0ae5716b6c2044195a818e9ae58205175659":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","7c7b0ae5716b6c2044195a818e9ae58205175659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c7b0ae5716b6c2044195a818e9ae58205175659"]},"commit2Childs":{"7c7b0ae5716b6c2044195a818e9ae58205175659":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}