{"path":"lucene/src/java/org/apache/lucene/util/BitVector#subset(int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#subset(int,int).mjava","pathOld":"src/java/org/apache/lucene/util/BitVector#subset(int,int).mjava","sourceNew":"  /**\n   * Retrieve a subset of this BitVector.\n   * \n   * @param start\n   *            starting index, inclusive\n   * @param end\n   *            ending index, exclusive\n   * @return subset\n   */\n  public BitVector subset(int start, int end) {\n    if (start < 0 || end > size() || end < start)\n      throw new IndexOutOfBoundsException();\n    // Special case -- return empty vector is start == end\n    if (end == start) return new BitVector(0);\n    byte[] bits = new byte[((end - start - 1) >>> 3) + 1];\n    int s = start >>> 3;\n    for (int i = 0; i < bits.length; i++) {\n      int cur = 0xFF & this.bits[i + s];\n      int next = i + s + 1 >= this.bits.length ? 0 : 0xFF & this.bits[i + s + 1];\n      bits[i] = (byte) ((cur >>> (start & 7)) | ((next << (8 - (start & 7)))));\n    }\n    int bitsToClear = (bits.length * 8 - (end - start)) % 8;\n    bits[bits.length - 1] &= ~(0xFF << (8 - bitsToClear));\n    return new BitVector(bits, end - start);\n  }\n\n","sourceOld":"  /**\n   * Retrieve a subset of this BitVector.\n   * \n   * @param start\n   *            starting index, inclusive\n   * @param end\n   *            ending index, exclusive\n   * @return subset\n   */\n  public BitVector subset(int start, int end) {\n    if (start < 0 || end > size() || end < start)\n      throw new IndexOutOfBoundsException();\n    // Special case -- return empty vector is start == end\n    if (end == start) return new BitVector(0);\n    byte[] bits = new byte[((end - start - 1) >>> 3) + 1];\n    int s = start >>> 3;\n    for (int i = 0; i < bits.length; i++) {\n      int cur = 0xFF & this.bits[i + s];\n      int next = i + s + 1 >= this.bits.length ? 0 : 0xFF & this.bits[i + s + 1];\n      bits[i] = (byte) ((cur >>> (start & 7)) | ((next << (8 - (start & 7)))));\n    }\n    int bitsToClear = (bits.length * 8 - (end - start)) % 8;\n    bits[bits.length - 1] &= ~(0xFF << (8 - bitsToClear));\n    return new BitVector(bits, end - start);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffa56322f560268d9e8c21373d8a84a9bbbbb7e2","date":1309279617,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#subset(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Retrieve a subset of this BitVector.\n   * \n   * @param start\n   *            starting index, inclusive\n   * @param end\n   *            ending index, exclusive\n   * @return subset\n   */\n  public BitVector subset(int start, int end) {\n    if (start < 0 || end > size() || end < start)\n      throw new IndexOutOfBoundsException();\n    // Special case -- return empty vector is start == end\n    if (end == start) return new BitVector(0);\n    byte[] bits = new byte[((end - start - 1) >>> 3) + 1];\n    int s = start >>> 3;\n    for (int i = 0; i < bits.length; i++) {\n      int cur = 0xFF & this.bits[i + s];\n      int next = i + s + 1 >= this.bits.length ? 0 : 0xFF & this.bits[i + s + 1];\n      bits[i] = (byte) ((cur >>> (start & 7)) | ((next << (8 - (start & 7)))));\n    }\n    int bitsToClear = (bits.length * 8 - (end - start)) % 8;\n    bits[bits.length - 1] &= ~(0xFF << (8 - bitsToClear));\n    return new BitVector(bits, end - start);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#subset(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Retrieve a subset of this BitVector.\n   * \n   * @param start\n   *            starting index, inclusive\n   * @param end\n   *            ending index, exclusive\n   * @return subset\n   */\n  public BitVector subset(int start, int end) {\n    if (start < 0 || end > size() || end < start)\n      throw new IndexOutOfBoundsException();\n    // Special case -- return empty vector is start == end\n    if (end == start) return new BitVector(0);\n    byte[] bits = new byte[((end - start - 1) >>> 3) + 1];\n    int s = start >>> 3;\n    for (int i = 0; i < bits.length; i++) {\n      int cur = 0xFF & this.bits[i + s];\n      int next = i + s + 1 >= this.bits.length ? 0 : 0xFF & this.bits[i + s + 1];\n      bits[i] = (byte) ((cur >>> (start & 7)) | ((next << (8 - (start & 7)))));\n    }\n    int bitsToClear = (bits.length * 8 - (end - start)) % 8;\n    bits[bits.length - 1] &= ~(0xFF << (8 - bitsToClear));\n    return new BitVector(bits, end - start);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#subset(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Retrieve a subset of this BitVector.\n   * \n   * @param start\n   *            starting index, inclusive\n   * @param end\n   *            ending index, exclusive\n   * @return subset\n   */\n  public BitVector subset(int start, int end) {\n    if (start < 0 || end > size() || end < start)\n      throw new IndexOutOfBoundsException();\n    // Special case -- return empty vector is start == end\n    if (end == start) return new BitVector(0);\n    byte[] bits = new byte[((end - start - 1) >>> 3) + 1];\n    int s = start >>> 3;\n    for (int i = 0; i < bits.length; i++) {\n      int cur = 0xFF & this.bits[i + s];\n      int next = i + s + 1 >= this.bits.length ? 0 : 0xFF & this.bits[i + s + 1];\n      bits[i] = (byte) ((cur >>> (start & 7)) | ((next << (8 - (start & 7)))));\n    }\n    int bitsToClear = (bits.length * 8 - (end - start)) % 8;\n    bits[bits.length - 1] &= ~(0xFF << (8 - bitsToClear));\n    return new BitVector(bits, end - start);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","ffa56322f560268d9e8c21373d8a84a9bbbbb7e2"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","ffa56322f560268d9e8c21373d8a84a9bbbbb7e2"],"ffa56322f560268d9e8c21373d8a84a9bbbbb7e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffa56322f560268d9e8c21373d8a84a9bbbbb7e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"ffa56322f560268d9e8c21373d8a84a9bbbbb7e2":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","ffa56322f560268d9e8c21373d8a84a9bbbbb7e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}