{"path":"lucene/core/src/java/org/apache/lucene/index/PointValues#estimateDocCount(IntersectVisitor).mjava","commits":[{"id":"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","date":1570176835,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#estimateDocCount(IntersectVisitor).mjava","pathOld":"/dev/null","sourceNew":"  /** Estimate the number of documents that would be matched by {@link #intersect}\n   * with the given {@link IntersectVisitor}. This should run many times faster\n   * than {@link #intersect(IntersectVisitor)}.\n   * @see DocIdSetIterator#cost */\n  public long estimateDocCount(IntersectVisitor visitor) {\n    long estimatedPointCount = estimatePointCount(visitor);\n    int docCount = getDocCount();\n    double size = size();\n    if (estimatedPointCount >= size) {\n      // math all docs\n      return docCount;\n    } else if (size == docCount || estimatedPointCount == 0L ) {\n      // if the point count estimate is 0 or we have only single values\n      // return this estimate\n      return  estimatedPointCount;\n    } else {\n      // in case of multi values estimate the number of docs using the solution provided in\n      // https://math.stackexchange.com/questions/1175295/urn-problem-probability-of-drawing-balls-of-k-unique-colors\n      // then approximate the solution for points per doc << size() which results in the expression\n      // D * (1 - ((N - n) / N)^(N/D))\n      // where D is the total number of docs, N the total number of points and n the estimated point count\n      long docEstimate = (long) (docCount * (1d - Math.pow((size - estimatedPointCount) / size, size / docCount)));\n      return docEstimate == 0L ? 1L : docEstimate;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#estimateDocCount(IntersectVisitor).mjava","pathOld":"/dev/null","sourceNew":"  /** Estimate the number of documents that would be matched by {@link #intersect}\n   * with the given {@link IntersectVisitor}. This should run many times faster\n   * than {@link #intersect(IntersectVisitor)}.\n   * @see DocIdSetIterator#cost */\n  public long estimateDocCount(IntersectVisitor visitor) {\n    long estimatedPointCount = estimatePointCount(visitor);\n    int docCount = getDocCount();\n    double size = size();\n    if (estimatedPointCount >= size) {\n      // math all docs\n      return docCount;\n    } else if (size == docCount || estimatedPointCount == 0L ) {\n      // if the point count estimate is 0 or we have only single values\n      // return this estimate\n      return  estimatedPointCount;\n    } else {\n      // in case of multi values estimate the number of docs using the solution provided in\n      // https://math.stackexchange.com/questions/1175295/urn-problem-probability-of-drawing-balls-of-k-unique-colors\n      // then approximate the solution for points per doc << size() which results in the expression\n      // D * (1 - ((N - n) / N)^(N/D))\n      // where D is the total number of docs, N the total number of points and n the estimated point count\n      long docEstimate = (long) (docCount * (1d - Math.pow((size - estimatedPointCount) / size, size / docCount)));\n      return docEstimate == 0L ? 1L : docEstimate;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"],"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}