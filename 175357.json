{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#updateLeaderInitiatedRecoveryState(String,String,String,String,String).mjava","commits":[{"id":"dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc","date":1426444850,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#updateLeaderInitiatedRecoveryState(String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#updateLeaderInitiatedRecoveryState(String,String,String,String).mjava","sourceNew":"  private void updateLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName, String state,\n                                                  String leaderCoreNodeName) {\n    if (collection == null || shardId == null || coreNodeName == null) {\n      log.warn(\"Cannot set leader-initiated recovery state znode to \"+state+\" using: collection=\"+collection+\n          \"; shardId=\"+shardId+\"; coreNodeName=\"+coreNodeName);\n      return; // if we don't have complete data about a core in cloud mode, do nothing\n    }\n\n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    \n    if (ZkStateReader.ACTIVE.equals(state)) {\n      // since we're marking it active, we don't need this znode anymore, so delete instead of update\n      try {\n        zkClient.delete(znodePath, -1, false);\n      } catch (Exception justLogIt) {\n        log.warn(\"Failed to delete znode \" + znodePath, justLogIt);\n      }\n      return;\n    }\n\n    Map<String,Object> stateObj = null;\n    try {\n      stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    } catch (Exception exc) {\n      log.warn(exc.getMessage(), exc);\n    }\n    if (stateObj == null)\n      stateObj = ZkNodeProps.makeMap();\n\n    stateObj.put(\"state\", state);\n    // only update the createdBy value if it's not set\n    if (stateObj.get(\"createdByNodeName\") == null)\n      stateObj.put(\"createdByNodeName\", String.valueOf(this.nodeName));\n\n    byte[] znodeData = ZkStateReader.toJSON(stateObj);\n\n    try {\n      if (ZkStateReader.DOWN.equals(state)) {\n        markShardAsDownIfLeader(collection, shardId, leaderCoreNodeName, znodePath, znodeData);\n      } else  {\n        if (zkClient.exists(znodePath, true)) {\n          zkClient.setData(znodePath, znodeData, true);\n        } else {\n          zkClient.makePath(znodePath, znodeData, true);\n        }\n      }\n      log.info(\"Wrote \"+state+\" to \"+znodePath);\n    } catch (Exception exc) {\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to update data to \"+state+\" for znode: \"+znodePath, exc);\n      }\n    }\n  }\n\n","sourceOld":"  private void updateLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName, String state) {\n    if (collection == null || shardId == null || coreNodeName == null) {\n      log.warn(\"Cannot set leader-initiated recovery state znode to \"+state+\" using: collection=\"+collection+\n          \"; shardId=\"+shardId+\"; coreNodeName=\"+coreNodeName);\n      return; // if we don't have complete data about a core in cloud mode, do nothing\n    }\n\n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    \n    if (ZkStateReader.ACTIVE.equals(state)) {\n      // since we're marking it active, we don't need this znode anymore, so delete instead of update\n      try {\n        zkClient.delete(znodePath, -1, false);\n      } catch (Exception justLogIt) {\n        log.warn(\"Failed to delete znode \"+znodePath+\" due to: \"+justLogIt);\n      }\n      return;\n    }\n\n    Map<String,Object> stateObj = null;\n    try {\n      stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    } catch (Exception exc) {\n      log.warn(exc.getMessage(), exc);\n    }\n    if (stateObj == null)\n      stateObj = ZkNodeProps.makeMap();\n\n    stateObj.put(\"state\", state);\n    // only update the createdBy value if it's not set\n    if (stateObj.get(\"createdByNodeName\") == null)\n      stateObj.put(\"createdByNodeName\", String.valueOf(this.nodeName));\n\n    byte[] znodeData = ZkStateReader.toJSON(stateObj);\n    boolean retryOnConnLoss = true; // be a little more robust when trying to write data\n    try {\n      if (zkClient.exists(znodePath, retryOnConnLoss)) {\n        zkClient.setData(znodePath, znodeData, retryOnConnLoss);\n      } else {\n        zkClient.makePath(znodePath, znodeData, retryOnConnLoss);\n      }\n      log.info(\"Wrote \"+state+\" to \"+znodePath);\n    } catch (Exception exc) {\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to update data to \"+state+\" for znode: \"+znodePath, exc);        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0932eb10135843758b2ca508d5aa2b4798aa07f9","date":1426947197,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#updateLeaderInitiatedRecoveryState(String,String,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#updateLeaderInitiatedRecoveryState(String,String,String,String,String).mjava","sourceNew":"  private void updateLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName, String state,\n                                                  String leaderCoreNodeName, boolean retryOnConnLoss) {\n    if (collection == null || shardId == null || coreNodeName == null) {\n      log.warn(\"Cannot set leader-initiated recovery state znode to \"+state+\" using: collection=\"+collection+\n          \"; shardId=\"+shardId+\"; coreNodeName=\"+coreNodeName);\n      return; // if we don't have complete data about a core in cloud mode, do nothing\n    }\n\n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    \n    if (ZkStateReader.ACTIVE.equals(state)) {\n      // since we're marking it active, we don't need this znode anymore, so delete instead of update\n      try {\n        zkClient.delete(znodePath, -1, false);\n      } catch (Exception justLogIt) {\n        log.warn(\"Failed to delete znode \" + znodePath, justLogIt);\n      }\n      return;\n    }\n\n    Map<String,Object> stateObj = null;\n    try {\n      stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    } catch (Exception exc) {\n      log.warn(exc.getMessage(), exc);\n    }\n    if (stateObj == null)\n      stateObj = ZkNodeProps.makeMap();\n\n    stateObj.put(\"state\", state);\n    // only update the createdBy value if it's not set\n    if (stateObj.get(\"createdByNodeName\") == null)\n      stateObj.put(\"createdByNodeName\", String.valueOf(this.nodeName));\n\n    byte[] znodeData = ZkStateReader.toJSON(stateObj);\n\n    try {\n      if (ZkStateReader.DOWN.equals(state)) {\n        markShardAsDownIfLeader(collection, shardId, leaderCoreNodeName, znodePath, znodeData);\n      } else  {\n        if (zkClient.exists(znodePath, true)) {\n          zkClient.setData(znodePath, znodeData, true);\n        } else {\n          zkClient.makePath(znodePath, znodeData, true);\n        }\n      }\n      log.info(\"Wrote \"+state+\" to \"+znodePath);\n    } catch (Exception exc) {\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to update data to \"+state+\" for znode: \"+znodePath, exc);\n      }\n    }\n  }\n\n","sourceOld":"  private void updateLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName, String state,\n                                                  String leaderCoreNodeName) {\n    if (collection == null || shardId == null || coreNodeName == null) {\n      log.warn(\"Cannot set leader-initiated recovery state znode to \"+state+\" using: collection=\"+collection+\n          \"; shardId=\"+shardId+\"; coreNodeName=\"+coreNodeName);\n      return; // if we don't have complete data about a core in cloud mode, do nothing\n    }\n\n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    \n    if (ZkStateReader.ACTIVE.equals(state)) {\n      // since we're marking it active, we don't need this znode anymore, so delete instead of update\n      try {\n        zkClient.delete(znodePath, -1, false);\n      } catch (Exception justLogIt) {\n        log.warn(\"Failed to delete znode \" + znodePath, justLogIt);\n      }\n      return;\n    }\n\n    Map<String,Object> stateObj = null;\n    try {\n      stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    } catch (Exception exc) {\n      log.warn(exc.getMessage(), exc);\n    }\n    if (stateObj == null)\n      stateObj = ZkNodeProps.makeMap();\n\n    stateObj.put(\"state\", state);\n    // only update the createdBy value if it's not set\n    if (stateObj.get(\"createdByNodeName\") == null)\n      stateObj.put(\"createdByNodeName\", String.valueOf(this.nodeName));\n\n    byte[] znodeData = ZkStateReader.toJSON(stateObj);\n\n    try {\n      if (ZkStateReader.DOWN.equals(state)) {\n        markShardAsDownIfLeader(collection, shardId, leaderCoreNodeName, znodePath, znodeData);\n      } else  {\n        if (zkClient.exists(znodePath, true)) {\n          zkClient.setData(znodePath, znodeData, true);\n        } else {\n          zkClient.makePath(znodePath, znodeData, true);\n        }\n      }\n      log.info(\"Wrote \"+state+\" to \"+znodePath);\n    } catch (Exception exc) {\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to update data to \"+state+\" for znode: \"+znodePath, exc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0932eb10135843758b2ca508d5aa2b4798aa07f9":["dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0932eb10135843758b2ca508d5aa2b4798aa07f9"]},"commit2Childs":{"dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc":["0932eb10135843758b2ca508d5aa2b4798aa07f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc"],"0932eb10135843758b2ca508d5aa2b4798aa07f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}