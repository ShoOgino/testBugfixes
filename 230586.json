{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setParams(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setParams(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setParams(String).mjava","sourceNew":"  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    StringTokenizer st = new StringTokenizer(params, \",\");\n    while (st.hasMoreTokens()) {\n      String param = st.nextToken();\n      StringTokenizer expr = new StringTokenizer(param, \":\");\n      String key = expr.nextToken();\n      String value = expr.nextToken();\n      if (key.equalsIgnoreCase(\"analyzer\")) {\n        analyzerClassName = value;\n      } else if (key.equalsIgnoreCase(\"outputUnigrams\")) {\n        outputUnigrams = Boolean.parseBoolean(value);\n      } else if (key.equalsIgnoreCase(\"maxShingleSize\")) {\n        maxShingleSize = (int)Double.parseDouble(value);\n      } else {\n        throw new RuntimeException(\"Unknown parameter \" + param);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    StringTokenizer st = new StringTokenizer(params, \",\");\n    while (st.hasMoreTokens()) {\n      String param = st.nextToken();\n      StringTokenizer expr = new StringTokenizer(param, \":\");\n      String key = expr.nextToken();\n      String value = expr.nextToken();\n      if (key.equalsIgnoreCase(\"analyzer\")) {\n        analyzerClassName = value;\n      } else if (key.equalsIgnoreCase(\"outputUnigrams\")) {\n        outputUnigrams = Boolean.parseBoolean(value);\n      } else if (key.equalsIgnoreCase(\"maxShingleSize\")) {\n        maxShingleSize = (int)Double.parseDouble(value);\n      } else {\n        throw new RuntimeException(\"Unknown parameter \" + param);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bb889a868ab9d608bde8136f42ed7234a3a927b","date":1359393528,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setParams(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    StringTokenizer st = new StringTokenizer(params, \",\");\n    while (st.hasMoreTokens()) {\n      String param = st.nextToken();\n      StringTokenizer expr = new StringTokenizer(param, \":\");\n      String key = expr.nextToken();\n      String value = expr.nextToken();\n      if (key.equalsIgnoreCase(\"analyzer\")) {\n        analyzerClassName = value;\n      } else if (key.equalsIgnoreCase(\"outputUnigrams\")) {\n        outputUnigrams = Boolean.parseBoolean(value);\n      } else if (key.equalsIgnoreCase(\"maxShingleSize\")) {\n        maxShingleSize = (int)Double.parseDouble(value);\n      } else {\n        throw new RuntimeException(\"Unknown parameter \" + param);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":4,"author":"Adrien Grand","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setParams(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setParams(String params) {\n    super.setParams(params);\n    StringTokenizer st = new StringTokenizer(params, \",\");\n    while (st.hasMoreTokens()) {\n      String param = st.nextToken();\n      StringTokenizer expr = new StringTokenizer(param, \":\");\n      String key = expr.nextToken();\n      String value = expr.nextToken();\n      if (key.equalsIgnoreCase(\"analyzer\")) {\n        analyzerClassName = value;\n      } else if (key.equalsIgnoreCase(\"outputUnigrams\")) {\n        outputUnigrams = Boolean.parseBoolean(value);\n      } else if (key.equalsIgnoreCase(\"maxShingleSize\")) {\n        maxShingleSize = (int)Double.parseDouble(value);\n      } else {\n        throw new RuntimeException(\"Unknown parameter \" + param);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7bb889a868ab9d608bde8136f42ed7234a3a927b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"de522d9303bd67c8473a269a1319125d1f3700e0":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7bb889a868ab9d608bde8136f42ed7234a3a927b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bb889a868ab9d608bde8136f42ed7234a3a927b"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7bb889a868ab9d608bde8136f42ed7234a3a927b","de522d9303bd67c8473a269a1319125d1f3700e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7bb889a868ab9d608bde8136f42ed7234a3a927b":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}