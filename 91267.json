{"path":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose.LeakChecker#nopen().mjava","commits":[{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose.LeakChecker#nopen().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/lucene/TestIndexClose.LeakChecker#nopen().mjava","sourceNew":"    public int nopen() {\n      int ret=0;\n      for (int i: openReaders) {\n        System.err.println(\"reader \"+i+\" still open\");\n        ret++;\n      }\n      for (int i: openWriters) {\n        System.err.println(\"writer \"+i+\" still open\");\n        ret++;\n      }\n      return ret;\n    }\n\n","sourceOld":"    public int nopen() {\n      int ret=0;\n      for (int i: openReaders) {\n        System.err.println(\"reader \"+i+\" still open\");\n        ret++;\n      }\n      for (int i: openWriters) {\n        System.err.println(\"writer \"+i+\" still open\");\n        ret++;\n      }\n      return ret;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04ecceea775208973388bb5bcc129d661ca1f9b6","date":1327925961,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose.LeakChecker#nopen().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose.LeakChecker#nopen().mjava","sourceNew":"    public int nopen() {\n      int ret=0;\n      for (DirectoryReader r: readers) {\n        try {\n          // this should throw ex, if already closed!\n          r.getTopReaderContext();\n          System.err.println(\"reader \"+r+\" still open\");\n          ret++;\n        } catch (AlreadyClosedException e) {\n          // fine\n        }\n      }\n      for (int i: openWriters) {\n        System.err.println(\"writer \"+i+\" still open\");\n        ret++;\n      }\n      return ret;\n    }\n\n","sourceOld":"    public int nopen() {\n      int ret=0;\n      for (int i: openReaders) {\n        System.err.println(\"reader \"+i+\" still open\");\n        ret++;\n      }\n      for (int i: openWriters) {\n        System.err.println(\"writer \"+i+\" still open\");\n        ret++;\n      }\n      return ret;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose.LeakChecker#nopen().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose.LeakChecker#nopen().mjava","sourceNew":"    public int nopen() {\n      int ret=0;\n      for (DirectoryReader r: readers) {\n        try {\n          // this should throw ex, if already closed!\n          r.getTopReaderContext();\n          System.err.println(\"reader \"+r+\" still open\");\n          ret++;\n        } catch (AlreadyClosedException e) {\n          // fine\n        }\n      }\n      for (int i: openWriters) {\n        System.err.println(\"writer \"+i+\" still open\");\n        ret++;\n      }\n      return ret;\n    }\n\n","sourceOld":"    public int nopen() {\n      int ret=0;\n      for (int i: openReaders) {\n        System.err.println(\"reader \"+i+\" still open\");\n        ret++;\n      }\n      for (int i: openWriters) {\n        System.err.println(\"writer \"+i+\" still open\");\n        ret++;\n      }\n      return ret;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a25b6a8d5e0b48c8c23b6d406284d1aabc11c039","date":1328058003,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose.LeakChecker#nopen().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose.LeakChecker#nopen().mjava","sourceNew":"    public int nopen() {\n      int ret=0;\n      for (DirectoryReader r: readers) {\n        if (r.getRefCount() > 0) {\n          System.err.println(\"reader \"+r+\" still open\");\n          ret++;\n        }\n      }\n      for (int i: openWriters) {\n        System.err.println(\"writer \"+i+\" still open\");\n        ret++;\n      }\n      return ret;\n    }\n\n","sourceOld":"    public int nopen() {\n      int ret=0;\n      for (DirectoryReader r: readers) {\n        try {\n          // this should throw ex, if already closed!\n          r.getTopReaderContext();\n          System.err.println(\"reader \"+r+\" still open\");\n          ret++;\n        } catch (AlreadyClosedException e) {\n          // fine\n        }\n      }\n      for (int i: openWriters) {\n        System.err.println(\"writer \"+i+\" still open\");\n        ret++;\n      }\n      return ret;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose.LeakChecker#nopen().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose.LeakChecker#nopen().mjava","sourceNew":"    public int nopen() {\n      int ret=0;\n      for (DirectoryReader r: readers) {\n        if (r.getRefCount() > 0) {\n          System.err.println(\"reader \"+r+\" still open\");\n          ret++;\n        }\n      }\n      for (int i: openWriters) {\n        System.err.println(\"writer \"+i+\" still open\");\n        ret++;\n      }\n      return ret;\n    }\n\n","sourceOld":"    public int nopen() {\n      int ret=0;\n      for (DirectoryReader r: readers) {\n        if (r.getRefCount() > 0) {\n          System.err.println(\"reader \"+r+\" still open\");\n          ret++;\n        }\n      }\n      for (int i: openWriters) {\n        System.err.println(\"writer \"+i+\" still open\");\n        ret++;\n      }\n      return ret;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a25b6a8d5e0b48c8c23b6d406284d1aabc11c039"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a25b6a8d5e0b48c8c23b6d406284d1aabc11c039":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"04ecceea775208973388bb5bcc129d661ca1f9b6":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","04ecceea775208973388bb5bcc129d661ca1f9b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["04ecceea775208973388bb5bcc129d661ca1f9b6","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"a25b6a8d5e0b48c8c23b6d406284d1aabc11c039":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"04ecceea775208973388bb5bcc129d661ca1f9b6":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a25b6a8d5e0b48c8c23b6d406284d1aabc11c039"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}