{"path":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251f2ea0d985ea4779dd1d940baf62d4a628faec","date":1315326440,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31a7008bbf175b91cceeaeb7064bdc4fe9a2e34f","date":1326554502,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad31de9d3b830bc174d4c41df9f80f4cac82576","date":1328107867,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n            ModifiableSolrParams mp = new ModifiableSolrParams();\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              mp.set(attrName, attrVal);\n            }\n\n            RequestHandlerUtils.validateCommitParams(mp);\n            SolrParams p = SolrParams.wrapDefaults(mp, req.getParams());   // default to the normal request params for commit options\n            RequestHandlerUtils.updateCommit(cmd, p);\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(UpdateRequestHandler.ADD)) {\n            log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (UpdateRequestHandler.COMMIT.equals(currTag) || UpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, UpdateRequestHandler.OPTIMIZE.equals(currTag));\n            ModifiableSolrParams mp = new ModifiableSolrParams();\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              mp.set(attrName, attrVal);\n            }\n\n            RequestHandlerUtils.validateCommitParams(mp);\n            SolrParams p = SolrParams.wrapDefaults(mp, req.getParams());   // default to the normal request params for commit options\n            RequestHandlerUtils.updateCommit(cmd, p);\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (UpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (UpdateRequestHandler.DELETE.equals(currTag)) {\n            log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    SolrParams params = req.getParams();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            // First look for commitWithin parameter on the request, will be overwritten for individual <add>'s\n            addCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n            addCmd.overwrite = params.getBool(UpdateParams.OVERWRITE, true);\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            if(addCmd != null) {\n              XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n              addCmd.clear();\n              addCmd.solrDoc = readDoc(parser);\n              processor.processAdd(addCmd);\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unexpected <doc> tag without an <add> tag surrounding it.\");\n            }\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n            ModifiableSolrParams mp = new ModifiableSolrParams();\n            \n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              mp.set(attrName, attrVal);\n            }\n\n            RequestHandlerUtils.validateCommitParams(mp);\n            SolrParams p = SolrParams.wrapDefaults(mp, req.getParams());   // default to the normal request params for commit options\n            RequestHandlerUtils.updateCommit(cmd, p);\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"251f2ea0d985ea4779dd1d940baf62d4a628faec":["c26f00b574427b55127e869b935845554afde1fa"],"042e4d934397657ba04c82b46cc5665076bc5c58":["0ad31de9d3b830bc174d4c41df9f80f4cac82576"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"0ad31de9d3b830bc174d4c41df9f80f4cac82576":["31a7008bbf175b91cceeaeb7064bdc4fe9a2e34f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"31a7008bbf175b91cceeaeb7064bdc4fe9a2e34f":["251f2ea0d985ea4779dd1d940baf62d4a628faec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042e4d934397657ba04c82b46cc5665076bc5c58"]},"commit2Childs":{"251f2ea0d985ea4779dd1d940baf62d4a628faec":["31a7008bbf175b91cceeaeb7064bdc4fe9a2e34f"],"042e4d934397657ba04c82b46cc5665076bc5c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["251f2ea0d985ea4779dd1d940baf62d4a628faec"],"0ad31de9d3b830bc174d4c41df9f80f4cac82576":["042e4d934397657ba04c82b46cc5665076bc5c58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"31a7008bbf175b91cceeaeb7064bdc4fe9a2e34f":["0ad31de9d3b830bc174d4c41df9f80f4cac82576"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}