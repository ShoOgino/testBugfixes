{"path":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","commits":[{"id":"7d996c36bf85996da326201b915c87d41449d7f5","date":1403084374,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"node {} Trying to join election at the head \", id);\n          List<String> nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n            log.info(\"Joined at the head  {}\", leaderSeqPath );\n\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"node {} Trying to join election at the head \", id);\n          List<String> nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n            log.info(\"Joined at the head  {}\", leaderSeqPath );\n\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52bb40d1a8459a88868fb810f6c90378004fa285","date":1404198004,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","sourceNew":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"node {} Trying to join election at the head \", id);\n          List<String> nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n            log.info(\"Joined at the head  {}\", leaderSeqPath );\n\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","sourceOld":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"node {} Trying to join election at the head \", id);\n          List<String> nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n            log.info(\"Joined at the head  {}\", leaderSeqPath );\n\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","sourceNew":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"node {} Trying to join election at the head \", id);\n          List<String> nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n            log.info(\"Joined at the head  {}\", leaderSeqPath );\n\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","sourceOld":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"node {} Trying to join election at the head \", id);\n          List<String> nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n            log.info(\"Joined at the head  {}\", leaderSeqPath );\n\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","sourceNew":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"node {} Trying to join election at the head \", id);\n          List<String> nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n            log.info(\"Joined at the head  {}\", leaderSeqPath );\n\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","sourceOld":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"node {} Trying to join election at the head \", id);\n          List<String> nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n            log.info(\"Joined at the head  {}\", leaderSeqPath );\n\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","sourceNew":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"node {} Trying to join election at the head \", id);\n          List<String> nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n            log.info(\"Joined at the head  {}\", leaderSeqPath );\n\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    checkIfIamLeader(context, replacement);\n\n    return getSeq(context.leaderSeqPath);\n  }\n\n","sourceOld":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"node {} Trying to join election at the head \", id);\n          List<String> nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n            log.info(\"Joined at the head  {}\", leaderSeqPath );\n\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5b3e70510efc80bc67f6ad80224387e441c14ec","date":1434309371,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","sourceNew":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"Node {} trying to join election at the head\", id);\n          List<String> nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        log.info(\"Joined leadership election with path: {}\", leaderSeqPath);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    checkIfIamLeader(context, replacement);\n\n    return getSeq(context.leaderSeqPath);\n  }\n\n","sourceOld":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"node {} Trying to join election at the head \", id);\n          List<String> nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n            log.info(\"Joined at the head  {}\", leaderSeqPath );\n\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    checkIfIamLeader(context, replacement);\n\n    return getSeq(context.leaderSeqPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","sourceNew":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"Node {} trying to join election at the head\", id);\n          List<String> nodes = OverseerProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        log.info(\"Joined leadership election with path: {}\", leaderSeqPath);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    checkIfIamLeader(context, replacement);\n\n    return getSeq(context.leaderSeqPath);\n  }\n\n","sourceOld":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"Node {} trying to join election at the head\", id);\n          List<String> nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        log.info(\"Joined leadership election with path: {}\", leaderSeqPath);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    checkIfIamLeader(context, replacement);\n\n    return getSeq(context.leaderSeqPath);\n  }\n\n","bugFix":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","sourceNew":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"Node {} trying to join election at the head\", id);\n          List<String> nodes = OverseerTaskProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        log.info(\"Joined leadership election with path: {}\", leaderSeqPath);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    checkIfIamLeader(context, replacement);\n\n    return getSeq(context.leaderSeqPath);\n  }\n\n","sourceOld":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"Node {} trying to join election at the head\", id);\n          List<String> nodes = OverseerProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        log.info(\"Joined leadership election with path: {}\", leaderSeqPath);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    checkIfIamLeader(context, replacement);\n\n    return getSeq(context.leaderSeqPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","sourceNew":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.debug(\"Node {} trying to join election at the head\", id);\n          List<String> nodes = OverseerTaskProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.debug(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        log.debug(\"Joined leadership election with path: {}\", leaderSeqPath);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    checkIfIamLeader(context, replacement);\n\n    return getSeq(context.leaderSeqPath);\n  }\n\n","sourceOld":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"Node {} trying to join election at the head\", id);\n          List<String> nodes = OverseerTaskProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        log.info(\"Joined leadership election with path: {}\", leaderSeqPath);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    checkIfIamLeader(context, replacement);\n\n    return getSeq(context.leaderSeqPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","sourceNew":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.debug(\"Node {} trying to join election at the head\", id);\n          List<String> nodes = OverseerTaskProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.debug(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        log.debug(\"Joined leadership election with path: {}\", leaderSeqPath);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    checkIfIamLeader(context, replacement);\n\n    return getSeq(context.leaderSeqPath);\n  }\n\n","sourceOld":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"Node {} trying to join election at the head\", id);\n          List<String> nodes = OverseerTaskProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        log.info(\"Joined leadership election with path: {}\", leaderSeqPath);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    checkIfIamLeader(context, replacement);\n\n    return getSeq(context.leaderSeqPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean,boolean).mjava","sourceNew":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.debug(\"Node {} trying to join election at the head\", id);\n          List<String> nodes = OverseerTaskProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.debug(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        log.debug(\"Joined leadership election with path: {}\", leaderSeqPath);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    checkIfIamLeader(context, replacement);\n\n    return getSeq(context.leaderSeqPath);\n  }\n\n","sourceOld":"    /**\n     * Begin participating in the election process. Gets a new sequential number\n     * and begins watching the node with the sequence number before it, unless it\n     * is the lowest number, in which case, initiates the leader process. If the\n     * node that is watched goes down, check if we are the new lowest node, else\n     * watch the next lowest numbered node.\n     *\n     * @return sequential node number\n     */\n  public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        if(joinAtHead){\n          log.info(\"Node {} trying to join election at the head\", id);\n          List<String> nodes = OverseerTaskProcessor.getSortedElectionNodes(zkClient, shardsElectZkPath);\n          if(nodes.size() <2){\n            leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n                CreateMode.EPHEMERAL_SEQUENTIAL, false);\n          } else {\n            String firstInLine = nodes.get(1);\n            log.info(\"The current head: {}\", firstInLine);\n            Matcher m = LEADER_SEQ.matcher(firstInLine);\n            if (!m.matches()) {\n              throw new IllegalStateException(\"Could not find regex match in:\"\n                  + firstInLine);\n            }\n            leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1);\n            zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false);\n          }\n        } else {\n          leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n              CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        }\n\n        log.info(\"Joined leadership election with path: {}\", leaderSeqPath);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          context = null;\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    checkIfIamLeader(context, replacement);\n\n    return getSeq(context.leaderSeqPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d996c36bf85996da326201b915c87d41449d7f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"962cd4f5e313777f35da8f521265323e84184929":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d996c36bf85996da326201b915c87d41449d7f5"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["52bb40d1a8459a88868fb810f6c90378004fa285"],"52bb40d1a8459a88868fb810f6c90378004fa285":["7d996c36bf85996da326201b915c87d41449d7f5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2209af2c265d2258ec4b29c8cc78622d36994a15","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a5b3e70510efc80bc67f6ad80224387e441c14ec"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["52bb40d1a8459a88868fb810f6c90378004fa285","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2209af2c265d2258ec4b29c8cc78622d36994a15","962cd4f5e313777f35da8f521265323e84184929"],"a5b3e70510efc80bc67f6ad80224387e441c14ec":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"7d996c36bf85996da326201b915c87d41449d7f5":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","52bb40d1a8459a88868fb810f6c90378004fa285"],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["962cd4f5e313777f35da8f521265323e84184929","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","4e6b620c271c84c0f14919eec7b90083b292ee51"],"52bb40d1a8459a88868fb810f6c90378004fa285":["5455c7b3fed6c1671990a44c19071cb0488c2c25","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d996c36bf85996da326201b915c87d41449d7f5","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5b3e70510efc80bc67f6ad80224387e441c14ec":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["a5b3e70510efc80bc67f6ad80224387e441c14ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}