{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions != null);\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions != null);\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions != null);\n    assertTrue(positions.next());\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions != null);\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":null,"sourceOld":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions != null);\n    assertTrue(positions.next());\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}