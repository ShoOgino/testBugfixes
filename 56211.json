{"path":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.UsedQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.UsedQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.UsedQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight in = this.in.createWeight(searcher, needsScores, boost);\n      return new Weight(in.getQuery()) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          in.extractTerms(terms);\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return in.explain(context, doc);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          used.set(true);\n          return in.scorer(context);\n        }\n        \n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      final Weight in = this.in.createWeight(searcher, needsScores);\n      return new Weight(in.getQuery()) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          in.extractTerms(terms);\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return in.explain(context, doc);\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return in.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float topLevelBoost) {\n          in.normalize(norm, topLevelBoost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          used.set(true);\n          return in.scorer(context);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.UsedQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight in = this.in.createWeight(searcher, needsScores, boost);\n      return new Weight(in.getQuery()) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          in.extractTerms(terms);\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return in.explain(context, doc);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          used.set(true);\n          return in.scorer(context);\n        }\n        \n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.UsedQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.UsedQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight in = this.in.createWeight(searcher, needsScores, boost);\n      return new FilterWeight(in) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          used.set(true);\n          return in.scorer(context);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight in = this.in.createWeight(searcher, needsScores, boost);\n      return new Weight(in.getQuery()) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          in.extractTerms(terms);\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return in.explain(context, doc);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          used.set(true);\n          return in.scorer(context);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.UsedQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.UsedQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight in = this.in.createWeight(searcher, needsScores, boost);\n      return new FilterWeight(in) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          used.set(true);\n          return in.scorer(context);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight in = this.in.createWeight(searcher, needsScores, boost);\n      return new Weight(in.getQuery()) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          in.extractTerms(terms);\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return in.explain(context, doc);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          used.set(true);\n          return in.scorer(context);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.UsedQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.UsedQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      final Weight in = this.in.createWeight(searcher, scoreMode, boost);\n      return new FilterWeight(in) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          used.set(true);\n          return in.scorer(context);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight in = this.in.createWeight(searcher, needsScores, boost);\n      return new FilterWeight(in) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          used.set(true);\n          return in.scorer(context);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.UsedQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts.UsedQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      final Weight in = this.in.createWeight(searcher, scoreMode, boost);\n      return new FilterWeight(in) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          used.set(true);\n          return in.scorer(context);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight in = this.in.createWeight(searcher, needsScores, boost);\n      return new FilterWeight(in) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          used.set(true);\n          return in.scorer(context);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","706a7a3396c030cc66dda92a0492eb492131c4c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}