{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#getDaemonUrl(SolrResponse,DocCollection).mjava","commits":[{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#getDaemonUrl(SolrResponse,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  // XXX see #waitForDaemon() for why we need this\n  private String getDaemonUrl(SolrResponse rsp, DocCollection coll) {\n    Map<String, Object> rs = (Map<String, Object>)rsp.getResponse().get(\"result-set\");\n    if (rs == null || rs.isEmpty()) {\n      log.debug(\" -- Missing daemon information in response: \" + Utils.toJSONString(rsp));\n    }\n    List<Object> list = (List<Object>)rs.get(\"docs\");\n    if (list == null) {\n      log.debug(\" -- Missing daemon information in response: \" + Utils.toJSONString(rsp));\n      return null;\n    }\n    String replicaName = null;\n    for (Object o : list) {\n      Map<String, Object> map = (Map<String, Object>)o;\n      String op = (String)map.get(\"DaemonOp\");\n      if (op == null) {\n        continue;\n      }\n      String[] parts = op.split(\"\\\\s+\");\n      if (parts.length != 4) {\n        log.debug(\" -- Invalid daemon location info, expected 4 tokens: \" + op);\n        return null;\n      }\n      // check if it's plausible\n      if (parts[3].contains(\"shard\") && parts[3].contains(\"replica\")) {\n        replicaName = parts[3];\n        break;\n      } else {\n        log.debug(\" -- daemon location info likely invalid: \" + op);\n        return null;\n      }\n    }\n    if (replicaName == null) {\n      return null;\n    }\n    // build a baseUrl of the replica\n    for (Replica r : coll.getReplicas()) {\n      if (replicaName.equals(r.getCoreName())) {\n        return r.getBaseUrl() + \"/\" + r.getCoreName();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#getDaemonUrl(SolrResponse,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#getDaemonUrl(SolrResponse,DocCollection).mjava","sourceNew":"  // XXX see #waitForDaemon() for why we need this\n  private String getDaemonUrl(SolrResponse rsp, DocCollection coll) {\n    Map<String, Object> rs = (Map<String, Object>)rsp.getResponse().get(\"result-set\");\n    if (rs == null || rs.isEmpty()) {\n      if (log.isDebugEnabled()) {\n        log.debug(\" -- Missing daemon information in response: {}\", Utils.toJSONString(rsp));\n      }\n    }\n    List<Object> list = (List<Object>)rs.get(\"docs\");\n    if (list == null) {\n      if (log.isDebugEnabled()) {\n        log.debug(\" -- Missing daemon information in response: {}\", Utils.toJSONString(rsp));\n      }\n      return null;\n    }\n    String replicaName = null;\n    for (Object o : list) {\n      Map<String, Object> map = (Map<String, Object>)o;\n      String op = (String)map.get(\"DaemonOp\");\n      if (op == null) {\n        continue;\n      }\n      String[] parts = op.split(\"\\\\s+\");\n      if (parts.length != 4) {\n        log.debug(\" -- Invalid daemon location info, expected 4 tokens: {}\", op);\n        return null;\n      }\n      // check if it's plausible\n      if (parts[3].contains(\"shard\") && parts[3].contains(\"replica\")) {\n        replicaName = parts[3];\n        break;\n      } else {\n        log.debug(\" -- daemon location info likely invalid: {}\", op);\n        return null;\n      }\n    }\n    if (replicaName == null) {\n      return null;\n    }\n    // build a baseUrl of the replica\n    for (Replica r : coll.getReplicas()) {\n      if (replicaName.equals(r.getCoreName())) {\n        return r.getBaseUrl() + \"/\" + r.getCoreName();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // XXX see #waitForDaemon() for why we need this\n  private String getDaemonUrl(SolrResponse rsp, DocCollection coll) {\n    Map<String, Object> rs = (Map<String, Object>)rsp.getResponse().get(\"result-set\");\n    if (rs == null || rs.isEmpty()) {\n      log.debug(\" -- Missing daemon information in response: \" + Utils.toJSONString(rsp));\n    }\n    List<Object> list = (List<Object>)rs.get(\"docs\");\n    if (list == null) {\n      log.debug(\" -- Missing daemon information in response: \" + Utils.toJSONString(rsp));\n      return null;\n    }\n    String replicaName = null;\n    for (Object o : list) {\n      Map<String, Object> map = (Map<String, Object>)o;\n      String op = (String)map.get(\"DaemonOp\");\n      if (op == null) {\n        continue;\n      }\n      String[] parts = op.split(\"\\\\s+\");\n      if (parts.length != 4) {\n        log.debug(\" -- Invalid daemon location info, expected 4 tokens: \" + op);\n        return null;\n      }\n      // check if it's plausible\n      if (parts[3].contains(\"shard\") && parts[3].contains(\"replica\")) {\n        replicaName = parts[3];\n        break;\n      } else {\n        log.debug(\" -- daemon location info likely invalid: \" + op);\n        return null;\n      }\n    }\n    if (replicaName == null) {\n      return null;\n    }\n    // build a baseUrl of the replica\n    for (Replica r : coll.getReplicas()) {\n      if (replicaName.equals(r.getCoreName())) {\n        return r.getBaseUrl() + \"/\" + r.getCoreName();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#getDaemonUrl(SolrResponse,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#getDaemonUrl(SolrResponse,DocCollection).mjava","sourceNew":"  // XXX see #waitForDaemon() for why we need this\n  private String getDaemonUrl(SolrResponse rsp, DocCollection coll) {\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> rs = (Map<String, Object>)rsp.getResponse().get(\"result-set\");\n    if (rs == null || rs.isEmpty()) {\n      if (log.isDebugEnabled()) {\n        log.debug(\" -- Missing daemon information in response: {}\", Utils.toJSONString(rsp));\n      }\n    }\n    @SuppressWarnings({\"unchecked\"})\n    List<Object> list = (List<Object>)rs.get(\"docs\");\n    if (list == null) {\n      if (log.isDebugEnabled()) {\n        log.debug(\" -- Missing daemon information in response: {}\", Utils.toJSONString(rsp));\n      }\n      return null;\n    }\n    String replicaName = null;\n    for (Object o : list) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> map = (Map<String, Object>)o;\n      String op = (String)map.get(\"DaemonOp\");\n      if (op == null) {\n        continue;\n      }\n      String[] parts = op.split(\"\\\\s+\");\n      if (parts.length != 4) {\n        log.debug(\" -- Invalid daemon location info, expected 4 tokens: {}\", op);\n        return null;\n      }\n      // check if it's plausible\n      if (parts[3].contains(\"shard\") && parts[3].contains(\"replica\")) {\n        replicaName = parts[3];\n        break;\n      } else {\n        log.debug(\" -- daemon location info likely invalid: {}\", op);\n        return null;\n      }\n    }\n    if (replicaName == null) {\n      return null;\n    }\n    // build a baseUrl of the replica\n    for (Replica r : coll.getReplicas()) {\n      if (replicaName.equals(r.getCoreName())) {\n        return r.getBaseUrl() + \"/\" + r.getCoreName();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // XXX see #waitForDaemon() for why we need this\n  private String getDaemonUrl(SolrResponse rsp, DocCollection coll) {\n    Map<String, Object> rs = (Map<String, Object>)rsp.getResponse().get(\"result-set\");\n    if (rs == null || rs.isEmpty()) {\n      if (log.isDebugEnabled()) {\n        log.debug(\" -- Missing daemon information in response: {}\", Utils.toJSONString(rsp));\n      }\n    }\n    List<Object> list = (List<Object>)rs.get(\"docs\");\n    if (list == null) {\n      if (log.isDebugEnabled()) {\n        log.debug(\" -- Missing daemon information in response: {}\", Utils.toJSONString(rsp));\n      }\n      return null;\n    }\n    String replicaName = null;\n    for (Object o : list) {\n      Map<String, Object> map = (Map<String, Object>)o;\n      String op = (String)map.get(\"DaemonOp\");\n      if (op == null) {\n        continue;\n      }\n      String[] parts = op.split(\"\\\\s+\");\n      if (parts.length != 4) {\n        log.debug(\" -- Invalid daemon location info, expected 4 tokens: {}\", op);\n        return null;\n      }\n      // check if it's plausible\n      if (parts[3].contains(\"shard\") && parts[3].contains(\"replica\")) {\n        replicaName = parts[3];\n        break;\n      } else {\n        log.debug(\" -- daemon location info likely invalid: {}\", op);\n        return null;\n      }\n    }\n    if (replicaName == null) {\n      return null;\n    }\n    // build a baseUrl of the replica\n    for (Replica r : coll.getReplicas()) {\n      if (replicaName.equals(r.getCoreName())) {\n        return r.getBaseUrl() + \"/\" + r.getCoreName();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4abf821a41a2fdca2a1dea148999931d22e20529":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["4abf821a41a2fdca2a1dea148999931d22e20529"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"]},"commit2Childs":{"4abf821a41a2fdca2a1dea148999931d22e20529":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["4abf821a41a2fdca2a1dea148999931d22e20529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}