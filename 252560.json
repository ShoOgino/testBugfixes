{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    final PerDocConsumer docsConsumer = codec.normsFormat()\n        .docsConsumer(new PerDocWriteState(segmentWriteState));\n    // TODO: remove this check when 3.x indexes are no longer supported\n    // (3.x indexes don't have docvalues)\n    if (docsConsumer == null) {\n      return;\n    }\n    boolean success = false;\n    try {\n      docsConsumer.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(docsConsumer);\n      } else {\n        IOUtils.closeWhileHandlingException(docsConsumer);\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    final PerDocConsumer docsConsumer = codec.normsFormat()\n        .docsConsumer(new PerDocWriteState(segmentWriteState));\n    // TODO: remove this check when 3.x indexes are no longer supported\n    // (3.x indexes don't have docvalues)\n    if (docsConsumer == null) {\n      return;\n    }\n    boolean success = false;\n    try {\n      docsConsumer.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(docsConsumer);\n      } else {\n        IOUtils.closeWhileHandlingException(docsConsumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c661eda9480ac1897795003539b76970830bb172","date":1339428754,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    final PerDocConsumer docsConsumer = codec.normsFormat()\n        .docsConsumer(new PerDocWriteState(segmentWriteState));\n    assert docsConsumer != null;\n    boolean success = false;\n    try {\n      docsConsumer.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(docsConsumer);\n      } else {\n        IOUtils.closeWhileHandlingException(docsConsumer);\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    final PerDocConsumer docsConsumer = codec.normsFormat()\n        .docsConsumer(new PerDocWriteState(segmentWriteState));\n    // TODO: remove this check when 3.x indexes are no longer supported\n    // (3.x indexes don't have docvalues)\n    if (docsConsumer == null) {\n      return;\n    }\n    boolean success = false;\n    try {\n      docsConsumer.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(docsConsumer);\n      } else {\n        IOUtils.closeWhileHandlingException(docsConsumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    final PerDocConsumer docsConsumer = codec.normsFormat()\n        .docsConsumer(new PerDocWriteState(segmentWriteState));\n    assert docsConsumer != null;\n    boolean success = false;\n    try {\n      docsConsumer.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(docsConsumer);\n      } else {\n        IOUtils.closeWhileHandlingException(docsConsumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b57ad184373369f2ee65828cd86b30da949653f6","date":1360243980,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.normsFormat() != null) {\n      DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.hasNorms()) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.getNormValues(field.name);\n              if (norms == null) {\n                norms = NumericDocValues.EMPTY;\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeSimpleNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.normsFormat() != null) {\n      DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.hasNorms()) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.getNormValues(field.name);\n              if (norms == null) {\n                norms = NumericDocValues.EMPTY;\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.normsFormat() != null) {\n      DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.hasNorms()) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.getNormValues(field.name);\n              if (norms == null) {\n                norms = NumericDocValues.EMPTY;\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    final PerDocConsumer docsConsumer = codec.normsFormat()\n        .docsConsumer(new PerDocWriteState(segmentWriteState));\n    assert docsConsumer != null;\n    boolean success = false;\n    try {\n      docsConsumer.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(docsConsumer);\n      } else {\n        IOUtils.closeWhileHandlingException(docsConsumer);\n      }\n    }\n  }\n\n","bugFix":["c661eda9480ac1897795003539b76970830bb172","f6e3376a314fcc2b31bc46d399c2ff23552b78d6","f6ee314d4978b896d2a804ee60ba6e830624d990"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bed77c10dee249829e09c7de0432fedda3b23bb","date":1360634170,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = NumericDocValues.EMPTY;\n            }\n            toMerge.add(norms);\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.normsFormat() != null) {\n      DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.hasNorms()) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.getNormValues(field.name);\n              if (norms == null) {\n                norms = NumericDocValues.EMPTY;\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbff44e659c8599e09913b321ce89b65763b68d8","date":1360634589,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = NumericDocValues.EMPTY;\n            }\n            toMerge.add(norms);\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.normsFormat() != null) {\n      DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.hasNorms()) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.getNormValues(field.name);\n              if (norms == null) {\n                norms = NumericDocValues.EMPTY;\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n          List<Bits> docsWithField = new ArrayList<Bits>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = NumericDocValues.EMPTY;\n            }\n            toMerge.add(norms);\n            docsWithField.add(new Bits.MatchAllBits(reader.maxDoc()));\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = NumericDocValues.EMPTY;\n            }\n            toMerge.add(norms);\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n          List<Bits> docsWithField = new ArrayList<Bits>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = NumericDocValues.EMPTY;\n            }\n            toMerge.add(norms);\n            docsWithField.add(new Bits.MatchAllBits(reader.maxDoc()));\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = NumericDocValues.EMPTY;\n            }\n            toMerge.add(norms);\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n          List<Bits> docsWithField = new ArrayList<Bits>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = NumericDocValues.EMPTY;\n            }\n            toMerge.add(norms);\n            docsWithField.add(new Bits.MatchAllBits(reader.maxDoc()));\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = NumericDocValues.EMPTY;\n            }\n            toMerge.add(norms);\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = NumericDocValues.EMPTY;\n            }\n            toMerge.add(norms);\n            docsWithField.add(new Bits.MatchAllBits(reader.maxDoc()));\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n          List<Bits> docsWithField = new ArrayList<Bits>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = NumericDocValues.EMPTY;\n            }\n            toMerge.add(norms);\n            docsWithField.add(new Bits.MatchAllBits(reader.maxDoc()));\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","date":1397206443,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = DocValues.EMPTY_NUMERIC;\n            }\n            toMerge.add(norms);\n            docsWithField.add(new Bits.MatchAllBits(reader.maxDoc()));\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = NumericDocValues.EMPTY;\n            }\n            toMerge.add(norms);\n            docsWithField.add(new Bits.MatchAllBits(reader.maxDoc()));\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":["3bed77c10dee249829e09c7de0432fedda3b23bb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = DocValues.emptyNumeric();\n            }\n            toMerge.add(norms);\n            docsWithField.add(new Bits.MatchAllBits(reader.maxDoc()));\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = DocValues.EMPTY_NUMERIC;\n            }\n            toMerge.add(norms);\n            docsWithField.add(new Bits.MatchAllBits(reader.maxDoc()));\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    NormsConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      consumer.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        if (field.hasNorms()) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues norms = reader.getNormValues(field.name);\n            if (norms == null) {\n              norms = DocValues.emptyNumeric();\n            }\n            toMerge.add(norms);\n            docsWithField.add(new Bits.MatchAllBits(reader.maxDoc()));\n          }\n          consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81f984bc3fef371bf2393a453ebd7835bcb0ee8d","date":1418246768,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState)) {\n      consumer.merge(mergeState);\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    NormsConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      consumer.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"81f984bc3fef371bf2393a453ebd7835bcb0ee8d":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"dbff44e659c8599e09913b321ce89b65763b68d8":["d4d69c535930b5cce125cff868d40f6373dc27d4","3bed77c10dee249829e09c7de0432fedda3b23bb"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["3bed77c10dee249829e09c7de0432fedda3b23bb"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["3bed77c10dee249829e09c7de0432fedda3b23bb","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3bed77c10dee249829e09c7de0432fedda3b23bb","9faa42f41b6adb98daf009cf99a4ee239189e469"],"b57ad184373369f2ee65828cd86b30da949653f6":["0837ab0472feecb3a54260729d845f839e1cbd72"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3bed77c10dee249829e09c7de0432fedda3b23bb":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c661eda9480ac1897795003539b76970830bb172","b57ad184373369f2ee65828cd86b30da949653f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"0837ab0472feecb3a54260729d845f839e1cbd72":["c661eda9480ac1897795003539b76970830bb172"],"c661eda9480ac1897795003539b76970830bb172":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81f984bc3fef371bf2393a453ebd7835bcb0ee8d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"81f984bc3fef371bf2393a453ebd7835bcb0ee8d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dbff44e659c8599e09913b321ce89b65763b68d8":[],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c661eda9480ac1897795003539b76970830bb172"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"b57ad184373369f2ee65828cd86b30da949653f6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["dbff44e659c8599e09913b321ce89b65763b68d8","3bed77c10dee249829e09c7de0432fedda3b23bb"],"3bed77c10dee249829e09c7de0432fedda3b23bb":["dbff44e659c8599e09913b321ce89b65763b68d8","9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["81f984bc3fef371bf2393a453ebd7835bcb0ee8d"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b57ad184373369f2ee65828cd86b30da949653f6"],"c661eda9480ac1897795003539b76970830bb172":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dbff44e659c8599e09913b321ce89b65763b68d8","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}