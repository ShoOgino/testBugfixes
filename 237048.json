{"path":"solr/core/src/java/org/apache/solr/request/NumericFacets.HashTable#rehash().mjava","commits":[{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/NumericFacets.HashTable#rehash().mjava","pathOld":"/dev/null","sourceNew":"    private void rehash() {\n      final long[] oldBits = bits;\n      final int[] oldCounts = counts;\n      final int[] oldDocIDs = docIDs;\n\n      final int newCapacity = bits.length * 2;\n      bits = new long[newCapacity];\n      counts = new int[newCapacity];\n      docIDs = new int[newCapacity];\n      mask = newCapacity - 1;\n      threshold = (int) (LOAD_FACTOR * newCapacity);\n      size = 0;\n\n      for (int i = 0; i < oldBits.length; ++i) {\n        if (oldCounts[i] > 0) {\n          add(oldDocIDs[i], oldBits[i], oldCounts[i]);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/NumericFacets.HashTable#rehash().mjava","pathOld":"/dev/null","sourceNew":"    private void rehash() {\n      final long[] oldBits = bits;\n      final int[] oldCounts = counts;\n      final int[] oldDocIDs = docIDs;\n\n      final int newCapacity = bits.length * 2;\n      bits = new long[newCapacity];\n      counts = new int[newCapacity];\n      docIDs = new int[newCapacity];\n      mask = newCapacity - 1;\n      threshold = (int) (LOAD_FACTOR * newCapacity);\n      size = 0;\n\n      for (int i = 0; i < oldBits.length; ++i) {\n        if (oldCounts[i] > 0) {\n          add(oldDocIDs[i], oldBits[i], oldCounts[i]);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/NumericFacets.HashTable#rehash().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/NumericFacets.HashTable#rehash().mjava","sourceNew":"    private void rehash() {\n      final long[] oldBits = bits;\n      final int[] oldCounts = counts;\n      final int[] oldDocIDs = docIDs;\n\n      final int newCapacity = bits.length * 2;\n      bits = new long[newCapacity];\n      counts = new int[newCapacity];\n      if (oldDocIDs!= null) {\n        docIDs = new int[newCapacity];\n      }\n      mask = newCapacity - 1;\n      threshold = (int) (LOAD_FACTOR * newCapacity);\n      size = 0;\n\n      if (oldDocIDs!= null) {\n        for (int i = 0; i < oldBits.length; ++i) {\n          if (oldCounts[i] > 0) {\n            add(oldDocIDs[i], oldBits[i], oldCounts[i]);\n          }\n        }\n      } else {\n        for (int i = 0; i < oldBits.length; ++i) {\n          if (oldCounts[i] > 0) {\n            add(oldBits[i], oldCounts[i]);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void rehash() {\n      final long[] oldBits = bits;\n      final int[] oldCounts = counts;\n      final int[] oldDocIDs = docIDs;\n\n      final int newCapacity = bits.length * 2;\n      bits = new long[newCapacity];\n      counts = new int[newCapacity];\n      docIDs = new int[newCapacity];\n      mask = newCapacity - 1;\n      threshold = (int) (LOAD_FACTOR * newCapacity);\n      size = 0;\n\n      for (int i = 0; i < oldBits.length; ++i) {\n        if (oldCounts[i] > 0) {\n          add(oldDocIDs[i], oldBits[i], oldCounts[i]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/NumericFacets.HashTable#rehash().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/NumericFacets.HashTable#rehash().mjava","sourceNew":"    private void rehash() {\n      final long[] oldBits = bits;\n      final int[] oldCounts = counts;\n      final int[] oldDocIDs = docIDs;\n\n      final int newCapacity = bits.length * 2;\n      bits = new long[newCapacity];\n      counts = new int[newCapacity];\n      if (oldDocIDs!= null) {\n        docIDs = new int[newCapacity];\n      }\n      mask = newCapacity - 1;\n      threshold = (int) (LOAD_FACTOR * newCapacity);\n      size = 0;\n\n      if (oldDocIDs!= null) {\n        for (int i = 0; i < oldBits.length; ++i) {\n          if (oldCounts[i] > 0) {\n            add(oldDocIDs[i], oldBits[i], oldCounts[i]);\n          }\n        }\n      } else {\n        for (int i = 0; i < oldBits.length; ++i) {\n          if (oldCounts[i] > 0) {\n            add(oldBits[i], oldCounts[i]);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void rehash() {\n      final long[] oldBits = bits;\n      final int[] oldCounts = counts;\n      final int[] oldDocIDs = docIDs;\n\n      final int newCapacity = bits.length * 2;\n      bits = new long[newCapacity];\n      counts = new int[newCapacity];\n      docIDs = new int[newCapacity];\n      mask = newCapacity - 1;\n      threshold = (int) (LOAD_FACTOR * newCapacity);\n      size = 0;\n\n      for (int i = 0; i < oldBits.length; ++i) {\n        if (oldCounts[i] > 0) {\n          add(oldDocIDs[i], oldBits[i], oldCounts[i]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/NumericFacets.HashTable#rehash().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/NumericFacets.HashTable#rehash().mjava","sourceNew":"    private void rehash() {\n      final long[] oldBits = bits;\n      final int[] oldCounts = counts;\n      final int[] oldDocIDs = docIDs;\n\n      final int newCapacity = bits.length * 2;\n      bits = new long[newCapacity];\n      counts = new int[newCapacity];\n      docIDs = new int[newCapacity];\n      mask = newCapacity - 1;\n      threshold = (int) (LOAD_FACTOR * newCapacity);\n      size = 0;\n\n      for (int i = 0; i < oldBits.length; ++i) {\n        if (oldCounts[i] > 0) {\n          add(oldDocIDs[i], oldBits[i], oldCounts[i]);\n        }\n      }\n    }\n\n","sourceOld":"    private void rehash() {\n      final long[] oldBits = bits;\n      final int[] oldCounts = counts;\n      final int[] oldDocIDs = docIDs;\n\n      final int newCapacity = bits.length * 2;\n      bits = new long[newCapacity];\n      counts = new int[newCapacity];\n      if (oldDocIDs!= null) {\n        docIDs = new int[newCapacity];\n      }\n      mask = newCapacity - 1;\n      threshold = (int) (LOAD_FACTOR * newCapacity);\n      size = 0;\n\n      if (oldDocIDs!= null) {\n        for (int i = 0; i < oldBits.length; ++i) {\n          if (oldCounts[i] > 0) {\n            add(oldDocIDs[i], oldBits[i], oldCounts[i]);\n          }\n        }\n      } else {\n        for (int i = 0; i < oldBits.length; ++i) {\n          if (oldCounts[i] > 0) {\n            add(oldBits[i], oldCounts[i]);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/NumericFacets.HashTable#rehash().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/NumericFacets.HashTable#rehash().mjava","sourceNew":"    private void rehash() {\n      final long[] oldBits = bits;\n      final int[] oldCounts = counts;\n      final int[] oldDocIDs = docIDs;\n\n      final int newCapacity = bits.length * 2;\n      bits = new long[newCapacity];\n      counts = new int[newCapacity];\n      if (oldDocIDs!= null) {\n        docIDs = new int[newCapacity];\n      }\n      mask = newCapacity - 1;\n      threshold = (int) (LOAD_FACTOR * newCapacity);\n      size = 0;\n\n      if (oldDocIDs!= null) {\n        for (int i = 0; i < oldBits.length; ++i) {\n          if (oldCounts[i] > 0) {\n            add(oldDocIDs[i], oldBits[i], oldCounts[i]);\n          }\n        }\n      } else {\n        for (int i = 0; i < oldBits.length; ++i) {\n          if (oldCounts[i] > 0) {\n            add(oldBits[i], oldCounts[i]);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void rehash() {\n      final long[] oldBits = bits;\n      final int[] oldCounts = counts;\n      final int[] oldDocIDs = docIDs;\n\n      final int newCapacity = bits.length * 2;\n      bits = new long[newCapacity];\n      counts = new int[newCapacity];\n      docIDs = new int[newCapacity];\n      mask = newCapacity - 1;\n      threshold = (int) (LOAD_FACTOR * newCapacity);\n      size = 0;\n\n      for (int i = 0; i < oldBits.length; ++i) {\n        if (oldCounts[i] > 0) {\n          add(oldDocIDs[i], oldBits[i], oldCounts[i]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["73bb5a57dc75b54a39494f99986599cae7dff417","744b111b17d15d490a648eb021bfa240e7f11556"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73bb5a57dc75b54a39494f99986599cae7dff417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"744b111b17d15d490a648eb021bfa240e7f11556":["73bb5a57dc75b54a39494f99986599cae7dff417"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"73bb5a57dc75b54a39494f99986599cae7dff417":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"73bb5a57dc75b54a39494f99986599cae7dff417":["022a4de90e0479b604264ca9c2e134c996454ab3","95303ff3749680c743b9425f9cf99e6e4065e8a8","744b111b17d15d490a648eb021bfa240e7f11556"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}