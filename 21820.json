{"path":"src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","commits":[{"id":"2562fab31a7b144e6187859bfa09e363dc6de268","date":1170358826,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","pathOld":"/dev/null","sourceNew":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true; \n        commit( command );\n        autoCommitCount++;\n      } \n      catch (Exception e) {\n        log.severe( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["114670ecb9adf4ed6e7a80d6f0ce64fec0c91fb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf6ae373e50e732aee60dfde9786b23759b2a077","date":1171922098,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","sourceNew":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true; \n        commit( command );\n        autoCommitCount++;\n      } \n      catch (Exception e) {\n        log.severe( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","sourceOld":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true; \n        commit( command );\n        autoCommitCount++;\n      } \n      catch (Exception e) {\n        log.severe( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61af939f4c10286fd8beaa0124064437b7ac44c5","date":1214514846,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","sourceNew":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      } \n      catch (Exception e) {\n        log.severe( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","sourceOld":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true; \n        commit( command );\n        autoCommitCount++;\n      } \n      catch (Exception e) {\n        log.severe( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","sourceNew":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      } \n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","sourceOld":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      } \n      catch (Exception e) {\n        log.severe( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"114670ecb9adf4ed6e7a80d6f0ce64fec0c91fb1","date":1232905968,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","sourceNew":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","sourceOld":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      } \n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","bugFix":["2562fab31a7b144e6187859bfa09e363dc6de268"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2.CommitTracker#run().mjava","sourceNew":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","sourceOld":"    /** This is the worker part for the ScheduledFuture **/\n    public synchronized void run() {\n      long started = System.currentTimeMillis();\n      try {\n        CommitUpdateCommand command = new CommitUpdateCommand( false );\n        command.waitFlush = true;\n        command.waitSearcher = true;\n        //no need for command.maxOptimizeSegments = 1;  since it is not optimizing\n        commit( command );\n        autoCommitCount++;\n      }\n      catch (Exception e) {\n        log.error( \"auto commit error...\" );\n        e.printStackTrace();\n      }\n      finally {\n        pending = null;\n      }\n\n      // check if docs have been submitted since the commit started\n      if( lastAddedTime > started ) {\n        if( docsUpperBound > 0 && docsSinceCommit > docsUpperBound ) {\n          pending = scheduler.schedule( this, 100, TimeUnit.MILLISECONDS );\n        }\n        else if( timeUpperBound > 0 ) {\n          pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"114670ecb9adf4ed6e7a80d6f0ce64fec0c91fb1":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2562fab31a7b144e6187859bfa09e363dc6de268":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["114670ecb9adf4ed6e7a80d6f0ce64fec0c91fb1"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["61af939f4c10286fd8beaa0124064437b7ac44c5"],"cf6ae373e50e732aee60dfde9786b23759b2a077":["2562fab31a7b144e6187859bfa09e363dc6de268"],"61af939f4c10286fd8beaa0124064437b7ac44c5":["cf6ae373e50e732aee60dfde9786b23759b2a077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"114670ecb9adf4ed6e7a80d6f0ce64fec0c91fb1":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2562fab31a7b144e6187859bfa09e363dc6de268"],"2562fab31a7b144e6187859bfa09e363dc6de268":["cf6ae373e50e732aee60dfde9786b23759b2a077"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["114670ecb9adf4ed6e7a80d6f0ce64fec0c91fb1"],"cf6ae373e50e732aee60dfde9786b23759b2a077":["61af939f4c10286fd8beaa0124064437b7ac44c5"],"61af939f4c10286fd8beaa0124064437b7ac44c5":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}