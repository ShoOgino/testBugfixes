{"path":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(PerField,IndexableField).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(PerField,IndexableField).mjava","pathOld":"/dev/null","sourceNew":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(PerField fp, IndexableField field) throws IOException {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(docWriter, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docState.docID, field.binaryValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(PerField,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(PerField,IndexableField).mjava","sourceNew":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(PerField fp, IndexableField field) throws IOException {\n    int pointDataDimensionCount = field.fieldType().pointDataDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDataDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDataDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDataDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(docWriter, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docState.docID, field.binaryValue());\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(PerField fp, IndexableField field) throws IOException {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(docWriter, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docState.docID, field.binaryValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(PerField,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(PerField,IndexableField).mjava","sourceNew":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(PerField fp, IndexableField field) throws IOException {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(docWriter, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docState.docID, field.binaryValue());\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(PerField fp, IndexableField field) throws IOException {\n    int pointDataDimensionCount = field.fieldType().pointDataDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDataDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDataDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDataDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(docWriter, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docState.docID, field.binaryValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97270426d92300e08ac1bd1a4ef499ae02e88b7","date":1592503330,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(int,PerField,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(PerField,IndexableField).mjava","sourceNew":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(int docID, PerField fp, IndexableField field) {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(docWriter, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docID, field.binaryValue());\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(PerField fp, IndexableField field) throws IOException {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(docWriter, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docState.docID, field.binaryValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["f6652c943595e92c187ee904c382863013eae28f"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}