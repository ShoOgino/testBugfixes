{"path":"lucene/core/src/java/org/apache/lucene/index/IndexableField#tokenStream(Analyzer,TokenStream).mjava","commits":[{"id":"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c","date":1399054058,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#tokenStream(Analyzer).mjava","sourceNew":"  /**\n   * Creates the TokenStream used for indexing this field.  If appropriate,\n   * implementations should use the given Analyzer to create the TokenStreams.\n   *\n   * @param analyzer Analyzer that should be used to create the TokenStreams from\n   * @param reuse TokenStream for a previous instance of this field <b>name</b>. This allows\n   *              custom field types (like StringField and NumericField) that do not use\n   *              the analyzer to still have good performance. Note: the passed-in type\n   *              may be inappropriate, for example if you mix up different types of Fields\n   *              for the same field name. So its the responsibility of the implementation to\n   *              check.\n   * @return TokenStream value for indexing the document.  Should always return\n   *         a non-null value if the field is to be indexed\n   * @throws IOException Can be thrown while creating the TokenStream\n   */\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException;\n\n","sourceOld":"  /**\n   * Creates the TokenStream used for indexing this field.  If appropriate,\n   * implementations should use the given Analyzer to create the TokenStreams.\n   *\n   * @param analyzer Analyzer that should be used to create the TokenStreams from\n   * @return TokenStream value for indexing the document.  Should always return\n   *         a non-null value if the field is to be indexed\n   * @throws IOException Can be thrown while creating the TokenStream\n   */\n  public TokenStream tokenStream(Analyzer analyzer) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  /**\n   * Creates the TokenStream used for indexing this field.  If appropriate,\n   * implementations should use the given Analyzer to create the TokenStreams.\n   *\n   * @param analyzer Analyzer that should be used to create the TokenStreams from\n   * @param reuse TokenStream for a previous instance of this field <b>name</b>. This allows\n   *              custom field types (like StringField and NumericField) that do not use\n   *              the analyzer to still have good performance. Note: the passed-in type\n   *              may be inappropriate, for example if you mix up different types of Fields\n   *              for the same field name. So it's the responsibility of the implementation to\n   *              check.\n   * @return TokenStream value for indexing the document.  Should always return\n   *         a non-null value if the field is to be indexed\n   * @throws IOException Can be thrown while creating the TokenStream\n   */\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException;\n\n","sourceOld":"  /**\n   * Creates the TokenStream used for indexing this field.  If appropriate,\n   * implementations should use the given Analyzer to create the TokenStreams.\n   *\n   * @param analyzer Analyzer that should be used to create the TokenStreams from\n   * @param reuse TokenStream for a previous instance of this field <b>name</b>. This allows\n   *              custom field types (like StringField and NumericField) that do not use\n   *              the analyzer to still have good performance. Note: the passed-in type\n   *              may be inappropriate, for example if you mix up different types of Fields\n   *              for the same field name. So its the responsibility of the implementation to\n   *              check.\n   * @return TokenStream value for indexing the document.  Should always return\n   *         a non-null value if the field is to be indexed\n   * @throws IOException Can be thrown while creating the TokenStream\n   */\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7b35a5b70dfb7617f799444beea32ac58a2d14f","date":1453716281,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  /**\n   * Creates the TokenStream used for indexing this field.  If appropriate,\n   * implementations should use the given Analyzer to create the TokenStreams.\n   *\n   * @param analyzer Analyzer that should be used to create the TokenStreams from\n   * @param reuse TokenStream for a previous instance of this field <b>name</b>. This allows\n   *              custom field types (like StringField and NumericField) that do not use\n   *              the analyzer to still have good performance. Note: the passed-in type\n   *              may be inappropriate, for example if you mix up different types of Fields\n   *              for the same field name. So it's the responsibility of the implementation to\n   *              check.\n   * @return TokenStream value for indexing the document.  Should always return\n   *         a non-null value if the field is to be indexed\n   */\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse);\n\n","sourceOld":"  /**\n   * Creates the TokenStream used for indexing this field.  If appropriate,\n   * implementations should use the given Analyzer to create the TokenStreams.\n   *\n   * @param analyzer Analyzer that should be used to create the TokenStreams from\n   * @param reuse TokenStream for a previous instance of this field <b>name</b>. This allows\n   *              custom field types (like StringField and NumericField) that do not use\n   *              the analyzer to still have good performance. Note: the passed-in type\n   *              may be inappropriate, for example if you mix up different types of Fields\n   *              for the same field name. So it's the responsibility of the implementation to\n   *              check.\n   * @return TokenStream value for indexing the document.  Should always return\n   *         a non-null value if the field is to be indexed\n   * @throws IOException Can be thrown while creating the TokenStream\n   */\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexableField#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexableField#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  /**\n   * Creates the TokenStream used for indexing this field.  If appropriate,\n   * implementations should use the given Analyzer to create the TokenStreams.\n   *\n   * @param analyzer Analyzer that should be used to create the TokenStreams from\n   * @param reuse TokenStream for a previous instance of this field <b>name</b>. This allows\n   *              custom field types (like StringField and NumericField) that do not use\n   *              the analyzer to still have good performance. Note: the passed-in type\n   *              may be inappropriate, for example if you mix up different types of Fields\n   *              for the same field name. So it's the responsibility of the implementation to\n   *              check.\n   * @return TokenStream value for indexing the document.  Should always return\n   *         a non-null value if the field is to be indexed\n   */\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse);\n\n","sourceOld":"  /**\n   * Creates the TokenStream used for indexing this field.  If appropriate,\n   * implementations should use the given Analyzer to create the TokenStreams.\n   *\n   * @param analyzer Analyzer that should be used to create the TokenStreams from\n   * @param reuse TokenStream for a previous instance of this field <b>name</b>. This allows\n   *              custom field types (like StringField and NumericField) that do not use\n   *              the analyzer to still have good performance. Note: the passed-in type\n   *              may be inappropriate, for example if you mix up different types of Fields\n   *              for the same field name. So it's the responsibility of the implementation to\n   *              check.\n   * @return TokenStream value for indexing the document.  Should always return\n   *         a non-null value if the field is to be indexed\n   * @throws IOException Can be thrown while creating the TokenStream\n   */\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["090a3a6b4b32e55f8fe1eab3359dbe628a208a0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","d7b35a5b70dfb7617f799444beea32ac58a2d14f"],"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d7b35a5b70dfb7617f799444beea32ac58a2d14f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d7b35a5b70dfb7617f799444beea32ac58a2d14f"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","d7b35a5b70dfb7617f799444beea32ac58a2d14f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["090a3a6b4b32e55f8fe1eab3359dbe628a208a0c"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"d7b35a5b70dfb7617f799444beea32ac58a2d14f":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}