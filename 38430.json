{"path":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilter#match(SlowSynonymMap).mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilter#match(SlowSynonymMap).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#match(SynonymMap).mjava","sourceNew":"  private SlowSynonymMap match(SlowSynonymMap map) throws IOException {\n    SlowSynonymMap result = null;\n\n    if (map.submap != null) {\n      AttributeSource tok = nextTok();\n      if (tok != null) {\n        // clone ourselves.\n        if (tok == this)\n          tok = cloneAttributes();\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        CharTermAttribute termAtt = tok.getAttribute(CharTermAttribute.class);\n        SlowSynonymMap subMap = map.submap.get(termAtt.buffer(), 0, termAtt.length());\n\n        if (subMap != null) {\n          // recurse\n          result = match(subMap);\n        }\n\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  private SynonymMap match(SynonymMap map) throws IOException {\n    SynonymMap result = null;\n\n    if (map.submap != null) {\n      AttributeSource tok = nextTok();\n      if (tok != null) {\n        // clone ourselves.\n        if (tok == this)\n          tok = cloneAttributes();\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        CharTermAttribute termAtt = tok.getAttribute(CharTermAttribute.class);\n        SynonymMap subMap = map.submap.get(termAtt.buffer(), 0, termAtt.length());\n\n        if (subMap != null) {\n          // recurse\n          result = match(subMap);\n        }\n\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilter#match(SlowSynonymMap).mjava","sourceNew":null,"sourceOld":"  private SlowSynonymMap match(SlowSynonymMap map) throws IOException {\n    SlowSynonymMap result = null;\n\n    if (map.submap != null) {\n      AttributeSource tok = nextTok();\n      if (tok != null) {\n        // clone ourselves.\n        if (tok == this)\n          tok = cloneAttributes();\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        CharTermAttribute termAtt = tok.getAttribute(CharTermAttribute.class);\n        SlowSynonymMap subMap = map.submap.get(termAtt.buffer(), 0, termAtt.length());\n\n        if (subMap != null) {\n          // recurse\n          result = match(subMap);\n        }\n\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}