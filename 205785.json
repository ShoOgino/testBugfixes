{"path":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntDecoder#doDecode(BytesRef,IntsRef,int).mjava","commits":[{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntDecoder#doDecode(BytesRef,IntsRef,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doDecode(BytesRef buf, IntsRef values, int upto) {\n    super.doDecode(buf, internalBuffer, upto);\n    if (values.ints.length < internalBuffer.length) {\n      // need space for internalBuffer.length to internalBuffer.length*N,\n      // grow mildly at first\n      values.grow(internalBuffer.length * n/2);\n    }\n    \n    for (int i = 0; i < internalBuffer.length; i++) {\n      int decode = internalBuffer.ints[i];\n      if (decode == 1) {\n        if (values.length == values.ints.length) {\n          values.grow(values.length + 10); // grow by few items, however not too many\n        }\n        // 1 is 1\n        values.ints[values.length++] = 1;\n      } else if (decode == 2) {\n        if (values.length + n >= values.ints.length) {\n          values.grow(values.length + n); // grow by few items, however not too many\n        }\n        // '2' means N 1's\n        for (int j = 0; j < n; j++) {\n          values.ints[values.length++] = 1;\n        }\n      } else {\n        if (values.length == values.ints.length) {\n          values.grow(values.length + 10); // grow by few items, however not too many\n        }\n        // any other value is val-1\n        values.ints[values.length++] = decode - 1;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntDecoder#doDecode(BytesRef,IntsRef,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doDecode(BytesRef buf, IntsRef values, int upto) {\n    super.doDecode(buf, internalBuffer, upto);\n    if (values.ints.length < internalBuffer.length) {\n      // need space for internalBuffer.length to internalBuffer.length*N,\n      // grow mildly at first\n      values.grow(internalBuffer.length * n/2);\n    }\n    \n    for (int i = 0; i < internalBuffer.length; i++) {\n      int decode = internalBuffer.ints[i];\n      if (decode == 1) {\n        if (values.length == values.ints.length) {\n          values.grow(values.length + 10); // grow by few items, however not too many\n        }\n        // 1 is 1\n        values.ints[values.length++] = 1;\n      } else if (decode == 2) {\n        if (values.length + n >= values.ints.length) {\n          values.grow(values.length + n); // grow by few items, however not too many\n        }\n        // '2' means N 1's\n        for (int j = 0; j < n; j++) {\n          values.ints[values.length++] = 1;\n        }\n      } else {\n        if (values.length == values.ints.length) {\n          values.grow(values.length + 10); // grow by few items, however not too many\n        }\n        // any other value is val-1\n        values.ints[values.length++] = decode - 1;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad883775f8b169218a8da5ffeb7ae26459443936","date":1358342713,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntDecoder#decode(BytesRef,IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntDecoder#doDecode(BytesRef,IntsRef,int).mjava","sourceNew":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n    internalBuffer.length = 0;\n    super.decode(buf, internalBuffer);\n    if (values.ints.length < internalBuffer.length) {\n      // need space for internalBuffer.length to internalBuffer.length*N,\n      // grow mildly at first\n      values.grow(internalBuffer.length * n/2);\n    }\n    \n    for (int i = 0; i < internalBuffer.length; i++) {\n      int decode = internalBuffer.ints[i];\n      if (decode == 1) {\n        if (values.length == values.ints.length) {\n          values.grow(values.length + 10); // grow by few items, however not too many\n        }\n        // 1 is 1\n        values.ints[values.length++] = 1;\n      } else if (decode == 2) {\n        if (values.length + n >= values.ints.length) {\n          values.grow(values.length + n); // grow by few items, however not too many\n        }\n        // '2' means N 1's\n        for (int j = 0; j < n; j++) {\n          values.ints[values.length++] = 1;\n        }\n      } else {\n        if (values.length == values.ints.length) {\n          values.grow(values.length + 10); // grow by few items, however not too many\n        }\n        // any other value is val-1\n        values.ints[values.length++] = decode - 1;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDecode(BytesRef buf, IntsRef values, int upto) {\n    super.doDecode(buf, internalBuffer, upto);\n    if (values.ints.length < internalBuffer.length) {\n      // need space for internalBuffer.length to internalBuffer.length*N,\n      // grow mildly at first\n      values.grow(internalBuffer.length * n/2);\n    }\n    \n    for (int i = 0; i < internalBuffer.length; i++) {\n      int decode = internalBuffer.ints[i];\n      if (decode == 1) {\n        if (values.length == values.ints.length) {\n          values.grow(values.length + 10); // grow by few items, however not too many\n        }\n        // 1 is 1\n        values.ints[values.length++] = 1;\n      } else if (decode == 2) {\n        if (values.length + n >= values.ints.length) {\n          values.grow(values.length + n); // grow by few items, however not too many\n        }\n        // '2' means N 1's\n        for (int j = 0; j < n; j++) {\n          values.ints[values.length++] = 1;\n        }\n      } else {\n        if (values.length == values.ints.length) {\n          values.grow(values.length + 10); // grow by few items, however not too many\n        }\n        // any other value is val-1\n        values.ints[values.length++] = decode - 1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntDecoder#decode(BytesRef,IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntDecoder#doDecode(BytesRef,IntsRef,int).mjava","sourceNew":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n    internalBuffer.length = 0;\n    super.decode(buf, internalBuffer);\n    if (values.ints.length < internalBuffer.length) {\n      // need space for internalBuffer.length to internalBuffer.length*N,\n      // grow mildly at first\n      values.grow(internalBuffer.length * n/2);\n    }\n    \n    for (int i = 0; i < internalBuffer.length; i++) {\n      int decode = internalBuffer.ints[i];\n      if (decode == 1) {\n        if (values.length == values.ints.length) {\n          values.grow(values.length + 10); // grow by few items, however not too many\n        }\n        // 1 is 1\n        values.ints[values.length++] = 1;\n      } else if (decode == 2) {\n        if (values.length + n >= values.ints.length) {\n          values.grow(values.length + n); // grow by few items, however not too many\n        }\n        // '2' means N 1's\n        for (int j = 0; j < n; j++) {\n          values.ints[values.length++] = 1;\n        }\n      } else {\n        if (values.length == values.ints.length) {\n          values.grow(values.length + 10); // grow by few items, however not too many\n        }\n        // any other value is val-1\n        values.ints[values.length++] = decode - 1;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDecode(BytesRef buf, IntsRef values, int upto) {\n    super.doDecode(buf, internalBuffer, upto);\n    if (values.ints.length < internalBuffer.length) {\n      // need space for internalBuffer.length to internalBuffer.length*N,\n      // grow mildly at first\n      values.grow(internalBuffer.length * n/2);\n    }\n    \n    for (int i = 0; i < internalBuffer.length; i++) {\n      int decode = internalBuffer.ints[i];\n      if (decode == 1) {\n        if (values.length == values.ints.length) {\n          values.grow(values.length + 10); // grow by few items, however not too many\n        }\n        // 1 is 1\n        values.ints[values.length++] = 1;\n      } else if (decode == 2) {\n        if (values.length + n >= values.ints.length) {\n          values.grow(values.length + n); // grow by few items, however not too many\n        }\n        // '2' means N 1's\n        for (int j = 0; j < n; j++) {\n          values.ints[values.length++] = 1;\n        }\n      } else {\n        if (values.length == values.ints.length) {\n          values.grow(values.length + 10); // grow by few items, however not too many\n        }\n        // any other value is val-1\n        values.ints[values.length++] = decode - 1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4015cd39dff8d4dec562d909f9766debac53aa6":["4e6354dd7c71fe122926fc53d7d29f715b1283db","ad883775f8b169218a8da5ffeb7ae26459443936"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad883775f8b169218a8da5ffeb7ae26459443936"],"ad883775f8b169218a8da5ffeb7ae26459443936":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"]},"commit2Childs":{"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["4e6354dd7c71fe122926fc53d7d29f715b1283db","ad883775f8b169218a8da5ffeb7ae26459443936"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"ad883775f8b169218a8da5ffeb7ae26459443936":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}