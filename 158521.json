{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","commits":[{"id":"709714c6ee47950678dd2d2ef4e0473886909226","date":1407339661,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determine if a request to Solr failed due to a communication error,\n   * which is generally retry-able. \n   */\n  public static boolean checkCommunicationError(Exception exc) {\n    Throwable rootCause = SolrException.getRootCause(exc);\n    boolean wasCommError =\n        (rootCause instanceof ConnectException ||\n            rootCause instanceof ConnectTimeoutException ||\n            rootCause instanceof NoHttpResponseException ||\n            rootCause instanceof SocketException);\n    return wasCommError;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"209c0259a9b7087b2111411ec790d6557ef86307","date":1419393649,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","sourceNew":"  /**\n   * Determine if a request to Solr failed due to a communication error,\n   * which is generally retry-able. \n   */\n  public static boolean checkCommunicationError(Exception exc) {\n    Throwable rootCause = SolrException.getRootCause(exc);\n    boolean wasCommError =\n        (rootCause instanceof ConnectException ||\n         rootCause instanceof ConnectTimeoutException ||\n         rootCause instanceof NoHttpResponseException ||\n         rootCause instanceof SocketException);\n    return wasCommError;\n  }\n\n","sourceOld":"  /**\n   * Determine if a request to Solr failed due to a communication error,\n   * which is generally retry-able. \n   */\n  public static boolean checkCommunicationError(Exception exc) {\n    Throwable rootCause = SolrException.getRootCause(exc);\n    boolean wasCommError =\n        (rootCause instanceof ConnectException ||\n            rootCause instanceof ConnectTimeoutException ||\n            rootCause instanceof NoHttpResponseException ||\n            rootCause instanceof SocketException);\n    return wasCommError;\n  }\n\n","bugFix":null,"bugIntro":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","sourceNew":"  /**\n   * Determine if a request to Solr failed due to a communication error,\n   * which is generally retry-able. \n   */\n  public static boolean checkCommunicationError(Exception exc) {\n    Throwable rootCause = SolrException.getRootCause(exc);\n    boolean wasCommError =\n        (rootCause instanceof ConnectException ||\n         rootCause instanceof ConnectTimeoutException ||\n         rootCause instanceof NoHttpResponseException ||\n         rootCause instanceof SocketException);\n    return wasCommError;\n  }\n\n","sourceOld":"  /**\n   * Determine if a request to Solr failed due to a communication error,\n   * which is generally retry-able. \n   */\n  public static boolean checkCommunicationError(Exception exc) {\n    Throwable rootCause = SolrException.getRootCause(exc);\n    boolean wasCommError =\n        (rootCause instanceof ConnectException ||\n         rootCause instanceof ConnectTimeoutException ||\n         rootCause instanceof NoHttpResponseException ||\n         rootCause instanceof SocketException);\n    return wasCommError;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","sourceNew":"  /**\n   * Determine if a request to Solr failed due to a communication error,\n   * which is generally retry-able. \n   */\n  public static boolean checkCommunicationError(Exception exc) {\n    Throwable rootCause = SolrException.getRootCause(exc);\n    boolean wasCommError =\n        (rootCause instanceof ConnectException ||\n         rootCause instanceof ConnectTimeoutException ||\n         rootCause instanceof NoHttpResponseException ||\n         rootCause instanceof SocketException);\n    return wasCommError;\n  }\n\n","sourceOld":"  /**\n   * Determine if a request to Solr failed due to a communication error,\n   * which is generally retry-able. \n   */\n  public static boolean checkCommunicationError(Exception exc) {\n    Throwable rootCause = SolrException.getRootCause(exc);\n    boolean wasCommError =\n        (rootCause instanceof ConnectException ||\n         rootCause instanceof ConnectTimeoutException ||\n         rootCause instanceof NoHttpResponseException ||\n         rootCause instanceof SocketException);\n    return wasCommError;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","sourceNew":"  /**\n   * Determine if a request to Solr failed due to a communication error,\n   * which is generally retry-able. \n   */\n  public static boolean checkCommunicationError(Exception exc) {\n    Throwable rootCause = SolrException.getRootCause(exc);\n    boolean wasCommError =\n        (rootCause instanceof ConnectException ||\n         rootCause instanceof ConnectTimeoutException ||\n         rootCause instanceof NoHttpResponseException ||\n         rootCause instanceof SocketException);\n    return wasCommError;\n  }\n\n","sourceOld":"  /**\n   * Determine if a request to Solr failed due to a communication error,\n   * which is generally retry-able. \n   */\n  public static boolean checkCommunicationError(Exception exc) {\n    Throwable rootCause = SolrException.getRootCause(exc);\n    boolean wasCommError =\n        (rootCause instanceof ConnectException ||\n         rootCause instanceof ConnectTimeoutException ||\n         rootCause instanceof NoHttpResponseException ||\n         rootCause instanceof SocketException);\n    return wasCommError;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","sourceNew":"  /**\n   * Determine if a request to Solr failed due to a communication error,\n   * which is generally retry-able.\n   */\n  public static boolean checkCommunicationError(Exception exc) {\n    Throwable rootCause = SolrException.getRootCause(exc);\n    boolean wasCommError =\n        (rootCause instanceof ConnectException ||\n         rootCause instanceof ConnectTimeoutException ||\n         rootCause instanceof NoHttpResponseException ||\n         rootCause instanceof SocketException);\n    return wasCommError;\n  }\n\n","sourceOld":"  /**\n   * Determine if a request to Solr failed due to a communication error,\n   * which is generally retry-able. \n   */\n  public static boolean checkCommunicationError(Exception exc) {\n    Throwable rootCause = SolrException.getRootCause(exc);\n    boolean wasCommError =\n        (rootCause instanceof ConnectException ||\n         rootCause instanceof ConnectTimeoutException ||\n         rootCause instanceof NoHttpResponseException ||\n         rootCause instanceof SocketException);\n    return wasCommError;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee8fbffa595c312bc0437f2c9bb6376a29c1b427","date":1589412657,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#checkCommunicationError(Exception).mjava","sourceNew":"  /**\n   * Determine if a request to Solr failed due to a communication error,\n   * which is generally retry-able.\n   */\n  public static boolean checkCommunicationError(Exception exc) {\n    Throwable rootCause = SolrException.getRootCause(exc);\n    boolean wasCommError =\n        (rootCause instanceof ConnectException ||\n            rootCause instanceof ConnectTimeoutException ||\n            rootCause instanceof NoHttpResponseException ||\n            rootCause instanceof SocketException);\n    return wasCommError;\n  }\n\n","sourceOld":"  /**\n   * Determine if a request to Solr failed due to a communication error,\n   * which is generally retry-able.\n   */\n  public static boolean checkCommunicationError(Exception exc) {\n    Throwable rootCause = SolrException.getRootCause(exc);\n    boolean wasCommError =\n        (rootCause instanceof ConnectException ||\n         rootCause instanceof ConnectTimeoutException ||\n         rootCause instanceof NoHttpResponseException ||\n         rootCause instanceof SocketException);\n    return wasCommError;\n  }\n\n","bugFix":["209c0259a9b7087b2111411ec790d6557ef86307"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["209c0259a9b7087b2111411ec790d6557ef86307","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"709714c6ee47950678dd2d2ef4e0473886909226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"209c0259a9b7087b2111411ec790d6557ef86307":["709714c6ee47950678dd2d2ef4e0473886909226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["209c0259a9b7087b2111411ec790d6557ef86307"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["209c0259a9b7087b2111411ec790d6557ef86307","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"709714c6ee47950678dd2d2ef4e0473886909226":["209c0259a9b7087b2111411ec790d6557ef86307"],"209c0259a9b7087b2111411ec790d6557ef86307":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["709714c6ee47950678dd2d2ef4e0473886909226"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}