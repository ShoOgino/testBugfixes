{"path":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","commits":[{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n    trimFields(state);\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n    trimFields(state);\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n    trimFields(state);\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n    trimFields(state);\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"692804e172a5810620fac3194db7b7616a21ad3d","date":1298513499,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n\n    // If this segment only has docs that hit non-aborting exceptions,\n    // then no term vectors files will have been written; therefore we\n    // need to update the fieldInfos and clear the term vectors bits\n    if (!state.hasVectors) {\n      state.fieldInfos.clearVectors();\n    }\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n\n    // If this segment only has docs that hit non-aborting exceptions,\n    // then no term vectors files will have been written; therefore we\n    // need to update the fieldInfos and clear the term vectors bits\n    if (!state.hasVectors) {\n      state.fieldInfos.clearVectors();\n    }\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumer consumers : docValues.values()) {\n      consumers.finish(state.numDocs);\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["594a11fd830b89fd08a253593d8e5062e20f5564"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    boolean success = false;\n    try {\n      fieldsWriter.flush(state);\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9415bdedce168782d1318d9646372709fe91fb05","date":1306668960,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    boolean success = false;\n    try {\n      fieldsWriter.flush(state);\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumer consumers : docValues.values()) {\n      consumers.finish(state.numDocs);\n    };\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumer consumers : docValues.values()) {\n      consumers.finish(state.numDocs);\n    };\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac20cb1e3ba0b41998aab1b3e67bc87d07a5ed4f","date":1310126972,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumer consumers : docValues.values()) {\n      consumers.finish(state.numDocs);\n    };\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.closeSafely(true, perDocConsumers.values());\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumer consumers : docValues.values()) {\n      consumers.finish(state.numDocs);\n    };\n  }\n\n","bugFix":null,"bugIntro":["733b83db0afdfe169b80c8580043ceca57967b19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumer consumers : docValues.values()) {\n      consumers.finish(state.numDocs);\n    };\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.closeSafely(true, perDocConsumers.values());\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumer consumers : docValues.values()) {\n      consumers.finish(state.numDocs);\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733b83db0afdfe169b80c8580043ceca57967b19","date":1314458101,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumer consumers : docValues.values()) {\n      consumers.finish(state.numDocs);\n    };\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.closeSafely(false, perDocConsumers.values());\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumer consumers : docValues.values()) {\n      consumers.finish(state.numDocs);\n    };\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.closeSafely(true, perDocConsumers.values());\n  }\n\n","bugFix":["ac20cb1e3ba0b41998aab1b3e67bc87d07a5ed4f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumer consumers : docValues.values()) {\n      consumers.finish(state.numDocs);\n    };\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.close(perDocConsumers.values());\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumer consumers : docValues.values()) {\n      consumers.finish(state.numDocs);\n    };\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.closeSafely(false, perDocConsumers.values());\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"594a11fd830b89fd08a253593d8e5062e20f5564","date":1317054010,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumerAndDocID consumers : docValues.values()) {\n      consumers.docValuesConsumer.finish(state.numDocs);\n    }\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.close(perDocConsumers.values());\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumer consumers : docValues.values()) {\n      consumers.finish(state.numDocs);\n    };\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.close(perDocConsumers.values());\n  }\n\n","bugFix":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    FieldInfosWriter infosWriter = codec.fieldInfosFormat().getFieldInfosWriter();\n    infosWriter.write(state.directory, state.segmentName, state.fieldInfos, IOContext.DEFAULT);\n    for (DocValuesConsumerAndDocID consumers : docValues.values()) {\n      consumers.docValuesConsumer.finish(state.numDocs);\n    }\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.close(perDocConsumers.values());\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n    for (DocValuesConsumerAndDocID consumers : docValues.values()) {\n      consumers.docValuesConsumer.finish(state.numDocs);\n    }\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.close(perDocConsumers.values());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    for (DocValuesConsumerAndDocID consumer : docValues.values()) {\n      consumer.docValuesConsumer.finish(state.numDocs);\n    }\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    FieldInfosWriter infosWriter = codec.fieldInfosFormat().getFieldInfosWriter();\n    infosWriter.write(state.directory, state.segmentName, state.fieldInfos, IOContext.DEFAULT);\n\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.close(perDocConsumer);\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    FieldInfosWriter infosWriter = codec.fieldInfosFormat().getFieldInfosWriter();\n    infosWriter.write(state.directory, state.segmentName, state.fieldInfos, IOContext.DEFAULT);\n    for (DocValuesConsumerAndDocID consumers : docValues.values()) {\n      consumers.docValuesConsumer.finish(state.numDocs);\n    }\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.close(perDocConsumers.values());\n  }\n\n","bugFix":["594a11fd830b89fd08a253593d8e5062e20f5564","24230fe54121f9be9d85f2c2067536296785e421"],"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    for (DocValuesConsumerAndDocID consumer : docValues.values()) {\n      consumer.docValuesConsumer.finish(state.numDocs);\n    }\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    FieldInfosWriter infosWriter = codec.fieldInfosFormat().getFieldInfosWriter();\n    infosWriter.write(state.directory, state.segmentName, state.fieldInfos, IOContext.DEFAULT);\n\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.close(perDocConsumer);\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    for (DocValuesConsumerAndDocID consumer : docValues.values()) {\n      consumer.docValuesConsumer.finish(state.numDocs);\n    }\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    FieldInfosWriter infosWriter = codec.fieldInfosFormat().getFieldInfosWriter();\n    infosWriter.write(state.directory, state.segmentName, state.fieldInfos, IOContext.DEFAULT);\n\n    // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS\n    IOUtils.close(perDocConsumer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["733b83db0afdfe169b80c8580043ceca57967b19"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","2e8d7ba2175f47e280231533f7d3016249cea88b"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"efb7a19703a037c29e30440260d393500febc1f4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3cc749c053615f5871f3b95715fe292f34e70a53":["594a11fd830b89fd08a253593d8e5062e20f5564"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"594a11fd830b89fd08a253593d8e5062e20f5564":["24230fe54121f9be9d85f2c2067536296785e421"],"9415bdedce168782d1318d9646372709fe91fb05":["efb7a19703a037c29e30440260d393500febc1f4"],"692804e172a5810620fac3194db7b7616a21ad3d":["bde51b089eb7f86171eb3406e38a274743f9b7ac","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["9415bdedce168782d1318d9646372709fe91fb05","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["692804e172a5810620fac3194db7b7616a21ad3d","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"733b83db0afdfe169b80c8580043ceca57967b19":["ac20cb1e3ba0b41998aab1b3e67bc87d07a5ed4f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["3cc749c053615f5871f3b95715fe292f34e70a53"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ac20cb1e3ba0b41998aab1b3e67bc87d07a5ed4f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["6c18273ea5b3974d2f30117f46f1ae416c28f727","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ac20cb1e3ba0b41998aab1b3e67bc87d07a5ed4f":["2e8d7ba2175f47e280231533f7d3016249cea88b"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["594a11fd830b89fd08a253593d8e5062e20f5564"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"efb7a19703a037c29e30440260d393500febc1f4":["9415bdedce168782d1318d9646372709fe91fb05"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["efb7a19703a037c29e30440260d393500febc1f4","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"3cc749c053615f5871f3b95715fe292f34e70a53":["fa0f44f887719e97183771e977cfc4bfb485b766"],"594a11fd830b89fd08a253593d8e5062e20f5564":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9415bdedce168782d1318d9646372709fe91fb05":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"692804e172a5810620fac3194db7b7616a21ad3d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ac20cb1e3ba0b41998aab1b3e67bc87d07a5ed4f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"733b83db0afdfe169b80c8580043ceca57967b19":["24230fe54121f9be9d85f2c2067536296785e421"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c18273ea5b3974d2f30117f46f1ae416c28f727","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","692804e172a5810620fac3194db7b7616a21ad3d","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["692804e172a5810620fac3194db7b7616a21ad3d"],"ac20cb1e3ba0b41998aab1b3e67bc87d07a5ed4f":["733b83db0afdfe169b80c8580043ceca57967b19","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}