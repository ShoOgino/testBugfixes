{"path":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#ByteBufferIndexInput(String,ByteBuffer[],long,int,BufferCleaner,WeakIdentityMap[ByteBufferIndexInput,Boolean]).mjava","commits":[{"id":"f986320666d675a260eb4529a0c3c40595731441","date":1401729997,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#ByteBufferIndexInput(String,ByteBuffer[],long,int,BufferCleaner,WeakIdentityMap[ByteBufferIndexInput,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#ByteBufferIndexInput(String,ByteBuffer[],long,int,boolean).mjava","sourceNew":"  ByteBufferIndexInput(String resourceDescription, ByteBuffer[] buffers, long length, int chunkSizePower, BufferCleaner cleaner, WeakIdentityMap<ByteBufferIndexInput,Boolean> clones) {\n    super(resourceDescription);\n    this.buffers = buffers;\n    this.length = length;\n    this.chunkSizePower = chunkSizePower;\n    this.chunkSizeMask = (1L << chunkSizePower) - 1L;\n    this.clones = clones;\n    this.cleaner = cleaner;\n    assert chunkSizePower >= 0 && chunkSizePower <= 30;   \n    assert (length >>> chunkSizePower) < Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  ByteBufferIndexInput(String resourceDescription, ByteBuffer[] buffers, long length, int chunkSizePower, boolean trackClones) throws IOException {\n    super(resourceDescription);\n    this.buffers = buffers;\n    this.length = length;\n    this.chunkSizePower = chunkSizePower;\n    this.chunkSizeMask = (1L << chunkSizePower) - 1L;\n    this.clones = trackClones ? WeakIdentityMap.<ByteBufferIndexInput,Boolean>newConcurrentHashMap() : null;\n    \n    assert chunkSizePower >= 0 && chunkSizePower <= 30;   \n    assert (length >>> chunkSizePower) < Integer.MAX_VALUE;\n\n    seek(0L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71f8255d67554b78ea0a26a5cdb916a759261aab","date":1471024473,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#ByteBufferIndexInput(String,ByteBuffer[],long,int,ByteBufferGuard).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#ByteBufferIndexInput(String,ByteBuffer[],long,int,BufferCleaner,WeakIdentityMap[ByteBufferIndexInput,Boolean]).mjava","sourceNew":"  ByteBufferIndexInput(String resourceDescription, ByteBuffer[] buffers, long length, int chunkSizePower, ByteBufferGuard guard) {\n    super(resourceDescription);\n    this.buffers = buffers;\n    this.length = length;\n    this.chunkSizePower = chunkSizePower;\n    this.chunkSizeMask = (1L << chunkSizePower) - 1L;\n    this.guard = guard;\n    assert chunkSizePower >= 0 && chunkSizePower <= 30;   \n    assert (length >>> chunkSizePower) < Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  ByteBufferIndexInput(String resourceDescription, ByteBuffer[] buffers, long length, int chunkSizePower, BufferCleaner cleaner, WeakIdentityMap<ByteBufferIndexInput,Boolean> clones) {\n    super(resourceDescription);\n    this.buffers = buffers;\n    this.length = length;\n    this.chunkSizePower = chunkSizePower;\n    this.chunkSizeMask = (1L << chunkSizePower) - 1L;\n    this.clones = clones;\n    this.cleaner = cleaner;\n    assert chunkSizePower >= 0 && chunkSizePower <= 30;   \n    assert (length >>> chunkSizePower) < Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#ByteBufferIndexInput(String,ByteBuffer[],long,int,ByteBufferGuard).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#ByteBufferIndexInput(String,ByteBuffer[],long,int,BufferCleaner,WeakIdentityMap[ByteBufferIndexInput,Boolean]).mjava","sourceNew":"  ByteBufferIndexInput(String resourceDescription, ByteBuffer[] buffers, long length, int chunkSizePower, ByteBufferGuard guard) {\n    super(resourceDescription);\n    this.buffers = buffers;\n    this.length = length;\n    this.chunkSizePower = chunkSizePower;\n    this.chunkSizeMask = (1L << chunkSizePower) - 1L;\n    this.guard = guard;\n    assert chunkSizePower >= 0 && chunkSizePower <= 30;   \n    assert (length >>> chunkSizePower) < Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  ByteBufferIndexInput(String resourceDescription, ByteBuffer[] buffers, long length, int chunkSizePower, BufferCleaner cleaner, WeakIdentityMap<ByteBufferIndexInput,Boolean> clones) {\n    super(resourceDescription);\n    this.buffers = buffers;\n    this.length = length;\n    this.chunkSizePower = chunkSizePower;\n    this.chunkSizeMask = (1L << chunkSizePower) - 1L;\n    this.clones = clones;\n    this.cleaner = cleaner;\n    assert chunkSizePower >= 0 && chunkSizePower <= 30;   \n    assert (length >>> chunkSizePower) < Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#ByteBufferIndexInput(String,ByteBuffer[],long,int,ByteBufferGuard).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#ByteBufferIndexInput(String,ByteBuffer[],long,int,BufferCleaner,WeakIdentityMap[ByteBufferIndexInput,Boolean]).mjava","sourceNew":"  ByteBufferIndexInput(String resourceDescription, ByteBuffer[] buffers, long length, int chunkSizePower, ByteBufferGuard guard) {\n    super(resourceDescription);\n    this.buffers = buffers;\n    this.length = length;\n    this.chunkSizePower = chunkSizePower;\n    this.chunkSizeMask = (1L << chunkSizePower) - 1L;\n    this.guard = guard;\n    assert chunkSizePower >= 0 && chunkSizePower <= 30;   \n    assert (length >>> chunkSizePower) < Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  ByteBufferIndexInput(String resourceDescription, ByteBuffer[] buffers, long length, int chunkSizePower, BufferCleaner cleaner, WeakIdentityMap<ByteBufferIndexInput,Boolean> clones) {\n    super(resourceDescription);\n    this.buffers = buffers;\n    this.length = length;\n    this.chunkSizePower = chunkSizePower;\n    this.chunkSizeMask = (1L << chunkSizePower) - 1L;\n    this.clones = clones;\n    this.cleaner = cleaner;\n    assert chunkSizePower >= 0 && chunkSizePower <= 30;   \n    assert (length >>> chunkSizePower) < Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#ByteBufferIndexInput(String,ByteBuffer[],long,int,BufferCleaner,WeakIdentityMap[ByteBufferIndexInput,Boolean]).mjava","sourceNew":null,"sourceOld":"  ByteBufferIndexInput(String resourceDescription, ByteBuffer[] buffers, long length, int chunkSizePower, BufferCleaner cleaner, WeakIdentityMap<ByteBufferIndexInput,Boolean> clones) {\n    super(resourceDescription);\n    this.buffers = buffers;\n    this.length = length;\n    this.chunkSizePower = chunkSizePower;\n    this.chunkSizeMask = (1L << chunkSizePower) - 1L;\n    this.clones = clones;\n    this.cleaner = cleaner;\n    assert chunkSizePower >= 0 && chunkSizePower <= 30;   \n    assert (length >>> chunkSizePower) < Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["f986320666d675a260eb4529a0c3c40595731441","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"f986320666d675a260eb4529a0c3c40595731441":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["f986320666d675a260eb4529a0c3c40595731441","71f8255d67554b78ea0a26a5cdb916a759261aab"],"71f8255d67554b78ea0a26a5cdb916a759261aab":["f986320666d675a260eb4529a0c3c40595731441"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f986320666d675a260eb4529a0c3c40595731441","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f986320666d675a260eb4529a0c3c40595731441":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","71f8255d67554b78ea0a26a5cdb916a759261aab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f986320666d675a260eb4529a0c3c40595731441"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"71f8255d67554b78ea0a26a5cdb916a759261aab":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}