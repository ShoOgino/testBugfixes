{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/IndexController#createNewIndexerTask(ServerBaseEntry,IndexAction).mjava","commits":[{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/IndexController#createNewIndexerTask(ServerBaseEntry,IndexAction).mjava","pathOld":"/dev/null","sourceNew":"    // TODO add test for this method!!\n    private void createNewIndexerTask(ServerBaseEntry entry, IndexAction action) {\n        if (this.destroyed.get())\n            throw new IllegalStateException(\n                    \"IndexController has been destroyed\");\n        if(!this.isInitialized.get())\n            throw new IllegalStateException(\n            \"IndexController has not been initialized\");\n\n        String serviceName = entry.getServiceConfig().getName();\n        if (LOG.isInfoEnabled())\n            LOG.info(\"New Indexer Task submitted - Action: \" + action\n                    + \" for service: \" + serviceName);\n        ServiceIndex bean = this.indexerMap.get(serviceName);\n        if (bean == null)\n            throw new RuntimeException(\"no indexer for service \" + serviceName\n                    + \" registered\");\n        /*\n         * lock on service to synchronize the event order. This lock has\n         * fairness parameter set to true. Grant access to the longest waiting\n         * thread. Using fairness is slower but is acceptable in this context\n         */\n        Lock lock = bean.getLock();\n        lock.lock();\n        try {\n            IndexSchema schema = bean.getSchema();\n            boolean commitAfter = bean.incrementActionAndReset(schema.getCommitAfterDocuments());\n            IndexDocumentBuilder<IndexDocument> callable = new IndexDocumentBuilderTask<IndexDocument>(\n                    entry, bean.getSchema(), action, commitAfter,bean.getOptimize(schema.getOptimizeAfterCommit()));\n            Future<IndexDocument> task = this.taskExecutor.submit(callable);\n            GDataIndexer indexer = bean.getIndexer();\n            try {\n                indexer.addIndexableDocumentTask(task);\n            } catch (InterruptedException e) {\n                throw new GdataIndexerException(\n                        \"Can not accept any index tasks -- interrupted. \", e);\n\n            }\n        } finally {\n            /*\n             * make sure to unlock\n             */\n            lock.unlock();\n        }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"032a97fadd06b99cd75ebc3be22b74701f80e25d","date":1155763286,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/IndexController#createNewIndexerTask(ServerBaseEntry,IndexAction).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/IndexController#createNewIndexerTask(ServerBaseEntry,IndexAction).mjava","sourceNew":"    // TODO add test for this method!!\n    private void createNewIndexerTask(final ServerBaseEntry entry, final IndexAction action) {\n        checkDestroyed();\n        checkInitialized();\n        String serviceName = entry.getServiceConfig().getName();\n        if (LOG.isInfoEnabled())\n            LOG.info(\"New Indexer Task submitted - Action: \" + action\n                    + \" for service: \" + serviceName);\n        ServiceIndex bean = this.indexerMap.get(serviceName);\n        if (bean == null)\n            throw new RuntimeException(\"no indexer for service \" + serviceName\n                    + \" registered\");\n        /*\n         * lock on service to synchronize the event order. This lock has\n         * fairness parameter set to true. Grant access to the longest waiting\n         * thread. Using fairness is slower but is acceptable in this context\n         */\n        Lock lock = bean.getLock();\n        lock.lock();\n        try {\n            IndexSchema schema = bean.getSchema();\n            boolean commitAfter = bean.incrementActionAndReset(schema.getCommitAfterDocuments());\n            IndexDocumentBuilder<IndexDocument> callable = new IndexDocumentBuilderTask<IndexDocument>(\n                    entry, bean.getSchema(), action, commitAfter,bean.getOptimize(schema.getOptimizeAfterCommit()));\n            sumbitTask(callable,bean.getIndexer());\n        } finally {\n            /*\n             * make sure to unlock\n             */\n            lock.unlock();\n        }\n\n    }\n\n","sourceOld":"    // TODO add test for this method!!\n    private void createNewIndexerTask(ServerBaseEntry entry, IndexAction action) {\n        if (this.destroyed.get())\n            throw new IllegalStateException(\n                    \"IndexController has been destroyed\");\n        if(!this.isInitialized.get())\n            throw new IllegalStateException(\n            \"IndexController has not been initialized\");\n\n        String serviceName = entry.getServiceConfig().getName();\n        if (LOG.isInfoEnabled())\n            LOG.info(\"New Indexer Task submitted - Action: \" + action\n                    + \" for service: \" + serviceName);\n        ServiceIndex bean = this.indexerMap.get(serviceName);\n        if (bean == null)\n            throw new RuntimeException(\"no indexer for service \" + serviceName\n                    + \" registered\");\n        /*\n         * lock on service to synchronize the event order. This lock has\n         * fairness parameter set to true. Grant access to the longest waiting\n         * thread. Using fairness is slower but is acceptable in this context\n         */\n        Lock lock = bean.getLock();\n        lock.lock();\n        try {\n            IndexSchema schema = bean.getSchema();\n            boolean commitAfter = bean.incrementActionAndReset(schema.getCommitAfterDocuments());\n            IndexDocumentBuilder<IndexDocument> callable = new IndexDocumentBuilderTask<IndexDocument>(\n                    entry, bean.getSchema(), action, commitAfter,bean.getOptimize(schema.getOptimizeAfterCommit()));\n            Future<IndexDocument> task = this.taskExecutor.submit(callable);\n            GDataIndexer indexer = bean.getIndexer();\n            try {\n                indexer.addIndexableDocumentTask(task);\n            } catch (InterruptedException e) {\n                throw new GdataIndexerException(\n                        \"Can not accept any index tasks -- interrupted. \", e);\n\n            }\n        } finally {\n            /*\n             * make sure to unlock\n             */\n            lock.unlock();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/index/IndexController#createNewIndexerTask(ServerBaseEntry,IndexAction).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/IndexController#createNewIndexerTask(ServerBaseEntry,IndexAction).mjava","sourceNew":"    // TODO add test for this method!!\n    private void createNewIndexerTask(final ServerBaseEntry entry, final IndexAction action) {\n        checkDestroyed();\n        checkInitialized();\n        String serviceName = entry.getServiceConfig().getName();\n        if (LOG.isInfoEnabled())\n            LOG.info(\"New Indexer Task submitted - Action: \" + action\n                    + \" for service: \" + serviceName);\n        ServiceIndex bean = this.indexerMap.get(serviceName);\n        if (bean == null)\n            throw new RuntimeException(\"no indexer for service \" + serviceName\n                    + \" registered\");\n        /*\n         * lock on service to synchronize the event order. This lock has\n         * fairness parameter set to true. Grant access to the longest waiting\n         * thread. Using fairness is slower but is acceptable in this context\n         */\n        Lock lock = bean.getLock();\n        lock.lock();\n        try {\n            IndexSchema schema = bean.getSchema();\n            boolean commitAfter = bean.incrementActionAndReset(schema.getCommitAfterDocuments());\n            IndexDocumentBuilder<IndexDocument> callable = new IndexDocumentBuilderTask<IndexDocument>(\n                    entry, bean.getSchema(), action, commitAfter,bean.getOptimize(schema.getOptimizeAfterCommit()));\n            sumbitTask(callable,bean.getIndexer());\n        } finally {\n            /*\n             * make sure to unlock\n             */\n            lock.unlock();\n        }\n\n    }\n\n","sourceOld":"    // TODO add test for this method!!\n    private void createNewIndexerTask(final ServerBaseEntry entry, final IndexAction action) {\n        checkDestroyed();\n        checkInitialized();\n        String serviceName = entry.getServiceConfig().getName();\n        if (LOG.isInfoEnabled())\n            LOG.info(\"New Indexer Task submitted - Action: \" + action\n                    + \" for service: \" + serviceName);\n        ServiceIndex bean = this.indexerMap.get(serviceName);\n        if (bean == null)\n            throw new RuntimeException(\"no indexer for service \" + serviceName\n                    + \" registered\");\n        /*\n         * lock on service to synchronize the event order. This lock has\n         * fairness parameter set to true. Grant access to the longest waiting\n         * thread. Using fairness is slower but is acceptable in this context\n         */\n        Lock lock = bean.getLock();\n        lock.lock();\n        try {\n            IndexSchema schema = bean.getSchema();\n            boolean commitAfter = bean.incrementActionAndReset(schema.getCommitAfterDocuments());\n            IndexDocumentBuilder<IndexDocument> callable = new IndexDocumentBuilderTask<IndexDocument>(\n                    entry, bean.getSchema(), action, commitAfter,bean.getOptimize(schema.getOptimizeAfterCommit()));\n            sumbitTask(callable,bean.getIndexer());\n        } finally {\n            /*\n             * make sure to unlock\n             */\n            lock.unlock();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"032a97fadd06b99cd75ebc3be22b74701f80e25d":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["032a97fadd06b99cd75ebc3be22b74701f80e25d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["032a97fadd06b99cd75ebc3be22b74701f80e25d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"032a97fadd06b99cd75ebc3be22b74701f80e25d":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}