{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharSerialization().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharSerialization().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharSerialization().mjava","sourceNew":"  @Test \n  public void testCharSerialization() throws Exception {\n    CategoryPath[] testCategories = {\n        new CategoryPath(\"hi\", \"there\", \"man\"),\n        new CategoryPath(\"hello\"),\n        new CategoryPath(\"what's\", \"up\"),\n        // See that an empty category, which generates a (char)0,\n        // doesn't cause any problems in the middle of the serialization:\n        new CategoryPath(),\n        new CategoryPath(\"another\", \"example\"),\n        new CategoryPath(),\n        new CategoryPath()\n    };\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<testCategories.length; i++) {\n      testCategories[i].serializeAppendTo(sb);\n    }\n    \n    CategoryPath tmp = new CategoryPath();\n    int offset=0;\n    for (int i=0; i<testCategories.length; i++) {\n      // check equalsToSerialized, in a equal and non-equal case:\n      assertTrue(testCategories[i].equalsToSerialized(sb, offset));\n      assertFalse(new CategoryPath(\"Hello\", \"world\").equalsToSerialized(sb, offset));\n      assertFalse(new CategoryPath(\"world\").equalsToSerialized(sb, offset));\n      // and check hashCodeFromSerialized:\n      assertEquals(testCategories[i].hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n      // and check setFromSerialized:\n      offset = tmp.setFromSerialized(sb, offset);\n      assertEquals(testCategories[i], tmp);\n    }\n    assertEquals(offset, sb.length());\n    // A similar test, for a much longer path (though not larger than the\n    // 2^15-1 character limit that CategoryPath allows:\n    sb = new StringBuilder();\n    CategoryPath p = new CategoryPath();\n    for (int i=0; i<1000; i++) {\n      p.add(Integer.toString(i));\n    }\n    p.serializeAppendTo(sb);\n    p.serializeAppendTo(sb);\n    p.serializeAppendTo(sb);\n    offset=0;\n    assertTrue(p.equalsToSerialized(sb, offset));\n    assertEquals(p.hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n    offset = tmp.setFromSerialized(sb, offset);\n    assertEquals(p, tmp);\n    assertTrue(p.equalsToSerialized(sb, offset));\n    assertEquals(p.hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n    offset = tmp.setFromSerialized(sb, offset);\n    assertEquals(p, tmp);\n    assertTrue(p.equalsToSerialized(sb, offset));\n    assertEquals(p.hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n    offset = tmp.setFromSerialized(sb, offset);\n    assertEquals(p, tmp);\n    assertEquals(offset, sb.length());\n    \n    // Test the serializeAppendTo variant with a prefixLen\n    p = new CategoryPath();\n    for (int i=0; i<783; i++) {\n      p.add(Integer.toString(i));\n    }\n    int[] prefixLengths = { 0, 574, 782, 783, 784, -1 };\n    for (int prefixLen : prefixLengths) {\n      sb = new StringBuilder();\n      p.serializeAppendTo(prefixLen, sb);\n      assertTrue(new CategoryPath(p, prefixLen).equalsToSerialized(sb, 0));\n    }\n    \n    // Test the equalsToSerialized variant with a prefixLen\n    // We use p and prefixLengths set above.\n    for (int prefixLen : prefixLengths) {\n      sb = new StringBuilder();\n      new CategoryPath(p, prefixLen).serializeAppendTo(sb);\n      assertTrue(p.equalsToSerialized(prefixLen, sb, 0));\n    }\n    \n    // Check also the false case of equalsToSerialized with prefixLen:\n    sb = new StringBuilder();\n    new CategoryPath().serializeAppendTo(sb);\n    assertTrue(new CategoryPath().equalsToSerialized(0, sb, 0));\n    assertTrue(new CategoryPath(\"a\", \"b\").equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\", \"b\").equalsToSerialized(1, sb, 0));\n    sb = new StringBuilder();\n    new CategoryPath(\"a\", \"b\").serializeAppendTo(sb);\n    assertFalse(new CategoryPath().equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\").equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\").equalsToSerialized(1, sb, 0));\n    assertFalse(new CategoryPath(\"a\", \"b\").equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\", \"b\").equalsToSerialized(1, sb, 0));\n    assertTrue(new CategoryPath(\"a\", \"b\").equalsToSerialized(2, sb, 0));\n    assertTrue(new CategoryPath(\"a\", \"b\", \"c\").equalsToSerialized(2, sb, 0));\n    assertFalse(new CategoryPath(\"z\", \"b\", \"c\").equalsToSerialized(2, sb, 0));\n    assertFalse(new CategoryPath(\"aa\", \"b\", \"c\").equalsToSerialized(2, sb, 0));\n  }\n\n","sourceOld":"  @Test \n  public void testCharSerialization() throws Exception {\n    CategoryPath[] testCategories = {\n        new CategoryPath(\"hi\", \"there\", \"man\"),\n        new CategoryPath(\"hello\"),\n        new CategoryPath(\"what's\", \"up\"),\n        // See that an empty category, which generates a (char)0,\n        // doesn't cause any problems in the middle of the serialization:\n        new CategoryPath(),\n        new CategoryPath(\"another\", \"example\"),\n        new CategoryPath(),\n        new CategoryPath()\n    };\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<testCategories.length; i++) {\n      testCategories[i].serializeAppendTo(sb);\n    }\n    \n    CategoryPath tmp = new CategoryPath();\n    int offset=0;\n    for (int i=0; i<testCategories.length; i++) {\n      // check equalsToSerialized, in a equal and non-equal case:\n      assertTrue(testCategories[i].equalsToSerialized(sb, offset));\n      assertFalse(new CategoryPath(\"Hello\", \"world\").equalsToSerialized(sb, offset));\n      assertFalse(new CategoryPath(\"world\").equalsToSerialized(sb, offset));\n      // and check hashCodeFromSerialized:\n      assertEquals(testCategories[i].hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n      // and check setFromSerialized:\n      offset = tmp.setFromSerialized(sb, offset);\n      assertEquals(testCategories[i], tmp);\n    }\n    assertEquals(offset, sb.length());\n    // A similar test, for a much longer path (though not larger than the\n    // 2^15-1 character limit that CategoryPath allows:\n    sb = new StringBuilder();\n    CategoryPath p = new CategoryPath();\n    for (int i=0; i<1000; i++) {\n      p.add(Integer.toString(i));\n    }\n    p.serializeAppendTo(sb);\n    p.serializeAppendTo(sb);\n    p.serializeAppendTo(sb);\n    offset=0;\n    assertTrue(p.equalsToSerialized(sb, offset));\n    assertEquals(p.hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n    offset = tmp.setFromSerialized(sb, offset);\n    assertEquals(p, tmp);\n    assertTrue(p.equalsToSerialized(sb, offset));\n    assertEquals(p.hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n    offset = tmp.setFromSerialized(sb, offset);\n    assertEquals(p, tmp);\n    assertTrue(p.equalsToSerialized(sb, offset));\n    assertEquals(p.hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n    offset = tmp.setFromSerialized(sb, offset);\n    assertEquals(p, tmp);\n    assertEquals(offset, sb.length());\n    \n    // Test the serializeAppendTo variant with a prefixLen\n    p = new CategoryPath();\n    for (int i=0; i<783; i++) {\n      p.add(Integer.toString(i));\n    }\n    int[] prefixLengths = { 0, 574, 782, 783, 784, -1 };\n    for (int prefixLen : prefixLengths) {\n      sb = new StringBuilder();\n      p.serializeAppendTo(prefixLen, sb);\n      assertTrue(new CategoryPath(p, prefixLen).equalsToSerialized(sb, 0));\n    }\n    \n    // Test the equalsToSerialized variant with a prefixLen\n    // We use p and prefixLengths set above.\n    for (int prefixLen : prefixLengths) {\n      sb = new StringBuilder();\n      new CategoryPath(p, prefixLen).serializeAppendTo(sb);\n      assertTrue(p.equalsToSerialized(prefixLen, sb, 0));\n    }\n    \n    // Check also the false case of equalsToSerialized with prefixLen:\n    sb = new StringBuilder();\n    new CategoryPath().serializeAppendTo(sb);\n    assertTrue(new CategoryPath().equalsToSerialized(0, sb, 0));\n    assertTrue(new CategoryPath(\"a\", \"b\").equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\", \"b\").equalsToSerialized(1, sb, 0));\n    sb = new StringBuilder();\n    new CategoryPath(\"a\", \"b\").serializeAppendTo(sb);\n    assertFalse(new CategoryPath().equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\").equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\").equalsToSerialized(1, sb, 0));\n    assertFalse(new CategoryPath(\"a\", \"b\").equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\", \"b\").equalsToSerialized(1, sb, 0));\n    assertTrue(new CategoryPath(\"a\", \"b\").equalsToSerialized(2, sb, 0));\n    assertTrue(new CategoryPath(\"a\", \"b\", \"c\").equalsToSerialized(2, sb, 0));\n    assertFalse(new CategoryPath(\"z\", \"b\", \"c\").equalsToSerialized(2, sb, 0));\n    assertFalse(new CategoryPath(\"aa\", \"b\", \"c\").equalsToSerialized(2, sb, 0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharSerialization().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testCharSerialization() throws Exception {\n    CategoryPath[] testCategories = {\n        new CategoryPath(\"hi\", \"there\", \"man\"),\n        new CategoryPath(\"hello\"),\n        new CategoryPath(\"what's\", \"up\"),\n        // See that an empty category, which generates a (char)0,\n        // doesn't cause any problems in the middle of the serialization:\n        new CategoryPath(),\n        new CategoryPath(\"another\", \"example\"),\n        new CategoryPath(),\n        new CategoryPath()\n    };\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<testCategories.length; i++) {\n      testCategories[i].serializeAppendTo(sb);\n    }\n    \n    CategoryPath tmp = new CategoryPath();\n    int offset=0;\n    for (int i=0; i<testCategories.length; i++) {\n      // check equalsToSerialized, in a equal and non-equal case:\n      assertTrue(testCategories[i].equalsToSerialized(sb, offset));\n      assertFalse(new CategoryPath(\"Hello\", \"world\").equalsToSerialized(sb, offset));\n      assertFalse(new CategoryPath(\"world\").equalsToSerialized(sb, offset));\n      // and check hashCodeFromSerialized:\n      assertEquals(testCategories[i].hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n      // and check setFromSerialized:\n      offset = tmp.setFromSerialized(sb, offset);\n      assertEquals(testCategories[i], tmp);\n    }\n    assertEquals(offset, sb.length());\n    // A similar test, for a much longer path (though not larger than the\n    // 2^15-1 character limit that CategoryPath allows:\n    sb = new StringBuilder();\n    CategoryPath p = new CategoryPath();\n    for (int i=0; i<1000; i++) {\n      p.add(Integer.toString(i));\n    }\n    p.serializeAppendTo(sb);\n    p.serializeAppendTo(sb);\n    p.serializeAppendTo(sb);\n    offset=0;\n    assertTrue(p.equalsToSerialized(sb, offset));\n    assertEquals(p.hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n    offset = tmp.setFromSerialized(sb, offset);\n    assertEquals(p, tmp);\n    assertTrue(p.equalsToSerialized(sb, offset));\n    assertEquals(p.hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n    offset = tmp.setFromSerialized(sb, offset);\n    assertEquals(p, tmp);\n    assertTrue(p.equalsToSerialized(sb, offset));\n    assertEquals(p.hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n    offset = tmp.setFromSerialized(sb, offset);\n    assertEquals(p, tmp);\n    assertEquals(offset, sb.length());\n    \n    // Test the serializeAppendTo variant with a prefixLen\n    p = new CategoryPath();\n    for (int i=0; i<783; i++) {\n      p.add(Integer.toString(i));\n    }\n    int[] prefixLengths = { 0, 574, 782, 783, 784, -1 };\n    for (int prefixLen : prefixLengths) {\n      sb = new StringBuilder();\n      p.serializeAppendTo(prefixLen, sb);\n      assertTrue(new CategoryPath(p, prefixLen).equalsToSerialized(sb, 0));\n    }\n    \n    // Test the equalsToSerialized variant with a prefixLen\n    // We use p and prefixLengths set above.\n    for (int prefixLen : prefixLengths) {\n      sb = new StringBuilder();\n      new CategoryPath(p, prefixLen).serializeAppendTo(sb);\n      assertTrue(p.equalsToSerialized(prefixLen, sb, 0));\n    }\n    \n    // Check also the false case of equalsToSerialized with prefixLen:\n    sb = new StringBuilder();\n    new CategoryPath().serializeAppendTo(sb);\n    assertTrue(new CategoryPath().equalsToSerialized(0, sb, 0));\n    assertTrue(new CategoryPath(\"a\", \"b\").equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\", \"b\").equalsToSerialized(1, sb, 0));\n    sb = new StringBuilder();\n    new CategoryPath(\"a\", \"b\").serializeAppendTo(sb);\n    assertFalse(new CategoryPath().equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\").equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\").equalsToSerialized(1, sb, 0));\n    assertFalse(new CategoryPath(\"a\", \"b\").equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\", \"b\").equalsToSerialized(1, sb, 0));\n    assertTrue(new CategoryPath(\"a\", \"b\").equalsToSerialized(2, sb, 0));\n    assertTrue(new CategoryPath(\"a\", \"b\", \"c\").equalsToSerialized(2, sb, 0));\n    assertFalse(new CategoryPath(\"z\", \"b\", \"c\").equalsToSerialized(2, sb, 0));\n    assertFalse(new CategoryPath(\"aa\", \"b\", \"c\").equalsToSerialized(2, sb, 0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharSerialization().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testCharSerialization() throws Exception {\n    CategoryPath[] testCategories = {\n        new CategoryPath(\"hi\", \"there\", \"man\"),\n        new CategoryPath(\"hello\"),\n        new CategoryPath(\"what's\", \"up\"),\n        // See that an empty category, which generates a (char)0,\n        // doesn't cause any problems in the middle of the serialization:\n        new CategoryPath(),\n        new CategoryPath(\"another\", \"example\"),\n        new CategoryPath(),\n        new CategoryPath()\n    };\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<testCategories.length; i++) {\n      testCategories[i].serializeAppendTo(sb);\n    }\n    \n    CategoryPath tmp = new CategoryPath();\n    int offset=0;\n    for (int i=0; i<testCategories.length; i++) {\n      // check equalsToSerialized, in a equal and non-equal case:\n      assertTrue(testCategories[i].equalsToSerialized(sb, offset));\n      assertFalse(new CategoryPath(\"Hello\", \"world\").equalsToSerialized(sb, offset));\n      assertFalse(new CategoryPath(\"world\").equalsToSerialized(sb, offset));\n      // and check hashCodeFromSerialized:\n      assertEquals(testCategories[i].hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n      // and check setFromSerialized:\n      offset = tmp.setFromSerialized(sb, offset);\n      assertEquals(testCategories[i], tmp);\n    }\n    assertEquals(offset, sb.length());\n    // A similar test, for a much longer path (though not larger than the\n    // 2^15-1 character limit that CategoryPath allows:\n    sb = new StringBuilder();\n    CategoryPath p = new CategoryPath();\n    for (int i=0; i<1000; i++) {\n      p.add(Integer.toString(i));\n    }\n    p.serializeAppendTo(sb);\n    p.serializeAppendTo(sb);\n    p.serializeAppendTo(sb);\n    offset=0;\n    assertTrue(p.equalsToSerialized(sb, offset));\n    assertEquals(p.hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n    offset = tmp.setFromSerialized(sb, offset);\n    assertEquals(p, tmp);\n    assertTrue(p.equalsToSerialized(sb, offset));\n    assertEquals(p.hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n    offset = tmp.setFromSerialized(sb, offset);\n    assertEquals(p, tmp);\n    assertTrue(p.equalsToSerialized(sb, offset));\n    assertEquals(p.hashCode(), CategoryPath.hashCodeOfSerialized(sb, offset));\n    offset = tmp.setFromSerialized(sb, offset);\n    assertEquals(p, tmp);\n    assertEquals(offset, sb.length());\n    \n    // Test the serializeAppendTo variant with a prefixLen\n    p = new CategoryPath();\n    for (int i=0; i<783; i++) {\n      p.add(Integer.toString(i));\n    }\n    int[] prefixLengths = { 0, 574, 782, 783, 784, -1 };\n    for (int prefixLen : prefixLengths) {\n      sb = new StringBuilder();\n      p.serializeAppendTo(prefixLen, sb);\n      assertTrue(new CategoryPath(p, prefixLen).equalsToSerialized(sb, 0));\n    }\n    \n    // Test the equalsToSerialized variant with a prefixLen\n    // We use p and prefixLengths set above.\n    for (int prefixLen : prefixLengths) {\n      sb = new StringBuilder();\n      new CategoryPath(p, prefixLen).serializeAppendTo(sb);\n      assertTrue(p.equalsToSerialized(prefixLen, sb, 0));\n    }\n    \n    // Check also the false case of equalsToSerialized with prefixLen:\n    sb = new StringBuilder();\n    new CategoryPath().serializeAppendTo(sb);\n    assertTrue(new CategoryPath().equalsToSerialized(0, sb, 0));\n    assertTrue(new CategoryPath(\"a\", \"b\").equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\", \"b\").equalsToSerialized(1, sb, 0));\n    sb = new StringBuilder();\n    new CategoryPath(\"a\", \"b\").serializeAppendTo(sb);\n    assertFalse(new CategoryPath().equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\").equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\").equalsToSerialized(1, sb, 0));\n    assertFalse(new CategoryPath(\"a\", \"b\").equalsToSerialized(0, sb, 0));\n    assertFalse(new CategoryPath(\"a\", \"b\").equalsToSerialized(1, sb, 0));\n    assertTrue(new CategoryPath(\"a\", \"b\").equalsToSerialized(2, sb, 0));\n    assertTrue(new CategoryPath(\"a\", \"b\", \"c\").equalsToSerialized(2, sb, 0));\n    assertFalse(new CategoryPath(\"z\", \"b\", \"c\").equalsToSerialized(2, sb, 0));\n    assertFalse(new CategoryPath(\"aa\", \"b\", \"c\").equalsToSerialized(2, sb, 0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}