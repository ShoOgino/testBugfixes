{"path":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","commits":[{"id":"0a4aa30c1d033538915f8f047faa2eb746afa54a","date":1320174184,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","pathOld":"/dev/null","sourceNew":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedDeletes freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.termCount);\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testPartiallyAppliedGlobalSlice().mjava","sourceNew":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedDeletes freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.termCount);\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","sourceOld":"  public void testPartiallyAppliedGlobalSlice() throws SecurityException,\n      NoSuchFieldException, IllegalArgumentException, IllegalAccessException,\n      InterruptedException {\n    final DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    Field field = DocumentsWriterDeleteQueue.class\n        .getDeclaredField(\"globalBufferLock\");\n    field.setAccessible(true);\n    ReentrantLock lock = (ReentrantLock) field.get(queue);\n    lock.lock();\n    Thread t = new Thread() {\n      public void run() {\n        queue.addDelete(new Term(\"foo\", \"bar\"));\n      }\n    };\n    t.start();\n    t.join();\n    lock.unlock();\n    assertTrue(\"changes in del queue but not in slice yet\", queue.anyChanges());\n    queue.tryApplyGlobalSlice();\n    assertTrue(\"changes in global buffer\", queue.anyChanges());\n    FrozenBufferedDeletes freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n    assertTrue(freezeGlobalBuffer.any());\n    assertEquals(1, freezeGlobalBuffer.termCount);\n    assertFalse(\"all changes applied\", queue.anyChanges());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a4aa30c1d033538915f8f047faa2eb746afa54a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0a4aa30c1d033538915f8f047faa2eb746afa54a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0a4aa30c1d033538915f8f047faa2eb746afa54a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a4aa30c1d033538915f8f047faa2eb746afa54a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}