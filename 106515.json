{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String,DocSet).mjava","commits":[{"id":"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c","date":1378490020,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String,DocSet).mjava","pathOld":"/dev/null","sourceNew":"  private NamedList getListedTermCounts(String field, String termList, DocSet base) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String,DocSet).mjava","sourceNew":"  private NamedList getListedTermCounts(String field, String termList, DocSet base) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList getListedTermCounts(String field, String termList, DocSet base) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,DocSet,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String,DocSet).mjava","sourceNew":"  /**\n   * Computes the term-&gt;count counts for the specified term values relative to the \n   * @param field the name of the field to compute term counts against\n   * @param base the docset to compute term counts relative to\n   * @param terms a list of term values (in the specified field) to compute the counts for \n   */\n  protected NamedList<Integer> getListedTermCounts(String field, DocSet base, List<String> terms) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> res = new NamedList<>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList getListedTermCounts(String field, String termList, DocSet base) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":["aab508a3cd5a554096365ed514f5eba621b30279"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92751ba9273251eab6a2e379ec42a1697a32ff96"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c"],"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}