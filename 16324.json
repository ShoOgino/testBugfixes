{"path":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new MockRAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        FlexTestUtil.verifyFlexVsPreFlex(rnd, writer);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        FlexTestUtil.verifyFlexVsPreFlex(rnd, ram);\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new RAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new MockRAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new MockRAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        FlexTestUtil.verifyFlexVsPreFlex(rnd, writer);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        FlexTestUtil.verifyFlexVsPreFlex(rnd, ram);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new MockRAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new MockRAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        FlexTestUtil.verifyFlexVsPreFlex(rnd, writer);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        FlexTestUtil.verifyFlexVsPreFlex(rnd, ram);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new MockRAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(rnd, TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig(rnd, TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new MockRAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = newDirectory(rnd);\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(rnd, TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig(rnd, TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new MockRAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(rnd, TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig(rnd, TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = newDirectory(rnd);\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(rnd, TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig(rnd, TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        rnd = newRandom();\n        Directory ram = new MockRAMDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();        \n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(new Field(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(new Field(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n        reader = SegmentReader.getOnlySegmentReader(ram);\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO, Field.Index.ANALYZED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO, Field.Index.ANALYZED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", 1, \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dca8d536ba2e4aab4623a172a22cc2885ec7cb3d","date":1315818042,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.optimize();\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram, false));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.fieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dca8d536ba2e4aab4623a172a22cc2885ec7cb3d":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["dca8d536ba2e4aab4623a172a22cc2885ec7cb3d"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","28427ef110c4c5bf5b4057731b83110bd1e13724"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"dca8d536ba2e4aab4623a172a22cc2885ec7cb3d":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["dca8d536ba2e4aab4623a172a22cc2885ec7cb3d"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","b21422ff1d1d56499dec481f193b402e5e8def5b"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1509f151d7692d84fae414b2b799ac06ba60fcb4","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}