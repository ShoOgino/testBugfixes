{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribIntervals(FacetInfo,NamedList).mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribIntervals(FacetInfo,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  //\n  // The implementation below uses the first encountered shard's\n  // facet_intervals as the basis for subsequent shards' data to be merged.\n  private void doDistribIntervals(FacetInfo fi, NamedList facet_counts) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Integer>> facet_intervals =\n        (SimpleOrderedMap<SimpleOrderedMap<Integer>>)\n            facet_counts.get(\"facet_intervals\");\n\n    if (facet_intervals != null) {\n\n      for (Map.Entry<String, SimpleOrderedMap<Integer>> entry : facet_intervals) {\n        final String field = entry.getKey();\n        SimpleOrderedMap<Integer> existingCounts = fi.intervalFacets.get(field);\n        if (existingCounts == null) {\n          // first time we've seen this field, no merging\n          fi.intervalFacets.add(field, entry.getValue());\n\n        } else {\n          // not the first time, merge current field counts\n          Iterator<Map.Entry<String, Integer>> newItr = entry.getValue().iterator();\n          Iterator<Map.Entry<String, Integer>> exItr = existingCounts.iterator();\n\n          // all intervals should be returned by each shard, even if they have zero count,\n          // and in the same order\n          while (exItr.hasNext()) {\n            Map.Entry<String, Integer> exItem = exItr.next();\n            if (!newItr.hasNext()) {\n              throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Interval facet shard response missing key: \" + exItem.getKey());\n            }\n            Map.Entry<String, Integer> newItem = newItr.next();\n            if (!newItem.getKey().equals(exItem.getKey())) {\n              throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Interval facet shard response has extra key: \" + newItem.getKey());\n            }\n            exItem.setValue(exItem.getValue() + newItem.getValue());\n          }\n          if (newItr.hasNext()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Interval facet shard response has at least one extra key: \"\n                + newItr.next().getKey());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribIntervals(FacetInfo,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribIntervals(FacetInfo,NamedList).mjava","sourceNew":"  // The implementation below uses the first encountered shard's\n  // facet_intervals as the basis for subsequent shards' data to be merged.\n  private void doDistribIntervals(FacetInfo fi, NamedList facet_counts) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Integer>> facet_intervals =\n        (SimpleOrderedMap<SimpleOrderedMap<Integer>>)\n            facet_counts.get(\"facet_intervals\");\n\n    if (facet_intervals != null) {\n\n      for (Map.Entry<String, SimpleOrderedMap<Integer>> entry : facet_intervals) {\n        final String field = entry.getKey();\n        SimpleOrderedMap<Integer> existingCounts = fi.intervalFacets.get(field);\n        if (existingCounts == null) {\n          // first time we've seen this field, no merging\n          fi.intervalFacets.add(field, entry.getValue());\n\n        } else {\n          // not the first time, merge current field counts\n          Iterator<Map.Entry<String, Integer>> newItr = entry.getValue().iterator();\n          Iterator<Map.Entry<String, Integer>> exItr = existingCounts.iterator();\n\n          // all intervals should be returned by each shard, even if they have zero count,\n          // and in the same order\n          while (exItr.hasNext()) {\n            Map.Entry<String, Integer> exItem = exItr.next();\n            if (!newItr.hasNext()) {\n              throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Interval facet shard response missing key: \" + exItem.getKey());\n            }\n            Map.Entry<String, Integer> newItem = newItr.next();\n            if (!newItem.getKey().equals(exItem.getKey())) {\n              throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Interval facet shard response has extra key: \" + newItem.getKey());\n            }\n            exItem.setValue(exItem.getValue() + newItem.getValue());\n          }\n          if (newItr.hasNext()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Interval facet shard response has at least one extra key: \"\n                + newItr.next().getKey());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  //\n  // The implementation below uses the first encountered shard's\n  // facet_intervals as the basis for subsequent shards' data to be merged.\n  private void doDistribIntervals(FacetInfo fi, NamedList facet_counts) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Integer>> facet_intervals =\n        (SimpleOrderedMap<SimpleOrderedMap<Integer>>)\n            facet_counts.get(\"facet_intervals\");\n\n    if (facet_intervals != null) {\n\n      for (Map.Entry<String, SimpleOrderedMap<Integer>> entry : facet_intervals) {\n        final String field = entry.getKey();\n        SimpleOrderedMap<Integer> existingCounts = fi.intervalFacets.get(field);\n        if (existingCounts == null) {\n          // first time we've seen this field, no merging\n          fi.intervalFacets.add(field, entry.getValue());\n\n        } else {\n          // not the first time, merge current field counts\n          Iterator<Map.Entry<String, Integer>> newItr = entry.getValue().iterator();\n          Iterator<Map.Entry<String, Integer>> exItr = existingCounts.iterator();\n\n          // all intervals should be returned by each shard, even if they have zero count,\n          // and in the same order\n          while (exItr.hasNext()) {\n            Map.Entry<String, Integer> exItem = exItr.next();\n            if (!newItr.hasNext()) {\n              throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Interval facet shard response missing key: \" + exItem.getKey());\n            }\n            Map.Entry<String, Integer> newItem = newItr.next();\n            if (!newItem.getKey().equals(exItem.getKey())) {\n              throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Interval facet shard response has extra key: \" + newItem.getKey());\n            }\n            exItem.setValue(exItem.getValue() + newItem.getValue());\n          }\n          if (newItr.hasNext()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Interval facet shard response has at least one extra key: \"\n                + newItr.next().getKey());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92751ba9273251eab6a2e379ec42a1697a32ff96"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}