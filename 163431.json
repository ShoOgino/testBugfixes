{"path":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","sourceNew":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testSeeking\"));\n      mmapDir.setMaxChunkSize(1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random.nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","sourceOld":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testSeeking\"));\n      mmapDir.setMaxChunkSize(1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random.nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","sourceNew":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testSeeking\"));\n      mmapDir.setMaxChunkSize(1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","sourceOld":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testSeeking\"));\n      mmapDir.setMaxChunkSize(1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random.nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","sourceNew":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testSeeking\"), null, 1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","sourceOld":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testSeeking\"));\n      mmapDir.setMaxChunkSize(1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","sourceNew":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(TestUtil.getTempDir(\"testSeeking\"), null, 1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","sourceOld":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(_TestUtil.getTempDir(\"testSeeking\"), null, 1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","sourceNew":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(TestUtil.createTempDir(\"testSeeking\"), null, 1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","sourceOld":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(TestUtil.getTempDir(\"testSeeking\"), null, 1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","sourceNew":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testSeeking\"), null, 1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","sourceOld":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(TestUtil.createTempDir(\"testSeeking\"), null, 1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","sourceNew":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testSeeking\"), null, 1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","sourceOld":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(TestUtil.getTempDir(\"testSeeking\"), null, 1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","sourceNew":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testSeeking\"), 1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","sourceOld":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testSeeking\"), null, 1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6a2469c81a34d38d9edbf0763494a526e29db0a","date":1417052082,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMultiMMap#testSeeking().mjava","sourceNew":"  public void testSeeking() throws Exception {\n    int numIters = TEST_NIGHTLY ? 10 : 1;\n    for (int i = 0; i < numIters; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testSeeking\"), 1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","sourceOld":"  public void testSeeking() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      MMapDirectory mmapDir = new MMapDirectory(createTempDir(\"testSeeking\"), 1<<i);\n      IndexOutput io = mmapDir.createOutput(\"bytes\", newIOContext(random()));\n      byte bytes[] = new byte[1<<(i+1)]; // make sure we switch buffers\n      random().nextBytes(bytes);\n      io.writeBytes(bytes, bytes.length);\n      io.close();\n      IndexInput ii = mmapDir.openInput(\"bytes\", newIOContext(random()));\n      byte actual[] = new byte[1<<(i+1)]; // first read all bytes\n      ii.readBytes(actual, 0, actual.length);\n      assertEquals(new BytesRef(bytes), new BytesRef(actual));\n      for (int sliceStart = 0; sliceStart < bytes.length; sliceStart++) {\n        for (int sliceLength = 0; sliceLength < bytes.length - sliceStart; sliceLength++) {\n          byte slice[] = new byte[sliceLength];\n          ii.seek(sliceStart);\n          ii.readBytes(slice, 0, slice.length);\n          assertEquals(new BytesRef(bytes, sliceStart, sliceLength), new BytesRef(slice));\n        }\n      }\n      ii.close();\n      mmapDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c6a2469c81a34d38d9edbf0763494a526e29db0a":["285cdc737de75b7cc7c284a156b20214deb67bca"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"285cdc737de75b7cc7c284a156b20214deb67bca":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c6a2469c81a34d38d9edbf0763494a526e29db0a"]},"commit2Childs":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["6613659748fe4411a7dcf85266e55db1f95f7315"],"c6a2469c81a34d38d9edbf0763494a526e29db0a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["285cdc737de75b7cc7c284a156b20214deb67bca"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"285cdc737de75b7cc7c284a156b20214deb67bca":["c6a2469c81a34d38d9edbf0763494a526e29db0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}