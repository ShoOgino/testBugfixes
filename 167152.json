{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method],ClassLoader).mjava","commits":[{"id":"96f6862293dd05eceeb03760bbb8ffcb604c6e80","date":1379186543,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method],ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method]).mjava","sourceNew":"  /**\n   * Compiles the given expression with the supplied custom functions.\n   * <p>\n   * Functions must return {@code double} and can take from zero to 256 {@code double} parameters.\n   *\n   * @param sourceText The expression to compile\n   * @param functions map of String names to functions\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public static Expression compile(String sourceText, Map<String,Method> functions, ClassLoader parent) throws ParseException {\n    for (Method m : functions.values()) {\n      checkFunction(m);\n    }\n    return new JavascriptCompiler(sourceText, functions).compileExpression(parent);\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression with the supplied custom functions.\n   * <p>\n   * Functions must return a double.\n   *\n   * @param sourceText The expression to compile\n   * @param functions map of String names to functions\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public static Expression compile(String sourceText, Map<String,Method> functions) throws ParseException {\n    for (Method m : functions.values()) {\n      checkFunction(m);\n    }\n    return new JavascriptCompiler(sourceText, functions).compileExpression();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39912125a86f1322163a6c630f07eb6fc3ffe3f5","date":1379190712,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method],ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method],ClassLoader).mjava","sourceNew":"  /**\n   * Compiles the given expression with the supplied custom functions.\n   * <p>\n   * Functions must return {@code double} and can take from zero to 256 {@code double} parameters.\n   *\n   * @param sourceText The expression to compile\n   * @param functions map of String names to functions\n   * @param parent a {@code ClassLoader} that should be used as the parent of the loaded class.\n   *   It must contain all classes referred to by the given {@code functions}.\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public static Expression compile(String sourceText, Map<String,Method> functions, ClassLoader parent) throws ParseException {\n    if (parent == null) {\n      throw new NullPointerException(\"A parent ClassLoader must be given.\");\n    }\n    for (Method m : functions.values()) {\n      checkFunction(m, parent);\n    }\n    return new JavascriptCompiler(sourceText, functions).compileExpression(parent);\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression with the supplied custom functions.\n   * <p>\n   * Functions must return {@code double} and can take from zero to 256 {@code double} parameters.\n   *\n   * @param sourceText The expression to compile\n   * @param functions map of String names to functions\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public static Expression compile(String sourceText, Map<String,Method> functions, ClassLoader parent) throws ParseException {\n    for (Method m : functions.values()) {\n      checkFunction(m);\n    }\n    return new JavascriptCompiler(sourceText, functions).compileExpression(parent);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409d7e42a75836146e15213e037151002ecaae47","date":1379209804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method],ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method],ClassLoader).mjava","sourceNew":"  /**\n   * Compiles the given expression with the supplied custom functions.\n   * <p>\n   * Functions must be {@code public static}, return {@code double} and \n   * can take from zero to 256 {@code double} parameters.\n   *\n   * @param sourceText The expression to compile\n   * @param functions map of String names to functions\n   * @param parent a {@code ClassLoader} that should be used as the parent of the loaded class.\n   *   It must contain all classes referred to by the given {@code functions}.\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public static Expression compile(String sourceText, Map<String,Method> functions, ClassLoader parent) throws ParseException {\n    if (parent == null) {\n      throw new NullPointerException(\"A parent ClassLoader must be given.\");\n    }\n    for (Method m : functions.values()) {\n      checkFunction(m, parent);\n    }\n    return new JavascriptCompiler(sourceText, functions).compileExpression(parent);\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression with the supplied custom functions.\n   * <p>\n   * Functions must return {@code double} and can take from zero to 256 {@code double} parameters.\n   *\n   * @param sourceText The expression to compile\n   * @param functions map of String names to functions\n   * @param parent a {@code ClassLoader} that should be used as the parent of the loaded class.\n   *   It must contain all classes referred to by the given {@code functions}.\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public static Expression compile(String sourceText, Map<String,Method> functions, ClassLoader parent) throws ParseException {\n    if (parent == null) {\n      throw new NullPointerException(\"A parent ClassLoader must be given.\");\n    }\n    for (Method m : functions.values()) {\n      checkFunction(m, parent);\n    }\n    return new JavascriptCompiler(sourceText, functions).compileExpression(parent);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method],ClassLoader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compiles the given expression with the supplied custom functions.\n   * <p>\n   * Functions must be {@code public static}, return {@code double} and \n   * can take from zero to 256 {@code double} parameters.\n   *\n   * @param sourceText The expression to compile\n   * @param functions map of String names to functions\n   * @param parent a {@code ClassLoader} that should be used as the parent of the loaded class.\n   *   It must contain all classes referred to by the given {@code functions}.\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public static Expression compile(String sourceText, Map<String,Method> functions, ClassLoader parent) throws ParseException {\n    if (parent == null) {\n      throw new NullPointerException(\"A parent ClassLoader must be given.\");\n    }\n    for (Method m : functions.values()) {\n      checkFunction(m, parent);\n    }\n    return new JavascriptCompiler(sourceText, functions).compileExpression(parent);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81b6a3d49aba985c5fd89deb83f9959ecf17a0ce","date":1449313441,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method],ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method],ClassLoader).mjava","sourceNew":"  /**\n   * Compiles the given expression with the supplied custom functions.\n   * <p>\n   * Functions must be {@code public static}, return {@code double} and \n   * can take from zero to 256 {@code double} parameters.\n   *\n   * @param sourceText The expression to compile\n   * @param functions map of String names to functions\n   * @param parent a {@code ClassLoader} that should be used as the parent of the loaded class.\n   *   It must contain all classes referred to by the given {@code functions}.\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public static Expression compile(String sourceText, Map<String,Method> functions, ClassLoader parent) throws ParseException {\n    if (parent == null) {\n      throw new NullPointerException(\"A parent ClassLoader must be given.\");\n    }\n    for (Method m : functions.values()) {\n      checkFunctionClassLoader(m, parent);\n      checkFunction(m);\n    }\n    return new JavascriptCompiler(sourceText, functions).compileExpression(parent);\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression with the supplied custom functions.\n   * <p>\n   * Functions must be {@code public static}, return {@code double} and \n   * can take from zero to 256 {@code double} parameters.\n   *\n   * @param sourceText The expression to compile\n   * @param functions map of String names to functions\n   * @param parent a {@code ClassLoader} that should be used as the parent of the loaded class.\n   *   It must contain all classes referred to by the given {@code functions}.\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public static Expression compile(String sourceText, Map<String,Method> functions, ClassLoader parent) throws ParseException {\n    if (parent == null) {\n      throw new NullPointerException(\"A parent ClassLoader must be given.\");\n    }\n    for (Method m : functions.values()) {\n      checkFunction(m, parent);\n    }\n    return new JavascriptCompiler(sourceText, functions).compileExpression(parent);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"81b6a3d49aba985c5fd89deb83f9959ecf17a0ce":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"39912125a86f1322163a6c630f07eb6fc3ffe3f5":["96f6862293dd05eceeb03760bbb8ffcb604c6e80"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96f6862293dd05eceeb03760bbb8ffcb604c6e80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"409d7e42a75836146e15213e037151002ecaae47":["39912125a86f1322163a6c630f07eb6fc3ffe3f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81b6a3d49aba985c5fd89deb83f9959ecf17a0ce"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","409d7e42a75836146e15213e037151002ecaae47"]},"commit2Childs":{"81b6a3d49aba985c5fd89deb83f9959ecf17a0ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39912125a86f1322163a6c630f07eb6fc3ffe3f5":["409d7e42a75836146e15213e037151002ecaae47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96f6862293dd05eceeb03760bbb8ffcb604c6e80","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"96f6862293dd05eceeb03760bbb8ffcb604c6e80":["39912125a86f1322163a6c630f07eb6fc3ffe3f5"],"409d7e42a75836146e15213e037151002ecaae47":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["81b6a3d49aba985c5fd89deb83f9959ecf17a0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}