{"path":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#load(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#load(String).mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#load(String).mjava","sourceNew":"  /**\n   * Attempt to load dictionary from provided directory, first trying coredict.mem, failing back on coredict.dct\n   * \n   * @param dctFileRoot path to dictionary directory\n   */\n  public void load(String dctFileRoot) {\n    String dctFilePath = dctFileRoot + \"/coredict.dct\";\n    File serialObj = new File(dctFileRoot + \"/coredict.mem\");\n\n    if (serialObj.exists() && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        wordIndexTable = new short[PRIME_INDEX_LENGTH];\n        charIndexTable = new char[PRIME_INDEX_LENGTH];\n        for (int i = 0; i < PRIME_INDEX_LENGTH; i++) {\n          charIndexTable[i] = 0;\n          wordIndexTable[i] = -1;\n        }\n        wordItem_charArrayTable = new char[GB2312_CHAR_NUM][][];\n        wordItem_frequencyTable = new int[GB2312_CHAR_NUM][];\n        // int total =\n        loadMainDataFromFile(dctFilePath);\n        expandDelimiterData();\n        mergeSameWords();\n        sortEachItems();\n        // log.info(\"load dictionary: \" + dctFilePath + \" total:\" + total);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      saveToObj(serialObj);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Attempt to load dictionary from provided directory, first trying coredict.mem, failing back on coredict.dct\n   * \n   * @param dctFileRoot path to dictionary directory\n   */\n  public void load(String dctFileRoot) {\n    String dctFilePath = dctFileRoot + \"/coredict.dct\";\n    File serialObj = new File(dctFileRoot + \"/coredict.mem\");\n\n    if (serialObj.exists() && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        wordIndexTable = new short[PRIME_INDEX_LENGTH];\n        charIndexTable = new char[PRIME_INDEX_LENGTH];\n        for (int i = 0; i < PRIME_INDEX_LENGTH; i++) {\n          charIndexTable[i] = 0;\n          wordIndexTable[i] = -1;\n        }\n        wordItem_charArrayTable = new char[GB2312_CHAR_NUM][][];\n        wordItem_frequencyTable = new int[GB2312_CHAR_NUM][];\n        // int total =\n        loadMainDataFromFile(dctFilePath);\n        expandDelimiterData();\n        mergeSameWords();\n        sortEachItems();\n        // log.info(\"load dictionary: \" + dctFilePath + \" total:\" + total);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      saveToObj(serialObj);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#load(String).mjava","pathOld":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#load(String).mjava","sourceNew":"  /**\n   * Attempt to load dictionary from provided directory, first trying coredict.mem, failing back on coredict.dct\n   * \n   * @param dctFileRoot path to dictionary directory\n   */\n  public void load(String dctFileRoot) {\n    String dctFilePath = dctFileRoot + \"/coredict.dct\";\n    File serialObj = new File(dctFileRoot + \"/coredict.mem\");\n\n    if (serialObj.exists() && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        wordIndexTable = new short[PRIME_INDEX_LENGTH];\n        charIndexTable = new char[PRIME_INDEX_LENGTH];\n        for (int i = 0; i < PRIME_INDEX_LENGTH; i++) {\n          charIndexTable[i] = 0;\n          wordIndexTable[i] = -1;\n        }\n        wordItem_charArrayTable = new char[GB2312_CHAR_NUM][][];\n        wordItem_frequencyTable = new int[GB2312_CHAR_NUM][];\n        // int total =\n        loadMainDataFromFile(dctFilePath);\n        expandDelimiterData();\n        mergeSameWords();\n        sortEachItems();\n        // log.info(\"load dictionary: \" + dctFilePath + \" total:\" + total);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      saveToObj(serialObj);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Attempt to load dictionary from provided directory, first trying coredict.mem, failing back on coredict.dct\n   * \n   * @param dctFileRoot path to dictionary directory\n   */\n  public void load(String dctFileRoot) {\n    String dctFilePath = dctFileRoot + \"/coredict.dct\";\n    File serialObj = new File(dctFileRoot + \"/coredict.mem\");\n\n    if (serialObj.exists() && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        wordIndexTable = new short[PRIME_INDEX_LENGTH];\n        charIndexTable = new char[PRIME_INDEX_LENGTH];\n        for (int i = 0; i < PRIME_INDEX_LENGTH; i++) {\n          charIndexTable[i] = 0;\n          wordIndexTable[i] = -1;\n        }\n        wordItem_charArrayTable = new char[GB2312_CHAR_NUM][][];\n        wordItem_frequencyTable = new int[GB2312_CHAR_NUM][];\n        // int total =\n        loadMainDataFromFile(dctFilePath);\n        expandDelimiterData();\n        mergeSameWords();\n        sortEachItems();\n        // log.info(\"load dictionary: \" + dctFilePath + \" total:\" + total);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      saveToObj(serialObj);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}