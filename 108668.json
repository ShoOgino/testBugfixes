{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/BinaryDictionary#getReading(int,char[],int,int).mjava","commits":[{"id":"df594fa0daea908bb30c4f3a453f2bd0a55f9a1e","date":1326766347,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/BinaryDictionary#getReading(int,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String getReading(int wordId, char surface[], int off, int len) {\n    if (hasReadingData(wordId)) {\n      int offset = readingOffset(wordId);\n      int readingData = buffer.get(offset++) & 0xff;\n      return readString(offset, readingData >>> 1, (readingData & 1) == 1);\n    } else {\n      // the reading is the surface form, with hiragana shifted to katakana\n      char text[] = new char[len];\n      for (int i = 0; i < len; i++) {\n        char ch = surface[off+i];\n        if (ch > 0x3040 && ch < 0x3097) {\n          text[i] = (char)(ch + 0x60);\n        } else {\n          text[i] = ch;\n        }\n      }\n      return new String(text);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":5,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary#getReading(int,char[],int,int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/BinaryDictionary#getReading(int,char[],int,int).mjava","sourceNew":"  @Override\n  public String getReading(int wordId, char surface[], int off, int len) {\n    if (hasReadingData(wordId)) {\n      int offset = readingOffset(wordId);\n      int readingData = buffer.get(offset++) & 0xff;\n      return readString(offset, readingData >>> 1, (readingData & 1) == 1);\n    } else {\n      // the reading is the surface form, with hiragana shifted to katakana\n      char text[] = new char[len];\n      for (int i = 0; i < len; i++) {\n        char ch = surface[off+i];\n        if (ch > 0x3040 && ch < 0x3097) {\n          text[i] = (char)(ch + 0x60);\n        } else {\n          text[i] = ch;\n        }\n      }\n      return new String(text);\n    }\n  }\n\n","sourceOld":"  @Override\n  public String getReading(int wordId, char surface[], int off, int len) {\n    if (hasReadingData(wordId)) {\n      int offset = readingOffset(wordId);\n      int readingData = buffer.get(offset++) & 0xff;\n      return readString(offset, readingData >>> 1, (readingData & 1) == 1);\n    } else {\n      // the reading is the surface form, with hiragana shifted to katakana\n      char text[] = new char[len];\n      for (int i = 0; i < len; i++) {\n        char ch = surface[off+i];\n        if (ch > 0x3040 && ch < 0x3097) {\n          text[i] = (char)(ch + 0x60);\n        } else {\n          text[i] = ch;\n        }\n      }\n      return new String(text);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df594fa0daea908bb30c4f3a453f2bd0a55f9a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["df594fa0daea908bb30c4f3a453f2bd0a55f9a1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"]},"commit2Childs":{"df594fa0daea908bb30c4f3a453f2bd0a55f9a1e":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df594fa0daea908bb30c4f3a453f2bd0a55f9a1e"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}