{"path":"solr/src/common/org/apache/solr/common/cloud/ZkStateReader#makeCollectionsNodeWatches().mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/cloud/ZkStateReader#makeCollectionsNodeWatches().mjava","pathOld":"/dev/null","sourceNew":"  public void makeCollectionsNodeWatches() throws KeeperException, InterruptedException {\n    log.info(\"Start watching collections zk node for changes\");\n    zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n          try {\n\n            log.info(\"Detected a new or removed collection\");\n            synchronized (getUpdateLock()) {\n              makeShardZkNodeWatches(false);\n              updateCloudState(false);\n            }\n            // re-watch\n            String path = event.getPath();\n            if (path != null) {\n              zkClient.getChildren(path, this);\n            }\n          } catch (KeeperException e) {\n            if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n\n      }});\n    \n    zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n        if(event.getType() !=  EventType.NodeDataChanged) {\n          return;\n        }\n        log.info(\"Notified of CloudState change\");\n        try {\n          synchronized (getUpdateLock()) {\n            makeShardZkNodeWatches(false);\n            updateCloudState(false);\n          }\n          zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, this);\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }});\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/cloud/ZkStateReader#makeCollectionsNodeWatches().mjava","pathOld":"/dev/null","sourceNew":"  public void makeCollectionsNodeWatches() throws KeeperException, InterruptedException {\n    log.info(\"Start watching collections zk node for changes\");\n    zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n          try {\n\n            log.info(\"Detected a new or removed collection\");\n            synchronized (getUpdateLock()) {\n              makeShardZkNodeWatches(false);\n              updateCloudState(false);\n            }\n            // re-watch\n            String path = event.getPath();\n            if (path != null) {\n              zkClient.getChildren(path, this);\n            }\n          } catch (KeeperException e) {\n            if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n\n      }});\n    \n    zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n        if(event.getType() !=  EventType.NodeDataChanged) {\n          return;\n        }\n        log.info(\"Notified of CloudState change\");\n        try {\n          synchronized (getUpdateLock()) {\n            makeShardZkNodeWatches(false);\n            updateCloudState(false);\n          }\n          zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, this);\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }});\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/cloud/ZkStateReader#makeCollectionsNodeWatches().mjava","pathOld":"/dev/null","sourceNew":"  public void makeCollectionsNodeWatches() throws KeeperException, InterruptedException {\n    log.info(\"Start watching collections zk node for changes\");\n    zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n          try {\n\n            log.info(\"Detected a new or removed collection\");\n            synchronized (getUpdateLock()) {\n              makeShardZkNodeWatches(false);\n              updateCloudState(false);\n            }\n            // re-watch\n            String path = event.getPath();\n            if (path != null) {\n              zkClient.getChildren(path, this);\n            }\n          } catch (KeeperException e) {\n            if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n\n      }});\n    \n    zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n        if(event.getType() !=  EventType.NodeDataChanged) {\n          return;\n        }\n        log.info(\"Notified of CloudState change\");\n        try {\n          synchronized (getUpdateLock()) {\n            makeShardZkNodeWatches(false);\n            updateCloudState(false);\n          }\n          zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, this);\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }});\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#makeCollectionsNodeWatches().mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ZkStateReader#makeCollectionsNodeWatches().mjava","sourceNew":"  public void makeCollectionsNodeWatches() throws KeeperException, InterruptedException {\n    log.info(\"Start watching collections zk node for changes\");\n    zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n          try {\n\n            log.info(\"Detected a new or removed collection\");\n            synchronized (getUpdateLock()) {\n              makeShardZkNodeWatches(false);\n              updateCloudState(false);\n            }\n            // re-watch\n            String path = event.getPath();\n            if (path != null) {\n              zkClient.getChildren(path, this);\n            }\n          } catch (KeeperException e) {\n            if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n\n      }});\n    \n    zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n        if(event.getType() !=  EventType.NodeDataChanged) {\n          return;\n        }\n        log.info(\"Notified of CloudState change\");\n        try {\n          synchronized (getUpdateLock()) {\n            makeShardZkNodeWatches(false);\n            updateCloudState(false);\n          }\n          zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, this);\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }});\n    \n  }\n\n","sourceOld":"  public void makeCollectionsNodeWatches() throws KeeperException, InterruptedException {\n    log.info(\"Start watching collections zk node for changes\");\n    zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n          try {\n\n            log.info(\"Detected a new or removed collection\");\n            synchronized (getUpdateLock()) {\n              makeShardZkNodeWatches(false);\n              updateCloudState(false);\n            }\n            // re-watch\n            String path = event.getPath();\n            if (path != null) {\n              zkClient.getChildren(path, this);\n            }\n          } catch (KeeperException e) {\n            if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n\n      }});\n    \n    zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n        if(event.getType() !=  EventType.NodeDataChanged) {\n          return;\n        }\n        log.info(\"Notified of CloudState change\");\n        try {\n          synchronized (getUpdateLock()) {\n            makeShardZkNodeWatches(false);\n            updateCloudState(false);\n          }\n          zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, this);\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }});\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#makeCollectionsNodeWatches().mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ZkStateReader#makeCollectionsNodeWatches().mjava","sourceNew":"  public void makeCollectionsNodeWatches() throws KeeperException, InterruptedException {\n    log.info(\"Start watching collections zk node for changes\");\n    zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n          try {\n\n            log.info(\"Detected a new or removed collection\");\n            synchronized (getUpdateLock()) {\n              makeShardZkNodeWatches(false);\n              updateCloudState(false);\n            }\n            // re-watch\n            String path = event.getPath();\n            if (path != null) {\n              zkClient.getChildren(path, this);\n            }\n          } catch (KeeperException e) {\n            if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n\n      }});\n    \n    zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n        if(event.getType() !=  EventType.NodeDataChanged) {\n          return;\n        }\n        log.info(\"Notified of CloudState change\");\n        try {\n          synchronized (getUpdateLock()) {\n            makeShardZkNodeWatches(false);\n            updateCloudState(false);\n          }\n          zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, this);\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }});\n    \n  }\n\n","sourceOld":"  public void makeCollectionsNodeWatches() throws KeeperException, InterruptedException {\n    log.info(\"Start watching collections zk node for changes\");\n    zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n          try {\n\n            log.info(\"Detected a new or removed collection\");\n            synchronized (getUpdateLock()) {\n              makeShardZkNodeWatches(false);\n              updateCloudState(false);\n            }\n            // re-watch\n            String path = event.getPath();\n            if (path != null) {\n              zkClient.getChildren(path, this);\n            }\n          } catch (KeeperException e) {\n            if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n\n      }});\n    \n    zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n        if(event.getType() !=  EventType.NodeDataChanged) {\n          return;\n        }\n        log.info(\"Notified of CloudState change\");\n        try {\n          synchronized (getUpdateLock()) {\n            makeShardZkNodeWatches(false);\n            updateCloudState(false);\n          }\n          zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, this);\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }});\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#makeCollectionsNodeWatches().mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ZkStateReader#makeCollectionsNodeWatches().mjava","sourceNew":"  public void makeCollectionsNodeWatches() throws KeeperException, InterruptedException {\n    log.info(\"Start watching collections zk node for changes\");\n    zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n          try {\n\n            log.info(\"Detected a new or removed collection\");\n            synchronized (getUpdateLock()) {\n              makeShardZkNodeWatches(false);\n              updateCloudState(false);\n            }\n            // re-watch\n            String path = event.getPath();\n            if (path != null) {\n              zkClient.getChildren(path, this);\n            }\n          } catch (KeeperException e) {\n            if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n\n      }});\n    \n    zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n        if(event.getType() !=  EventType.NodeDataChanged) {\n          return;\n        }\n        log.info(\"Notified of CloudState change\");\n        try {\n          synchronized (getUpdateLock()) {\n            makeShardZkNodeWatches(false);\n            updateCloudState(false);\n          }\n          zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, this);\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }});\n    \n  }\n\n","sourceOld":"  public void makeCollectionsNodeWatches() throws KeeperException, InterruptedException {\n    log.info(\"Start watching collections zk node for changes\");\n    zkClient.getChildren(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n          try {\n\n            log.info(\"Detected a new or removed collection\");\n            synchronized (getUpdateLock()) {\n              makeShardZkNodeWatches(false);\n              updateCloudState(false);\n            }\n            // re-watch\n            String path = event.getPath();\n            if (path != null) {\n              zkClient.getChildren(path, this);\n            }\n          } catch (KeeperException e) {\n            if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            log.error(\"\", e);\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n\n      }});\n    \n    zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, new Watcher(){\n\n      public void process(WatchedEvent event) {\n        if(event.getType() !=  EventType.NodeDataChanged) {\n          return;\n        }\n        log.info(\"Notified of CloudState change\");\n        try {\n          synchronized (getUpdateLock()) {\n            makeShardZkNodeWatches(false);\n            updateCloudState(false);\n          }\n          zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE, this);\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }});\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c26f00b574427b55127e869b935845554afde1fa":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}