{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    Directory indexDir1 = newDirectory(), indexDir2 = newDirectory();\n    Directory taxoDir1 = newDirectory(), taxoDir2 = newDirectory();\n    \n    // Create our index/taxonomy writers\n    IndexWriter indexWriter1 = new IndexWriter(indexDir1, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    IndexWriter indexWriter2 = new IndexWriter(indexDir2, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter1 = new DirectoryTaxonomyWriter(taxoDir1);\n    TaxonomyWriter taxoWriter2 = new DirectoryTaxonomyWriter(taxoDir2);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, indexWriter1, taxoWriter1, \"a\", \"b\");\n    addFacets(iParams, indexWriter1, taxoWriter1, \"d\", \"e\");\n    // Commit Changes\n    indexWriter1.commit();\n    indexWriter2.commit();\n    taxoWriter1.commit();\n    taxoWriter2.commit();\n\n    // Open two readers\n    DirectoryReader indexReader1 = DirectoryReader.open(indexDir1);\n    DirectoryReader indexReader2 = DirectoryReader.open(indexDir2);\n    TaxonomyReader taxoReader1 = new DirectoryTaxonomyReader(taxoDir1);\n    TaxonomyReader taxoReader2 = new DirectoryTaxonomyReader(taxoDir2);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n    \n    IOUtils.close(indexWriter1, indexWriter2, taxoWriter1, taxoWriter2);\n    IOUtils.close(indexReader1, indexReader2, taxoReader1, taxoReader2);\n    IOUtils.close(indexDir1, indexDir2, taxoDir1, taxoDir2);\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    Directory indexDir1 = newDirectory(), indexDir2 = newDirectory();\n    Directory taxoDir1 = newDirectory(), taxoDir2 = newDirectory();\n    \n    // Create our index/taxonomy writers\n    IndexWriter indexWriter1 = new IndexWriter(indexDir1, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    IndexWriter indexWriter2 = new IndexWriter(indexDir2, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter1 = new DirectoryTaxonomyWriter(taxoDir1);\n    TaxonomyWriter taxoWriter2 = new DirectoryTaxonomyWriter(taxoDir2);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, indexWriter1, taxoWriter1, \"a\", \"b\");\n    addFacets(iParams, indexWriter1, taxoWriter1, \"d\", \"e\");\n    // Commit Changes\n    indexWriter1.commit();\n    indexWriter2.commit();\n    taxoWriter1.commit();\n    taxoWriter2.commit();\n\n    // Open two readers\n    DirectoryReader indexReader1 = DirectoryReader.open(indexDir1);\n    DirectoryReader indexReader2 = DirectoryReader.open(indexDir2);\n    TaxonomyReader taxoReader1 = new DirectoryTaxonomyReader(taxoDir1);\n    TaxonomyReader taxoReader2 = new DirectoryTaxonomyReader(taxoDir2);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n    \n    IOUtils.close(indexWriter1, indexWriter2, taxoWriter1, taxoWriter2);\n    IOUtils.close(indexReader1, indexReader2, taxoReader1, taxoReader2);\n    IOUtils.close(indexDir1, indexDir2, taxoDir1, taxoDir2);\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    Directory indexDir1 = newDirectory(), indexDir2 = newDirectory();\n    Directory taxoDir1 = newDirectory(), taxoDir2 = newDirectory();\n    \n    // Create our index/taxonomy writers\n    IndexWriter indexWriter1 = new IndexWriter(indexDir1, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    IndexWriter indexWriter2 = new IndexWriter(indexDir2, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter1 = new DirectoryTaxonomyWriter(taxoDir1);\n    TaxonomyWriter taxoWriter2 = new DirectoryTaxonomyWriter(taxoDir2);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, indexWriter1, taxoWriter1, \"a\", \"b\");\n    addFacets(iParams, indexWriter1, taxoWriter1, \"d\", \"e\");\n    // Commit Changes\n    indexWriter1.commit();\n    indexWriter2.commit();\n    taxoWriter1.commit();\n    taxoWriter2.commit();\n\n    // Open two readers\n    DirectoryReader indexReader1 = DirectoryReader.open(indexDir1);\n    DirectoryReader indexReader2 = DirectoryReader.open(indexDir2);\n    TaxonomyReader taxoReader1 = new DirectoryTaxonomyReader(taxoDir1);\n    TaxonomyReader taxoReader2 = new DirectoryTaxonomyReader(taxoDir2);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n    \n    IOUtils.close(indexWriter1, indexWriter2, taxoWriter1, taxoWriter2);\n    IOUtils.close(indexReader1, indexReader2, taxoReader1, taxoReader2);\n    IOUtils.close(indexDir1, indexDir2, taxoDir1, taxoDir2);\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    Directory indexDir1 = newDirectory(), indexDir2 = newDirectory();\n    Directory taxoDir1 = newDirectory(), taxoDir2 = newDirectory();\n    \n    // Create our index/taxonomy writers\n    IndexWriter indexWriter1 = new IndexWriter(indexDir1, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    IndexWriter indexWriter2 = new IndexWriter(indexDir2, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter1 = new DirectoryTaxonomyWriter(taxoDir1);\n    TaxonomyWriter taxoWriter2 = new DirectoryTaxonomyWriter(taxoDir2);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, indexWriter1, taxoWriter1, \"a\", \"b\");\n    addFacets(iParams, indexWriter1, taxoWriter1, \"d\", \"e\");\n    // Commit Changes\n    indexWriter1.commit();\n    indexWriter2.commit();\n    taxoWriter1.commit();\n    taxoWriter2.commit();\n\n    // Open two readers\n    DirectoryReader indexReader1 = DirectoryReader.open(indexDir1);\n    DirectoryReader indexReader2 = DirectoryReader.open(indexDir2);\n    TaxonomyReader taxoReader1 = new DirectoryTaxonomyReader(taxoDir1);\n    TaxonomyReader taxoReader2 = new DirectoryTaxonomyReader(taxoDir2);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n    \n    IOUtils.close(indexWriter1, indexWriter2, taxoWriter1, taxoWriter2);\n    IOUtils.close(indexReader1, indexReader2, taxoReader1, taxoReader2);\n    IOUtils.close(indexDir1, indexDir2, taxoDir1, taxoDir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"607428da722dcb3e86bbd11c63de8986e6275c36":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["c4015cd39dff8d4dec562d909f9766debac53aa6","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"c4015cd39dff8d4dec562d909f9766debac53aa6":["61d5f95d14e5b9b046998c51e16709a398c15226"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["607428da722dcb3e86bbd11c63de8986e6275c36","61d5f95d14e5b9b046998c51e16709a398c15226"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}