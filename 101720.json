{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testTypes().mjava","commits":[{"id":"a397491f6601f7c45bc425f45e95c41c3a6d1ca3","date":1380651240,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testTypes().mjava","pathOld":"/dev/null","sourceNew":"  public void testTypes() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    AtomicReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    assertEquals(10, values.doubleVal(0), 0);\n    assertEquals(10, values.floatVal(0), 0);\n    assertEquals(10, values.longVal(0));\n    assertEquals(10, values.intVal(0));\n    assertEquals(10, values.shortVal(0));\n    assertEquals(10, values.byteVal(0));\n    assertEquals(\"10.0\", values.strVal(0));\n    assertEquals(new Double(10), values.objectVal(0));\n    \n    assertEquals(40, values.doubleVal(1), 0);\n    assertEquals(40, values.floatVal(1), 0);\n    assertEquals(40, values.longVal(1));\n    assertEquals(40, values.intVal(1));\n    assertEquals(40, values.shortVal(1));\n    assertEquals(40, values.byteVal(1));\n    assertEquals(\"40.0\", values.strVal(1));\n    assertEquals(new Double(40), values.objectVal(1));\n    \n    assertEquals(4, values.doubleVal(2), 0);\n    assertEquals(4, values.floatVal(2), 0);\n    assertEquals(4, values.longVal(2));\n    assertEquals(4, values.intVal(2));\n    assertEquals(4, values.shortVal(2));\n    assertEquals(4, values.byteVal(2));\n    assertEquals(\"4.0\", values.strVal(2));\n    assertEquals(new Double(4), values.objectVal(2));    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testTypes().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testTypes().mjava","sourceNew":"  public void testTypes() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    assertEquals(10, values.doubleVal(0), 0);\n    assertEquals(10, values.floatVal(0), 0);\n    assertEquals(10, values.longVal(0));\n    assertEquals(10, values.intVal(0));\n    assertEquals(10, values.shortVal(0));\n    assertEquals(10, values.byteVal(0));\n    assertEquals(\"10.0\", values.strVal(0));\n    assertEquals(new Double(10), values.objectVal(0));\n    \n    assertEquals(40, values.doubleVal(1), 0);\n    assertEquals(40, values.floatVal(1), 0);\n    assertEquals(40, values.longVal(1));\n    assertEquals(40, values.intVal(1));\n    assertEquals(40, values.shortVal(1));\n    assertEquals(40, values.byteVal(1));\n    assertEquals(\"40.0\", values.strVal(1));\n    assertEquals(new Double(40), values.objectVal(1));\n    \n    assertEquals(4, values.doubleVal(2), 0);\n    assertEquals(4, values.floatVal(2), 0);\n    assertEquals(4, values.longVal(2));\n    assertEquals(4, values.intVal(2));\n    assertEquals(4, values.shortVal(2));\n    assertEquals(4, values.byteVal(2));\n    assertEquals(\"4.0\", values.strVal(2));\n    assertEquals(new Double(4), values.objectVal(2));    \n  }\n\n","sourceOld":"  public void testTypes() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    AtomicReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    assertEquals(10, values.doubleVal(0), 0);\n    assertEquals(10, values.floatVal(0), 0);\n    assertEquals(10, values.longVal(0));\n    assertEquals(10, values.intVal(0));\n    assertEquals(10, values.shortVal(0));\n    assertEquals(10, values.byteVal(0));\n    assertEquals(\"10.0\", values.strVal(0));\n    assertEquals(new Double(10), values.objectVal(0));\n    \n    assertEquals(40, values.doubleVal(1), 0);\n    assertEquals(40, values.floatVal(1), 0);\n    assertEquals(40, values.longVal(1));\n    assertEquals(40, values.intVal(1));\n    assertEquals(40, values.shortVal(1));\n    assertEquals(40, values.byteVal(1));\n    assertEquals(\"40.0\", values.strVal(1));\n    assertEquals(new Double(40), values.objectVal(1));\n    \n    assertEquals(4, values.doubleVal(2), 0);\n    assertEquals(4, values.floatVal(2), 0);\n    assertEquals(4, values.longVal(2));\n    assertEquals(4, values.intVal(2));\n    assertEquals(4, values.shortVal(2));\n    assertEquals(4, values.byteVal(2));\n    assertEquals(\"4.0\", values.strVal(2));\n    assertEquals(new Double(4), values.objectVal(2));    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae1ad302fc92a61505409a38838f2b1a4a2b092","date":1483787106,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testTypes().mjava","sourceNew":null,"sourceOld":"  public void testTypes() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    assertEquals(10, values.doubleVal(0), 0);\n    assertEquals(10, values.floatVal(0), 0);\n    assertEquals(10, values.longVal(0));\n    assertEquals(10, values.intVal(0));\n    assertEquals(10, values.shortVal(0));\n    assertEquals(10, values.byteVal(0));\n    assertEquals(\"10.0\", values.strVal(0));\n    assertEquals(new Double(10), values.objectVal(0));\n    \n    assertEquals(40, values.doubleVal(1), 0);\n    assertEquals(40, values.floatVal(1), 0);\n    assertEquals(40, values.longVal(1));\n    assertEquals(40, values.intVal(1));\n    assertEquals(40, values.shortVal(1));\n    assertEquals(40, values.byteVal(1));\n    assertEquals(\"40.0\", values.strVal(1));\n    assertEquals(new Double(40), values.objectVal(1));\n    \n    assertEquals(4, values.doubleVal(2), 0);\n    assertEquals(4, values.floatVal(2), 0);\n    assertEquals(4, values.longVal(2));\n    assertEquals(4, values.intVal(2));\n    assertEquals(4, values.shortVal(2));\n    assertEquals(4, values.byteVal(2));\n    assertEquals(\"4.0\", values.strVal(2));\n    assertEquals(new Double(4), values.objectVal(2));    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testTypes().mjava","sourceNew":null,"sourceOld":"  public void testTypes() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    assertEquals(10, values.doubleVal(0), 0);\n    assertEquals(10, values.floatVal(0), 0);\n    assertEquals(10, values.longVal(0));\n    assertEquals(10, values.intVal(0));\n    assertEquals(10, values.shortVal(0));\n    assertEquals(10, values.byteVal(0));\n    assertEquals(\"10.0\", values.strVal(0));\n    assertEquals(new Double(10), values.objectVal(0));\n    \n    assertEquals(40, values.doubleVal(1), 0);\n    assertEquals(40, values.floatVal(1), 0);\n    assertEquals(40, values.longVal(1));\n    assertEquals(40, values.intVal(1));\n    assertEquals(40, values.shortVal(1));\n    assertEquals(40, values.byteVal(1));\n    assertEquals(\"40.0\", values.strVal(1));\n    assertEquals(new Double(40), values.objectVal(1));\n    \n    assertEquals(4, values.doubleVal(2), 0);\n    assertEquals(4, values.floatVal(2), 0);\n    assertEquals(4, values.longVal(2));\n    assertEquals(4, values.intVal(2));\n    assertEquals(4, values.shortVal(2));\n    assertEquals(4, values.byteVal(2));\n    assertEquals(\"4.0\", values.strVal(2));\n    assertEquals(new Double(4), values.objectVal(2));    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["c9fb5f46e264daf5ba3860defe623a89d202dd87","7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae1ad302fc92a61505409a38838f2b1a4a2b092"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["7ae1ad302fc92a61505409a38838f2b1a4a2b092","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}