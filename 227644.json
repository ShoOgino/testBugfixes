{"path":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","sourceNew":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","sourceOld":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","sourceNew":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","sourceOld":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","sourceNew":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","sourceOld":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","sourceNew":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static QueryParser.Operator getQueryParserDefaultOperator(final IndexSchema sch,\n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? QueryParser.Operator.AND : QueryParser.Operator.OR;\n  }\n\n","sourceOld":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"220acde8206f5221383e3777429a4fb84bed289f","date":1339892825,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","sourceNew":"  /**\n   * Returns the \"preferred\" default operator for use by Query Parsers,\n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static QueryParser.Operator getQueryParserDefaultOperator(final IndexSchema sch,\n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? QueryParser.Operator.AND : QueryParser.Operator.OR;\n  }\n\n","sourceOld":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static QueryParser.Operator getQueryParserDefaultOperator(final IndexSchema sch,\n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? QueryParser.Operator.AND : QueryParser.Operator.OR;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c418b5fb43bf7b591b636df532dd1ac44296469a","date":1494834249,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","sourceNew":"  /**\n   * Returns the default operator for use by Query Parsers, parsed from the df string\n   * @param notUsed is not used, but is there for back compat with 3rd party QParsers\n   * @param df the df string from request\n   * @deprecated this method is here purely not to break code back compat in 7.x\n   */\n  @Deprecated\n  public static QueryParser.Operator getQueryParserDefaultOperator(final IndexSchema notUsed,\n                                                       final String df) {\n    return parseOP(df);\n  }\n\n","sourceOld":"  /**\n   * Returns the \"preferred\" default operator for use by Query Parsers,\n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static QueryParser.Operator getQueryParserDefaultOperator(final IndexSchema sch,\n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? QueryParser.Operator.AND : QueryParser.Operator.OR;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","sourceNew":"  /**\n   * Returns the default operator for use by Query Parsers, parsed from the df string\n   * @param notUsed is not used, but is there for back compat with 3rd party QParsers\n   * @param df the df string from request\n   * @deprecated this method is here purely not to break code back compat in 7.x\n   */\n  @Deprecated\n  public static QueryParser.Operator getQueryParserDefaultOperator(final IndexSchema notUsed,\n                                                       final String df) {\n    return parseOP(df);\n  }\n\n","sourceOld":"  /**\n   * Returns the \"preferred\" default operator for use by Query Parsers,\n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static QueryParser.Operator getQueryParserDefaultOperator(final IndexSchema sch,\n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? QueryParser.Operator.AND : QueryParser.Operator.OR;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94f73754edacbaf85874797d34356b76b3c1312","date":1496425883,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the default operator for use by Query Parsers, parsed from the df string\n   * @param notUsed is not used, but is there for back compat with 3rd party QParsers\n   * @param df the df string from request\n   * @deprecated this method is here purely not to break code back compat in 7.x\n   */\n  @Deprecated\n  public static QueryParser.Operator getQueryParserDefaultOperator(final IndexSchema notUsed,\n                                                       final String df) {\n    return parseOP(df);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the \"preferred\" default operator for use by Query Parsers,\n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static QueryParser.Operator getQueryParserDefaultOperator(final IndexSchema sch,\n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? QueryParser.Operator.AND : QueryParser.Operator.OR;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the default operator for use by Query Parsers, parsed from the df string\n   * @param notUsed is not used, but is there for back compat with 3rd party QParsers\n   * @param df the df string from request\n   * @deprecated this method is here purely not to break code back compat in 7.x\n   */\n  @Deprecated\n  public static QueryParser.Operator getQueryParserDefaultOperator(final IndexSchema notUsed,\n                                                       final String df) {\n    return parseOP(df);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94f73754edacbaf85874797d34356b76b3c1312":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"220acde8206f5221383e3777429a4fb84bed289f":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"c418b5fb43bf7b591b636df532dd1ac44296469a":["220acde8206f5221383e3777429a4fb84bed289f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["220acde8206f5221383e3777429a4fb84bed289f","b94f73754edacbaf85874797d34356b76b3c1312"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["220acde8206f5221383e3777429a4fb84bed289f","c418b5fb43bf7b591b636df532dd1ac44296469a"],"28288370235ed02234a64753cdbf0c6ec096304a":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","b94f73754edacbaf85874797d34356b76b3c1312"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"b94f73754edacbaf85874797d34356b76b3c1312":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"220acde8206f5221383e3777429a4fb84bed289f":["c418b5fb43bf7b591b636df532dd1ac44296469a","e9017cf144952056066919f1ebc7897ff9bd71b1","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"c418b5fb43bf7b591b636df532dd1ac44296469a":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["220acde8206f5221383e3777429a4fb84bed289f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["b94f73754edacbaf85874797d34356b76b3c1312","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}