{"path":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","pathOld":"/dev/null","sourceNew":"  private void initKerberos() {\n    String keytabFile = params.get(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = params.get(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = new Boolean(true);\n        Configuration conf = new Configuration();\n        conf.set(\"hadoop.security.authentication\", \"kerberos\");\n        UserGroupInformation.setConfiguration(conf);\n        LOG.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        LOG.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","pathOld":"/dev/null","sourceNew":"  private void initKerberos() {\n    String keytabFile = params.get(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = params.get(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = new Boolean(true);\n        Configuration conf = new Configuration();\n        conf.set(\"hadoop.security.authentication\", \"kerberos\");\n        UserGroupInformation.setConfiguration(conf);\n        LOG.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        LOG.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3690d9c3567bf92ced55bd45e89d9188d2e70da","date":1407970812,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","sourceNew":"  private void initKerberos() {\n    String keytabFile = params.get(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = params.get(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = new Boolean(true);\n        final Configuration conf = getConf();\n        final String authVal = conf.get(HADOOP_SECURITY_AUTHENTICATION);\n        final String kerberos = \"kerberos\";\n        if (authVal != null && !authVal.equals(kerberos)) {\n          throw new IllegalArgumentException(HADOOP_SECURITY_AUTHENTICATION\n              + \" set to: \" + authVal + \", not kerberos, but attempting to \"\n              + \" connect to HDFS via kerberos\");\n        }\n        // let's avoid modifying the supplied configuration, just to be conservative\n        final Configuration ugiConf = new Configuration(getConf());\n        ugiConf.set(HADOOP_SECURITY_AUTHENTICATION, kerberos);\n        UserGroupInformation.setConfiguration(ugiConf);\n        LOG.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        LOG.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","sourceOld":"  private void initKerberos() {\n    String keytabFile = params.get(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = params.get(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = new Boolean(true);\n        Configuration conf = new Configuration();\n        conf.set(\"hadoop.security.authentication\", \"kerberos\");\n        UserGroupInformation.setConfiguration(conf);\n        LOG.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        LOG.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce6c1f997c135ab2e3d211580d089de539d7e20","date":1421161966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","sourceNew":"  private void initKerberos() {\n    String keytabFile = getConfig(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = getConfig(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = new Boolean(true);\n        final Configuration conf = getConf();\n        final String authVal = conf.get(HADOOP_SECURITY_AUTHENTICATION);\n        final String kerberos = \"kerberos\";\n        if (authVal != null && !authVal.equals(kerberos)) {\n          throw new IllegalArgumentException(HADOOP_SECURITY_AUTHENTICATION\n              + \" set to: \" + authVal + \", not kerberos, but attempting to \"\n              + \" connect to HDFS via kerberos\");\n        }\n        // let's avoid modifying the supplied configuration, just to be conservative\n        final Configuration ugiConf = new Configuration(getConf());\n        ugiConf.set(HADOOP_SECURITY_AUTHENTICATION, kerberos);\n        UserGroupInformation.setConfiguration(ugiConf);\n        LOG.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        LOG.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","sourceOld":"  private void initKerberos() {\n    String keytabFile = params.get(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = params.get(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = new Boolean(true);\n        final Configuration conf = getConf();\n        final String authVal = conf.get(HADOOP_SECURITY_AUTHENTICATION);\n        final String kerberos = \"kerberos\";\n        if (authVal != null && !authVal.equals(kerberos)) {\n          throw new IllegalArgumentException(HADOOP_SECURITY_AUTHENTICATION\n              + \" set to: \" + authVal + \", not kerberos, but attempting to \"\n              + \" connect to HDFS via kerberos\");\n        }\n        // let's avoid modifying the supplied configuration, just to be conservative\n        final Configuration ugiConf = new Configuration(getConf());\n        ugiConf.set(HADOOP_SECURITY_AUTHENTICATION, kerberos);\n        UserGroupInformation.setConfiguration(ugiConf);\n        LOG.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        LOG.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","sourceNew":"  private void initKerberos() {\n    String keytabFile = getConfig(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = getConfig(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = Boolean.TRUE;\n        final Configuration conf = getConf();\n        final String authVal = conf.get(HADOOP_SECURITY_AUTHENTICATION);\n        final String kerberos = \"kerberos\";\n        if (authVal != null && !authVal.equals(kerberos)) {\n          throw new IllegalArgumentException(HADOOP_SECURITY_AUTHENTICATION\n              + \" set to: \" + authVal + \", not kerberos, but attempting to \"\n              + \" connect to HDFS via kerberos\");\n        }\n        // let's avoid modifying the supplied configuration, just to be conservative\n        final Configuration ugiConf = new Configuration(getConf());\n        ugiConf.set(HADOOP_SECURITY_AUTHENTICATION, kerberos);\n        UserGroupInformation.setConfiguration(ugiConf);\n        LOG.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        LOG.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","sourceOld":"  private void initKerberos() {\n    String keytabFile = getConfig(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = getConfig(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = new Boolean(true);\n        final Configuration conf = getConf();\n        final String authVal = conf.get(HADOOP_SECURITY_AUTHENTICATION);\n        final String kerberos = \"kerberos\";\n        if (authVal != null && !authVal.equals(kerberos)) {\n          throw new IllegalArgumentException(HADOOP_SECURITY_AUTHENTICATION\n              + \" set to: \" + authVal + \", not kerberos, but attempting to \"\n              + \" connect to HDFS via kerberos\");\n        }\n        // let's avoid modifying the supplied configuration, just to be conservative\n        final Configuration ugiConf = new Configuration(getConf());\n        ugiConf.set(HADOOP_SECURITY_AUTHENTICATION, kerberos);\n        UserGroupInformation.setConfiguration(ugiConf);\n        LOG.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        LOG.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","sourceNew":"  private void initKerberos() {\n    String keytabFile = getConfig(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = getConfig(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = Boolean.TRUE;\n        final Configuration conf = getConf();\n        final String authVal = conf.get(HADOOP_SECURITY_AUTHENTICATION);\n        final String kerberos = \"kerberos\";\n        if (authVal != null && !authVal.equals(kerberos)) {\n          throw new IllegalArgumentException(HADOOP_SECURITY_AUTHENTICATION\n              + \" set to: \" + authVal + \", not kerberos, but attempting to \"\n              + \" connect to HDFS via kerberos\");\n        }\n        // let's avoid modifying the supplied configuration, just to be conservative\n        final Configuration ugiConf = new Configuration(getConf());\n        ugiConf.set(HADOOP_SECURITY_AUTHENTICATION, kerberos);\n        UserGroupInformation.setConfiguration(ugiConf);\n        LOG.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        LOG.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","sourceOld":"  private void initKerberos() {\n    String keytabFile = getConfig(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = getConfig(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = new Boolean(true);\n        final Configuration conf = getConf();\n        final String authVal = conf.get(HADOOP_SECURITY_AUTHENTICATION);\n        final String kerberos = \"kerberos\";\n        if (authVal != null && !authVal.equals(kerberos)) {\n          throw new IllegalArgumentException(HADOOP_SECURITY_AUTHENTICATION\n              + \" set to: \" + authVal + \", not kerberos, but attempting to \"\n              + \" connect to HDFS via kerberos\");\n        }\n        // let's avoid modifying the supplied configuration, just to be conservative\n        final Configuration ugiConf = new Configuration(getConf());\n        ugiConf.set(HADOOP_SECURITY_AUTHENTICATION, kerberos);\n        UserGroupInformation.setConfiguration(ugiConf);\n        LOG.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        LOG.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","sourceNew":"  private void initKerberos() {\n    String keytabFile = getConfig(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = getConfig(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = Boolean.TRUE;\n        final Configuration conf = getConf();\n        final String authVal = conf.get(HADOOP_SECURITY_AUTHENTICATION);\n        final String kerberos = \"kerberos\";\n        if (authVal != null && !authVal.equals(kerberos)) {\n          throw new IllegalArgumentException(HADOOP_SECURITY_AUTHENTICATION\n              + \" set to: \" + authVal + \", not kerberos, but attempting to \"\n              + \" connect to HDFS via kerberos\");\n        }\n        // let's avoid modifying the supplied configuration, just to be conservative\n        final Configuration ugiConf = new Configuration(getConf());\n        ugiConf.set(HADOOP_SECURITY_AUTHENTICATION, kerberos);\n        UserGroupInformation.setConfiguration(ugiConf);\n        LOG.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        LOG.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","sourceOld":"  private void initKerberos() {\n    String keytabFile = getConfig(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = getConfig(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = new Boolean(true);\n        final Configuration conf = getConf();\n        final String authVal = conf.get(HADOOP_SECURITY_AUTHENTICATION);\n        final String kerberos = \"kerberos\";\n        if (authVal != null && !authVal.equals(kerberos)) {\n          throw new IllegalArgumentException(HADOOP_SECURITY_AUTHENTICATION\n              + \" set to: \" + authVal + \", not kerberos, but attempting to \"\n              + \" connect to HDFS via kerberos\");\n        }\n        // let's avoid modifying the supplied configuration, just to be conservative\n        final Configuration ugiConf = new Configuration(getConf());\n        ugiConf.set(HADOOP_SECURITY_AUTHENTICATION, kerberos);\n        UserGroupInformation.setConfiguration(ugiConf);\n        LOG.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        LOG.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","sourceNew":"  private void initKerberos() {\n    String keytabFile = getConfig(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = getConfig(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = Boolean.TRUE;\n        final Configuration conf = getConf();\n        final String authVal = conf.get(HADOOP_SECURITY_AUTHENTICATION);\n        final String kerberos = \"kerberos\";\n        if (authVal != null && !authVal.equals(kerberos)) {\n          throw new IllegalArgumentException(HADOOP_SECURITY_AUTHENTICATION\n              + \" set to: \" + authVal + \", not kerberos, but attempting to \"\n              + \" connect to HDFS via kerberos\");\n        }\n        // let's avoid modifying the supplied configuration, just to be conservative\n        final Configuration ugiConf = new Configuration(getConf());\n        ugiConf.set(HADOOP_SECURITY_AUTHENTICATION, kerberos);\n        UserGroupInformation.setConfiguration(ugiConf);\n        log.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        log.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","sourceOld":"  private void initKerberos() {\n    String keytabFile = getConfig(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = getConfig(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = Boolean.TRUE;\n        final Configuration conf = getConf();\n        final String authVal = conf.get(HADOOP_SECURITY_AUTHENTICATION);\n        final String kerberos = \"kerberos\";\n        if (authVal != null && !authVal.equals(kerberos)) {\n          throw new IllegalArgumentException(HADOOP_SECURITY_AUTHENTICATION\n              + \" set to: \" + authVal + \", not kerberos, but attempting to \"\n              + \" connect to HDFS via kerberos\");\n        }\n        // let's avoid modifying the supplied configuration, just to be conservative\n        final Configuration ugiConf = new Configuration(getConf());\n        ugiConf.set(HADOOP_SECURITY_AUTHENTICATION, kerberos);\n        UserGroupInformation.setConfiguration(ugiConf);\n        LOG.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        LOG.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"870bbea2a1d8085b48b52a1480ac95db389476c1","date":1553970360,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#initKerberos().mjava","sourceNew":"  private void initKerberos() {\n    String keytabFile = getConfig(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = getConfig(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = Boolean.TRUE;\n        final Configuration conf = getConf(null);\n        final String authVal = conf.get(HADOOP_SECURITY_AUTHENTICATION);\n        final String kerberos = \"kerberos\";\n        if (authVal != null && !authVal.equals(kerberos)) {\n          throw new IllegalArgumentException(HADOOP_SECURITY_AUTHENTICATION\n              + \" set to: \" + authVal + \", not kerberos, but attempting to \"\n              + \" connect to HDFS via kerberos\");\n        }\n        // let's avoid modifying the supplied configuration, just to be conservative\n        final Configuration ugiConf = new Configuration(getConf(null));\n        ugiConf.set(HADOOP_SECURITY_AUTHENTICATION, kerberos);\n        UserGroupInformation.setConfiguration(ugiConf);\n        log.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        log.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","sourceOld":"  private void initKerberos() {\n    String keytabFile = getConfig(KERBEROS_KEYTAB, \"\").trim();\n    if (keytabFile.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_KEYTAB + \" required because \"\n          + KERBEROS_ENABLED + \" set to true\");\n    }\n    String principal = getConfig(KERBEROS_PRINCIPAL, \"\");\n    if (principal.length() == 0) {\n      throw new IllegalArgumentException(KERBEROS_PRINCIPAL\n          + \" required because \" + KERBEROS_ENABLED + \" set to true\");\n    }\n    synchronized (HdfsDirectoryFactory.class) {\n      if (kerberosInit == null) {\n        kerberosInit = Boolean.TRUE;\n        final Configuration conf = getConf();\n        final String authVal = conf.get(HADOOP_SECURITY_AUTHENTICATION);\n        final String kerberos = \"kerberos\";\n        if (authVal != null && !authVal.equals(kerberos)) {\n          throw new IllegalArgumentException(HADOOP_SECURITY_AUTHENTICATION\n              + \" set to: \" + authVal + \", not kerberos, but attempting to \"\n              + \" connect to HDFS via kerberos\");\n        }\n        // let's avoid modifying the supplied configuration, just to be conservative\n        final Configuration ugiConf = new Configuration(getConf());\n        ugiConf.set(HADOOP_SECURITY_AUTHENTICATION, kerberos);\n        UserGroupInformation.setConfiguration(ugiConf);\n        log.info(\n            \"Attempting to acquire kerberos ticket with keytab: {}, principal: {} \",\n            keytabFile, principal);\n        try {\n          UserGroupInformation.loginUserFromKeytab(principal, keytabFile);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n        log.info(\"Got Kerberos ticket\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3690d9c3567bf92ced55bd45e89d9188d2e70da":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["0ce6c1f997c135ab2e3d211580d089de539d7e20"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["0ce6c1f997c135ab2e3d211580d089de539d7e20","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"870bbea2a1d8085b48b52a1480ac95db389476c1":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ce6c1f997c135ab2e3d211580d089de539d7e20":["b3690d9c3567bf92ced55bd45e89d9188d2e70da"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0ce6c1f997c135ab2e3d211580d089de539d7e20","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["870bbea2a1d8085b48b52a1480ac95db389476c1"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"b3690d9c3567bf92ced55bd45e89d9188d2e70da":["0ce6c1f997c135ab2e3d211580d089de539d7e20"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["b3690d9c3567bf92ced55bd45e89d9188d2e70da","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"870bbea2a1d8085b48b52a1480ac95db389476c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"0ce6c1f997c135ab2e3d211580d089de539d7e20":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["870bbea2a1d8085b48b52a1480ac95db389476c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}