{"path":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set,boolean).mjava","commits":[{"id":"54c106a73719ede69e08f8b0ffe2950cc9ebfa07","date":1244055085,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a token stream filtering the given input.\n   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if\n   * <code>makeStopSet()</code> was used to construct the set) it will be directly used\n   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>\n   * directly controls case sensitivity.\n   * <p/>\n   * If <code>stopWords</code> is not an instance of {@link CharArraySet},\n   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   *\n   * @param enablePositionIncrements true if token positions should record the removed stop words\n   * @param input Input TokenStream\n   * @param stopWords The set of Stop Words.\n   * @param ignoreCase -Ignore case when stopping.\n   */\n  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set stopWords, boolean ignoreCase)\n  {\n    super(input);\n    if (stopWords instanceof CharArraySet) {\n      this.stopWords = (CharArraySet)stopWords;\n    } else {\n      this.stopWords = new CharArraySet(stopWords.size(), ignoreCase);\n      this.stopWords.addAll(stopWords);\n    }\n    this.enablePositionIncrements = enablePositionIncrements;\n    init();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set[#],boolean).mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#StopFilter(boolean,TokenStream,Set,boolean).mjava","sourceNew":"  /**\n   * Construct a token stream filtering the given input.\n   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if\n   * <code>makeStopSet()</code> was used to construct the set) it will be directly used\n   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>\n   * directly controls case sensitivity.\n   * <p/>\n   * If <code>stopWords</code> is not an instance of {@link CharArraySet},\n   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   *\n   * @param enablePositionIncrements true if token positions should record the removed stop words\n   * @param input Input TokenStream\n   * @param stopWords A Set of Strings or char[] or any other toString()-able set representing the stopwords\n   * @param ignoreCase if true, all words are lower cased first\n   * @param ignoreCase -Ignore case when stopping.\n   */\n  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set<?> stopWords, boolean ignoreCase)\n  {\n    super(input);\n    if (stopWords instanceof CharArraySet) {\n      this.stopWords = (CharArraySet)stopWords;\n    } else {\n      this.stopWords = new CharArraySet(stopWords.size(), ignoreCase);\n      this.stopWords.addAll(stopWords);\n    }\n    this.enablePositionIncrements = enablePositionIncrements;\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Construct a token stream filtering the given input.\n   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if\n   * <code>makeStopSet()</code> was used to construct the set) it will be directly used\n   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>\n   * directly controls case sensitivity.\n   * <p/>\n   * If <code>stopWords</code> is not an instance of {@link CharArraySet},\n   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   *\n   * @param enablePositionIncrements true if token positions should record the removed stop words\n   * @param input Input TokenStream\n   * @param stopWords The set of Stop Words.\n   * @param ignoreCase -Ignore case when stopping.\n   */\n  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set stopWords, boolean ignoreCase)\n  {\n    super(input);\n    if (stopWords instanceof CharArraySet) {\n      this.stopWords = (CharArraySet)stopWords;\n    } else {\n      this.stopWords = new CharArraySet(stopWords.size(), ignoreCase);\n      this.stopWords.addAll(stopWords);\n    }\n    this.enablePositionIncrements = enablePositionIncrements;\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["54c106a73719ede69e08f8b0ffe2950cc9ebfa07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"54c106a73719ede69e08f8b0ffe2950cc9ebfa07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54c106a73719ede69e08f8b0ffe2950cc9ebfa07"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54c106a73719ede69e08f8b0ffe2950cc9ebfa07":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}