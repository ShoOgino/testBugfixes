{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilterFactory#testKeywordsCaseInsensitiveMixed().mjava","commits":[{"id":"a32c7218952a3082e8be4be1a325fd217603f365","date":1363034315,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilterFactory#testKeywordsCaseInsensitiveMixed().mjava","pathOld":"/dev/null","sourceNew":"  public void testKeywordsCaseInsensitiveMixed() throws IOException {\n    Reader reader = new StringReader(\"dogs cats Cats Birds birds\");\n    Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    KeywordMarkerFilterFactory factory = new KeywordMarkerFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    ResourceLoader loader = new StringMockResourceLoader(\"cats\");\n    args.put(\"protected\", \"protwords.txt\");\n    args.put(\"pattern\", \"birds\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    \n    TokenStream ts = new PorterStemFilter(factory.create(tokenizer));\n    assertTokenStreamContents(ts, new String[] { \"dog\", \"cats\", \"Cats\", \"Birds\", \"birds\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilterFactory#testKeywordsCaseInsensitiveMixed().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilterFactory#testKeywordsCaseInsensitiveMixed().mjava","sourceNew":"  public void testKeywordsCaseInsensitiveMixed() throws Exception {\n    Reader reader = new StringReader(\"dogs cats Cats Birds birds\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"KeywordMarker\", TEST_VERSION_CURRENT,\n        new StringMockResourceLoader(\"cats\"),\n        \"protected\", \"protwords.txt\",\n        \"pattern\", \"birds\",\n        \"ignoreCase\", \"true\").create(stream);\n    stream = tokenFilterFactory(\"PorterStem\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"dog\", \"cats\", \"Cats\", \"Birds\", \"birds\" });\n  }\n\n","sourceOld":"  public void testKeywordsCaseInsensitiveMixed() throws IOException {\n    Reader reader = new StringReader(\"dogs cats Cats Birds birds\");\n    Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    KeywordMarkerFilterFactory factory = new KeywordMarkerFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    ResourceLoader loader = new StringMockResourceLoader(\"cats\");\n    args.put(\"protected\", \"protwords.txt\");\n    args.put(\"pattern\", \"birds\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    \n    TokenStream ts = new PorterStemFilter(factory.create(tokenizer));\n    assertTokenStreamContents(ts, new String[] { \"dog\", \"cats\", \"Cats\", \"Birds\", \"birds\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilterFactory#testKeywordsCaseInsensitiveMixed().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilterFactory#testKeywordsCaseInsensitiveMixed().mjava","sourceNew":"  public void testKeywordsCaseInsensitiveMixed() throws Exception {\n    Reader reader = new StringReader(\"dogs cats Cats Birds birds\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"KeywordMarker\", TEST_VERSION_CURRENT,\n        new StringMockResourceLoader(\"cats\"),\n        \"protected\", \"protwords.txt\",\n        \"pattern\", \"birds\",\n        \"ignoreCase\", \"true\").create(stream);\n    stream = tokenFilterFactory(\"PorterStem\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"dog\", \"cats\", \"Cats\", \"Birds\", \"birds\" });\n  }\n\n","sourceOld":"  public void testKeywordsCaseInsensitiveMixed() throws Exception {\n    Reader reader = new StringReader(\"dogs cats Cats Birds birds\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"KeywordMarker\", TEST_VERSION_CURRENT,\n        new StringMockResourceLoader(\"cats\"),\n        \"protected\", \"protwords.txt\",\n        \"pattern\", \"birds\",\n        \"ignoreCase\", \"true\").create(stream);\n    stream = tokenFilterFactory(\"PorterStem\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"dog\", \"cats\", \"Cats\", \"Birds\", \"birds\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e497fe4da591a79332da97681b8017d9c61165","date":1409030374,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilterFactory#testKeywordsCaseInsensitiveMixed().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilterFactory#testKeywordsCaseInsensitiveMixed().mjava","sourceNew":"  public void testKeywordsCaseInsensitiveMixed() throws Exception {\n    Reader reader = new StringReader(\"dogs cats Cats Birds birds\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"KeywordMarker\", Version.LATEST,\n        new StringMockResourceLoader(\"cats\"),\n        \"protected\", \"protwords.txt\",\n        \"pattern\", \"birds\",\n        \"ignoreCase\", \"true\").create(stream);\n    stream = tokenFilterFactory(\"PorterStem\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"dog\", \"cats\", \"Cats\", \"Birds\", \"birds\" });\n  }\n\n","sourceOld":"  public void testKeywordsCaseInsensitiveMixed() throws Exception {\n    Reader reader = new StringReader(\"dogs cats Cats Birds birds\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"KeywordMarker\", TEST_VERSION_CURRENT,\n        new StringMockResourceLoader(\"cats\"),\n        \"protected\", \"protwords.txt\",\n        \"pattern\", \"birds\",\n        \"ignoreCase\", \"true\").create(stream);\n    stream = tokenFilterFactory(\"PorterStem\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"dog\", \"cats\", \"Cats\", \"Birds\", \"birds\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a32c7218952a3082e8be4be1a325fd217603f365":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a32c7218952a3082e8be4be1a325fd217603f365"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19e497fe4da591a79332da97681b8017d9c61165"],"19e497fe4da591a79332da97681b8017d9c61165":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["19e497fe4da591a79332da97681b8017d9c61165"],"a32c7218952a3082e8be4be1a325fd217603f365":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a32c7218952a3082e8be4be1a325fd217603f365"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"19e497fe4da591a79332da97681b8017d9c61165":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}