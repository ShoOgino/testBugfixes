{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newFloatRange(\"id_float\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterFloats().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testFieldCacheRangeFilterFloats() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Float minIdO = Float.valueOf(minId + .5f);\n    Float medIdO = Float.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0f);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",Float.valueOf(Float.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,DocValuesRangeFilter.newFloatRange(\"id_float\",null,Float.valueOf(Float.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9274621789ce990dbfef455dabdf026bb3184821":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","59a0020b413d44dd79d85d7a66ed5004265fb453"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["59a0020b413d44dd79d85d7a66ed5004265fb453","9274621789ce990dbfef455dabdf026bb3184821"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":["59a0020b413d44dd79d85d7a66ed5004265fb453","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["484e80062d7ab2729bc82f0311d6a97dd913961a"]},"commit2Childs":{"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["484e80062d7ab2729bc82f0311d6a97dd913961a","56572ec06f1407c066d6b7399413178b33176cd8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["9274621789ce990dbfef455dabdf026bb3184821","37a0f60745e53927c4c876cfe5b5a58170f0646c","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}