{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,BufferedReader,String).mjava","commits":[{"id":"8f976917c54bb925b908d73fc4c2092e4abb8508","date":1315634439,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,BufferedReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          BufferedReader reader,\n                          String conditionPattern) throws IOException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        char appendFlags[] = flagParsingStrategy.parseFlags(affixArg.substring(flagSep + 1));\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,BufferedReader,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,BufferedReader,String).mjava","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          BufferedReader reader,\n                          String conditionPattern) throws IOException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        char appendFlags[] = flagParsingStrategy.parseFlags(affixArg.substring(flagSep + 1));\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          BufferedReader reader,\n                          String conditionPattern) throws IOException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        char appendFlags[] = flagParsingStrategy.parseFlags(affixArg.substring(flagSep + 1));\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f976917c54bb925b908d73fc4c2092e4abb8508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"8f976917c54bb925b908d73fc4c2092e4abb8508":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}