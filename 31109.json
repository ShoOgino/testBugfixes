{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    try {\n      latest.read(dir, codecs);\n    } catch (IndexNotFoundException e) {\n      return Collections.emptyList();\n    }\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    try {\n      latest.read(dir, codecs);\n    } catch (IndexNotFoundException e) {\n      return Collections.emptyList();\n    }\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }  \n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6","date":1288888250,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos(codecs);\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos(codecs);\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9","date":1289510544,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos(codecs);\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos(codecs);\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos(codecs);\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos(codecs);\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos(codecs);\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos(codecs);\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }  \n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos(codecs);\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos(codecs);\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static Collection<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    Collection<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos(codecs);\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos(codecs);\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }  \n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos(codecs);\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos(codecs);\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","sourceNew":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos(codecs);\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos(codecs);\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }  \n\n","sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos(codecs);\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos(codecs);\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory,CodecProvider).mjava","sourceNew":null,"sourceOld":"  /** @see org.apache.lucene.index.IndexReader#listCommits */\n  public static List<IndexCommit> listCommits(Directory dir, CodecProvider codecs) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos(codecs);\n    latest.read(dir, codecs);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos(codecs);\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName, codecs);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9","2e8d7ba2175f47e280231533f7d3016249cea88b"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"85a883878c0af761245ab048babc63d099f835f3":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0","188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"7b91922b55d15444d554721b352861d028eb8278":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9","85a883878c0af761245ab048babc63d099f835f3"],"188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9":["2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"85a883878c0af761245ab048babc63d099f835f3":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6","0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7b91922b55d15444d554721b352861d028eb8278"],"188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["85a883878c0af761245ab048babc63d099f835f3"],"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6":["188ca9aea561b1f58ab1a7f2cbdce1c30b36f5e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}