{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","commits":[{"id":"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1","date":1337273259,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#bootstrapConf().mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    \n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.getAttr(node, \"name\", null);\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.getAttr(node, \"collection\", null);\n      if (confName == null) {\n        confName = rawName;\n      }\n\n      ZkController.uploadConfigDir(zkClient, new File(idir, \"conf\"), confName);\n    }\n  }\n\n","sourceOld":"  private void bootstrapConf() throws IOException,\n      KeeperException, InterruptedException {\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.getAttr(node, \"name\", null);\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.getAttr(node, \"collection\", null);\n      if (confName == null) {\n        confName = rawName;\n      }\n\n      zkController.uploadConfigDir(new File(idir, \"conf\"), confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#bootstrapConf().mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    \n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.getAttr(node, \"name\", null);\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.getAttr(node, \"collection\", null);\n      if (confName == null) {\n        confName = rawName;\n      }\n\n      ZkController.uploadConfigDir(zkClient, new File(idir, \"conf\"), confName);\n    }\n  }\n\n","sourceOld":"  private void bootstrapConf() throws IOException,\n      KeeperException, InterruptedException {\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.getAttr(node, \"name\", null);\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.getAttr(node, \"collection\", null);\n      if (confName == null) {\n        confName = rawName;\n      }\n\n      zkController.uploadConfigDir(new File(idir, \"conf\"), confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf4e43a4d7a969632d4bec76fd5bba149cb81487","date":1342043143,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    \n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"name\", null), new Properties());\n\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      SolrException.log(log, \"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    \n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.getAttr(node, \"name\", null);\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.getAttr(node, \"collection\", null);\n      if (confName == null) {\n        confName = rawName;\n      }\n\n      ZkController.uploadConfigDir(zkClient, new File(idir, \"conf\"), confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    \n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"name\", null), new Properties());\n\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      SolrException.log(log, \"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    \n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.getAttr(node, \"name\", null);\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.getAttr(node, \"collection\", null);\n      if (confName == null) {\n        confName = rawName;\n      }\n\n      ZkController.uploadConfigDir(zkClient, new File(idir, \"conf\"), confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf762959d52002618f43ce4aa9e5612256b0b15b","date":1342993566,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    log.info(\"bootstraping config into ZooKeeper using solr.xml\");\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"name\", null), new Properties());\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    \n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"name\", null), new Properties());\n\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      SolrException.log(log, \"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    log.info(\"bootstraping config into ZooKeeper using solr.xml\");\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"name\", null), new Properties());\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    \n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"name\", null), new Properties());\n\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      SolrException.log(log, \"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    log.info(\"bootstraping config into ZooKeeper using solr.xml\");\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"name\", null), new Properties());\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    \n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.getAttr(node, \"name\", null);\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.getAttr(node, \"collection\", null);\n      if (confName == null) {\n        confName = rawName;\n      }\n\n      ZkController.uploadConfigDir(zkClient, new File(idir, \"conf\"), confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    log.info(\"bootstraping config into ZooKeeper using solr.xml\");\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"name\", null), new Properties());\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    log.info(\"bootstraping config into ZooKeeper using solr.xml\");\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"name\", null), new Properties());\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,ConfigSolr,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, ConfigSolr cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n\n    log.info(\"bootstraping config into ZooKeeper using solr.xml\");\n    List<String> allCoreNames = cfg.getAllCoreNames();\n    for (String coreName : allCoreNames) {\n      String rawName = PropertiesUtil.substituteProperty(cfg.getProperty(coreName, \"name\", null), new Properties());\n      String instanceDir = cfg.getProperty(coreName, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = PropertiesUtil.substituteProperty(cfg.getProperty(coreName, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    log.info(\"bootstraping config into ZooKeeper using solr.xml\");\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"name\", null), new Properties());\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["bf762959d52002618f43ce4aa9e5612256b0b15b"],"aba371508186796cc6151d8223a5b4e16d02e26e":["70d51faece9593d2e9be4f2b6e603d96e5bcb2d1","bf762959d52002618f43ce4aa9e5612256b0b15b"],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["70d51faece9593d2e9be4f2b6e603d96e5bcb2d1"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["70d51faece9593d2e9be4f2b6e603d96e5bcb2d1","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bf762959d52002618f43ce4aa9e5612256b0b15b":["cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","bf762959d52002618f43ce4aa9e5612256b0b15b"],"a837c064b67fa63a9394136e31218b908cdcf783":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"ef0d8a69209261514c5739c770bba706c2308450":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70d51faece9593d2e9be4f2b6e603d96e5bcb2d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a837c064b67fa63a9394136e31218b908cdcf783"],"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["a837c064b67fa63a9394136e31218b908cdcf783"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["fe33227f6805edab2036cbb80645cc4e2d1fa424","bf762959d52002618f43ce4aa9e5612256b0b15b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef0d8a69209261514c5739c770bba706c2308450","70d51faece9593d2e9be4f2b6e603d96e5bcb2d1"],"bf762959d52002618f43ce4aa9e5612256b0b15b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"a837c064b67fa63a9394136e31218b908cdcf783":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef0d8a69209261514c5739c770bba706c2308450":[],"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1":["aba371508186796cc6151d8223a5b4e16d02e26e","cf4e43a4d7a969632d4bec76fd5bba149cb81487","fe33227f6805edab2036cbb80645cc4e2d1fa424","ef0d8a69209261514c5739c770bba706c2308450"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}