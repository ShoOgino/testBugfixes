{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#estimatePointCount(IntersectState,int,byte[],byte[]).mjava","commits":[{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#estimatePointCount(IntersectState,int,byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  private long estimatePointCount(IntersectState state,\n      int nodeID, byte[] cellMinPacked, byte[] cellMaxPacked) {\n    Relation r = state.visitor.compare(cellMinPacked, cellMaxPacked);\n\n    if (r == Relation.CELL_OUTSIDE_QUERY) {\n      // This cell is fully outside of the query shape: stop recursing\n      return 0L;\n    } else if (nodeID >= leafNodeOffset) {\n      // Assume all points match and there are no dups\n      return maxPointsInLeafNode;\n    } else {\n      \n      // Non-leaf node: recurse on the split left and right nodes\n\n      int address = nodeID * bytesPerIndexEntry;\n      int splitDim;\n      if (numDims == 1) {\n        splitDim = 0;\n      } else {\n        splitDim = splitPackedValues[address++] & 0xff;\n      }\n      \n      assert splitDim < numDims;\n\n      // TODO: can we alloc & reuse this up front?\n\n      byte[] splitPackedValue = new byte[packedBytesLength];\n\n      // Recurse on left sub-tree:\n      System.arraycopy(cellMaxPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      final long leftCost = estimatePointCount(state,\n                2*nodeID,\n                cellMinPacked, splitPackedValue);\n\n      // Recurse on right sub-tree:\n      System.arraycopy(cellMinPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      final long rightCost = estimatePointCount(state,\n                2*nodeID+1,\n                splitPackedValue, cellMaxPacked);\n      return leftCost + rightCost;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#estimatePointCount(IntersectState,int,byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  private long estimatePointCount(IntersectState state,\n      int nodeID, byte[] cellMinPacked, byte[] cellMaxPacked) {\n    Relation r = state.visitor.compare(cellMinPacked, cellMaxPacked);\n\n    if (r == Relation.CELL_OUTSIDE_QUERY) {\n      // This cell is fully outside of the query shape: stop recursing\n      return 0L;\n    } else if (nodeID >= leafNodeOffset) {\n      // Assume all points match and there are no dups\n      return maxPointsInLeafNode;\n    } else {\n      \n      // Non-leaf node: recurse on the split left and right nodes\n\n      int address = nodeID * bytesPerIndexEntry;\n      int splitDim;\n      if (numDims == 1) {\n        splitDim = 0;\n      } else {\n        splitDim = splitPackedValues[address++] & 0xff;\n      }\n      \n      assert splitDim < numDims;\n\n      // TODO: can we alloc & reuse this up front?\n\n      byte[] splitPackedValue = new byte[packedBytesLength];\n\n      // Recurse on left sub-tree:\n      System.arraycopy(cellMaxPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      final long leftCost = estimatePointCount(state,\n                2*nodeID,\n                cellMinPacked, splitPackedValue);\n\n      // Recurse on right sub-tree:\n      System.arraycopy(cellMinPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      final long rightCost = estimatePointCount(state,\n                2*nodeID+1,\n                splitPackedValue, cellMaxPacked);\n      return leftCost + rightCost;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#estimatePointCount(IntersectState,int,byte[],byte[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#estimatePointCount(IntersectState,int,byte[],byte[]).mjava","sourceNew":"  private long estimatePointCount(IntersectState state,\n      int nodeID, byte[] cellMinPacked, byte[] cellMaxPacked) {\n    Relation r = state.visitor.compare(cellMinPacked, cellMaxPacked);\n\n    if (r == Relation.CELL_OUTSIDE_QUERY) {\n      // This cell is fully outside of the query shape: stop recursing\n      return 0L;\n    } else if (nodeID >= leafNodeOffset) {\n      // Assume all points match and there are no dups\n      return maxPointsInLeafNode;\n    } else {\n      \n      // Non-leaf node: recurse on the split left and right nodes\n\n      int address = nodeID * bytesPerIndexEntry;\n      int splitDim;\n      if (numIndexDims == 1) {\n        splitDim = 0;\n      } else {\n        splitDim = splitPackedValues[address++] & 0xff;\n      }\n      \n      assert splitDim < numIndexDims;\n\n      // TODO: can we alloc & reuse this up front?\n\n      byte[] splitPackedValue = new byte[packedIndexBytesLength];\n\n      // Recurse on left sub-tree:\n      System.arraycopy(cellMaxPacked, 0, splitPackedValue, 0, packedIndexBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      final long leftCost = estimatePointCount(state,\n                2*nodeID,\n                cellMinPacked, splitPackedValue);\n\n      // Recurse on right sub-tree:\n      System.arraycopy(cellMinPacked, 0, splitPackedValue, 0, packedIndexBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      final long rightCost = estimatePointCount(state,\n                2*nodeID+1,\n                splitPackedValue, cellMaxPacked);\n      return leftCost + rightCost;\n    }\n  }\n\n","sourceOld":"  private long estimatePointCount(IntersectState state,\n      int nodeID, byte[] cellMinPacked, byte[] cellMaxPacked) {\n    Relation r = state.visitor.compare(cellMinPacked, cellMaxPacked);\n\n    if (r == Relation.CELL_OUTSIDE_QUERY) {\n      // This cell is fully outside of the query shape: stop recursing\n      return 0L;\n    } else if (nodeID >= leafNodeOffset) {\n      // Assume all points match and there are no dups\n      return maxPointsInLeafNode;\n    } else {\n      \n      // Non-leaf node: recurse on the split left and right nodes\n\n      int address = nodeID * bytesPerIndexEntry;\n      int splitDim;\n      if (numDims == 1) {\n        splitDim = 0;\n      } else {\n        splitDim = splitPackedValues[address++] & 0xff;\n      }\n      \n      assert splitDim < numDims;\n\n      // TODO: can we alloc & reuse this up front?\n\n      byte[] splitPackedValue = new byte[packedBytesLength];\n\n      // Recurse on left sub-tree:\n      System.arraycopy(cellMaxPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      final long leftCost = estimatePointCount(state,\n                2*nodeID,\n                cellMinPacked, splitPackedValue);\n\n      // Recurse on right sub-tree:\n      System.arraycopy(cellMinPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      final long rightCost = estimatePointCount(state,\n                2*nodeID+1,\n                splitPackedValue, cellMaxPacked);\n      return leftCost + rightCost;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6652c943595e92c187ee904c382863013eae28f":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6652c943595e92c187ee904c382863013eae28f"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"f6652c943595e92c187ee904c382863013eae28f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["f6652c943595e92c187ee904c382863013eae28f","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dca67e06c96e95a8d9ef07418b6299bfd981523b","302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}