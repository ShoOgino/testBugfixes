{"path":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","commits":[{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","sourceNew":"  /** Init arrays for partition by total counts, optionally applying a factor */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","sourceOld":"  /** Init arrays for partition by total counts, optionally applying a factor */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","sourceNew":"  /** Init arrays for partition by total counts, optionally applying a factor */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","sourceOld":"  /** Init arrays for partition by total counts, optionally applying a factor */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","sourceNew":null,"sourceOld":"  /** Init arrays for partition by total counts, optionally applying a factor */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#initArraysByTotalCounts(FacetArrays,int,int).mjava","sourceNew":null,"sourceOld":"  /** Init arrays for partition by total counts, optionally applying a factor */\n  private final void initArraysByTotalCounts(FacetArrays facetArrays, int partition, int nAccumulatedDocs) {\n    int[] intArray = facetArrays.getIntArray();\n    totalFacetCounts.fillTotalCountsForPartition(intArray, partition);\n    double totalCountsFactor = getTotalCountsFactor();\n    // fix total counts, but only if the effect of this would be meaningful. \n    if (totalCountsFactor < 0.99999) {\n      int delta = nAccumulatedDocs + 1;\n      for (int i = 0; i < intArray.length; i++) {\n        intArray[i] *= totalCountsFactor;\n        // also translate to prevent loss of non-positive values\n        // due to complement sampling (ie if sampled docs all decremented a certain category). \n        intArray[i] += delta; \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}