{"path":"src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","commits":[{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    private void merge(int lo, int pivot, int hi, int len1, int len2) {\n        if (len1 == 0 || len2 == 0) {\n            return;\n        }\n        if (len1 + len2 == 2) {\n            if (compare(pivot, lo) < 0) {\n                swap(pivot, lo);\n            }\n            return;\n        }\n        int first_cut, second_cut;\n        int len11, len22;\n        if (len1 > len2) {\n            len11 = len1 / 2;\n            first_cut = lo + len11;\n            second_cut = lower(pivot, hi, first_cut);\n            len22 = second_cut - pivot;\n        } else {\n            len22 = len2 / 2;\n            second_cut = pivot + len22;\n            first_cut = upper(lo, pivot, second_cut);\n            len11 = first_cut - lo;\n        }\n        rotate(first_cut, pivot, second_cut);\n        int new_mid = first_cut + len22;\n        merge(lo, first_cut, new_mid, len11, len22);\n        merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9f68196da6d72e738958919de611308ebdc4505","date":1259861039,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","sourceNew":null,"sourceOld":"    private void merge(int lo, int pivot, int hi, int len1, int len2) {\n        if (len1 == 0 || len2 == 0) {\n            return;\n        }\n        if (len1 + len2 == 2) {\n            if (compare(pivot, lo) < 0) {\n                swap(pivot, lo);\n            }\n            return;\n        }\n        int first_cut, second_cut;\n        int len11, len22;\n        if (len1 > len2) {\n            len11 = len1 / 2;\n            first_cut = lo + len11;\n            second_cut = lower(pivot, hi, first_cut);\n            len22 = second_cut - pivot;\n        } else {\n            len22 = len2 / 2;\n            second_cut = pivot + len22;\n            first_cut = upper(lo, pivot, second_cut);\n            len11 = first_cut - lo;\n        }\n        rotate(first_cut, pivot, second_cut);\n        int new_mid = first_cut + len22;\n        merge(lo, first_cut, new_mid, len11, len22);\n        merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9f68196da6d72e738958919de611308ebdc4505":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63bc3238545c6012bd44f5d294077997f236bc4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9f68196da6d72e738958919de611308ebdc4505"]},"commit2Childs":{"e9f68196da6d72e738958919de611308ebdc4505":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63bc3238545c6012bd44f5d294077997f236bc4e"],"63bc3238545c6012bd44f5d294077997f236bc4e":["e9f68196da6d72e738958919de611308ebdc4505"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}