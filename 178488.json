{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","sourceNew":"    public Iterator permutationIterator() {\n\n      return new Iterator() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          return s != 0 && columnRowCounters[s - 1] < ((Column) columns.get(s - 1)).getRows().size();\n        }\n\n        public Object next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = (Matrix.Column.Row) ((Column) columns.get(i)).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == ((Column) columns.get(i)).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public Iterator permutationIterator() {\n\n      return new Iterator() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          return s != 0 && columnRowCounters[s - 1] < ((Column) columns.get(s - 1)).getRows().size();\n        }\n\n        public Object next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = (Matrix.Column.Row) ((Column) columns.get(i)).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == ((Column) columns.get(i)).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d7af7923eb20ee09475be28bf8053f8af5be53","date":1254575831,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","sourceNew":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          return s != 0 && columnRowCounters[s - 1] < (columns.get(s - 1)).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public Iterator permutationIterator() {\n\n      return new Iterator() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          return s != 0 && columnRowCounters[s - 1] < ((Column) columns.get(s - 1)).getRows().size();\n        }\n\n        public Object next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = (Matrix.Column.Row) ((Column) columns.get(i)).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == ((Column) columns.get(i)).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["e2169aa913b569633d459103a3f33f602568a0b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2169aa913b569633d459103a3f33f602568a0b9","date":1254758477,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","sourceNew":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          int n = columns.size();\n          return s != 0 && n >= s && columnRowCounters[s - 1] < (columns.get(s - 1)).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          return s != 0 && columnRowCounters[s - 1] < (columns.get(s - 1)).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","bugFix":["b0d7af7923eb20ee09475be28bf8053f8af5be53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","sourceNew":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          int n = columns.size();\n          return s != 0 && n >= s && columnRowCounters[s - 1] < (columns.get(s - 1)).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          int n = columns.size();\n          return s != 0 && n >= s && columnRowCounters[s - 1] < (columns.get(s - 1)).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2169aa913b569633d459103a3f33f602568a0b9":["b0d7af7923eb20ee09475be28bf8053f8af5be53"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0d7af7923eb20ee09475be28bf8053f8af5be53":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e2169aa913b569633d459103a3f33f602568a0b9"]},"commit2Childs":{"e2169aa913b569633d459103a3f33f602568a0b9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["b0d7af7923eb20ee09475be28bf8053f8af5be53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"b0d7af7923eb20ee09475be28bf8053f8af5be53":["e2169aa913b569633d459103a3f33f602568a0b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}