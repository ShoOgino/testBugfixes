{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.DeflateWithPresetDictDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","commits":[{"id":"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9","date":1598432674,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.DeflateWithPresetDictDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int dictLength = in.readVInt();\n      final int blockLength = in.readVInt();\n      bytes.bytes = ArrayUtil.grow(bytes.bytes, dictLength);\n      bytes.offset = bytes.length = 0;\n\n      final Inflater decompressor = new Inflater(true);\n      try {\n        // Read the dictionary\n        doDecompress(in, decompressor, bytes);\n        if (dictLength != bytes.length) {\n          throw new CorruptIndexException(\"Unexpected dict length\", in);\n        }\n\n        int offsetInBlock = dictLength;\n        int offsetInBytesRef = offset;\n\n        // Skip unneeded blocks\n        while (offsetInBlock + blockLength < offset) {\n          final int compressedLength = in.readVInt();\n          in.skipBytes(compressedLength);\n          offsetInBlock += blockLength;\n          offsetInBytesRef -= blockLength;\n        }\n\n        // Read blocks that intersect with the interval we need\n        while (offsetInBlock < offset + length) {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes, bytes.length + blockLength);\n          decompressor.reset();\n          decompressor.setDictionary(bytes.bytes, 0, dictLength);\n          doDecompress(in, decompressor, bytes);\n          offsetInBlock += blockLength;\n        }\n\n        bytes.offset = offsetInBytesRef;\n        bytes.length = length;\n        assert bytes.isValid();\n      } finally {\n        decompressor.end();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aefce86de8b17eed91ab011fb54d704d91102ef","date":1599128224,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.DeflateWithPresetDictDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int dictLength = in.readVInt();\n      final int blockLength = in.readVInt();\n      bytes.bytes = ArrayUtil.grow(bytes.bytes, dictLength);\n      bytes.offset = bytes.length = 0;\n\n      final Inflater decompressor = new Inflater(true);\n      try {\n        // Read the dictionary\n        doDecompress(in, decompressor, bytes);\n        if (dictLength != bytes.length) {\n          throw new CorruptIndexException(\"Unexpected dict length\", in);\n        }\n\n        int offsetInBlock = dictLength;\n        int offsetInBytesRef = offset;\n\n        // Skip unneeded blocks\n        while (offsetInBlock + blockLength < offset) {\n          final int compressedLength = in.readVInt();\n          in.skipBytes(compressedLength);\n          offsetInBlock += blockLength;\n          offsetInBytesRef -= blockLength;\n        }\n\n        // Read blocks that intersect with the interval we need\n        while (offsetInBlock < offset + length) {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes, bytes.length + blockLength);\n          decompressor.reset();\n          decompressor.setDictionary(bytes.bytes, 0, dictLength);\n          doDecompress(in, decompressor, bytes);\n          offsetInBlock += blockLength;\n        }\n\n        bytes.offset = offsetInBytesRef;\n        bytes.length = length;\n        assert bytes.isValid();\n      } finally {\n        decompressor.end();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int dictLength = in.readVInt();\n      final int blockLength = in.readVInt();\n      bytes.bytes = ArrayUtil.grow(bytes.bytes, dictLength);\n      bytes.offset = bytes.length = 0;\n\n      final Inflater decompressor = new Inflater(true);\n      try {\n        // Read the dictionary\n        doDecompress(in, decompressor, bytes);\n        if (dictLength != bytes.length) {\n          throw new CorruptIndexException(\"Unexpected dict length\", in);\n        }\n\n        int offsetInBlock = dictLength;\n        int offsetInBytesRef = offset;\n\n        // Skip unneeded blocks\n        while (offsetInBlock + blockLength < offset) {\n          final int compressedLength = in.readVInt();\n          in.skipBytes(compressedLength);\n          offsetInBlock += blockLength;\n          offsetInBytesRef -= blockLength;\n        }\n\n        // Read blocks that intersect with the interval we need\n        while (offsetInBlock < offset + length) {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes, bytes.length + blockLength);\n          decompressor.reset();\n          decompressor.setDictionary(bytes.bytes, 0, dictLength);\n          doDecompress(in, decompressor, bytes);\n          offsetInBlock += blockLength;\n        }\n\n        bytes.offset = offsetInBytesRef;\n        bytes.length = length;\n        assert bytes.isValid();\n      } finally {\n        decompressor.end();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aefce86de8b17eed91ab011fb54d704d91102ef":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aefce86de8b17eed91ab011fb54d704d91102ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"9aefce86de8b17eed91ab011fb54d704d91102ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["9aefce86de8b17eed91ab011fb54d704d91102ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}