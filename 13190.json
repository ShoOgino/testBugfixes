{"path":"lucene/src/java/org/apache/lucene/util/OpenBitSet#prevSetBit(long).mjava","commits":[{"id":"3a49787422facf6f64049c08d30428dc706b13f5","date":1309985035,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSet#prevSetBit(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the index of the first set bit starting downwards at\n   *  the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public long prevSetBit(long index) {\n    int i = (int) (index >> 6);\n    final int subIndex;\n    long word;\n    if (i >= wlen) {\n      i = wlen - 1;\n      if (i < 0) return -1;\n      subIndex = 63;  // last possible bit\n      word = bits[i];\n    } else {\n      if (i < 0) return -1;\n      subIndex = (int)index & 0x3f;  // index within the word\n      word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n    }\n\n    if (word != 0) {\n      return (((long)i)<<6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (((long)i)<<6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSet#prevSetBit(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the index of the first set bit starting downwards at\n   *  the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public long prevSetBit(long index) {\n    int i = (int) (index >> 6);\n    final int subIndex;\n    long word;\n    if (i >= wlen) {\n      i = wlen - 1;\n      if (i < 0) return -1;\n      subIndex = 63;  // last possible bit\n      word = bits[i];\n    } else {\n      if (i < 0) return -1;\n      subIndex = (int)index & 0x3f;  // index within the word\n      word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n    }\n\n    if (word != 0) {\n      return (((long)i)<<6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (((long)i)<<6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSet#prevSetBit(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the index of the first set bit starting downwards at\n   *  the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public long prevSetBit(long index) {\n    int i = (int) (index >> 6);\n    final int subIndex;\n    long word;\n    if (i >= wlen) {\n      i = wlen - 1;\n      if (i < 0) return -1;\n      subIndex = 63;  // last possible bit\n      word = bits[i];\n    } else {\n      if (i < 0) return -1;\n      subIndex = (int)index & 0x3f;  // index within the word\n      word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n    }\n\n    if (word != 0) {\n      return (((long)i)<<6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (((long)i)<<6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#prevSetBit(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSet#prevSetBit(long).mjava","sourceNew":"  /** Returns the index of the first set bit starting downwards at\n   *  the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public long prevSetBit(long index) {\n    int i = (int) (index >> 6);\n    final int subIndex;\n    long word;\n    if (i >= wlen) {\n      i = wlen - 1;\n      if (i < 0) return -1;\n      subIndex = 63;  // last possible bit\n      word = bits[i];\n    } else {\n      if (i < 0) return -1;\n      subIndex = (int)index & 0x3f;  // index within the word\n      word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n    }\n\n    if (word != 0) {\n      return (((long)i)<<6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (((long)i)<<6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns the index of the first set bit starting downwards at\n   *  the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public long prevSetBit(long index) {\n    int i = (int) (index >> 6);\n    final int subIndex;\n    long word;\n    if (i >= wlen) {\n      i = wlen - 1;\n      if (i < 0) return -1;\n      subIndex = 63;  // last possible bit\n      word = bits[i];\n    } else {\n      if (i < 0) return -1;\n      subIndex = (int)index & 0x3f;  // index within the word\n      word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n    }\n\n    if (word != 0) {\n      return (((long)i)<<6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (((long)i)<<6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3a49787422facf6f64049c08d30428dc706b13f5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3a49787422facf6f64049c08d30428dc706b13f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a49787422facf6f64049c08d30428dc706b13f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3a49787422facf6f64049c08d30428dc706b13f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9507caf22f292ac0e5e59f62db4275adf4511","3a49787422facf6f64049c08d30428dc706b13f5","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"3a49787422facf6f64049c08d30428dc706b13f5":["f0b9507caf22f292ac0e5e59f62db4275adf4511","3a119bbc8703c10faa329ec201c654b3a35a1e3e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f0b9507caf22f292ac0e5e59f62db4275adf4511","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}