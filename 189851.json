{"path":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextNormsReader#readNorms(IndexInput,int).mjava","commits":[{"id":"bc61a492eb4d507139c1e134e26eb7b1b005d586","date":1323049530,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextNormsReader#readNorms(IndexInput,int).mjava","pathOld":"/dev/null","sourceNew":"  // we read in all the norms up front into a hashmap\n  private void readNorms(IndexInput in, int maxDoc) throws IOException {\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(in, scratch);\n      while (!scratch.equals(END)) {\n        assert StringHelper.startsWith(scratch, FIELD);\n        String fieldName = readString(FIELD.length, scratch);\n        byte bytes[] = new byte[maxDoc];\n        for (int i = 0; i < bytes.length; i++) {\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, DOC);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, NORM);\n          bytes[i] = scratch.bytes[scratch.offset + NORM.length];\n        }\n        norms.put(fieldName, bytes);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, FIELD) || scratch.equals(END);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextNormsReader#readNorms(IndexInput,int).mjava","pathOld":"/dev/null","sourceNew":"  // we read in all the norms up front into a hashmap\n  private void readNorms(IndexInput in, int maxDoc) throws IOException {\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(in, scratch);\n      while (!scratch.equals(END)) {\n        assert StringHelper.startsWith(scratch, FIELD);\n        String fieldName = readString(FIELD.length, scratch);\n        byte bytes[] = new byte[maxDoc];\n        for (int i = 0; i < bytes.length; i++) {\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, DOC);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, NORM);\n          bytes[i] = scratch.bytes[scratch.offset + NORM.length];\n        }\n        norms.put(fieldName, bytes);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, FIELD) || scratch.equals(END);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextNormsReader#readNorms(IndexInput,int).mjava","pathOld":"/dev/null","sourceNew":"  // we read in all the norms up front into a hashmap\n  private void readNorms(IndexInput in, int maxDoc) throws IOException {\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(in, scratch);\n      while (!scratch.equals(END)) {\n        assert StringHelper.startsWith(scratch, FIELD);\n        String fieldName = readString(FIELD.length, scratch);\n        byte bytes[] = new byte[maxDoc];\n        for (int i = 0; i < bytes.length; i++) {\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, DOC);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, NORM);\n          bytes[i] = scratch.bytes[scratch.offset + NORM.length];\n        }\n        norms.put(fieldName, bytes);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, FIELD) || scratch.equals(END);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsReader#readNorms(IndexInput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextNormsReader#readNorms(IndexInput,int).mjava","sourceNew":"  // we read in all the norms up front into a hashmap\n  private void readNorms(IndexInput in, int maxDoc) throws IOException {\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(in, scratch);\n      while (!scratch.equals(END)) {\n        assert StringHelper.startsWith(scratch, FIELD);\n        String fieldName = readString(FIELD.length, scratch);\n        byte bytes[] = new byte[maxDoc];\n        for (int i = 0; i < bytes.length; i++) {\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, DOC);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, NORM);\n          bytes[i] = scratch.bytes[scratch.offset + NORM.length];\n        }\n        norms.put(fieldName, bytes);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, FIELD) || scratch.equals(END);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  // we read in all the norms up front into a hashmap\n  private void readNorms(IndexInput in, int maxDoc) throws IOException {\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(in, scratch);\n      while (!scratch.equals(END)) {\n        assert StringHelper.startsWith(scratch, FIELD);\n        String fieldName = readString(FIELD.length, scratch);\n        byte bytes[] = new byte[maxDoc];\n        for (int i = 0; i < bytes.length; i++) {\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, DOC);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, NORM);\n          bytes[i] = scratch.bytes[scratch.offset + NORM.length];\n        }\n        norms.put(fieldName, bytes);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, FIELD) || scratch.equals(END);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc61a492eb4d507139c1e134e26eb7b1b005d586"],"bc61a492eb4d507139c1e134e26eb7b1b005d586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","bc61a492eb4d507139c1e134e26eb7b1b005d586"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"bc61a492eb4d507139c1e134e26eb7b1b005d586":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}