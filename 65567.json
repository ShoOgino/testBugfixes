{"path":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","pathOld":"/dev/null","sourceNew":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","sourceNew":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","sourceOld":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}