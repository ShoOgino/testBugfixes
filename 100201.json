{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","commits":[{"id":"5675b3bced0b155f0ff8001ce2e1e502be7c92f6","date":1480972317,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,String,boolean,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (fieldMatcher.test(prefix.field())) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (fieldMatcher.test(tq.getField())) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /**\n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent\n   * automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query, String field, boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field,\n          lookInSpan, preRewriteFunc)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","date":1481116359,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,String,boolean,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (fieldMatcher.test(prefix.field())) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (fieldMatcher.test(tq.getField())) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /**\n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent\n   * automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query, String field, boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field,\n          lookInSpan, preRewriteFunc)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,String,boolean,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (fieldMatcher.test(prefix.field())) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (fieldMatcher.test(tq.getField())) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /**\n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent\n   * automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query, String field, boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field,\n          lookInSpan, preRewriteFunc)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e1d94eff339f485fea1578f61a41eb374073ab","date":1488350334,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (fieldMatcher.test(prefix.field())) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (fieldMatcher.test(tq.getField())) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (fieldMatcher.test(prefix.field())) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (fieldMatcher.test(tq.getField())) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":["5675b3bced0b155f0ff8001ce2e1e502be7c92f6","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"887174d31513f1717a7902651feeb3a76fce94ec","date":1492539278,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    // TODO Lucene needs a Query visitor API!  LUCENE-3041\n\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof BoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((BoostQuery)query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanBoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanBoostQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (fieldMatcher.test(prefix.field())) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (fieldMatcher.test(tq.getField())) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (fieldMatcher.test(prefix.field())) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (fieldMatcher.test(tq.getField())) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    // TODO Lucene needs a Query visitor API!  LUCENE-3041\n\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof BoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((BoostQuery)query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanBoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanBoostQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (fieldMatcher.test(prefix.field())) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (fieldMatcher.test(tq.getField())) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (fieldMatcher.test(prefix.field())) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (fieldMatcher.test(tq.getField())) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb37680595d3fecd821eaa695beb5c9ced607584","date":1497668271,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    // TODO Lucene needs a Query visitor API!  LUCENE-3041\n\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof BoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((BoostQuery)query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanBoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanBoostQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n\n        if (aq.isAutomatonBinary() == false) { // note: is the case for WildcardQuery, RegexpQuery\n          list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n            @Override\n            public String toString() {\n              return aq.toString();\n            }\n          });\n        } else { // note: is the case for PrefixQuery, TermRangeQuery\n          // byte oriented automaton:\n          list.add(new CharacterRunAutomaton(Automata.makeEmpty()) { // empty here is bogus just to satisfy API\n            //   TODO can we get access to the aq.compiledAutomaton.runAutomaton ?\n            ByteRunAutomaton byteRunAutomaton =\n                new ByteRunAutomaton(aq.getAutomaton(), true, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n            @Override\n            public boolean run(char[] chars, int offset, int length) {\n              int state = 0;\n              final int maxIdx = offset + length;\n              for (int i = offset; i < maxIdx; i++) {\n                final int code = chars[i];\n                int b;\n                // UTF16 to UTF8   (inlined logic from UnicodeUtil.UTF16toUTF8 )\n                if (code < 0x80) {\n                  state = byteRunAutomaton.step(state, code);\n                  if (state == -1) return false;\n                } else if (code < 0x800) {\n                  b = (0xC0 | (code >> 6));\n                  state = byteRunAutomaton.step(state, b);\n                  if (state == -1) return false;\n                  b = (0x80 | (code & 0x3F));\n                  state = byteRunAutomaton.step(state, b);\n                  if (state == -1) return false;\n                } else {\n                  // more complex\n                  byte[] utf8Bytes = new byte[4 * (maxIdx - i)];\n                  int utf8Len = UnicodeUtil.UTF16toUTF8(chars, i, maxIdx - i, utf8Bytes);\n                  for (int utfIdx = 0; utfIdx < utf8Len; utfIdx++) {\n                    state = byteRunAutomaton.step(state, utf8Bytes[utfIdx] & 0xFF);\n                    if (state == -1) return false;\n                  }\n                  break;\n                }\n              }\n              return byteRunAutomaton.isAccept(state);\n            }\n\n            @Override\n            public String toString() {\n              return aq.toString();\n            }\n          });\n        }\n\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    // TODO Lucene needs a Query visitor API!  LUCENE-3041\n\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof BoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((BoostQuery)query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanBoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanBoostQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (fieldMatcher.test(prefix.field())) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (fieldMatcher.test(tq.getField())) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    // TODO Lucene needs a Query visitor API!  LUCENE-3041\n\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof BoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((BoostQuery)query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanBoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanBoostQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n\n        if (aq.isAutomatonBinary() == false) { // note: is the case for WildcardQuery, RegexpQuery\n          list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n            @Override\n            public String toString() {\n              return aq.toString();\n            }\n          });\n        } else { // note: is the case for PrefixQuery, TermRangeQuery\n          // byte oriented automaton:\n          list.add(new CharacterRunAutomaton(Automata.makeEmpty()) { // empty here is bogus just to satisfy API\n            //   TODO can we get access to the aq.compiledAutomaton.runAutomaton ?\n            ByteRunAutomaton byteRunAutomaton =\n                new ByteRunAutomaton(aq.getAutomaton(), true, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n            @Override\n            public boolean run(char[] chars, int offset, int length) {\n              int state = 0;\n              final int maxIdx = offset + length;\n              for (int i = offset; i < maxIdx; i++) {\n                final int code = chars[i];\n                int b;\n                // UTF16 to UTF8   (inlined logic from UnicodeUtil.UTF16toUTF8 )\n                if (code < 0x80) {\n                  state = byteRunAutomaton.step(state, code);\n                  if (state == -1) return false;\n                } else if (code < 0x800) {\n                  b = (0xC0 | (code >> 6));\n                  state = byteRunAutomaton.step(state, b);\n                  if (state == -1) return false;\n                  b = (0x80 | (code & 0x3F));\n                  state = byteRunAutomaton.step(state, b);\n                  if (state == -1) return false;\n                } else {\n                  // more complex\n                  byte[] utf8Bytes = new byte[4 * (maxIdx - i)];\n                  int utf8Len = UnicodeUtil.UTF16toUTF8(chars, i, maxIdx - i, utf8Bytes);\n                  for (int utfIdx = 0; utfIdx < utf8Len; utfIdx++) {\n                    state = byteRunAutomaton.step(state, utf8Bytes[utfIdx] & 0xFF);\n                    if (state == -1) return false;\n                  }\n                  break;\n                }\n              }\n              return byteRunAutomaton.isAccept(state);\n            }\n\n            @Override\n            public String toString() {\n              return aq.toString();\n            }\n          });\n        }\n\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    // TODO Lucene needs a Query visitor API!  LUCENE-3041\n\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof BoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((BoostQuery)query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanBoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanBoostQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (fieldMatcher.test(prefix.field())) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (fieldMatcher.test(tq.getField())) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    // TODO Lucene needs a Query visitor API!  LUCENE-3041\n\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof BoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((BoostQuery)query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanBoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanBoostQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n\n        if (aq.isAutomatonBinary() == false) { // note: is the case for WildcardQuery, RegexpQuery\n          list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n            @Override\n            public String toString() {\n              return aq.toString();\n            }\n          });\n        } else { // note: is the case for PrefixQuery, TermRangeQuery\n          // byte oriented automaton:\n          list.add(new CharacterRunAutomaton(Automata.makeEmpty()) { // empty here is bogus just to satisfy API\n            //   TODO can we get access to the aq.compiledAutomaton.runAutomaton ?\n            ByteRunAutomaton byteRunAutomaton =\n                new ByteRunAutomaton(aq.getAutomaton(), true, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n            @Override\n            public boolean run(char[] chars, int offset, int length) {\n              int state = 0;\n              final int maxIdx = offset + length;\n              for (int i = offset; i < maxIdx; i++) {\n                final int code = chars[i];\n                int b;\n                // UTF16 to UTF8   (inlined logic from UnicodeUtil.UTF16toUTF8 )\n                if (code < 0x80) {\n                  state = byteRunAutomaton.step(state, code);\n                  if (state == -1) return false;\n                } else if (code < 0x800) {\n                  b = (0xC0 | (code >> 6));\n                  state = byteRunAutomaton.step(state, b);\n                  if (state == -1) return false;\n                  b = (0x80 | (code & 0x3F));\n                  state = byteRunAutomaton.step(state, b);\n                  if (state == -1) return false;\n                } else {\n                  // more complex\n                  byte[] utf8Bytes = new byte[4 * (maxIdx - i)];\n                  int utf8Len = UnicodeUtil.UTF16toUTF8(chars, i, maxIdx - i, utf8Bytes);\n                  for (int utfIdx = 0; utfIdx < utf8Len; utfIdx++) {\n                    state = byteRunAutomaton.step(state, utf8Bytes[utfIdx] & 0xFF);\n                    if (state == -1) return false;\n                  }\n                  break;\n                }\n              }\n              return byteRunAutomaton.isAccept(state);\n            }\n\n            @Override\n            public String toString() {\n              return aq.toString();\n            }\n          });\n        }\n\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    // TODO Lucene needs a Query visitor API!  LUCENE-3041\n\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof BoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((BoostQuery)query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanBoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanBoostQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (fieldMatcher.test(prefix.field())) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()),\n            Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (fieldMatcher.test(tq.getField())) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n\n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n\n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n\n        @SuppressWarnings(\"deprecation\")\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n\n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n\n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n\n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62f3efc82b1ead830448bb27e2af9f89417401ea","date":1513619223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    // TODO Lucene needs a Query visitor API!  LUCENE-3041\n\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof BoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((BoostQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof FunctionScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FunctionScoreQuery) query).getWrappedQuery(), fieldMatcher,\n          lookInSpan, preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanBoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanBoostQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n\n        if (aq.isAutomatonBinary() == false) { // note: is the case for WildcardQuery, RegexpQuery\n          list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n            @Override\n            public String toString() {\n              return aq.toString();\n            }\n          });\n        } else { // note: is the case for PrefixQuery, TermRangeQuery\n          // byte oriented automaton:\n          list.add(new CharacterRunAutomaton(Automata.makeEmpty()) { // empty here is bogus just to satisfy API\n            //   TODO can we get access to the aq.compiledAutomaton.runAutomaton ?\n            ByteRunAutomaton byteRunAutomaton =\n                new ByteRunAutomaton(aq.getAutomaton(), true, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n            @Override\n            public boolean run(char[] chars, int offset, int length) {\n              int state = 0;\n              final int maxIdx = offset + length;\n              for (int i = offset; i < maxIdx; i++) {\n                final int code = chars[i];\n                int b;\n                // UTF16 to UTF8   (inlined logic from UnicodeUtil.UTF16toUTF8 )\n                if (code < 0x80) {\n                  state = byteRunAutomaton.step(state, code);\n                  if (state == -1) return false;\n                } else if (code < 0x800) {\n                  b = (0xC0 | (code >> 6));\n                  state = byteRunAutomaton.step(state, b);\n                  if (state == -1) return false;\n                  b = (0x80 | (code & 0x3F));\n                  state = byteRunAutomaton.step(state, b);\n                  if (state == -1) return false;\n                } else {\n                  // more complex\n                  byte[] utf8Bytes = new byte[4 * (maxIdx - i)];\n                  int utf8Len = UnicodeUtil.UTF16toUTF8(chars, i, maxIdx - i, utf8Bytes);\n                  for (int utfIdx = 0; utfIdx < utf8Len; utfIdx++) {\n                    state = byteRunAutomaton.step(state, utf8Bytes[utfIdx] & 0xFF);\n                    if (state == -1) return false;\n                  }\n                  break;\n                }\n              }\n              return byteRunAutomaton.isAccept(state);\n            }\n\n            @Override\n            public String toString() {\n              return aq.toString();\n            }\n          });\n        }\n\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    // TODO Lucene needs a Query visitor API!  LUCENE-3041\n\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof BoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((BoostQuery)query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanBoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanBoostQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n\n        if (aq.isAutomatonBinary() == false) { // note: is the case for WildcardQuery, RegexpQuery\n          list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n            @Override\n            public String toString() {\n              return aq.toString();\n            }\n          });\n        } else { // note: is the case for PrefixQuery, TermRangeQuery\n          // byte oriented automaton:\n          list.add(new CharacterRunAutomaton(Automata.makeEmpty()) { // empty here is bogus just to satisfy API\n            //   TODO can we get access to the aq.compiledAutomaton.runAutomaton ?\n            ByteRunAutomaton byteRunAutomaton =\n                new ByteRunAutomaton(aq.getAutomaton(), true, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n            @Override\n            public boolean run(char[] chars, int offset, int length) {\n              int state = 0;\n              final int maxIdx = offset + length;\n              for (int i = offset; i < maxIdx; i++) {\n                final int code = chars[i];\n                int b;\n                // UTF16 to UTF8   (inlined logic from UnicodeUtil.UTF16toUTF8 )\n                if (code < 0x80) {\n                  state = byteRunAutomaton.step(state, code);\n                  if (state == -1) return false;\n                } else if (code < 0x800) {\n                  b = (0xC0 | (code >> 6));\n                  state = byteRunAutomaton.step(state, b);\n                  if (state == -1) return false;\n                  b = (0x80 | (code & 0x3F));\n                  state = byteRunAutomaton.step(state, b);\n                  if (state == -1) return false;\n                } else {\n                  // more complex\n                  byte[] utf8Bytes = new byte[4 * (maxIdx - i)];\n                  int utf8Len = UnicodeUtil.UTF16toUTF8(chars, i, maxIdx - i, utf8Bytes);\n                  for (int utfIdx = 0; utfIdx < utf8Len; utfIdx++) {\n                    state = byteRunAutomaton.step(state, utf8Bytes[utfIdx] & 0xFF);\n                    if (state == -1) return false;\n                  }\n                  break;\n                }\n              }\n              return byteRunAutomaton.isAccept(state);\n            }\n\n            @Override\n            public String toString() {\n              return aq.toString();\n            }\n          });\n        }\n\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MultiTermHighlighting#extractAutomata(Query,Predicate[String],boolean,Function[Query,Collection[Query]]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Extracts MultiTermQueries that match the provided field predicate.\n   * Returns equivalent automata that will match terms.\n   */\n  public static CharacterRunAutomaton[] extractAutomata(Query query,\n                                                        Predicate<String> fieldMatcher,\n                                                        boolean lookInSpan,\n                                                        Function<Query, Collection<Query>> preRewriteFunc) {\n    // TODO Lucene needs a Query visitor API!  LUCENE-3041\n\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    Collection<Query> customSubQueries = preRewriteFunc.apply(query);\n    if (customSubQueries != null) {\n      for (Query sub : customSubQueries) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), fieldMatcher, lookInSpan, preRewriteFunc)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof BoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((BoostQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (query instanceof FunctionScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FunctionScoreQuery) query).getWrappedQuery(), fieldMatcher,\n          lookInSpan, preRewriteFunc)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, fieldMatcher, lookInSpan, preRewriteFunc)));\n      }\n    } else if (lookInSpan && query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanBoostQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanBoostQuery) query).getQuery(), fieldMatcher, lookInSpan,\n          preRewriteFunc)));\n    } else if (lookInSpan && query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(),\n          fieldMatcher, lookInSpan, preRewriteFunc)));\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fieldMatcher.test(fq.getField())) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (fieldMatcher.test(aq.getField())) {\n\n        if (aq.isAutomatonBinary() == false) { // note: is the case for WildcardQuery, RegexpQuery\n          list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n            @Override\n            public String toString() {\n              return aq.toString();\n            }\n          });\n        } else { // note: is the case for PrefixQuery, TermRangeQuery\n          // byte oriented automaton:\n          list.add(new CharacterRunAutomaton(Automata.makeEmpty()) { // empty here is bogus just to satisfy API\n            //   TODO can we get access to the aq.compiledAutomaton.runAutomaton ?\n            ByteRunAutomaton byteRunAutomaton =\n                new ByteRunAutomaton(aq.getAutomaton(), true, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n            @Override\n            public boolean run(char[] chars, int offset, int length) {\n              int state = 0;\n              final int maxIdx = offset + length;\n              for (int i = offset; i < maxIdx; i++) {\n                final int code = chars[i];\n                int b;\n                // UTF16 to UTF8   (inlined logic from UnicodeUtil.UTF16toUTF8 )\n                if (code < 0x80) {\n                  state = byteRunAutomaton.step(state, code);\n                  if (state == -1) return false;\n                } else if (code < 0x800) {\n                  b = (0xC0 | (code >> 6));\n                  state = byteRunAutomaton.step(state, b);\n                  if (state == -1) return false;\n                  b = (0x80 | (code & 0x3F));\n                  state = byteRunAutomaton.step(state, b);\n                  if (state == -1) return false;\n                } else {\n                  // more complex\n                  byte[] utf8Bytes = new byte[4 * (maxIdx - i)];\n                  int utf8Len = UnicodeUtil.UTF16toUTF8(chars, i, maxIdx - i, utf8Bytes);\n                  for (int utfIdx = 0; utfIdx < utf8Len; utfIdx++) {\n                    state = byteRunAutomaton.step(state, utf8Bytes[utfIdx] & 0xFF);\n                    if (state == -1) return false;\n                  }\n                  break;\n                }\n              }\n              return byteRunAutomaton.isAccept(state);\n            }\n\n            @Override\n            public String toString() {\n              return aq.toString();\n            }\n          });\n        }\n\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["46e1d94eff339f485fea1578f61a41eb374073ab"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5675b3bced0b155f0ff8001ce2e1e502be7c92f6"],"62f3efc82b1ead830448bb27e2af9f89417401ea":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["887174d31513f1717a7902651feeb3a76fce94ec","fb37680595d3fecd821eaa695beb5c9ced607584"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["62f3efc82b1ead830448bb27e2af9f89417401ea"],"887174d31513f1717a7902651feeb3a76fce94ec":["46e1d94eff339f485fea1578f61a41eb374073ab"],"46e1d94eff339f485fea1578f61a41eb374073ab":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb37680595d3fecd821eaa695beb5c9ced607584":["887174d31513f1717a7902651feeb3a76fce94ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","fb37680595d3fecd821eaa695beb5c9ced607584"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["46e1d94eff339f485fea1578f61a41eb374073ab","9856095f7afb5a607bf5e65077615ed91273508c"],"62f3efc82b1ead830448bb27e2af9f89417401ea":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"28288370235ed02234a64753cdbf0c6ec096304a":["62f3efc82b1ead830448bb27e2af9f89417401ea"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46e1d94eff339f485fea1578f61a41eb374073ab":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","887174d31513f1717a7902651feeb3a76fce94ec"],"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"887174d31513f1717a7902651feeb3a76fce94ec":["28288370235ed02234a64753cdbf0c6ec096304a","fb37680595d3fecd821eaa695beb5c9ced607584"],"fb37680595d3fecd821eaa695beb5c9ced607584":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","5675b3bced0b155f0ff8001ce2e1e502be7c92f6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}