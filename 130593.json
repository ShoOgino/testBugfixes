{"path":"src/java/org/apache/lucene/document/AbstractField#AbstractField(String,Field.Store,Field.Index,Field.TermVector).mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#AbstractField(String,Field.Store,Field.Index,Field.TermVector).mjava","pathOld":"/dev/null","sourceNew":"  protected AbstractField(String name, Field.Store store, Field.Index index, Field.TermVector termVector) {\r\n    if (name == null)\r\n      throw new NullPointerException(\"name cannot be null\");\r\n    this.name = name.intern();        // field names are interned\r\n\r\n    if (store == Field.Store.YES){\r\n      this.isStored = true;\r\n      this.isCompressed = false;\r\n    }\r\n    else if (store == Field.Store.COMPRESS) {\r\n      this.isStored = true;\r\n      this.isCompressed = true;\r\n    }\r\n    else if (store == Field.Store.NO){\r\n      this.isStored = false;\r\n      this.isCompressed = false;\r\n    }\r\n    else\r\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\r\n\r\n    if (index == Field.Index.NO) {\r\n      this.isIndexed = false;\r\n      this.isTokenized = false;\r\n    } else if (index == Field.Index.TOKENIZED) {\r\n      this.isIndexed = true;\r\n      this.isTokenized = true;\r\n    } else if (index == Field.Index.UN_TOKENIZED) {\r\n      this.isIndexed = true;\r\n      this.isTokenized = false;\r\n    } else if (index == Field.Index.NO_NORMS) {\r\n      this.isIndexed = true;\r\n      this.isTokenized = false;\r\n      this.omitNorms = true;\r\n    } else {\r\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\r\n    }\r\n\r\n    this.isBinary = false;\r\n\r\n    setStoreTermVector(termVector);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#AbstractField(String,Field.Store,Field.Index,Field.TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#AbstractField(String,Field.Store,Field.Index,Field.TermVector).mjava","sourceNew":"  protected AbstractField(String name, Field.Store store, Field.Index index, Field.TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    this.name = name.intern();        // field names are interned\n\n    if (store == Field.Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Field.Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Field.Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n\n    if (index == Field.Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Field.Index.TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Field.Index.UN_TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Field.Index.NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  protected AbstractField(String name, Field.Store store, Field.Index index, Field.TermVector termVector) {\r\n    if (name == null)\r\n      throw new NullPointerException(\"name cannot be null\");\r\n    this.name = name.intern();        // field names are interned\r\n\r\n    if (store == Field.Store.YES){\r\n      this.isStored = true;\r\n      this.isCompressed = false;\r\n    }\r\n    else if (store == Field.Store.COMPRESS) {\r\n      this.isStored = true;\r\n      this.isCompressed = true;\r\n    }\r\n    else if (store == Field.Store.NO){\r\n      this.isStored = false;\r\n      this.isCompressed = false;\r\n    }\r\n    else\r\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\r\n\r\n    if (index == Field.Index.NO) {\r\n      this.isIndexed = false;\r\n      this.isTokenized = false;\r\n    } else if (index == Field.Index.TOKENIZED) {\r\n      this.isIndexed = true;\r\n      this.isTokenized = true;\r\n    } else if (index == Field.Index.UN_TOKENIZED) {\r\n      this.isIndexed = true;\r\n      this.isTokenized = false;\r\n    } else if (index == Field.Index.NO_NORMS) {\r\n      this.isIndexed = true;\r\n      this.isTokenized = false;\r\n      this.omitNorms = true;\r\n    } else {\r\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\r\n    }\r\n\r\n    this.isBinary = false;\r\n\r\n    setStoreTermVector(termVector);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#AbstractField(String,Field.Store,Field.Index,Field.TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#AbstractField(String,Field.Store,Field.Index,Field.TermVector).mjava","sourceNew":"  protected AbstractField(String name, Field.Store store, Field.Index index, Field.TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    this.name = name.intern();        // field names are interned\n\n    if (store == Field.Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Field.Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Field.Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n\n    if (index == Field.Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Field.Index.ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Field.Index.NOT_ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Field.Index.NOT_ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else if (index == Field.Index.ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  protected AbstractField(String name, Field.Store store, Field.Index index, Field.TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    this.name = name.intern();        // field names are interned\n\n    if (store == Field.Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Field.Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Field.Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n\n    if (index == Field.Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Field.Index.TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Field.Index.UN_TOKENIZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Field.Index.NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf93f7a278746d4746fa3ebb3d53267b22fd040f","date":1249495506,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#AbstractField(String,Field.Store,Field.Index,Field.TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#AbstractField(String,Field.Store,Field.Index,Field.TermVector).mjava","sourceNew":"  protected AbstractField(String name, Field.Store store, Field.Index index, Field.TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    this.name = StringHelper.intern(name);        // field names are interned\n\n    if (store == Field.Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Field.Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Field.Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n\n    if (index == Field.Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Field.Index.ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Field.Index.NOT_ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Field.Index.NOT_ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else if (index == Field.Index.ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  protected AbstractField(String name, Field.Store store, Field.Index index, Field.TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    this.name = name.intern();        // field names are interned\n\n    if (store == Field.Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Field.Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Field.Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n\n    if (index == Field.Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Field.Index.ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Field.Index.NOT_ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Field.Index.NOT_ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else if (index == Field.Index.ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#AbstractField(String,Field.Store,Field.Index,Field.TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#AbstractField(String,Field.Store,Field.Index,Field.TermVector).mjava","sourceNew":"  protected AbstractField(String name, Field.Store store, Field.Index index, Field.TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    this.name = StringHelper.intern(name);        // field names are interned\n\n    if (store == Field.Store.YES){\n      this.isStored = true;\n    }\n    else if (store == Field.Store.NO){\n      this.isStored = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n\n    if (index == Field.Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Field.Index.ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Field.Index.NOT_ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Field.Index.NOT_ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else if (index == Field.Index.ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  protected AbstractField(String name, Field.Store store, Field.Index index, Field.TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    this.name = StringHelper.intern(name);        // field names are interned\n\n    if (store == Field.Store.YES){\n      this.isStored = true;\n      this.isCompressed = false;\n    }\n    else if (store == Field.Store.COMPRESS) {\n      this.isStored = true;\n      this.isCompressed = true;\n    }\n    else if (store == Field.Store.NO){\n      this.isStored = false;\n      this.isCompressed = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n\n    if (index == Field.Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Field.Index.ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Field.Index.NOT_ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Field.Index.NOT_ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else if (index == Field.Index.ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11266ec2b1f515f9811446f93995423f290c40c9","date":1256153406,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#AbstractField(String,Field.Store,Field.Index,Field.TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#AbstractField(String,Field.Store,Field.Index,Field.TermVector).mjava","sourceNew":"  protected AbstractField(String name, Field.Store store, Field.Index index, Field.TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    this.name = StringHelper.intern(name);        // field names are interned\n\n    this.isStored = store.isStored();\n    this.isIndexed = index.isIndexed();\n    this.isTokenized = index.isAnalyzed();\n    this.omitNorms = index.omitNorms();\n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  protected AbstractField(String name, Field.Store store, Field.Index index, Field.TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    this.name = StringHelper.intern(name);        // field names are interned\n\n    if (store == Field.Store.YES){\n      this.isStored = true;\n    }\n    else if (store == Field.Store.NO){\n      this.isStored = false;\n    }\n    else\n      throw new IllegalArgumentException(\"unknown store parameter \" + store);\n\n    if (index == Field.Index.NO) {\n      this.isIndexed = false;\n      this.isTokenized = false;\n    } else if (index == Field.Index.ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n    } else if (index == Field.Index.NOT_ANALYZED) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n    } else if (index == Field.Index.NOT_ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = false;\n      this.omitNorms = true;\n    } else if (index == Field.Index.ANALYZED_NO_NORMS) {\n      this.isIndexed = true;\n      this.isTokenized = true;\n      this.omitNorms = true;\n    } else {\n      throw new IllegalArgumentException(\"unknown index parameter \" + index);\n    }\n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/AbstractField#AbstractField(String,Field.Store,Field.Index,Field.TermVector).mjava","sourceNew":null,"sourceOld":"  protected AbstractField(String name, Field.Store store, Field.Index index, Field.TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    this.name = StringHelper.intern(name);        // field names are interned\n\n    this.isStored = store.isStored();\n    this.isIndexed = index.isIndexed();\n    this.isTokenized = index.isAnalyzed();\n    this.omitNorms = index.omitNorms();\n\n    this.isBinary = false;\n\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"11266ec2b1f515f9811446f93995423f290c40c9":["e0c804f7aa477229414a7e12882af490c241f64d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["2123bddbd65dea198cac380540636ce43a880403"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0c804f7aa477229414a7e12882af490c241f64d":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["11266ec2b1f515f9811446f93995423f290c40c9"]},"commit2Childs":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["e0c804f7aa477229414a7e12882af490c241f64d"],"11266ec2b1f515f9811446f93995423f290c40c9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"2123bddbd65dea198cac380540636ce43a880403":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["2123bddbd65dea198cac380540636ce43a880403"],"e0c804f7aa477229414a7e12882af490c241f64d":["11266ec2b1f515f9811446f93995423f290c40c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}