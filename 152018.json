{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testEqualsHashcode().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testEqualsHashcode().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testEqualsHashcode().mjava","sourceNew":"  public void testEqualsHashcode() {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n    \n    query.setBoost(1.0f);\n    Query other = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n    other.setBoost(1.0f);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other.setBoost(2.0f);\n    assertFalse(\"Different boost queries are not equal\", query.equals(other));\n\n    other = TermRangeQuery.newStringRange(\"notcontent\", \"A\", \"C\", true, true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = TermRangeQuery.newStringRange(\"content\", \"X\", \"C\", true, true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = TermRangeQuery.newStringRange(\"content\", \"A\", \"Z\", true, true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = TermRangeQuery.newStringRange(\"content\", null, \"C\", true, true);\n    other = TermRangeQuery.newStringRange(\"content\", null, \"C\", true, true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = TermRangeQuery.newStringRange(\"content\", \"C\", null, true, true);\n    other = TermRangeQuery.newStringRange(\"content\", \"C\", null, true, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = TermRangeQuery.newStringRange(\"content\", null, \"C\", true, true);\n    other = TermRangeQuery.newStringRange(\"content\", \"C\", null, true, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", false, false);\n    other = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n  }\n\n","sourceOld":"  public void testEqualsHashcode() {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n    \n    query.setBoost(1.0f);\n    Query other = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n    other.setBoost(1.0f);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other.setBoost(2.0f);\n    assertFalse(\"Different boost queries are not equal\", query.equals(other));\n\n    other = TermRangeQuery.newStringRange(\"notcontent\", \"A\", \"C\", true, true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = TermRangeQuery.newStringRange(\"content\", \"X\", \"C\", true, true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = TermRangeQuery.newStringRange(\"content\", \"A\", \"Z\", true, true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = TermRangeQuery.newStringRange(\"content\", null, \"C\", true, true);\n    other = TermRangeQuery.newStringRange(\"content\", null, \"C\", true, true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = TermRangeQuery.newStringRange(\"content\", \"C\", null, true, true);\n    other = TermRangeQuery.newStringRange(\"content\", \"C\", null, true, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = TermRangeQuery.newStringRange(\"content\", null, \"C\", true, true);\n    other = TermRangeQuery.newStringRange(\"content\", \"C\", null, true, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", false, false);\n    other = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testEqualsHashcode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testEqualsHashcode().mjava","sourceNew":"  public void testEqualsHashcode() {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n    \n    Query other = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other = TermRangeQuery.newStringRange(\"notcontent\", \"A\", \"C\", true, true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = TermRangeQuery.newStringRange(\"content\", \"X\", \"C\", true, true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = TermRangeQuery.newStringRange(\"content\", \"A\", \"Z\", true, true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = TermRangeQuery.newStringRange(\"content\", null, \"C\", true, true);\n    other = TermRangeQuery.newStringRange(\"content\", null, \"C\", true, true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = TermRangeQuery.newStringRange(\"content\", \"C\", null, true, true);\n    other = TermRangeQuery.newStringRange(\"content\", \"C\", null, true, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = TermRangeQuery.newStringRange(\"content\", null, \"C\", true, true);\n    other = TermRangeQuery.newStringRange(\"content\", \"C\", null, true, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", false, false);\n    other = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n  }\n\n","sourceOld":"  public void testEqualsHashcode() {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n    \n    query.setBoost(1.0f);\n    Query other = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n    other.setBoost(1.0f);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other.setBoost(2.0f);\n    assertFalse(\"Different boost queries are not equal\", query.equals(other));\n\n    other = TermRangeQuery.newStringRange(\"notcontent\", \"A\", \"C\", true, true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = TermRangeQuery.newStringRange(\"content\", \"X\", \"C\", true, true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = TermRangeQuery.newStringRange(\"content\", \"A\", \"Z\", true, true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = TermRangeQuery.newStringRange(\"content\", null, \"C\", true, true);\n    other = TermRangeQuery.newStringRange(\"content\", null, \"C\", true, true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = TermRangeQuery.newStringRange(\"content\", \"C\", null, true, true);\n    other = TermRangeQuery.newStringRange(\"content\", \"C\", null, true, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = TermRangeQuery.newStringRange(\"content\", null, \"C\", true, true);\n    other = TermRangeQuery.newStringRange(\"content\", \"C\", null, true, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", false, false);\n    other = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}