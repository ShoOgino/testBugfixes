{"path":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNot(int[],int,int[],int,int[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNot(int[],int,int[],int,int[]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SortedIntDocSet#andNot(int[],int,int[],int,int[]).mjava","sourceNew":"    /** puts the intersection of a and not b into the target array and returns the size */\n  public static int andNot(int a[], int lena, int b[], int lenb, int[] target) {\n    if (lena==0) return 0;\n    if (lenb==0) {\n      System.arraycopy(a,0,target,0,lena);\n      return lena;\n    }\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((lenb>>3) >= lena) {\n      return andNotBinarySearch(a, lena, b, lenb, target);\n    }\n\n    int count=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      if (doca > docb) {\n        if (++j >= lenb) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        target[count++] = doca;\n        if (++i >= lena) break;\n        doca=a[i];\n      } else {\n        if (++i >= lena) break;\n        doca=a[i];\n        if (++j >= lenb) break;\n        docb=b[j];\n      }\n    }\n\n    int leftover=lena - i;\n\n    if (leftover > 0) {\n      System.arraycopy(a,i,target,count,leftover);\n      count += leftover;\n    }\n\n    return count;\n  }\n\n","sourceOld":"    /** puts the intersection of a and not b into the target array and returns the size */\n  public static int andNot(int a[], int lena, int b[], int lenb, int[] target) {\n    if (lena==0) return 0;\n    if (lenb==0) {\n      System.arraycopy(a,0,target,0,lena);\n      return lena;\n    }\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((lenb>>3) >= lena) {\n      return andNotBinarySearch(a, lena, b, lenb, target);\n    }\n\n    int count=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      if (doca > docb) {\n        if (++j >= lenb) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        target[count++] = doca;\n        if (++i >= lena) break;\n        doca=a[i];\n      } else {\n        if (++i >= lena) break;\n        doca=a[i];\n        if (++j >= lenb) break;\n        docb=b[j];\n      }\n    }\n\n    int leftover=lena - i;\n\n    if (leftover > 0) {\n      System.arraycopy(a,i,target,count,leftover);\n      count += leftover;\n    }\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNot(int[],int,int[],int,int[]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SortedIntDocSet#andNot(int[],int,int[],int,int[]).mjava","sourceNew":"    /** puts the intersection of a and not b into the target array and returns the size */\n  public static int andNot(int a[], int lena, int b[], int lenb, int[] target) {\n    if (lena==0) return 0;\n    if (lenb==0) {\n      System.arraycopy(a,0,target,0,lena);\n      return lena;\n    }\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((lenb>>3) >= lena) {\n      return andNotBinarySearch(a, lena, b, lenb, target);\n    }\n\n    int count=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      if (doca > docb) {\n        if (++j >= lenb) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        target[count++] = doca;\n        if (++i >= lena) break;\n        doca=a[i];\n      } else {\n        if (++i >= lena) break;\n        doca=a[i];\n        if (++j >= lenb) break;\n        docb=b[j];\n      }\n    }\n\n    int leftover=lena - i;\n\n    if (leftover > 0) {\n      System.arraycopy(a,i,target,count,leftover);\n      count += leftover;\n    }\n\n    return count;\n  }\n\n","sourceOld":"    /** puts the intersection of a and not b into the target array and returns the size */\n  public static int andNot(int a[], int lena, int b[], int lenb, int[] target) {\n    if (lena==0) return 0;\n    if (lenb==0) {\n      System.arraycopy(a,0,target,0,lena);\n      return lena;\n    }\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((lenb>>3) >= lena) {\n      return andNotBinarySearch(a, lena, b, lenb, target);\n    }\n\n    int count=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      if (doca > docb) {\n        if (++j >= lenb) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        target[count++] = doca;\n        if (++i >= lena) break;\n        doca=a[i];\n      } else {\n        if (++i >= lena) break;\n        doca=a[i];\n        if (++j >= lenb) break;\n        docb=b[j];\n      }\n    }\n\n    int leftover=lena - i;\n\n    if (leftover > 0) {\n      System.arraycopy(a,i,target,count,leftover);\n      count += leftover;\n    }\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNot(int[],int,int[],int,int[]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SortedIntDocSet#andNot(int[],int,int[],int,int[]).mjava","sourceNew":"    /** puts the intersection of a and not b into the target array and returns the size */\n  public static int andNot(int a[], int lena, int b[], int lenb, int[] target) {\n    if (lena==0) return 0;\n    if (lenb==0) {\n      System.arraycopy(a,0,target,0,lena);\n      return lena;\n    }\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((lenb>>3) >= lena) {\n      return andNotBinarySearch(a, lena, b, lenb, target);\n    }\n\n    int count=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      if (doca > docb) {\n        if (++j >= lenb) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        target[count++] = doca;\n        if (++i >= lena) break;\n        doca=a[i];\n      } else {\n        if (++i >= lena) break;\n        doca=a[i];\n        if (++j >= lenb) break;\n        docb=b[j];\n      }\n    }\n\n    int leftover=lena - i;\n\n    if (leftover > 0) {\n      System.arraycopy(a,i,target,count,leftover);\n      count += leftover;\n    }\n\n    return count;\n  }\n\n","sourceOld":"    /** puts the intersection of a and not b into the target array and returns the size */\n  public static int andNot(int a[], int lena, int b[], int lenb, int[] target) {\n    if (lena==0) return 0;\n    if (lenb==0) {\n      System.arraycopy(a,0,target,0,lena);\n      return lena;\n    }\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((lenb>>3) >= lena) {\n      return andNotBinarySearch(a, lena, b, lenb, target);\n    }\n\n    int count=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      if (doca > docb) {\n        if (++j >= lenb) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        target[count++] = doca;\n        if (++i >= lena) break;\n        doca=a[i];\n      } else {\n        if (++i >= lena) break;\n        doca=a[i];\n        if (++j >= lenb) break;\n        docb=b[j];\n      }\n    }\n\n    int leftover=lena - i;\n\n    if (leftover > 0) {\n      System.arraycopy(a,i,target,count,leftover);\n      count += leftover;\n    }\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNot(int[],int,int[],int,int[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNot(int[],int,int[],int,int[]).mjava","sourceNew":"    /** puts the intersection of a and not b into the target array and returns the size */\n  public static int andNot(int a[], int lena, int b[], int lenb, int[] target) {\n    if (lena==0) return 0;\n    if (lenb==0) {\n      System.arraycopy(a,0,target,0,lena);\n      return lena;\n    }\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((lenb>>3) >= lena) {\n      return andNotBinarySearch(a, lena, b, lenb, target);\n    }\n\n    int count=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      if (doca > docb) {\n        if (++j >= lenb) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        target[count++] = doca;\n        if (++i >= lena) break;\n        doca=a[i];\n      } else {\n        if (++i >= lena) break;\n        doca=a[i];\n        if (++j >= lenb) break;\n        docb=b[j];\n      }\n    }\n\n    int leftover=lena - i;\n\n    if (leftover > 0) {\n      System.arraycopy(a,i,target,count,leftover);\n      count += leftover;\n    }\n\n    return count;\n  }\n\n","sourceOld":"    /** puts the intersection of a and not b into the target array and returns the size */\n  public static int andNot(int a[], int lena, int b[], int lenb, int[] target) {\n    if (lena==0) return 0;\n    if (lenb==0) {\n      System.arraycopy(a,0,target,0,lena);\n      return lena;\n    }\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((lenb>>3) >= lena) {\n      return andNotBinarySearch(a, lena, b, lenb, target);\n    }\n\n    int count=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      if (doca > docb) {\n        if (++j >= lenb) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        target[count++] = doca;\n        if (++i >= lena) break;\n        doca=a[i];\n      } else {\n        if (++i >= lena) break;\n        doca=a[i];\n        if (++j >= lenb) break;\n        docb=b[j];\n      }\n    }\n\n    int leftover=lena - i;\n\n    if (leftover > 0) {\n      System.arraycopy(a,i,target,count,leftover);\n      count += leftover;\n    }\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNot(int[],int,int[],int,int[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SortedIntDocSet#andNot(int[],int,int[],int,int[]).mjava","sourceNew":"    /** puts the intersection of a and not b into the target array and returns the size */\n  public static int andNot(int a[], int lena, int b[], int lenb, int[] target) {\n    if (lena==0) return 0;\n    if (lenb==0) {\n      System.arraycopy(a,0,target,0,lena);\n      return lena;\n    }\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((lenb>>3) >= lena) {\n      return andNotBinarySearch(a, lena, b, lenb, target);\n    }\n\n    int count=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      if (doca > docb) {\n        if (++j >= lenb) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        target[count++] = doca;\n        if (++i >= lena) break;\n        doca=a[i];\n      } else {\n        if (++i >= lena) break;\n        doca=a[i];\n        if (++j >= lenb) break;\n        docb=b[j];\n      }\n    }\n\n    int leftover=lena - i;\n\n    if (leftover > 0) {\n      System.arraycopy(a,i,target,count,leftover);\n      count += leftover;\n    }\n\n    return count;\n  }\n\n","sourceOld":"    /** puts the intersection of a and not b into the target array and returns the size */\n  public static int andNot(int a[], int lena, int b[], int lenb, int[] target) {\n    if (lena==0) return 0;\n    if (lenb==0) {\n      System.arraycopy(a,0,target,0,lena);\n      return lena;\n    }\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((lenb>>3) >= lena) {\n      return andNotBinarySearch(a, lena, b, lenb, target);\n    }\n\n    int count=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      if (doca > docb) {\n        if (++j >= lenb) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        target[count++] = doca;\n        if (++i >= lena) break;\n        doca=a[i];\n      } else {\n        if (++i >= lena) break;\n        doca=a[i];\n        if (++j >= lenb) break;\n        docb=b[j];\n      }\n    }\n\n    int leftover=lena - i;\n\n    if (leftover > 0) {\n      System.arraycopy(a,i,target,count,leftover);\n      count += leftover;\n    }\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}