{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#randomAnalyzer().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#randomAnalyzer().mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#randomAnalyzer().mjava","sourceNew":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(3)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true);\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(3)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true);\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"864042e09edf94aeba885c1835408c3f88ca2325","date":1365514091,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#randomAnalyzer().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#randomAnalyzer().mjava","sourceNew":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader);\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(3)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true);\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#randomAnalyzer().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#randomAnalyzer().mjava","sourceNew":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader);\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader);\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#randomAnalyzer().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#randomAnalyzer().mjava","sourceNew":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer();\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader);\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#randomAnalyzer().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#randomAnalyzer().mjava","sourceNew":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer();\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer();\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#randomAnalyzer().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#randomAnalyzer().mjava","sourceNew":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer();\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer();\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["864042e09edf94aeba885c1835408c3f88ca2325"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["761333d77c7f29123c00c93b107b743f32f012e6"],"864042e09edf94aeba885c1835408c3f88ca2325":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["864042e09edf94aeba885c1835408c3f88ca2325"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"761333d77c7f29123c00c93b107b743f32f012e6":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"864042e09edf94aeba885c1835408c3f88ca2325":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}