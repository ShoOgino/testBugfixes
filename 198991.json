{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","sourceNew":"  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    final long max = collectionStats.maxDoc();\n    float idf = 0.0f;\n    final Explanation exp = new Explanation();\n    exp.setDescription(\"idf(), sum of:\");\n    for (final TermStatistics stat : termStats ) {\n      final long df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      exp.addDetail(new Explanation(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    exp.setValue(idf);\n    return exp;\n  }\n\n","sourceOld":"  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    final long max = collectionStats.maxDoc();\n    float idf = 0.0f;\n    final Explanation exp = new Explanation();\n    exp.setDescription(\"idf(), sum of:\");\n    for (final TermStatistics stat : termStats ) {\n      final long df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      exp.addDetail(new Explanation(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    exp.setValue(idf);\n    return exp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"035bfd1088cdad8e71e315033daf330d0cd95923","date":1348092980,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    final long max = collectionStats.maxDoc();\n    float idf = 0.0f;\n    final Explanation exp = new Explanation();\n    exp.setDescription(\"idf(), sum of:\");\n    for (final TermStatistics stat : termStats ) {\n      final long df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      exp.addDetail(new Explanation(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    exp.setValue(idf);\n    return exp;\n  }\n\n","sourceOld":"  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    final long max = collectionStats.maxDoc();\n    float idf = 0.0f;\n    final Explanation exp = new Explanation();\n    exp.setDescription(\"idf(), sum of:\");\n    for (final TermStatistics stat : termStats ) {\n      final long df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      exp.addDetail(new Explanation(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    exp.setValue(idf);\n    return exp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    final long max = collectionStats.maxDoc();\n    float idf = 0.0f;\n    List<Explanation> details = new ArrayList<>();\n    for (final TermStatistics stat : termStats ) {\n      final long df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      details.add(Explanation.match(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    return Explanation.match(idf, \"idf(), sum of:\", details);\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    final long max = collectionStats.maxDoc();\n    float idf = 0.0f;\n    final Explanation exp = new Explanation();\n    exp.setDescription(\"idf(), sum of:\");\n    for (final TermStatistics stat : termStats ) {\n      final long df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      exp.addDetail(new Explanation(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    exp.setValue(idf);\n    return exp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a259cdf9917ec38c8a812cc053f533b6e697a4a","date":1439487435,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    final long docCount = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n    float idf = 0.0f;\n    List<Explanation> details = new ArrayList<>();\n    for (final TermStatistics stat : termStats ) {\n      final long df = stat.docFreq();\n      final float termIdf = idf(df, docCount);\n      details.add(Explanation.match(termIdf, \"idf(docFreq=\" + df + \", docCount=\" + docCount + \")\"));\n      idf += termIdf;\n    }\n    return Explanation.match(idf, \"idf(), sum of:\", details);\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    final long max = collectionStats.maxDoc();\n    float idf = 0.0f;\n    List<Explanation> details = new ArrayList<>();\n    for (final TermStatistics stat : termStats ) {\n      final long df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      details.add(Explanation.match(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    return Explanation.match(idf, \"idf(), sum of:\", details);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"665c23854e5ad5caf7ea153341d7d24e5dffbc4a","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    double idf = 0d; // sum into a double before casting into a float\n    List<Explanation> details = new ArrayList<>();\n    for (final TermStatistics stat : termStats ) {\n      Explanation idfExplain = idfExplain(collectionStats, stat);\n      details.add(idfExplain);\n      idf += idfExplain.getValue();\n    }\n    return Explanation.match((float) idf, \"idf(), sum of:\", details);\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    final long docCount = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n    float idf = 0.0f;\n    List<Explanation> details = new ArrayList<>();\n    for (final TermStatistics stat : termStats ) {\n      final long df = stat.docFreq();\n      final float termIdf = idf(df, docCount);\n      details.add(Explanation.match(termIdf, \"idf(docFreq=\" + df + \", docCount=\" + docCount + \")\"));\n      idf += termIdf;\n    }\n    return Explanation.match(idf, \"idf(), sum of:\", details);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    double idf = 0d; // sum into a double before casting into a float\n    List<Explanation> details = new ArrayList<>();\n    for (final TermStatistics stat : termStats ) {\n      Explanation idfExplain = idfExplain(collectionStats, stat);\n      details.add(idfExplain);\n      idf += idfExplain.getValue();\n    }\n    return Explanation.match((float) idf, \"idf(), sum of:\", details);\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    final long docCount = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n    float idf = 0.0f;\n    List<Explanation> details = new ArrayList<>();\n    for (final TermStatistics stat : termStats ) {\n      final long df = stat.docFreq();\n      final float termIdf = idf(df, docCount);\n      details.add(Explanation.match(termIdf, \"idf(docFreq=\" + df + \", docCount=\" + docCount + \")\"));\n      idf += termIdf;\n    }\n    return Explanation.match(idf, \"idf(), sum of:\", details);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    double idf = 0d; // sum into a double before casting into a float\n    List<Explanation> details = new ArrayList<>();\n    for (final TermStatistics stat : termStats ) {\n      Explanation idfExplain = idfExplain(collectionStats, stat);\n      details.add(idfExplain);\n      idf += idfExplain.getValue();\n    }\n    return Explanation.match((float) idf, \"idf, sum of:\", details);\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    double idf = 0d; // sum into a double before casting into a float\n    List<Explanation> details = new ArrayList<>();\n    for (final TermStatistics stat : termStats ) {\n      Explanation idfExplain = idfExplain(collectionStats, stat);\n      details.add(idfExplain);\n      idf += idfExplain.getValue();\n    }\n    return Explanation.match((float) idf, \"idf(), sum of:\", details);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    double idf = 0d; // sum into a double before casting into a float\n    List<Explanation> details = new ArrayList<>();\n    for (final TermStatistics stat : termStats ) {\n      Explanation idfExplain = idfExplain(collectionStats, stat);\n      details.add(idfExplain);\n      idf += idfExplain.getValue().floatValue();\n    }\n    return Explanation.match((float) idf, \"idf, sum of:\", details);\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    double idf = 0d; // sum into a double before casting into a float\n    List<Explanation> details = new ArrayList<>();\n    for (final TermStatistics stat : termStats ) {\n      Explanation idfExplain = idfExplain(collectionStats, stat);\n      details.add(idfExplain);\n      idf += idfExplain.getValue();\n    }\n    return Explanation.match((float) idf, \"idf, sum of:\", details);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["665c23854e5ad5caf7ea153341d7d24e5dffbc4a"],"5a259cdf9917ec38c8a812cc053f533b6e697a4a":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"035bfd1088cdad8e71e315033daf330d0cd95923":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"665c23854e5ad5caf7ea153341d7d24e5dffbc4a":["5a259cdf9917ec38c8a812cc053f533b6e697a4a"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["5a259cdf9917ec38c8a812cc053f533b6e697a4a","665c23854e5ad5caf7ea153341d7d24e5dffbc4a"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["035bfd1088cdad8e71e315033daf330d0cd95923"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"]},"commit2Childs":{"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"5a259cdf9917ec38c8a812cc053f533b6e697a4a":["665c23854e5ad5caf7ea153341d7d24e5dffbc4a","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"035bfd1088cdad8e71e315033daf330d0cd95923":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["035bfd1088cdad8e71e315033daf330d0cd95923"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"665c23854e5ad5caf7ea153341d7d24e5dffbc4a":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["5a259cdf9917ec38c8a812cc053f533b6e697a4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}