{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ShuffleStream#ShuffleStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"11e5446472f245825b6f1cc220252acaab5990cf","date":1491429444,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ShuffleStream#ShuffleStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ShuffleStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ShuffleStream#ShuffleStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ShuffleStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11e5446472f245825b6f1cc220252acaab5990cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11e5446472f245825b6f1cc220252acaab5990cf"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"11e5446472f245825b6f1cc220252acaab5990cf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","11e5446472f245825b6f1cc220252acaab5990cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}