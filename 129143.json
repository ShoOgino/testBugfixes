{"path":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n      Assert.assertTrue(\"Explanation of [[\"+d+\"]] for #\"+ doc + \n                        \" does not indicate match: \" + exp.toString(), \n                        exp.isMatch());\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n      Assert.assertTrue(\"Explanation of [[\"+d+\"]] for #\"+ doc + \n                        \" does not indicate match: \" + exp.toString(), \n                        exp.isMatch());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n      Assert.assertTrue(\"Explanation of [[\"+d+\"]] for #\"+ doc + \n                        \" does not indicate match: \" + exp.toString(), \n                        exp.isMatch());\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n      Assert.assertTrue(\"Explanation of [[\"+d+\"]] for #\"+ doc + \n                        \" does not indicate match: \" + exp.toString(), \n                        exp.isMatch());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n      Assert.assertTrue(\"Explanation of [[\"+d+\"]] for #\"+ doc + \n                        \" does not indicate match: \" + exp.toString(), \n                        exp.isMatch());\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n      Assert.assertTrue(\"Explanation of [[\"+d+\"]] for #\"+ doc + \n                        \" does not indicate match: \" + exp.toString(), \n                        exp.isMatch());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n      assertTrue(\"Explanation of [[\"+d+\"]] for #\"+ doc +\n                      \" does not indicate match: \" + exp.toString(),\n              exp.isMatch());\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n      Assert.assertTrue(\"Explanation of [[\"+d+\"]] for #\"+ doc + \n                        \" does not indicate match: \" + exp.toString(), \n                        exp.isMatch());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}