{"path":"lucene/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","commits":[{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","pathOld":"/dev/null","sourceNew":"    // Returns true if first is < second\n    @SuppressWarnings(\"unchecked\")\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","pathOld":"/dev/null","sourceNew":"    // Returns true if first is < second\n    @SuppressWarnings(\"unchecked\")\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","sourceNew":"    // Returns true if first is < second\n    @SuppressWarnings(\"unchecked\")\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","sourceOld":"    // Returns true if first is < second\n    @SuppressWarnings(\"unchecked\")\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}