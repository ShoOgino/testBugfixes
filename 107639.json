{"path":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#getCachedComparator(SortField,IndexSearcher).mjava","commits":[{"id":"35d59689803f4ad27f96148bb7c7167e373c6770","date":1454297137,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#getCachedComparator(SortField,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(SortField,IndexSearcher).mjava","sourceNew":"  Comparator<ShardDoc> getCachedComparator(SortField sortField, IndexSearcher searcher) {\n    SortField.Type type = sortField.getType();\n    if (type == SortField.Type.SCORE) {\n      return comparatorScore();\n    } else if (type == SortField.Type.REWRITEABLE) {\n      try {\n        sortField = sortField.rewrite(searcher);\n      } catch (IOException e) {\n        throw new SolrException(SERVER_ERROR, \"Exception rewriting sort field \" + sortField, e);\n      }\n    }\n    return comparatorFieldComparator(sortField);\n  }\n\n","sourceOld":"  Comparator<ShardDoc> getCachedComparator(SortField sortField, IndexSearcher searcher) {\n    SortField.Type type = sortField.getType();\n    if (type == SortField.Type.SCORE) {\n      return comparatorScore();\n    } else if (type == SortField.Type.REWRITEABLE) {\n      try {\n        sortField = sortField.rewrite(searcher);\n      } catch (IOException e) {\n        throw new SolrException(SERVER_ERROR, \"Exception rewriting sort field \" + sortField, e);\n      }\n    }\n    return comparatorFieldComparator(sortField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#getCachedComparator(SortField,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(SortField,IndexSearcher).mjava","sourceNew":"  Comparator<ShardDoc> getCachedComparator(SortField sortField, IndexSearcher searcher) {\n    SortField.Type type = sortField.getType();\n    if (type == SortField.Type.SCORE) {\n      return comparatorScore();\n    } else if (type == SortField.Type.REWRITEABLE) {\n      try {\n        sortField = sortField.rewrite(searcher);\n      } catch (IOException e) {\n        throw new SolrException(SERVER_ERROR, \"Exception rewriting sort field \" + sortField, e);\n      }\n    }\n    return comparatorFieldComparator(sortField);\n  }\n\n","sourceOld":"  Comparator<ShardDoc> getCachedComparator(SortField sortField, IndexSearcher searcher) {\n    SortField.Type type = sortField.getType();\n    if (type == SortField.Type.SCORE) {\n      return comparatorScore();\n    } else if (type == SortField.Type.REWRITEABLE) {\n      try {\n        sortField = sortField.rewrite(searcher);\n      } catch (IOException e) {\n        throw new SolrException(SERVER_ERROR, \"Exception rewriting sort field \" + sortField, e);\n      }\n    }\n    return comparatorFieldComparator(sortField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#getCachedComparator(SortField,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#getCachedComparator(SortField,IndexSearcher).mjava","sourceNew":"  Comparator<ShardDoc> getCachedComparator(SortField sortField, IndexSearcher searcher) {\n    SortField.Type type = sortField.getType();\n    if (type == SortField.Type.SCORE) {\n      return (o1, o2) -> {\n        final float f1 = o1.score;\n        final float f2 = o2.score;\n        if (f1 < f2)\n          return -1;\n        if (f1 > f2)\n          return 1;\n        return 0;\n      };\n    } else if (type == SortField.Type.REWRITEABLE) {\n      try {\n        sortField = sortField.rewrite(searcher);\n      } catch (IOException e) {\n        throw new SolrException(SERVER_ERROR, \"Exception rewriting sort field \" + sortField, e);\n      }\n    }\n    return comparatorFieldComparator(sortField);\n  }\n\n","sourceOld":"  Comparator<ShardDoc> getCachedComparator(SortField sortField, IndexSearcher searcher) {\n    SortField.Type type = sortField.getType();\n    if (type == SortField.Type.SCORE) {\n      return comparatorScore();\n    } else if (type == SortField.Type.REWRITEABLE) {\n      try {\n        sortField = sortField.rewrite(searcher);\n      } catch (IOException e) {\n        throw new SolrException(SERVER_ERROR, \"Exception rewriting sort field \" + sortField, e);\n      }\n    }\n    return comparatorFieldComparator(sortField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","35d59689803f4ad27f96148bb7c7167e373c6770"],"35d59689803f4ad27f96148bb7c7167e373c6770":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a0c04b71951333291abc7f317109a6a5957bd28":["35d59689803f4ad27f96148bb7c7167e373c6770"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a0c04b71951333291abc7f317109a6a5957bd28"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","35d59689803f4ad27f96148bb7c7167e373c6770"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"35d59689803f4ad27f96148bb7c7167e373c6770":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","3a0c04b71951333291abc7f317109a6a5957bd28"],"3a0c04b71951333291abc7f317109a6a5957bd28":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}