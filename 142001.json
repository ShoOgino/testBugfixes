{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MannWhitneyUEvaluator#doWork(Object...).mjava","commits":[{"id":"a38c901cd0538c91e3e523c24487e70a9fe74d1f","date":1514488466,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MannWhitneyUEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    List<double[]> mannWhitneyUInput = Arrays.stream(values)\n        .map(value -> ((List<Number>) value).stream().mapToDouble(Number::doubleValue).toArray())\n        .collect(Collectors.toList());\n    if(mannWhitneyUInput.size() == 2) {\n      MannWhitneyUTest mannwhitneyutest = new MannWhitneyUTest();\n      double u = mannwhitneyutest.mannWhitneyU(mannWhitneyUInput.get(0), mannWhitneyUInput.get(1));\n      double p = mannwhitneyutest.mannWhitneyUTest(mannWhitneyUInput.get(0), mannWhitneyUInput.get(1));\n      Map<String,Number> m = new HashMap<>();\n      m.put(\"u-statistic\", u);\n      m.put(\"p-value\", p);\n      return new Tuple(m);\n    }else{\n      throw new IOException(String.format(Locale.ROOT,\"%s(...) only works with a list of 2 arrays but a list of %d array(s) was provided.\", constructingFactory.getFunctionName(getClass()), mannWhitneyUInput.size()));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MannWhitneyUEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MannWhitneyUEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    @SuppressWarnings({\"unchecked\"})\n    List<double[]> mannWhitneyUInput = Arrays.stream(values)\n        .map(value -> ((List<Number>) value).stream().mapToDouble(Number::doubleValue).toArray())\n        .collect(Collectors.toList());\n    if(mannWhitneyUInput.size() == 2) {\n      MannWhitneyUTest mannwhitneyutest = new MannWhitneyUTest();\n      double u = mannwhitneyutest.mannWhitneyU(mannWhitneyUInput.get(0), mannWhitneyUInput.get(1));\n      double p = mannwhitneyutest.mannWhitneyUTest(mannWhitneyUInput.get(0), mannWhitneyUInput.get(1));\n      Map<String,Number> m = new HashMap<>();\n      m.put(\"u-statistic\", u);\n      m.put(\"p-value\", p);\n      return new Tuple(m);\n    }else{\n      throw new IOException(String.format(Locale.ROOT,\"%s(...) only works with a list of 2 arrays but a list of %d array(s) was provided.\", constructingFactory.getFunctionName(getClass()), mannWhitneyUInput.size()));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    List<double[]> mannWhitneyUInput = Arrays.stream(values)\n        .map(value -> ((List<Number>) value).stream().mapToDouble(Number::doubleValue).toArray())\n        .collect(Collectors.toList());\n    if(mannWhitneyUInput.size() == 2) {\n      MannWhitneyUTest mannwhitneyutest = new MannWhitneyUTest();\n      double u = mannwhitneyutest.mannWhitneyU(mannWhitneyUInput.get(0), mannWhitneyUInput.get(1));\n      double p = mannwhitneyutest.mannWhitneyUTest(mannWhitneyUInput.get(0), mannWhitneyUInput.get(1));\n      Map<String,Number> m = new HashMap<>();\n      m.put(\"u-statistic\", u);\n      m.put(\"p-value\", p);\n      return new Tuple(m);\n    }else{\n      throw new IOException(String.format(Locale.ROOT,\"%s(...) only works with a list of 2 arrays but a list of %d array(s) was provided.\", constructingFactory.getFunctionName(getClass()), mannWhitneyUInput.size()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MannWhitneyUEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MannWhitneyUEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    @SuppressWarnings({\"unchecked\"})\n    List<double[]> mannWhitneyUInput = Arrays.stream(values)\n        .map(value -> ((List<Number>) value).stream().mapToDouble(Number::doubleValue).toArray())\n        .collect(Collectors.toList());\n    if(mannWhitneyUInput.size() == 2) {\n      MannWhitneyUTest mannwhitneyutest = new MannWhitneyUTest();\n      double u = mannwhitneyutest.mannWhitneyU(mannWhitneyUInput.get(0), mannWhitneyUInput.get(1));\n      double p = mannwhitneyutest.mannWhitneyUTest(mannWhitneyUInput.get(0), mannWhitneyUInput.get(1));\n      Tuple tuple = new Tuple();\n      tuple.put(\"u-statistic\", u);\n      tuple.put(StreamParams.P_VALUE, p);\n      return tuple;\n    }else{\n      throw new IOException(String.format(Locale.ROOT,\"%s(...) only works with a list of 2 arrays but a list of %d array(s) was provided.\", constructingFactory.getFunctionName(getClass()), mannWhitneyUInput.size()));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    @SuppressWarnings({\"unchecked\"})\n    List<double[]> mannWhitneyUInput = Arrays.stream(values)\n        .map(value -> ((List<Number>) value).stream().mapToDouble(Number::doubleValue).toArray())\n        .collect(Collectors.toList());\n    if(mannWhitneyUInput.size() == 2) {\n      MannWhitneyUTest mannwhitneyutest = new MannWhitneyUTest();\n      double u = mannwhitneyutest.mannWhitneyU(mannWhitneyUInput.get(0), mannWhitneyUInput.get(1));\n      double p = mannwhitneyutest.mannWhitneyUTest(mannWhitneyUInput.get(0), mannWhitneyUInput.get(1));\n      Map<String,Number> m = new HashMap<>();\n      m.put(\"u-statistic\", u);\n      m.put(\"p-value\", p);\n      return new Tuple(m);\n    }else{\n      throw new IOException(String.format(Locale.ROOT,\"%s(...) only works with a list of 2 arrays but a list of %d array(s) was provided.\", constructingFactory.getFunctionName(getClass()), mannWhitneyUInput.size()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["a38c901cd0538c91e3e523c24487e70a9fe74d1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a38c901cd0538c91e3e523c24487e70a9fe74d1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"804a8d5358fe7b7563b85ee7838714d720b89272":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["804a8d5358fe7b7563b85ee7838714d720b89272"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a38c901cd0538c91e3e523c24487e70a9fe74d1f"],"a38c901cd0538c91e3e523c24487e70a9fe74d1f":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}