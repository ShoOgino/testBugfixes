{"path":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","commits":[{"id":"6509c8bbcf8f92ba1ecfaccea085eac1d5c4754e","date":1360007824,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","pathOld":"/dev/null","sourceNew":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","pathOld":"/dev/null","sourceNew":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","sourceNew":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.shutdown();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","sourceNew":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.shutdown();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","sourceNew":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046","date":1417033646,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","sourceNew":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","sourceNew":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","sourceNew":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(i, multi.nextDoc());\n      assertEquals(i, single.nextDoc());\n      assertEquals(single.longValue(), multi.longValue());\n    }\n    testRandomAdvance(merged.getNumericDocValues(\"numbers\"), MultiDocValues.getNumericValues(ir, \"numbers\"));\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["14b133bc4d7193efff507eb88f86fcc07c4e8b50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","sourceNew":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(i, multi.nextDoc());\n      assertEquals(i, single.nextDoc());\n      assertEquals(single.longValue(), multi.longValue());\n    }\n    testRandomAdvance(merged.getNumericDocValues(\"numbers\"), MultiDocValues.getNumericValues(ir, \"numbers\"));\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","sourceNew":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(i, multi.nextDoc());\n      assertEquals(i, single.nextDoc());\n      assertEquals(single.longValue(), multi.longValue());\n    }\n    testRandomAdvance(merged.getNumericDocValues(\"numbers\"), MultiDocValues.getNumericValues(ir, \"numbers\"));\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14b133bc4d7193efff507eb88f86fcc07c4e8b50","date":1477907694,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","sourceNew":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(i, multi.nextDoc());\n      assertEquals(i, single.nextDoc());\n      assertEquals(single.longValue(), multi.longValue());\n    }\n    testRandomAdvance(merged.getNumericDocValues(\"numbers\"), MultiDocValues.getNumericValues(ir, \"numbers\"));\n    testRandomAdvanceExact(merged.getNumericDocValues(\"numbers\"), MultiDocValues.getNumericValues(ir, \"numbers\"), merged.maxDoc());\n\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(i, multi.nextDoc());\n      assertEquals(i, single.nextDoc());\n      assertEquals(single.longValue(), multi.longValue());\n    }\n    testRandomAdvance(merged.getNumericDocValues(\"numbers\"), MultiDocValues.getNumericValues(ir, \"numbers\"));\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNumerics().mjava","sourceNew":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(i, multi.nextDoc());\n      assertEquals(i, single.nextDoc());\n      assertEquals(single.longValue(), multi.longValue());\n    }\n    testRandomAdvance(merged.getNumericDocValues(\"numbers\"), MultiDocValues.getNumericValues(ir, \"numbers\"));\n    testRandomAdvanceExact(merged.getNumericDocValues(\"numbers\"), MultiDocValues.getNumericValues(ir, \"numbers\"), merged.maxDoc());\n\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumerics() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new NumericDocValuesField(\"numbers\", 0);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      field.setLongValue(random().nextLong());\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    NumericDocValues multi = MultiDocValues.getNumericValues(ir, \"numbers\");\n    NumericDocValues single = merged.getNumericDocValues(\"numbers\");\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(i, multi.nextDoc());\n      assertEquals(i, single.nextDoc());\n      assertEquals(single.longValue(), multi.longValue());\n    }\n    testRandomAdvance(merged.getNumericDocValues(\"numbers\"), MultiDocValues.getNumericValues(ir, \"numbers\"));\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"320888923ec13b91f53082558f01f4c9960dd226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","14b133bc4d7193efff507eb88f86fcc07c4e8b50"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046"],"6509c8bbcf8f92ba1ecfaccea085eac1d5c4754e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6509c8bbcf8f92ba1ecfaccea085eac1d5c4754e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"14b133bc4d7193efff507eb88f86fcc07c4e8b50":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14b133bc4d7193efff507eb88f86fcc07c4e8b50"]},"commit2Childs":{"320888923ec13b91f53082558f01f4c9960dd226":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["320888923ec13b91f53082558f01f4c9960dd226"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6509c8bbcf8f92ba1ecfaccea085eac1d5c4754e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","14b133bc4d7193efff507eb88f86fcc07c4e8b50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6509c8bbcf8f92ba1ecfaccea085eac1d5c4754e","d4d69c535930b5cce125cff868d40f6373dc27d4"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"14b133bc4d7193efff507eb88f86fcc07c4e8b50":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}