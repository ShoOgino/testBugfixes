{"path":"src/test/org/apache/solr/update/DocumentBuilderTest#testBuildDocument().mjava","commits":[{"id":"ee4f075a5b1a77c2fb5eb752bdedabf6497aaf9b","date":1182321983,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DocumentBuilderTest#testBuildDocument().mjava","pathOld":"/dev/null","sourceNew":"  public void testBuildDocument() throws Exception \n  {\n    SolrCore core = SolrCore.getSolrCore();\n    \n    // undefined field\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"unknown field\", 12345 );\n      DocumentBuilder.toDocument( doc, core.getSchema() );\n      fail( \"should throw an error\" );\n    }\n    catch( SolrException ex ) {\n      assertEquals( \"should be bad request\", 400, ex.code() );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebb24ab555aab7c4dd5d2264c06a4f19fb217913","date":1183353562,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DocumentBuilderTest#testBuildDocument().mjava","pathOld":"src/test/org/apache/solr/update/DocumentBuilderTest#testBuildDocument().mjava","sourceNew":"  public void testBuildDocument() throws Exception \n  {\n    SolrCore core = SolrCore.getSolrCore();\n    \n    // undefined field\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"unknown field\", 12345, null );\n      DocumentBuilder.toDocument( doc, core.getSchema() );\n      fail( \"should throw an error\" );\n    }\n    catch( SolrException ex ) {\n      assertEquals( \"should be bad request\", 400, ex.code() );\n    }\n  }\n\n","sourceOld":"  public void testBuildDocument() throws Exception \n  {\n    SolrCore core = SolrCore.getSolrCore();\n    \n    // undefined field\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"unknown field\", 12345 );\n      DocumentBuilder.toDocument( doc, core.getSchema() );\n      fail( \"should throw an error\" );\n    }\n    catch( SolrException ex ) {\n      assertEquals( \"should be bad request\", 400, ex.code() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a51897f565610bcb8cd260561430de517d3de46","date":1183391823,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DocumentBuilderTest#testBuildDocument().mjava","pathOld":"src/test/org/apache/solr/update/DocumentBuilderTest#testBuildDocument().mjava","sourceNew":"  public void testBuildDocument() throws Exception \n  {\n    SolrCore core = SolrCore.getSolrCore();\n    \n    // undefined field\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"unknown field\", 12345, 1.0f );\n      DocumentBuilder.toDocument( doc, core.getSchema() );\n      fail( \"should throw an error\" );\n    }\n    catch( SolrException ex ) {\n      assertEquals( \"should be bad request\", 400, ex.code() );\n    }\n  }\n\n","sourceOld":"  public void testBuildDocument() throws Exception \n  {\n    SolrCore core = SolrCore.getSolrCore();\n    \n    // undefined field\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"unknown field\", 12345, null );\n      DocumentBuilder.toDocument( doc, core.getSchema() );\n      fail( \"should throw an error\" );\n    }\n    catch( SolrException ex ) {\n      assertEquals( \"should be bad request\", 400, ex.code() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DocumentBuilderTest#testBuildDocument().mjava","pathOld":"src/test/org/apache/solr/update/DocumentBuilderTest#testBuildDocument().mjava","sourceNew":"  public void testBuildDocument() throws Exception \n  {\n    SolrCore core = h.getCore();\n    \n    // undefined field\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"unknown field\", 12345, 1.0f );\n      DocumentBuilder.toDocument( doc, core.getSchema() );\n      fail( \"should throw an error\" );\n    }\n    catch( SolrException ex ) {\n      assertEquals( \"should be bad request\", 400, ex.code() );\n    }\n  }\n\n","sourceOld":"  public void testBuildDocument() throws Exception \n  {\n    SolrCore core = SolrCore.getSolrCore();\n    \n    // undefined field\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"unknown field\", 12345, 1.0f );\n      DocumentBuilder.toDocument( doc, core.getSchema() );\n      fail( \"should throw an error\" );\n    }\n    catch( SolrException ex ) {\n      assertEquals( \"should be bad request\", 400, ex.code() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/DocumentBuilderTest#testBuildDocument().mjava","pathOld":"src/test/org/apache/solr/update/DocumentBuilderTest#testBuildDocument().mjava","sourceNew":"  public void testBuildDocument() throws Exception \n  {\n    SolrCore core = h.getCore();\n    \n    // undefined field\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"unknown field\", 12345, 1.0f );\n      DocumentBuilder.toDocument( doc, core.getSchema() );\n      fail( \"should throw an error\" );\n    }\n    catch( SolrException ex ) {\n      assertEquals( \"should be bad request\", 400, ex.code() );\n    }\n  }\n\n","sourceOld":"  public void testBuildDocument() throws Exception \n  {\n    SolrCore core = h.getCore();\n    \n    // undefined field\n    try {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"unknown field\", 12345, 1.0f );\n      DocumentBuilder.toDocument( doc, core.getSchema() );\n      fail( \"should throw an error\" );\n    }\n    catch( SolrException ex ) {\n      assertEquals( \"should be bad request\", 400, ex.code() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["9a51897f565610bcb8cd260561430de517d3de46"],"ee4f075a5b1a77c2fb5eb752bdedabf6497aaf9b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["ee4f075a5b1a77c2fb5eb752bdedabf6497aaf9b"],"9a51897f565610bcb8cd260561430de517d3de46":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["ad94625fb8d088209f46650c8097196fec67f00c"],"ee4f075a5b1a77c2fb5eb752bdedabf6497aaf9b":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["9a51897f565610bcb8cd260561430de517d3de46"],"9a51897f565610bcb8cd260561430de517d3de46":["6d6338c87060be5f66757a94945975f3bbd377a9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ee4f075a5b1a77c2fb5eb752bdedabf6497aaf9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}