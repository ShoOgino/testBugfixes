{"path":"solr/test-framework/src/java/org/apache/solr/analysis/MockTokenFilterFactory#MockTokenFilterFactory(Map[String,String]).mjava","commits":[{"id":"9b4b4d68085809ae840a099e4620e5a128509279","date":1365633379,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/analysis/MockTokenFilterFactory#MockTokenFilterFactory(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a new MockTokenizerFactory */\n  public MockTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    String stopset = get(args, \"stopset\", Arrays.asList(\"english\", \"empty\"), null, false);\n    String stopregex = get(args, \"stopregex\");\n    if (null != stopset) {\n      if (null != stopregex) {\n        throw new IllegalArgumentException(\"Parameters stopset and stopregex cannot both be specified.\");\n      }\n      if (\"english\".equalsIgnoreCase(stopset)) {\n        filter = MockTokenFilter.ENGLISH_STOPSET;\n      } else { // must be \"empty\"\n        filter = MockTokenFilter.EMPTY_STOPSET;\n      }\n    } else if (null != stopregex) {\n      RegExp regex = new RegExp(stopregex);\n      filter = new CharacterRunAutomaton(regex.toAutomaton());\n    } else {\n      throw new IllegalArgumentException\n          (\"Configuration Error: either the 'stopset' or the 'stopregex' parameter must be specified.\");\n    }\n    enablePositionIncrements = getBoolean(args, \"enablePositionIncrements\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"192e49c0445803405b0bc0eebc8b758485480c21","date":1367699151,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/analysis/MockTokenFilterFactory#MockTokenFilterFactory(Map[String,String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/analysis/MockTokenFilterFactory#MockTokenFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new MockTokenizerFactory */\n  public MockTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    String stopset = get(args, \"stopset\", Arrays.asList(\"english\", \"empty\"), null, false);\n    String stopregex = get(args, \"stopregex\");\n    if (null != stopset) {\n      if (null != stopregex) {\n        throw new IllegalArgumentException(\"Parameters stopset and stopregex cannot both be specified.\");\n      }\n      if (\"english\".equalsIgnoreCase(stopset)) {\n        filter = MockTokenFilter.ENGLISH_STOPSET;\n      } else { // must be \"empty\"\n        filter = MockTokenFilter.EMPTY_STOPSET;\n      }\n    } else if (null != stopregex) {\n      RegExp regex = new RegExp(stopregex);\n      filter = new CharacterRunAutomaton(regex.toAutomaton());\n    } else {\n      throw new IllegalArgumentException\n          (\"Configuration Error: either the 'stopset' or the 'stopregex' parameter must be specified.\");\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new MockTokenizerFactory */\n  public MockTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    String stopset = get(args, \"stopset\", Arrays.asList(\"english\", \"empty\"), null, false);\n    String stopregex = get(args, \"stopregex\");\n    if (null != stopset) {\n      if (null != stopregex) {\n        throw new IllegalArgumentException(\"Parameters stopset and stopregex cannot both be specified.\");\n      }\n      if (\"english\".equalsIgnoreCase(stopset)) {\n        filter = MockTokenFilter.ENGLISH_STOPSET;\n      } else { // must be \"empty\"\n        filter = MockTokenFilter.EMPTY_STOPSET;\n      }\n    } else if (null != stopregex) {\n      RegExp regex = new RegExp(stopregex);\n      filter = new CharacterRunAutomaton(regex.toAutomaton());\n    } else {\n      throw new IllegalArgumentException\n          (\"Configuration Error: either the 'stopset' or the 'stopregex' parameter must be specified.\");\n    }\n    enablePositionIncrements = getBoolean(args, \"enablePositionIncrements\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/analysis/MockTokenFilterFactory#MockTokenFilterFactory(Map[String,String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/analysis/MockTokenFilterFactory#MockTokenFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new MockTokenizerFactory */\n  public MockTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    String stopset = get(args, \"stopset\", Arrays.asList(\"english\", \"empty\"), null, false);\n    String stopregex = get(args, \"stopregex\");\n    if (null != stopset) {\n      if (null != stopregex) {\n        throw new IllegalArgumentException(\"Parameters stopset and stopregex cannot both be specified.\");\n      }\n      if (\"english\".equalsIgnoreCase(stopset)) {\n        filter = MockTokenFilter.ENGLISH_STOPSET;\n      } else { // must be \"empty\"\n        filter = MockTokenFilter.EMPTY_STOPSET;\n      }\n    } else if (null != stopregex) {\n      RegExp regex = new RegExp(stopregex);\n      filter = new CharacterRunAutomaton(regex.toLightAutomaton());\n    } else {\n      throw new IllegalArgumentException\n          (\"Configuration Error: either the 'stopset' or the 'stopregex' parameter must be specified.\");\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new MockTokenizerFactory */\n  public MockTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    String stopset = get(args, \"stopset\", Arrays.asList(\"english\", \"empty\"), null, false);\n    String stopregex = get(args, \"stopregex\");\n    if (null != stopset) {\n      if (null != stopregex) {\n        throw new IllegalArgumentException(\"Parameters stopset and stopregex cannot both be specified.\");\n      }\n      if (\"english\".equalsIgnoreCase(stopset)) {\n        filter = MockTokenFilter.ENGLISH_STOPSET;\n      } else { // must be \"empty\"\n        filter = MockTokenFilter.EMPTY_STOPSET;\n      }\n    } else if (null != stopregex) {\n      RegExp regex = new RegExp(stopregex);\n      filter = new CharacterRunAutomaton(regex.toAutomaton());\n    } else {\n      throw new IllegalArgumentException\n          (\"Configuration Error: either the 'stopset' or the 'stopregex' parameter must be specified.\");\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/analysis/MockTokenFilterFactory#MockTokenFilterFactory(Map[String,String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/analysis/MockTokenFilterFactory#MockTokenFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new MockTokenizerFactory */\n  public MockTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    String stopset = get(args, \"stopset\", Arrays.asList(\"english\", \"empty\"), null, false);\n    String stopregex = get(args, \"stopregex\");\n    if (null != stopset) {\n      if (null != stopregex) {\n        throw new IllegalArgumentException(\"Parameters stopset and stopregex cannot both be specified.\");\n      }\n      if (\"english\".equalsIgnoreCase(stopset)) {\n        filter = MockTokenFilter.ENGLISH_STOPSET;\n      } else { // must be \"empty\"\n        filter = MockTokenFilter.EMPTY_STOPSET;\n      }\n    } else if (null != stopregex) {\n      RegExp regex = new RegExp(stopregex);\n      filter = new CharacterRunAutomaton(regex.toAutomaton());\n    } else {\n      throw new IllegalArgumentException\n          (\"Configuration Error: either the 'stopset' or the 'stopregex' parameter must be specified.\");\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new MockTokenizerFactory */\n  public MockTokenFilterFactory(Map<String, String> args) {\n    super(args);\n    String stopset = get(args, \"stopset\", Arrays.asList(\"english\", \"empty\"), null, false);\n    String stopregex = get(args, \"stopregex\");\n    if (null != stopset) {\n      if (null != stopregex) {\n        throw new IllegalArgumentException(\"Parameters stopset and stopregex cannot both be specified.\");\n      }\n      if (\"english\".equalsIgnoreCase(stopset)) {\n        filter = MockTokenFilter.ENGLISH_STOPSET;\n      } else { // must be \"empty\"\n        filter = MockTokenFilter.EMPTY_STOPSET;\n      }\n    } else if (null != stopregex) {\n      RegExp regex = new RegExp(stopregex);\n      filter = new CharacterRunAutomaton(regex.toLightAutomaton());\n    } else {\n      throw new IllegalArgumentException\n          (\"Configuration Error: either the 'stopset' or the 'stopregex' parameter must be specified.\");\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"192e49c0445803405b0bc0eebc8b758485480c21":["9b4b4d68085809ae840a099e4620e5a128509279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"9b4b4d68085809ae840a099e4620e5a128509279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["192e49c0445803405b0bc0eebc8b758485480c21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["192e49c0445803405b0bc0eebc8b758485480c21"]},"commit2Childs":{"192e49c0445803405b0bc0eebc8b758485480c21":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b4b4d68085809ae840a099e4620e5a128509279"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"9b4b4d68085809ae840a099e4620e5a128509279":["192e49c0445803405b0bc0eebc8b758485480c21"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}