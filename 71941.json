{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String]).mjava","commits":[{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection ({}) without cores.\", collectionName);\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of {} on collection {} is higher than the number of Solr instances currently live or live and part of your {}({}). {}\"\n            , totalNumReplicas\n            , collectionName\n            , OverseerCollectionMessageHandler.CREATE_NODE_SET\n            , nodeList.size()\n            , \"It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,CloudConfig,DocCollection,ZkNodeProps,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState, CloudConfig cloudConfig,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection ({}) without cores.\", collectionName);\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of {} on collection {} is higher than the number of Solr instances currently live or live and part of your {}({}). {}\"\n            , totalNumReplicas\n            , collectionName\n            , OverseerCollectionMessageHandler.CREATE_NODE_SET\n            , nodeList.size()\n            , \"It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, cloudConfig, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection ({}) without cores.\", collectionName);\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of {} on collection {} is higher than the number of Solr instances currently live or live and part of your {}({}). {}\"\n            , totalNumReplicas\n            , collectionName\n            , OverseerCollectionMessageHandler.CREATE_NODE_SET\n            , nodeList.size()\n            , \"It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    }\n    return replicaPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,CloudConfig,DocCollection,ZkNodeProps,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection ({}) without cores.\", collectionName);\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of {} on collection {} is higher than the number of Solr instances currently live or live and part of your {}({}). {}\"\n            , totalNumReplicas\n            , collectionName\n            , OverseerCollectionMessageHandler.CREATE_NODE_SET\n            , nodeList.size()\n            , \"It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState, CloudConfig cloudConfig,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection ({}) without cores.\", collectionName);\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of {} on collection {} is higher than the number of Solr instances currently live or live and part of your {}({}). {}\"\n            , totalNumReplicas\n            , collectionName\n            , OverseerCollectionMessageHandler.CREATE_NODE_SET\n            , nodeList.size()\n            , \"It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, cloudConfig, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    }\n    return replicaPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5d9700b23e8e9b11b845fcecef89dbdf21373d9","date":1600294231,"type":3,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection ({}) without cores.\", collectionName);\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of {} on collection {} is higher than the number of Solr instances currently live or live and part of your {}({}). {}\"\n            , totalNumReplicas\n            , collectionName\n            , OverseerCollectionMessageHandler.CREATE_NODE_SET\n            , nodeList.size()\n            , \"It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategy assignStrategy = Assign.createAssignStrategy(cloudManager, clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection ({}) without cores.\", collectionName);\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of {} on collection {} is higher than the number of Solr instances currently live or live and part of your {}({}). {}\"\n            , totalNumReplicas\n            , collectionName\n            , OverseerCollectionMessageHandler.CREATE_NODE_SET\n            , nodeList.size()\n            , \"It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    }\n    return replicaPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65352f844eb9e9a677ec4eb2abced4404f08181d","date":1600297608,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection ({}) without cores.\", collectionName);\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of {} on collection {} is higher than the number of Solr instances currently live or live and part of your {}({}). {}\"\n            , totalNumReplicas\n            , collectionName\n            , OverseerCollectionMessageHandler.CREATE_NODE_SET\n            , nodeList.size()\n            , \"It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategy assignStrategy = Assign.createAssignStrategy(cloudManager, clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection ({}) without cores.\", collectionName);\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of {} on collection {} is higher than the number of Solr instances currently live or live and part of your {}({}). {}\"\n            , totalNumReplicas\n            , collectionName\n            , OverseerCollectionMessageHandler.CREATE_NODE_SET\n            , nodeList.size()\n            , \"It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    }\n    return replicaPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["e7b17e79a71117668ecbf8d3417c876e41396565"],"c526352db87264a72a7a9ad68c1b769b81e54305":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65352f844eb9e9a677ec4eb2abced4404f08181d":["e7b17e79a71117668ecbf8d3417c876e41396565","f5d9700b23e8e9b11b845fcecef89dbdf21373d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65352f844eb9e9a677ec4eb2abced4404f08181d"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["f5d9700b23e8e9b11b845fcecef89dbdf21373d9","65352f844eb9e9a677ec4eb2abced4404f08181d"],"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"3f504512a03d978990cbff30db0522b354e846db":["c526352db87264a72a7a9ad68c1b769b81e54305"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f504512a03d978990cbff30db0522b354e846db"],"65352f844eb9e9a677ec4eb2abced4404f08181d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}