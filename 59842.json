{"path":"solr/core/src/test/org/apache/solr/legacy/TestNumericTokenStream#testLongStream().mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericTokenStream#testLongStream().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testLongStream().mjava","sourceNew":"  public void testLongStream() throws Exception {\n    @SuppressWarnings(\"resource\")\n    final LegacyNumericTokenStream stream=new LegacyNumericTokenStream().setLongValue(lvalue);\n    final TermToBytesRefAttribute bytesAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    assertNotNull(bytesAtt);\n    final TypeAttribute typeAtt = stream.getAttribute(TypeAttribute.class);\n    assertNotNull(typeAtt);\n    final LegacyNumericTokenStream.LegacyNumericTermAttribute numericAtt = stream.getAttribute(LegacyNumericTokenStream.LegacyNumericTermAttribute.class);\n    assertNotNull(numericAtt);\n    stream.reset();\n    assertEquals(64, numericAtt.getValueSize());\n    for (int shift=0; shift<64; shift+= LegacyNumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Shift value wrong\", shift, numericAtt.getShift());\n      assertEquals(\"Term is incorrectly encoded\", lvalue & ~((1L << shift) - 1L), LegacyNumericUtils.prefixCodedToLong(bytesAtt.getBytesRef()));\n      assertEquals(\"Term raw value is incorrectly encoded\", lvalue & ~((1L << shift) - 1L), numericAtt.getRawValue());\n      assertEquals(\"Type incorrect\", (shift == 0) ? LegacyNumericTokenStream.TOKEN_TYPE_FULL_PREC : LegacyNumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"More tokens available\", stream.incrementToken());\n    stream.end();\n    stream.close();\n  }\n\n","sourceOld":"  public void testLongStream() throws Exception {\n    @SuppressWarnings(\"resource\")\n    final LegacyNumericTokenStream stream=new LegacyNumericTokenStream().setLongValue(lvalue);\n    final TermToBytesRefAttribute bytesAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    assertNotNull(bytesAtt);\n    final TypeAttribute typeAtt = stream.getAttribute(TypeAttribute.class);\n    assertNotNull(typeAtt);\n    final LegacyNumericTokenStream.LegacyNumericTermAttribute numericAtt = stream.getAttribute(LegacyNumericTokenStream.LegacyNumericTermAttribute.class);\n    assertNotNull(numericAtt);\n    stream.reset();\n    assertEquals(64, numericAtt.getValueSize());\n    for (int shift=0; shift<64; shift+= LegacyNumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Shift value wrong\", shift, numericAtt.getShift());\n      assertEquals(\"Term is incorrectly encoded\", lvalue & ~((1L << shift) - 1L), LegacyNumericUtils.prefixCodedToLong(bytesAtt.getBytesRef()));\n      assertEquals(\"Term raw value is incorrectly encoded\", lvalue & ~((1L << shift) - 1L), numericAtt.getRawValue());\n      assertEquals(\"Type incorrect\", (shift == 0) ? LegacyNumericTokenStream.TOKEN_TYPE_FULL_PREC : LegacyNumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"More tokens available\", stream.incrementToken());\n    stream.end();\n    stream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericTokenStream#testLongStream().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testLongStream().mjava","sourceNew":"  public void testLongStream() throws Exception {\n    @SuppressWarnings(\"resource\")\n    final LegacyNumericTokenStream stream=new LegacyNumericTokenStream().setLongValue(lvalue);\n    final TermToBytesRefAttribute bytesAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    assertNotNull(bytesAtt);\n    final TypeAttribute typeAtt = stream.getAttribute(TypeAttribute.class);\n    assertNotNull(typeAtt);\n    final LegacyNumericTokenStream.LegacyNumericTermAttribute numericAtt = stream.getAttribute(LegacyNumericTokenStream.LegacyNumericTermAttribute.class);\n    assertNotNull(numericAtt);\n    stream.reset();\n    assertEquals(64, numericAtt.getValueSize());\n    for (int shift=0; shift<64; shift+= LegacyNumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Shift value wrong\", shift, numericAtt.getShift());\n      assertEquals(\"Term is incorrectly encoded\", lvalue & ~((1L << shift) - 1L), LegacyNumericUtils.prefixCodedToLong(bytesAtt.getBytesRef()));\n      assertEquals(\"Term raw value is incorrectly encoded\", lvalue & ~((1L << shift) - 1L), numericAtt.getRawValue());\n      assertEquals(\"Type incorrect\", (shift == 0) ? LegacyNumericTokenStream.TOKEN_TYPE_FULL_PREC : LegacyNumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"More tokens available\", stream.incrementToken());\n    stream.end();\n    stream.close();\n  }\n\n","sourceOld":"  public void testLongStream() throws Exception {\n    @SuppressWarnings(\"resource\")\n    final LegacyNumericTokenStream stream=new LegacyNumericTokenStream().setLongValue(lvalue);\n    final TermToBytesRefAttribute bytesAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    assertNotNull(bytesAtt);\n    final TypeAttribute typeAtt = stream.getAttribute(TypeAttribute.class);\n    assertNotNull(typeAtt);\n    final LegacyNumericTokenStream.LegacyNumericTermAttribute numericAtt = stream.getAttribute(LegacyNumericTokenStream.LegacyNumericTermAttribute.class);\n    assertNotNull(numericAtt);\n    stream.reset();\n    assertEquals(64, numericAtt.getValueSize());\n    for (int shift=0; shift<64; shift+= LegacyNumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Shift value wrong\", shift, numericAtt.getShift());\n      assertEquals(\"Term is incorrectly encoded\", lvalue & ~((1L << shift) - 1L), LegacyNumericUtils.prefixCodedToLong(bytesAtt.getBytesRef()));\n      assertEquals(\"Term raw value is incorrectly encoded\", lvalue & ~((1L << shift) - 1L), numericAtt.getRawValue());\n      assertEquals(\"Type incorrect\", (shift == 0) ? LegacyNumericTokenStream.TOKEN_TYPE_FULL_PREC : LegacyNumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"More tokens available\", stream.incrementToken());\n    stream.end();\n    stream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericTokenStream#testLongStream().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericTokenStream#testLongStream().mjava","sourceNew":"  public void testLongStream() throws Exception {\n    @SuppressWarnings(\"resource\")\n    final LegacyNumericTokenStream stream=new LegacyNumericTokenStream().setLongValue(lvalue);\n    final TermToBytesRefAttribute bytesAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    assertNotNull(bytesAtt);\n    final TypeAttribute typeAtt = stream.getAttribute(TypeAttribute.class);\n    assertNotNull(typeAtt);\n    final LegacyNumericTokenStream.LegacyNumericTermAttribute numericAtt = stream.getAttribute(LegacyNumericTokenStream.LegacyNumericTermAttribute.class);\n    assertNotNull(numericAtt);\n    stream.reset();\n    assertEquals(64, numericAtt.getValueSize());\n    for (int shift=0; shift<64; shift+= LegacyNumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Shift value wrong\", shift, numericAtt.getShift());\n      assertEquals(\"Term is incorrectly encoded\", lvalue & ~((1L << shift) - 1L), LegacyNumericUtils.prefixCodedToLong(bytesAtt.getBytesRef()));\n      assertEquals(\"Term raw value is incorrectly encoded\", lvalue & ~((1L << shift) - 1L), numericAtt.getRawValue());\n      assertEquals(\"Type incorrect\", (shift == 0) ? LegacyNumericTokenStream.TOKEN_TYPE_FULL_PREC : LegacyNumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"More tokens available\", stream.incrementToken());\n    stream.end();\n    stream.close();\n  }\n\n","sourceOld":"  public void testLongStream() throws Exception {\n    @SuppressWarnings(\"resource\")\n    final LegacyNumericTokenStream stream=new LegacyNumericTokenStream().setLongValue(lvalue);\n    final TermToBytesRefAttribute bytesAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    assertNotNull(bytesAtt);\n    final TypeAttribute typeAtt = stream.getAttribute(TypeAttribute.class);\n    assertNotNull(typeAtt);\n    final LegacyNumericTokenStream.LegacyNumericTermAttribute numericAtt = stream.getAttribute(LegacyNumericTokenStream.LegacyNumericTermAttribute.class);\n    assertNotNull(numericAtt);\n    stream.reset();\n    assertEquals(64, numericAtt.getValueSize());\n    for (int shift=0; shift<64; shift+= LegacyNumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Shift value wrong\", shift, numericAtt.getShift());\n      assertEquals(\"Term is incorrectly encoded\", lvalue & ~((1L << shift) - 1L), LegacyNumericUtils.prefixCodedToLong(bytesAtt.getBytesRef()));\n      assertEquals(\"Term raw value is incorrectly encoded\", lvalue & ~((1L << shift) - 1L), numericAtt.getRawValue());\n      assertEquals(\"Type incorrect\", (shift == 0) ? LegacyNumericTokenStream.TOKEN_TYPE_FULL_PREC : LegacyNumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"More tokens available\", stream.incrementToken());\n    stream.end();\n    stream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}