{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleStats(String,String,String,List[Pair[String,String]],List[Map.Entry[String,Class]]).mjava","commits":[{"id":"d9fe3175bbaa122d67f736a75c2984617c502cc0","date":1490722938,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleStats(String,String,String,List[Pair[String,String]],List[Map.Entry[String,Class]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleStats(String,String,String,List[Pair[String,String]]).mjava","sourceNew":"  private TupleStream handleStats(String zk,\n                                  String collection,\n                                  String query,\n                                  List<Pair<String, String>> metricPairs,\n                                  List<Map.Entry<String, Class>> fields) {\n\n\n    Map<String, Class> fmap = new HashMap();\n    for(Map.Entry<String, Class> entry : fields) {\n      fmap.put(entry.getKey(), entry.getValue());\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n    Metric[] metrics = buildMetrics(metricPairs, false).toArray(new Metric[0]);\n\n    for(Metric metric : metrics) {\n      Class c = fmap.get(metric.getIdentifier());\n      if(Long.class.equals(c)) {\n        metric.outputLong = true;\n      }\n    }\n\n    return new StatsStream(zk, collection, solrParams, metrics);\n  }\n\n","sourceOld":"  private TupleStream handleStats(String zk,\n                                  String collection,\n                                  String query,\n                                  List<Pair<String, String>> metricPairs) {\n\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n    Metric[] metrics = buildMetrics(metricPairs, false).toArray(new Metric[0]);\n    return new StatsStream(zk, collection, solrParams, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b741b54c163686a5fd077895a797daa9b0b95f","date":1490873946,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleStats(String,String,String,List[Pair[String,String]],List[Map.Entry[String,Class]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleStats(String,String,String,List[Pair[String,String]]).mjava","sourceNew":"  private TupleStream handleStats(String zk,\n                                  String collection,\n                                  String query,\n                                  List<Pair<String, String>> metricPairs,\n                                  List<Map.Entry<String, Class>> fields) {\n\n\n    Map<String, Class> fmap = new HashMap();\n    for(Map.Entry<String, Class> entry : fields) {\n      fmap.put(entry.getKey(), entry.getValue());\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n    Metric[] metrics = buildMetrics(metricPairs, false).toArray(new Metric[0]);\n\n    for(Metric metric : metrics) {\n      Class c = fmap.get(metric.getIdentifier());\n      if(Long.class.equals(c)) {\n        metric.outputLong = true;\n      }\n    }\n\n    return new StatsStream(zk, collection, solrParams, metrics);\n  }\n\n","sourceOld":"  private TupleStream handleStats(String zk,\n                                  String collection,\n                                  String query,\n                                  List<Pair<String, String>> metricPairs) {\n\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n    Metric[] metrics = buildMetrics(metricPairs, false).toArray(new Metric[0]);\n    return new StatsStream(zk, collection, solrParams, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleStats(String,String,String,List[Pair[String,String]],List[Map.Entry[String,Class]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleStats(String,String,String,List[Pair[String,String]],List[Map.Entry[String,Class]]).mjava","sourceNew":"  private TupleStream handleStats(String zk,\n                                  String collection,\n                                  String query,\n                                  List<Pair<String, String>> metricPairs,\n                                  List<Map.Entry<String, Class>> fields) {\n\n    Map<String, Class> fmap = new HashMap();\n    for(Map.Entry<String, Class> entry : fields) {\n      fmap.put(entry.getKey(), entry.getValue());\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n    Metric[] metrics = buildMetrics(metricPairs, false).toArray(new Metric[0]);\n\n    for(Metric metric : metrics) {\n      Class c = fmap.get(metric.getIdentifier());\n      if(Long.class.equals(c)) {\n        metric.outputLong = true;\n      }\n    }\n\n    return new StatsStream(zk, collection, solrParams, metrics);\n  }\n\n","sourceOld":"  private TupleStream handleStats(String zk,\n                                  String collection,\n                                  String query,\n                                  List<Pair<String, String>> metricPairs,\n                                  List<Map.Entry<String, Class>> fields) {\n\n\n    Map<String, Class> fmap = new HashMap();\n    for(Map.Entry<String, Class> entry : fields) {\n      fmap.put(entry.getKey(), entry.getValue());\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n    Metric[] metrics = buildMetrics(metricPairs, false).toArray(new Metric[0]);\n\n    for(Metric metric : metrics) {\n      Class c = fmap.get(metric.getIdentifier());\n      if(Long.class.equals(c)) {\n        metric.outputLong = true;\n      }\n    }\n\n    return new StatsStream(zk, collection, solrParams, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleStats(String,String,String,List[Pair[String,String]],List[Map.Entry[String,Class]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleStats(String,String,String,List[Pair[String,String]],List[Map.Entry[String,Class]]).mjava","sourceNew":"  private TupleStream handleStats(String zk,\n                                  String collection,\n                                  String query,\n                                  List<Pair<String, String>> metricPairs,\n                                  List<Map.Entry<String, Class>> fields) {\n\n\n    Map<String, Class> fmap = new HashMap();\n    for(Map.Entry<String, Class> entry : fields) {\n      fmap.put(entry.getKey(), entry.getValue());\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n    Metric[] metrics = buildMetrics(metricPairs, false).toArray(new Metric[0]);\n\n    for(Metric metric : metrics) {\n      Class c = fmap.get(metric.getIdentifier());\n      if(Long.class.equals(c)) {\n        metric.outputLong = true;\n      }\n    }\n\n    return new StatsStream(zk, collection, solrParams, metrics);\n  }\n\n","sourceOld":"  private TupleStream handleStats(String zk,\n                                  String collection,\n                                  String query,\n                                  List<Pair<String, String>> metricPairs,\n                                  List<Map.Entry<String, Class>> fields) {\n\n    Map<String, Class> fmap = new HashMap();\n    for(Map.Entry<String, Class> entry : fields) {\n      fmap.put(entry.getKey(), entry.getValue());\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n    Metric[] metrics = buildMetrics(metricPairs, false).toArray(new Metric[0]);\n\n    for(Metric metric : metrics) {\n      Class c = fmap.get(metric.getIdentifier());\n      if(Long.class.equals(c)) {\n        metric.outputLong = true;\n      }\n    }\n\n    return new StatsStream(zk, collection, solrParams, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"570664407cd3123a8039f1b4f2f6c6693bdaee31","date":1589893823,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleStats(String,String,String,List[Pair[String,String]],List[Map.Entry[String,Class]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleStats(String,String,String,List[Pair[String,String]],List[Map.Entry[String,Class]]).mjava","sourceNew":"  private TupleStream handleStats(String zk,\n                                  String collection,\n                                  String query,\n                                  List<Pair<String, String>> metricPairs,\n                                  List<Map.Entry<String, Class>> fields) throws IOException {\n\n\n    Map<String, Class> fmap = new HashMap();\n    for(Map.Entry<String, Class> entry : fields) {\n      fmap.put(entry.getKey(), entry.getValue());\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n    Metric[] metrics = buildMetrics(metricPairs, false).toArray(new Metric[0]);\n\n    for(Metric metric : metrics) {\n      Class c = fmap.get(metric.getIdentifier());\n      if(Long.class.equals(c)) {\n        metric.outputLong = true;\n      }\n    }\n\n    return new StatsStream(zk, collection, solrParams, metrics);\n  }\n\n","sourceOld":"  private TupleStream handleStats(String zk,\n                                  String collection,\n                                  String query,\n                                  List<Pair<String, String>> metricPairs,\n                                  List<Map.Entry<String, Class>> fields) {\n\n\n    Map<String, Class> fmap = new HashMap();\n    for(Map.Entry<String, Class> entry : fields) {\n      fmap.put(entry.getKey(), entry.getValue());\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n    Metric[] metrics = buildMetrics(metricPairs, false).toArray(new Metric[0]);\n\n    for(Metric metric : metrics) {\n      Class c = fmap.get(metric.getIdentifier());\n      if(Long.class.equals(c)) {\n        metric.outputLong = true;\n      }\n    }\n\n    return new StatsStream(zk, collection, solrParams, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleStats(String,String,String,List[Pair[String,String]],List[Map.Entry[String,Class]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleStats(String,String,String,List[Pair[String,String]],List[Map.Entry[String,Class]]).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  private TupleStream handleStats(String zk,\n                                  String collection,\n                                  String query,\n                                  List<Pair<String, String>> metricPairs,\n                                  List<Map.Entry<String, Class>> fields) throws IOException {\n\n\n    Map<String, Class> fmap = new HashMap<>();\n    for(Map.Entry<String, Class> entry : fields) {\n      fmap.put(entry.getKey(), entry.getValue());\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n    Metric[] metrics = buildMetrics(metricPairs, false).toArray(new Metric[0]);\n\n    for(Metric metric : metrics) {\n      Class c = fmap.get(metric.getIdentifier());\n      if(Long.class.equals(c)) {\n        metric.outputLong = true;\n      }\n    }\n\n    return new StatsStream(zk, collection, solrParams, metrics);\n  }\n\n","sourceOld":"  private TupleStream handleStats(String zk,\n                                  String collection,\n                                  String query,\n                                  List<Pair<String, String>> metricPairs,\n                                  List<Map.Entry<String, Class>> fields) throws IOException {\n\n\n    Map<String, Class> fmap = new HashMap();\n    for(Map.Entry<String, Class> entry : fields) {\n      fmap.put(entry.getKey(), entry.getValue());\n    }\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n    Metric[] metrics = buildMetrics(metricPairs, false).toArray(new Metric[0]);\n\n    for(Metric metric : metrics) {\n      Class c = fmap.get(metric.getIdentifier());\n      if(Long.class.equals(c)) {\n        metric.outputLong = true;\n      }\n    }\n\n    return new StatsStream(zk, collection, solrParams, metrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a9b741b54c163686a5fd077895a797daa9b0b95f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d9fe3175bbaa122d67f736a75c2984617c502cc0"],"a9b741b54c163686a5fd077895a797daa9b0b95f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["d9fe3175bbaa122d67f736a75c2984617c502cc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["570664407cd3123a8039f1b4f2f6c6693bdaee31"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a9b741b54c163686a5fd077895a797daa9b0b95f":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["e9017cf144952056066919f1ebc7897ff9bd71b1","570664407cd3123a8039f1b4f2f6c6693bdaee31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9b741b54c163686a5fd077895a797daa9b0b95f","d9fe3175bbaa122d67f736a75c2984617c502cc0"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}