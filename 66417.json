{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    super(new PerFieldReuseStrategy());\n    this.random = random;\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    super(new PerFieldReuseStrategy());\n    this.random = random;\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    super(new PerFieldReuseStrategy());\n    // TODO: this should be solved in a different way; Random should not be shared (!).\n    this.random = new Random(random.nextLong());\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    super(new PerFieldReuseStrategy());\n    this.random = random;\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockAnalyzer#MockAnalyzer(Random,CharacterRunAutomaton,boolean,CharacterRunAutomaton,boolean).mjava","sourceNew":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter) {\n    super(new PerFieldReuseStrategy());\n    // TODO: this should be solved in a different way; Random should not be shared (!).\n    this.random = new Random(random.nextLong());\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n  }\n\n","sourceOld":"  /**\n   * Creates a new MockAnalyzer.\n   * \n   * @param random Random for payloads behavior\n   * @param runAutomaton DFA describing how tokenization should happen (e.g. [a-zA-Z]+)\n   * @param lowerCase true if the tokenizer should lowercase terms\n   * @param filter DFA describing how terms should be filtered (set of stopwords, etc)\n   * @param enablePositionIncrements true if position increments should reflect filtered terms.\n   */\n  public MockAnalyzer(Random random, CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {\n    super(new PerFieldReuseStrategy());\n    // TODO: this should be solved in a different way; Random should not be shared (!).\n    this.random = new Random(random.nextLong());\n    this.runAutomaton = runAutomaton;\n    this.lowerCase = lowerCase;\n    this.filter = filter;\n    this.enablePositionIncrements = enablePositionIncrements;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eafa8c5eabc3dacd34680054e6a33bda024080ac"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}