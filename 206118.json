{"path":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testSparsePoints().mjava","commits":[{"id":"221076a44effb5561a3b799974ba1a35119fbcc0","date":1457468497,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testSparsePoints().mjava","pathOld":"/dev/null","sourceNew":"  public void testSparsePoints() throws Exception {\n    Directory dir = newDirectory();\n    int numDocs = atLeast(1000);\n    int numFields = TestUtil.nextInt(random(), 1, 10);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int[] fieldDocCounts = new int[numFields];\n    int[] fieldSizes = new int[numFields];\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      for(int field=0;field<numFields;field++) {\n        String fieldName = \"int\" + field;\n        if (random().nextInt(100) == 17) {\n          doc.add(new IntPoint(fieldName, random().nextInt()));\n          fieldDocCounts[field]++;\n          fieldSizes[field]++;\n\n          if (random().nextInt(10) == 5) {\n            // add same field again!\n            doc.add(new IntPoint(fieldName, random().nextInt()));\n            fieldSizes[field]++;\n          }\n        }\n      }\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    for(int field=0;field<numFields;field++) {\n      int docCount = 0;\n      int size = 0;\n      String fieldName = \"int\" + field;\n      for(LeafReaderContext ctx : r.leaves()) {\n        PointValues points = ctx.reader().getPointValues();\n        if (ctx.reader().getFieldInfos().fieldInfo(fieldName) != null) {\n          docCount += points.getDocCount(fieldName);\n          size += points.size(fieldName);\n        }\n      }\n      assertEquals(fieldDocCounts[field], docCount);\n      assertEquals(fieldSizes[field], size);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testSparsePoints().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testSparsePoints().mjava","sourceNew":"  public void testSparsePoints() throws Exception {\n    Directory dir = newDirectory();\n    int numDocs = atLeast(1000);\n    int numFields = TestUtil.nextInt(random(), 1, 10);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int[] fieldDocCounts = new int[numFields];\n    int[] fieldSizes = new int[numFields];\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      for(int field=0;field<numFields;field++) {\n        String fieldName = \"int\" + field;\n        if (random().nextInt(100) == 17) {\n          doc.add(new IntPoint(fieldName, random().nextInt()));\n          fieldDocCounts[field]++;\n          fieldSizes[field]++;\n\n          if (random().nextInt(10) == 5) {\n            // add same field again!\n            doc.add(new IntPoint(fieldName, random().nextInt()));\n            fieldSizes[field]++;\n          }\n        }\n      }\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    for(int field=0;field<numFields;field++) {\n      int docCount = 0;\n      int size = 0;\n      String fieldName = \"int\" + field;\n      for(LeafReaderContext ctx : r.leaves()) {\n        PointValues points = ctx.reader().getPointValues(fieldName);\n        if (points != null) {\n          docCount += points.getDocCount();\n          size += points.size();\n        }\n      }\n      assertEquals(fieldDocCounts[field], docCount);\n      assertEquals(fieldSizes[field], size);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSparsePoints() throws Exception {\n    Directory dir = newDirectory();\n    int numDocs = atLeast(1000);\n    int numFields = TestUtil.nextInt(random(), 1, 10);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int[] fieldDocCounts = new int[numFields];\n    int[] fieldSizes = new int[numFields];\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      for(int field=0;field<numFields;field++) {\n        String fieldName = \"int\" + field;\n        if (random().nextInt(100) == 17) {\n          doc.add(new IntPoint(fieldName, random().nextInt()));\n          fieldDocCounts[field]++;\n          fieldSizes[field]++;\n\n          if (random().nextInt(10) == 5) {\n            // add same field again!\n            doc.add(new IntPoint(fieldName, random().nextInt()));\n            fieldSizes[field]++;\n          }\n        }\n      }\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    for(int field=0;field<numFields;field++) {\n      int docCount = 0;\n      int size = 0;\n      String fieldName = \"int\" + field;\n      for(LeafReaderContext ctx : r.leaves()) {\n        PointValues points = ctx.reader().getPointValues();\n        if (ctx.reader().getFieldInfos().fieldInfo(fieldName) != null) {\n          docCount += points.getDocCount(fieldName);\n          size += points.size(fieldName);\n        }\n      }\n      assertEquals(fieldDocCounts[field], docCount);\n      assertEquals(fieldSizes[field], size);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testSparsePoints().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testSparsePoints().mjava","sourceNew":"  public void testSparsePoints() throws Exception {\n    Directory dir = newDirectory();\n    int numDocs = atLeast(1000);\n    int numFields = TestUtil.nextInt(random(), 1, 10);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int[] fieldDocCounts = new int[numFields];\n    int[] fieldSizes = new int[numFields];\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      for(int field=0;field<numFields;field++) {\n        String fieldName = \"int\" + field;\n        if (random().nextInt(100) == 17) {\n          doc.add(new IntPoint(fieldName, random().nextInt()));\n          fieldDocCounts[field]++;\n          fieldSizes[field]++;\n\n          if (random().nextInt(10) == 5) {\n            // add same field again!\n            doc.add(new IntPoint(fieldName, random().nextInt()));\n            fieldSizes[field]++;\n          }\n        }\n      }\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    for(int field=0;field<numFields;field++) {\n      int docCount = 0;\n      int size = 0;\n      String fieldName = \"int\" + field;\n      for(LeafReaderContext ctx : r.leaves()) {\n        PointValues points = ctx.reader().getPointValues(fieldName);\n        if (points != null) {\n          docCount += points.getDocCount();\n          size += points.size();\n        }\n      }\n      assertEquals(fieldDocCounts[field], docCount);\n      assertEquals(fieldSizes[field], size);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSparsePoints() throws Exception {\n    Directory dir = newDirectory();\n    int numDocs = atLeast(1000);\n    int numFields = TestUtil.nextInt(random(), 1, 10);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int[] fieldDocCounts = new int[numFields];\n    int[] fieldSizes = new int[numFields];\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      for(int field=0;field<numFields;field++) {\n        String fieldName = \"int\" + field;\n        if (random().nextInt(100) == 17) {\n          doc.add(new IntPoint(fieldName, random().nextInt()));\n          fieldDocCounts[field]++;\n          fieldSizes[field]++;\n\n          if (random().nextInt(10) == 5) {\n            // add same field again!\n            doc.add(new IntPoint(fieldName, random().nextInt()));\n            fieldSizes[field]++;\n          }\n        }\n      }\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    for(int field=0;field<numFields;field++) {\n      int docCount = 0;\n      int size = 0;\n      String fieldName = \"int\" + field;\n      for(LeafReaderContext ctx : r.leaves()) {\n        PointValues points = ctx.reader().getPointValues();\n        if (ctx.reader().getFieldInfos().fieldInfo(fieldName) != null) {\n          docCount += points.getDocCount(fieldName);\n          size += points.size(fieldName);\n        }\n      }\n      assertEquals(fieldDocCounts[field], docCount);\n      assertEquals(fieldSizes[field], size);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["221076a44effb5561a3b799974ba1a35119fbcc0"],"221076a44effb5561a3b799974ba1a35119fbcc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["221076a44effb5561a3b799974ba1a35119fbcc0","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["221076a44effb5561a3b799974ba1a35119fbcc0"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"221076a44effb5561a3b799974ba1a35119fbcc0":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}