{"path":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testThreeLevel().mjava","commits":[{"id":"561c2351baf6dd64061addef891359954c1a7faa","date":1462788487,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testThreeLevel().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testThreeLevel() throws Exception {\n    List<String> asserts =  new ArrayList<>();\n    // dave works in both dept, get his coworkers from both\n    for (String dept : new String[] {\"Engineering\", \"Support\"}) { //dept_id_s_dv\">Engineering\n      \n      ArrayList<Object> deptWorkers = Collections.list(\n          new StringTokenizer( h.query(req(\n              \"q\",\"dept_ss_dv:\"+dept ,//dept_id_i_dv\n             \"wt\",\"csv\",\n             \"csv.header\",\"false\",\n             \"fl\",\"name_s_dv\",\n             \"rows\",\"\"+peopleMultiplier*3, // dave has three coworkers in two depts\n             \"sort\", \"id desc\"\n           ))));\n     // System.out.println(deptWorkers);\n      \n      // looping dave clones\n      for (int p : new int []{1, peopleMultiplier}) {\n        // looping dept clones\n        for (int d : new int []{1, deptMultiplier}) {\n          // looping coworkers\n          int wPos = 1;\n          for (Object mate : deptWorkers) {\n            // (/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[1]\n            //  /result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='Engineering']/..\n            //  /result[@name='neighbours']/doc/str[@name='name_s_dv'][.='tina']\n            asserts.add(\"((/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[\"+p+\"]\"+\n              \"/result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='\"+dept+\"']/..)[\"+ d +\"]\"+\n              \"/result[@name='neighbours']/doc[\" + wPos + \"]/str[@name='name_s_dv'][.='\"+ mate+\"']\");\n            wPos ++; \n          }\n          \n        }\n      }\n    }\n    //System.out.println(asserts);\n    assertQ(\"dave works at both dept with other folks\",\n  //  System.out.println(h.query( \n        req(new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n        \"fl\",\"name_s_dv,subq1:[subquery]\", \n        \"rows\",\"\" + peopleMultiplier,\n        \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv}\", \n        \"subq1.fl\",\"text_t,dept_id_s_dv,neighbours:[subquery]\",\n        \"subq1.indent\",\"true\",\n        \"subq1.rows\",\"\"+(deptMultiplier*2),\n        \"subq1.neighbours.q\",//flipping via numbers \n        random().nextBoolean() ?\n          \"{!terms f=dept_ss_dv v=$row.dept_id_s_dv}\"\n        : \"{!terms f=dept_is v=$row.dept_id_i_dv}\",\n        \"subq1.neighbours.fl\", \"name_s_dv\" ,\n        \"subq1.neighbours.rows\", \"\"+peopleMultiplier*3},\n        \"subq1.neighbours.sort\", \"id desc\")//,\n       ,asserts.toArray(new String[]{})\n    //        ) \n    );\n  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testThreeLevel().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testThreeLevel() throws Exception {\n    List<String> asserts =  new ArrayList<>();\n    // dave works in both dept, get his coworkers from both\n    for (String dept : new String[] {\"Engineering\", \"Support\"}) { //dept_id_s_dv\">Engineering\n      \n      ArrayList<Object> deptWorkers = Collections.list(\n          new StringTokenizer( h.query(req(\n              \"q\",\"dept_ss_dv:\"+dept ,//dept_id_i_dv\n             \"wt\",\"csv\",\n             \"csv.header\",\"false\",\n             \"fl\",\"name_s_dv\",\n             \"rows\",\"\"+peopleMultiplier*3, // dave has three coworkers in two depts\n             \"sort\", \"id desc\"\n           ))));\n     // System.out.println(deptWorkers);\n      \n      // looping dave clones\n      for (int p : new int []{1, peopleMultiplier}) {\n        // looping dept clones\n        for (int d : new int []{1, deptMultiplier}) {\n          // looping coworkers\n          int wPos = 1;\n          for (Object mate : deptWorkers) {\n            // (/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[1]\n            //  /result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='Engineering']/..\n            //  /result[@name='neighbours']/doc/str[@name='name_s_dv'][.='tina']\n            asserts.add(\"((/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[\"+p+\"]\"+\n              \"/result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='\"+dept+\"']/..)[\"+ d +\"]\"+\n              \"/result[@name='neighbours']/doc[\" + wPos + \"]/str[@name='name_s_dv'][.='\"+ mate+\"']\");\n            wPos ++; \n          }\n          \n        }\n      }\n    }\n    //System.out.println(asserts);\n    assertQ(\"dave works at both dept with other folks\",\n  //  System.out.println(h.query( \n        req(new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n        \"fl\",\"name_s_dv,subq1:[subquery]\", \n        \"rows\",\"\" + peopleMultiplier,\n        \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv}\", \n        \"subq1.fl\",\"text_t,dept_id_s_dv,neighbours:[subquery]\",\n        \"subq1.indent\",\"true\",\n        \"subq1.rows\",\"\"+(deptMultiplier*2),\n        \"subq1.neighbours.q\",//flipping via numbers \n        random().nextBoolean() ?\n          \"{!terms f=dept_ss_dv v=$row.dept_id_s_dv}\"\n        : \"{!terms f=dept_is v=$row.dept_id_i_dv}\",\n        \"subq1.neighbours.fl\", \"name_s_dv\" ,\n        \"subq1.neighbours.rows\", \"\"+peopleMultiplier*3},\n        \"subq1.neighbours.sort\", \"id desc\")//,\n       ,asserts.toArray(new String[]{})\n    //        ) \n    );\n  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testThreeLevel().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testThreeLevel() throws Exception {\n    List<String> asserts =  new ArrayList<>();\n    // dave works in both dept, get his coworkers from both\n    for (String dept : new String[] {\"Engineering\", \"Support\"}) { //dept_id_s_dv\">Engineering\n      \n      ArrayList<Object> deptWorkers = Collections.list(\n          new StringTokenizer( h.query(req(\n              \"q\",\"dept_ss_dv:\"+dept ,//dept_id_i_dv\n             \"wt\",\"csv\",\n             \"csv.header\",\"false\",\n             \"fl\",\"name_s_dv\",\n             \"rows\",\"\"+peopleMultiplier*3, // dave has three coworkers in two depts\n             \"sort\", \"id desc\"\n           ))));\n     // System.out.println(deptWorkers);\n      \n      // looping dave clones\n      for (int p : new int []{1, peopleMultiplier}) {\n        // looping dept clones\n        for (int d : new int []{1, deptMultiplier}) {\n          // looping coworkers\n          int wPos = 1;\n          for (Object mate : deptWorkers) {\n            // (/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[1]\n            //  /result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='Engineering']/..\n            //  /result[@name='neighbours']/doc/str[@name='name_s_dv'][.='tina']\n            asserts.add(\"((/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[\"+p+\"]\"+\n              \"/result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='\"+dept+\"']/..)[\"+ d +\"]\"+\n              \"/result[@name='neighbours']/doc[\" + wPos + \"]/str[@name='name_s_dv'][.='\"+ mate+\"']\");\n            wPos ++; \n          }\n          \n        }\n      }\n    }\n    //System.out.println(asserts);\n    assertQ(\"dave works at both dept with other folks\",\n  //  System.out.println(h.query( \n        req(new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n        \"fl\",\"name_s_dv,subq1:[subquery]\", \n        \"rows\",\"\" + peopleMultiplier,\n        \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv}\", \n        \"subq1.fl\",\"text_t,dept_id_s_dv,neighbours:[subquery]\",\n        \"subq1.indent\",\"true\",\n        \"subq1.rows\",\"\"+(deptMultiplier*2),\n        \"subq1.neighbours.q\",//flipping via numbers \n        random().nextBoolean() ?\n          \"{!terms f=dept_ss_dv v=$row.dept_id_s_dv}\"\n        : \"{!terms f=dept_is v=$row.dept_id_i_dv}\",\n        \"subq1.neighbours.fl\", \"name_s_dv\" ,\n        \"subq1.neighbours.rows\", \"\"+peopleMultiplier*3},\n        \"subq1.neighbours.sort\", \"id desc\")//,\n       ,asserts.toArray(new String[]{})\n    //        ) \n    );\n  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac","date":1467877935,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testThreeLevel().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testThreeLevel().mjava","sourceNew":"  @Test\n  public void testThreeLevel() throws Exception {\n    List<String> asserts =  new ArrayList<>();\n    // dave works in both dept, get his coworkers from both\n    for (String dept : new String[] {\"Engineering\", \"Support\"}) { //dept_id_s_dv\">Engineering\n      \n      ArrayList<Object> deptWorkers = Collections.list(\n          new StringTokenizer( h.query(req(\n              \"q\",\"dept_ss_dv:\"+dept ,//dept_id_i_dv\n             \"wt\",\"csv\",\n             \"csv.header\",\"false\",\n             \"fl\",\"name_s_dv\",\n             \"rows\",\"\"+peopleMultiplier*3, // dave has three coworkers in two depts\n             \"sort\", \"id desc\"\n           ))));\n     // System.out.println(deptWorkers);\n      \n      // looping dave clones\n      for (int p : new int []{1, peopleMultiplier}) {\n        // looping dept clones\n        for (int d : new int []{1, deptMultiplier}) {\n          // looping coworkers\n          int wPos = 1;\n          for (Object mate : deptWorkers) {\n            // (/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[1]\n            //  /result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='Engineering']/..\n            //  /result[@name='neighbours']/doc/str[@name='name_s_dv'][.='tina']\n            asserts.add(\"((/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[\"+p+\"]\"+\n              \"/result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='\"+dept+\"']/..)[\"+ d +\"]\"+\n              \"/result[@name='neighbours']/doc[\" + wPos + \"]/str[@name='name_s_dv'][.='\"+ mate+\"']\");\n            wPos ++; \n          }\n          \n        }\n      }\n    }\n    //System.out.println(asserts);\n    assertQ(\"dave works at both dept with other folks\",\n  //  System.out.println(h.query( \n        req(new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n        \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n        \"rows\",\"\" + peopleMultiplier,\n        \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv}\", \n        \"subq1.fl\",\"dept_id_i_dv,text_t,dept_id_s_dv,neighbours:[subquery]\",\n        \"subq1.indent\",\"true\",\n        \"subq1.rows\",\"\"+(deptMultiplier*2),\n        \"subq1.neighbours.q\",//flipping via numbers \n        random().nextBoolean() ?\n          \"{!terms f=dept_ss_dv v=$row.dept_id_s_dv}\"\n        : \"{!terms f=dept_is v=$row.dept_id_i_dv}\",\n        \"subq1.neighbours.fl\", \"name_s_dv\" ,\n        \"subq1.neighbours.rows\", \"\"+peopleMultiplier*3},\n        \"subq1.neighbours.sort\", \"id desc\")//,\n       ,asserts.toArray(new String[]{})\n    //        ) \n    );\n  \n  }\n\n","sourceOld":"  @Test\n  public void testThreeLevel() throws Exception {\n    List<String> asserts =  new ArrayList<>();\n    // dave works in both dept, get his coworkers from both\n    for (String dept : new String[] {\"Engineering\", \"Support\"}) { //dept_id_s_dv\">Engineering\n      \n      ArrayList<Object> deptWorkers = Collections.list(\n          new StringTokenizer( h.query(req(\n              \"q\",\"dept_ss_dv:\"+dept ,//dept_id_i_dv\n             \"wt\",\"csv\",\n             \"csv.header\",\"false\",\n             \"fl\",\"name_s_dv\",\n             \"rows\",\"\"+peopleMultiplier*3, // dave has three coworkers in two depts\n             \"sort\", \"id desc\"\n           ))));\n     // System.out.println(deptWorkers);\n      \n      // looping dave clones\n      for (int p : new int []{1, peopleMultiplier}) {\n        // looping dept clones\n        for (int d : new int []{1, deptMultiplier}) {\n          // looping coworkers\n          int wPos = 1;\n          for (Object mate : deptWorkers) {\n            // (/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[1]\n            //  /result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='Engineering']/..\n            //  /result[@name='neighbours']/doc/str[@name='name_s_dv'][.='tina']\n            asserts.add(\"((/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[\"+p+\"]\"+\n              \"/result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='\"+dept+\"']/..)[\"+ d +\"]\"+\n              \"/result[@name='neighbours']/doc[\" + wPos + \"]/str[@name='name_s_dv'][.='\"+ mate+\"']\");\n            wPos ++; \n          }\n          \n        }\n      }\n    }\n    //System.out.println(asserts);\n    assertQ(\"dave works at both dept with other folks\",\n  //  System.out.println(h.query( \n        req(new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n        \"fl\",\"name_s_dv,subq1:[subquery]\", \n        \"rows\",\"\" + peopleMultiplier,\n        \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv}\", \n        \"subq1.fl\",\"text_t,dept_id_s_dv,neighbours:[subquery]\",\n        \"subq1.indent\",\"true\",\n        \"subq1.rows\",\"\"+(deptMultiplier*2),\n        \"subq1.neighbours.q\",//flipping via numbers \n        random().nextBoolean() ?\n          \"{!terms f=dept_ss_dv v=$row.dept_id_s_dv}\"\n        : \"{!terms f=dept_is v=$row.dept_id_i_dv}\",\n        \"subq1.neighbours.fl\", \"name_s_dv\" ,\n        \"subq1.neighbours.rows\", \"\"+peopleMultiplier*3},\n        \"subq1.neighbours.sort\", \"id desc\")//,\n       ,asserts.toArray(new String[]{})\n    //        ) \n    );\n  \n  }\n\n","bugFix":["561c2351baf6dd64061addef891359954c1a7faa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testThreeLevel().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testThreeLevel() throws Exception {\n    List<String> asserts =  new ArrayList<>();\n    // dave works in both dept, get his coworkers from both\n    for (String dept : new String[] {\"Engineering\", \"Support\"}) { //dept_id_s_dv\">Engineering\n      \n      ArrayList<Object> deptWorkers = Collections.list(\n          new StringTokenizer( h.query(req(\n              \"q\",\"dept_ss_dv:\"+dept ,//dept_id_i_dv\n             \"wt\",\"csv\",\n             \"csv.header\",\"false\",\n             \"fl\",\"name_s_dv\",\n             \"rows\",\"\"+peopleMultiplier*3, // dave has three coworkers in two depts\n             \"sort\", \"id desc\"\n           ))));\n     // System.out.println(deptWorkers);\n      \n      // looping dave clones\n      for (int p : new int []{1, peopleMultiplier}) {\n        // looping dept clones\n        for (int d : new int []{1, deptMultiplier}) {\n          // looping coworkers\n          int wPos = 1;\n          for (Object mate : deptWorkers) {\n            // (/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[1]\n            //  /result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='Engineering']/..\n            //  /result[@name='neighbours']/doc/str[@name='name_s_dv'][.='tina']\n            asserts.add(\"((/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[\"+p+\"]\"+\n              \"/result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='\"+dept+\"']/..)[\"+ d +\"]\"+\n              \"/result[@name='neighbours']/doc[\" + wPos + \"]/str[@name='name_s_dv'][.='\"+ mate+\"']\");\n            wPos ++; \n          }\n          \n        }\n      }\n    }\n    //System.out.println(asserts);\n    assertQ(\"dave works at both dept with other folks\",\n  //  System.out.println(h.query( \n        req(new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n        \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n        \"rows\",\"\" + peopleMultiplier,\n        \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv}\", \n        \"subq1.fl\",\"dept_id_i_dv,text_t,dept_id_s_dv,neighbours:[subquery]\",\n        \"subq1.indent\",\"true\",\n        \"subq1.rows\",\"\"+(deptMultiplier*2),\n        \"subq1.neighbours.q\",//flipping via numbers \n        random().nextBoolean() ?\n          \"{!terms f=dept_ss_dv v=$row.dept_id_s_dv}\"\n        : \"{!terms f=dept_is v=$row.dept_id_i_dv}\",\n        \"subq1.neighbours.fl\", \"name_s_dv\" ,\n        \"subq1.neighbours.rows\", \"\"+peopleMultiplier*3},\n        \"subq1.neighbours.sort\", \"id desc\")//,\n       ,asserts.toArray(new String[]{})\n    //        ) \n    );\n  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"],"561c2351baf6dd64061addef891359954c1a7faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"]},"commit2Childs":{"36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e66a459d38c1c4a2f97128433dab546f683a9fed","561c2351baf6dd64061addef891359954c1a7faa","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"561c2351baf6dd64061addef891359954c1a7faa":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}