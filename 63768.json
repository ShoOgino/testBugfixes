{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribDates(FacetInfo,NamedList).mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribDates(FacetInfo,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  //\n  // The implementation below uses the first encountered shard's\n  // facet_dates as the basis for subsequent shards' data to be merged.\n  // (the \"NOW\" param should ensure consistency)\n  private void doDistribDates(FacetInfo fi, NamedList facet_counts) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Object>> facet_dates =\n      (SimpleOrderedMap<SimpleOrderedMap<Object>>)\n      facet_counts.get(\"facet_dates\");\n\n    if (facet_dates != null) {\n\n      // go through each facet_date\n      for (Map.Entry<String,SimpleOrderedMap<Object>> entry : facet_dates) {\n        final String field = entry.getKey();\n        if (fi.dateFacets.get(field) == null) {\n          // first time we've seen this field, no merging\n          fi.dateFacets.add(field, entry.getValue());\n\n        } else {\n          // not the first time, merge current field\n\n          SimpleOrderedMap<Object> shardFieldValues\n            = entry.getValue();\n          SimpleOrderedMap<Object> existFieldValues\n            = fi.dateFacets.get(field);\n\n          for (Map.Entry<String,Object> existPair : existFieldValues) {\n            final String key = existPair.getKey();\n            if (key.equals(\"gap\") ||\n                key.equals(\"end\") ||\n                key.equals(\"start\")) {\n              // we can skip these, must all be the same across shards\n              continue;\n            }\n            // can be null if inconsistencies in shards responses\n            Integer newValue = (Integer) shardFieldValues.get(key);\n            if  (null != newValue) {\n              Integer oldValue = ((Integer) existPair.getValue());\n              existPair.setValue(oldValue + newValue);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15cb24c5fa70ba12290e43b3aa0feab5582863ee","date":1457033685,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribDates(FacetInfo,NamedList).mjava","sourceNew":null,"sourceOld":"  //\n  // The implementation below uses the first encountered shard's\n  // facet_dates as the basis for subsequent shards' data to be merged.\n  // (the \"NOW\" param should ensure consistency)\n  private void doDistribDates(FacetInfo fi, NamedList facet_counts) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Object>> facet_dates =\n      (SimpleOrderedMap<SimpleOrderedMap<Object>>)\n      facet_counts.get(\"facet_dates\");\n\n    if (facet_dates != null) {\n\n      // go through each facet_date\n      for (Map.Entry<String,SimpleOrderedMap<Object>> entry : facet_dates) {\n        final String field = entry.getKey();\n        if (fi.dateFacets.get(field) == null) {\n          // first time we've seen this field, no merging\n          fi.dateFacets.add(field, entry.getValue());\n\n        } else {\n          // not the first time, merge current field\n\n          SimpleOrderedMap<Object> shardFieldValues\n            = entry.getValue();\n          SimpleOrderedMap<Object> existFieldValues\n            = fi.dateFacets.get(field);\n\n          for (Map.Entry<String,Object> existPair : existFieldValues) {\n            final String key = existPair.getKey();\n            if (key.equals(\"gap\") ||\n                key.equals(\"end\") ||\n                key.equals(\"start\")) {\n              // we can skip these, must all be the same across shards\n              continue;\n            }\n            // can be null if inconsistencies in shards responses\n            Integer newValue = (Integer) shardFieldValues.get(key);\n            if  (null != newValue) {\n              Integer oldValue = ((Integer) existPair.getValue());\n              existPair.setValue(oldValue + newValue);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribDates(FacetInfo,NamedList).mjava","sourceNew":null,"sourceOld":"  //\n  // The implementation below uses the first encountered shard's\n  // facet_dates as the basis for subsequent shards' data to be merged.\n  // (the \"NOW\" param should ensure consistency)\n  private void doDistribDates(FacetInfo fi, NamedList facet_counts) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Object>> facet_dates =\n      (SimpleOrderedMap<SimpleOrderedMap<Object>>)\n      facet_counts.get(\"facet_dates\");\n\n    if (facet_dates != null) {\n\n      // go through each facet_date\n      for (Map.Entry<String,SimpleOrderedMap<Object>> entry : facet_dates) {\n        final String field = entry.getKey();\n        if (fi.dateFacets.get(field) == null) {\n          // first time we've seen this field, no merging\n          fi.dateFacets.add(field, entry.getValue());\n\n        } else {\n          // not the first time, merge current field\n\n          SimpleOrderedMap<Object> shardFieldValues\n            = entry.getValue();\n          SimpleOrderedMap<Object> existFieldValues\n            = fi.dateFacets.get(field);\n\n          for (Map.Entry<String,Object> existPair : existFieldValues) {\n            final String key = existPair.getKey();\n            if (key.equals(\"gap\") ||\n                key.equals(\"end\") ||\n                key.equals(\"start\")) {\n              // we can skip these, must all be the same across shards\n              continue;\n            }\n            // can be null if inconsistencies in shards responses\n            Integer newValue = (Integer) shardFieldValues.get(key);\n            if  (null != newValue) {\n              Integer oldValue = ((Integer) existPair.getValue());\n              existPair.setValue(oldValue + newValue);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","15cb24c5fa70ba12290e43b3aa0feab5582863ee"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["15cb24c5fa70ba12290e43b3aa0feab5582863ee","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}