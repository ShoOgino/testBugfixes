{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Number cores = (Number) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores.intValue() == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores.intValue() - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a","date":1589907167,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Number cores = (Number) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores.intValue() == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores.intValue() - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.getCollectionPath(collection), true, true);\n      collectionsStatesRef.remove(collection);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Number cores = (Number) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores.intValue() == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores.intValue() - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Number cores = (Number) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores.intValue() == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores.intValue() - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.getCollectionPath(collection), true, true);\n      collectionsStatesRef.remove(collection);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Number cores = (Number) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores.intValue() == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores.intValue() - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.getCollectionPath(collection), true, true);\n      collectionsStatesRef.remove(collection);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<Replica> it = replicas.iterator(); it.hasNext(); ) {\n              Replica ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Number cores = (Number) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores.intValue() == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores.intValue() - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.getCollectionPath(collection), true, true);\n      collectionsStatesRef.remove(collection);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Number cores = (Number) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores.intValue() == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores.intValue() - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.getCollectionPath(collection), true, true);\n      collectionsStatesRef.remove(collection);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<Replica> it = replicas.iterator(); it.hasNext(); ) {\n              Replica ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Number cores = (Number) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores.intValue() == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores.intValue() - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.getCollectionPath(collection), true, true);\n      collectionsStatesRef.remove(collection);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}