{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#collectorMethod(DrillDownQuery,Query,int,Collector,Collector,Collector[]).mjava","commits":[{"id":"378fbd2626d3f584f8146e25acf62ee817361580","date":1367266329,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#collectorMethod(DrillDownQuery,Query,int,Collector,Collector,Collector[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Uses the more general but slower method of sideways\n   *  counting. This method allows an arbitrary subQuery to\n   *  implement the drill down for a given dimension. */\n  private void collectorMethod(DrillDownQuery ddq, Query baseQuery, int startClause, Collector hitCollector, Collector drillDownCollector, Collector[] drillSidewaysCollectors) throws IOException {\n\n    BooleanClause[] clauses = ddq.getBooleanQuery().getClauses();\n\n    Map<String,Integer> drillDownDims = ddq.getDims();\n\n    BooleanQuery topQuery = new BooleanQuery(true);\n    final DrillSidewaysCollector collector = new DrillSidewaysCollector(hitCollector, drillDownCollector, drillSidewaysCollectors,\n                                                                        drillDownDims);\n\n    // TODO: if query is already a BQ we could copy that and\n    // add clauses to it, instead of doing BQ inside BQ\n    // (should be more efficient)?  Problem is this can\n    // affect scoring (coord) ... too bad we can't disable\n    // coord on a clause by clause basis:\n    topQuery.add(baseQuery, BooleanClause.Occur.MUST);\n\n    // NOTE: in theory we could just make a single BQ, with\n    // +query a b c minShouldMatch=2, but in this case,\n    // annoyingly, BS2 wraps a sub-scorer that always\n    // returns 2 as the .freq(), not how many of the\n    // SHOULD clauses matched:\n    BooleanQuery subQuery = new BooleanQuery(true);\n\n    Query wrappedSubQuery = new QueryWrapper(subQuery,\n                                             new SetWeight() {\n                                               @Override\n                                               public void set(Weight w) {\n                                                 collector.setWeight(w, -1);\n                                               }\n                                             });\n    Query constantScoreSubQuery = new ConstantScoreQuery(wrappedSubQuery);\n\n    // Don't impact score of original query:\n    constantScoreSubQuery.setBoost(0.0f);\n\n    topQuery.add(constantScoreSubQuery, BooleanClause.Occur.MUST);\n\n    // Unfortunately this sub-BooleanQuery\n    // will never get BS1 because today BS1 only works\n    // if topScorer=true... and actually we cannot use BS1\n    // anyways because we need subDocsScoredAtOnce:\n    int dimIndex = 0;\n    for(int i=startClause;i<clauses.length;i++) {\n      Query q = clauses[i].getQuery();\n      // DrillDownQuery always wraps each subQuery in\n      // ConstantScoreQuery:\n      assert q instanceof ConstantScoreQuery;\n      q = ((ConstantScoreQuery) q).getQuery();\n\n      final int finalDimIndex = dimIndex;\n      subQuery.add(new QueryWrapper(q,\n                                    new SetWeight() {\n                                      @Override\n                                      public void set(Weight w) {\n                                        collector.setWeight(w, finalDimIndex);\n                                      }\n                                    }),\n                   BooleanClause.Occur.SHOULD);\n      dimIndex++;\n    }\n\n    // TODO: we could better optimize the \"just one drill\n    // down\" case w/ a separate [specialized]\n    // collector...\n    int minShouldMatch = drillDownDims.size()-1;\n    if (minShouldMatch == 0) {\n      // Must add another \"fake\" clause so BQ doesn't erase\n      // itself by rewriting to the single clause:\n      Query end = new MatchAllDocsQuery();\n      end.setBoost(0.0f);\n      subQuery.add(end, BooleanClause.Occur.SHOULD);\n      minShouldMatch++;\n    }\n\n    subQuery.setMinimumNumberShouldMatch(minShouldMatch);\n\n    //System.out.println(\"EXE \" + topQuery);\n\n    // Collects against the passed-in\n    // drillDown/SidewaysCollectors as a side effect:\n    searcher.search(topQuery, collector);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"416910ae9ffe752ba5b6334f75d6c36e019626cc","date":1367953778,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#collectorMethod(DrillDownQuery,Query,int,Collector,Collector,Collector[]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#collectorMethod(DrillDownQuery,Query,int,Collector,Collector,Collector[]).mjava","sourceNew":"  /** Uses the more general but slower method of sideways\n   *  counting. This method allows an arbitrary subQuery to\n   *  implement the drill down for a given dimension. */\n  private void collectorMethod(DrillDownQuery ddq, Query baseQuery, int startClause, Collector hitCollector, Collector drillDownCollector, Collector[] drillSidewaysCollectors) throws IOException {\n\n    BooleanClause[] clauses = ddq.getBooleanQuery().getClauses();\n\n    Map<String,Integer> drillDownDims = ddq.getDims();\n\n    BooleanQuery topQuery = new BooleanQuery(true);\n    final DrillSidewaysCollector collector = new DrillSidewaysCollector(hitCollector, drillDownCollector, drillSidewaysCollectors,\n                                                                        drillDownDims);\n\n    // TODO: if query is already a BQ we could copy that and\n    // add clauses to it, instead of doing BQ inside BQ\n    // (should be more efficient)?  Problem is this can\n    // affect scoring (coord) ... too bad we can't disable\n    // coord on a clause by clause basis:\n    topQuery.add(baseQuery, BooleanClause.Occur.MUST);\n\n    // NOTE: in theory we could just make a single BQ, with\n    // +query a b c minShouldMatch=2, but in this case,\n    // annoyingly, BS2 wraps a sub-scorer that always\n    // returns 2 as the .freq(), not how many of the\n    // SHOULD clauses matched:\n    BooleanQuery subQuery = new BooleanQuery(true);\n\n    Query wrappedSubQuery = new QueryWrapper(subQuery,\n                                             new SetWeight() {\n                                               @Override\n                                               public void set(Weight w) {\n                                                 collector.setWeight(w, -1);\n                                               }\n                                             });\n    Query constantScoreSubQuery = new ConstantScoreQuery(wrappedSubQuery);\n\n    // Don't impact score of original query:\n    constantScoreSubQuery.setBoost(0.0f);\n\n    topQuery.add(constantScoreSubQuery, BooleanClause.Occur.MUST);\n\n    // Unfortunately this sub-BooleanQuery\n    // will never get BS1 because today BS1 only works\n    // if topScorer=true... and actually we cannot use BS1\n    // anyways because we need subDocsScoredAtOnce:\n    int dimIndex = 0;\n    for(int i=startClause;i<clauses.length;i++) {\n      Query q = clauses[i].getQuery();\n      // DrillDownQuery always wraps each subQuery in\n      // ConstantScoreQuery:\n      assert q instanceof ConstantScoreQuery;\n      q = ((ConstantScoreQuery) q).getQuery();\n\n      final int finalDimIndex = dimIndex;\n      subQuery.add(new QueryWrapper(q,\n                                    new SetWeight() {\n                                      @Override\n                                      public void set(Weight w) {\n                                        collector.setWeight(w, finalDimIndex);\n                                      }\n                                    }),\n                   BooleanClause.Occur.SHOULD);\n      dimIndex++;\n    }\n\n    // TODO: we could better optimize the \"just one drill\n    // down\" case w/ a separate [specialized]\n    // collector...\n    int minShouldMatch = drillDownDims.size()-1;\n    if (minShouldMatch == 0) {\n      // Must add another \"fake\" clause so BQ doesn't erase\n      // itself by rewriting to the single clause:\n      Query end = new MatchAllDocsQuery();\n      end.setBoost(0.0f);\n      subQuery.add(end, BooleanClause.Occur.SHOULD);\n      minShouldMatch++;\n    }\n\n    subQuery.setMinimumNumberShouldMatch(minShouldMatch);\n\n    // System.out.println(\"EXE \" + topQuery);\n\n    // Collects against the passed-in\n    // drillDown/SidewaysCollectors as a side effect:\n    searcher.search(topQuery, collector);\n  }\n\n","sourceOld":"  /** Uses the more general but slower method of sideways\n   *  counting. This method allows an arbitrary subQuery to\n   *  implement the drill down for a given dimension. */\n  private void collectorMethod(DrillDownQuery ddq, Query baseQuery, int startClause, Collector hitCollector, Collector drillDownCollector, Collector[] drillSidewaysCollectors) throws IOException {\n\n    BooleanClause[] clauses = ddq.getBooleanQuery().getClauses();\n\n    Map<String,Integer> drillDownDims = ddq.getDims();\n\n    BooleanQuery topQuery = new BooleanQuery(true);\n    final DrillSidewaysCollector collector = new DrillSidewaysCollector(hitCollector, drillDownCollector, drillSidewaysCollectors,\n                                                                        drillDownDims);\n\n    // TODO: if query is already a BQ we could copy that and\n    // add clauses to it, instead of doing BQ inside BQ\n    // (should be more efficient)?  Problem is this can\n    // affect scoring (coord) ... too bad we can't disable\n    // coord on a clause by clause basis:\n    topQuery.add(baseQuery, BooleanClause.Occur.MUST);\n\n    // NOTE: in theory we could just make a single BQ, with\n    // +query a b c minShouldMatch=2, but in this case,\n    // annoyingly, BS2 wraps a sub-scorer that always\n    // returns 2 as the .freq(), not how many of the\n    // SHOULD clauses matched:\n    BooleanQuery subQuery = new BooleanQuery(true);\n\n    Query wrappedSubQuery = new QueryWrapper(subQuery,\n                                             new SetWeight() {\n                                               @Override\n                                               public void set(Weight w) {\n                                                 collector.setWeight(w, -1);\n                                               }\n                                             });\n    Query constantScoreSubQuery = new ConstantScoreQuery(wrappedSubQuery);\n\n    // Don't impact score of original query:\n    constantScoreSubQuery.setBoost(0.0f);\n\n    topQuery.add(constantScoreSubQuery, BooleanClause.Occur.MUST);\n\n    // Unfortunately this sub-BooleanQuery\n    // will never get BS1 because today BS1 only works\n    // if topScorer=true... and actually we cannot use BS1\n    // anyways because we need subDocsScoredAtOnce:\n    int dimIndex = 0;\n    for(int i=startClause;i<clauses.length;i++) {\n      Query q = clauses[i].getQuery();\n      // DrillDownQuery always wraps each subQuery in\n      // ConstantScoreQuery:\n      assert q instanceof ConstantScoreQuery;\n      q = ((ConstantScoreQuery) q).getQuery();\n\n      final int finalDimIndex = dimIndex;\n      subQuery.add(new QueryWrapper(q,\n                                    new SetWeight() {\n                                      @Override\n                                      public void set(Weight w) {\n                                        collector.setWeight(w, finalDimIndex);\n                                      }\n                                    }),\n                   BooleanClause.Occur.SHOULD);\n      dimIndex++;\n    }\n\n    // TODO: we could better optimize the \"just one drill\n    // down\" case w/ a separate [specialized]\n    // collector...\n    int minShouldMatch = drillDownDims.size()-1;\n    if (minShouldMatch == 0) {\n      // Must add another \"fake\" clause so BQ doesn't erase\n      // itself by rewriting to the single clause:\n      Query end = new MatchAllDocsQuery();\n      end.setBoost(0.0f);\n      subQuery.add(end, BooleanClause.Occur.SHOULD);\n      minShouldMatch++;\n    }\n\n    subQuery.setMinimumNumberShouldMatch(minShouldMatch);\n\n    //System.out.println(\"EXE \" + topQuery);\n\n    // Collects against the passed-in\n    // drillDown/SidewaysCollectors as a side effect:\n    searcher.search(topQuery, collector);\n  }\n\n","bugFix":["378fbd2626d3f584f8146e25acf62ee817361580"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8428426152984b387a961487efefbe9cf62acf","date":1385332540,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#collectorMethod(DrillDownQuery,Query,int,Collector,Collector,Collector[]).mjava","sourceNew":null,"sourceOld":"  /** Uses the more general but slower method of sideways\n   *  counting. This method allows an arbitrary subQuery to\n   *  implement the drill down for a given dimension. */\n  private void collectorMethod(DrillDownQuery ddq, Query baseQuery, int startClause, Collector hitCollector, Collector drillDownCollector, Collector[] drillSidewaysCollectors) throws IOException {\n\n    BooleanClause[] clauses = ddq.getBooleanQuery().getClauses();\n\n    Map<String,Integer> drillDownDims = ddq.getDims();\n\n    BooleanQuery topQuery = new BooleanQuery(true);\n    final DrillSidewaysCollector collector = new DrillSidewaysCollector(hitCollector, drillDownCollector, drillSidewaysCollectors,\n                                                                        drillDownDims);\n\n    // TODO: if query is already a BQ we could copy that and\n    // add clauses to it, instead of doing BQ inside BQ\n    // (should be more efficient)?  Problem is this can\n    // affect scoring (coord) ... too bad we can't disable\n    // coord on a clause by clause basis:\n    topQuery.add(baseQuery, BooleanClause.Occur.MUST);\n\n    // NOTE: in theory we could just make a single BQ, with\n    // +query a b c minShouldMatch=2, but in this case,\n    // annoyingly, BS2 wraps a sub-scorer that always\n    // returns 2 as the .freq(), not how many of the\n    // SHOULD clauses matched:\n    BooleanQuery subQuery = new BooleanQuery(true);\n\n    Query wrappedSubQuery = new QueryWrapper(subQuery,\n                                             new SetWeight() {\n                                               @Override\n                                               public void set(Weight w) {\n                                                 collector.setWeight(w, -1);\n                                               }\n                                             });\n    Query constantScoreSubQuery = new ConstantScoreQuery(wrappedSubQuery);\n\n    // Don't impact score of original query:\n    constantScoreSubQuery.setBoost(0.0f);\n\n    topQuery.add(constantScoreSubQuery, BooleanClause.Occur.MUST);\n\n    // Unfortunately this sub-BooleanQuery\n    // will never get BS1 because today BS1 only works\n    // if topScorer=true... and actually we cannot use BS1\n    // anyways because we need subDocsScoredAtOnce:\n    int dimIndex = 0;\n    for(int i=startClause;i<clauses.length;i++) {\n      Query q = clauses[i].getQuery();\n      // DrillDownQuery always wraps each subQuery in\n      // ConstantScoreQuery:\n      assert q instanceof ConstantScoreQuery;\n      q = ((ConstantScoreQuery) q).getQuery();\n\n      final int finalDimIndex = dimIndex;\n      subQuery.add(new QueryWrapper(q,\n                                    new SetWeight() {\n                                      @Override\n                                      public void set(Weight w) {\n                                        collector.setWeight(w, finalDimIndex);\n                                      }\n                                    }),\n                   BooleanClause.Occur.SHOULD);\n      dimIndex++;\n    }\n\n    // TODO: we could better optimize the \"just one drill\n    // down\" case w/ a separate [specialized]\n    // collector...\n    int minShouldMatch = drillDownDims.size()-1;\n    if (minShouldMatch == 0) {\n      // Must add another \"fake\" clause so BQ doesn't erase\n      // itself by rewriting to the single clause:\n      Query end = new MatchAllDocsQuery();\n      end.setBoost(0.0f);\n      subQuery.add(end, BooleanClause.Occur.SHOULD);\n      minShouldMatch++;\n    }\n\n    subQuery.setMinimumNumberShouldMatch(minShouldMatch);\n\n    // System.out.println(\"EXE \" + topQuery);\n\n    // Collects against the passed-in\n    // drillDown/SidewaysCollectors as a side effect:\n    searcher.search(topQuery, collector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#collectorMethod(DrillDownQuery,Query,int,Collector,Collector,Collector[]).mjava","sourceNew":null,"sourceOld":"  /** Uses the more general but slower method of sideways\n   *  counting. This method allows an arbitrary subQuery to\n   *  implement the drill down for a given dimension. */\n  private void collectorMethod(DrillDownQuery ddq, Query baseQuery, int startClause, Collector hitCollector, Collector drillDownCollector, Collector[] drillSidewaysCollectors) throws IOException {\n\n    BooleanClause[] clauses = ddq.getBooleanQuery().getClauses();\n\n    Map<String,Integer> drillDownDims = ddq.getDims();\n\n    BooleanQuery topQuery = new BooleanQuery(true);\n    final DrillSidewaysCollector collector = new DrillSidewaysCollector(hitCollector, drillDownCollector, drillSidewaysCollectors,\n                                                                        drillDownDims);\n\n    // TODO: if query is already a BQ we could copy that and\n    // add clauses to it, instead of doing BQ inside BQ\n    // (should be more efficient)?  Problem is this can\n    // affect scoring (coord) ... too bad we can't disable\n    // coord on a clause by clause basis:\n    topQuery.add(baseQuery, BooleanClause.Occur.MUST);\n\n    // NOTE: in theory we could just make a single BQ, with\n    // +query a b c minShouldMatch=2, but in this case,\n    // annoyingly, BS2 wraps a sub-scorer that always\n    // returns 2 as the .freq(), not how many of the\n    // SHOULD clauses matched:\n    BooleanQuery subQuery = new BooleanQuery(true);\n\n    Query wrappedSubQuery = new QueryWrapper(subQuery,\n                                             new SetWeight() {\n                                               @Override\n                                               public void set(Weight w) {\n                                                 collector.setWeight(w, -1);\n                                               }\n                                             });\n    Query constantScoreSubQuery = new ConstantScoreQuery(wrappedSubQuery);\n\n    // Don't impact score of original query:\n    constantScoreSubQuery.setBoost(0.0f);\n\n    topQuery.add(constantScoreSubQuery, BooleanClause.Occur.MUST);\n\n    // Unfortunately this sub-BooleanQuery\n    // will never get BS1 because today BS1 only works\n    // if topScorer=true... and actually we cannot use BS1\n    // anyways because we need subDocsScoredAtOnce:\n    int dimIndex = 0;\n    for(int i=startClause;i<clauses.length;i++) {\n      Query q = clauses[i].getQuery();\n      // DrillDownQuery always wraps each subQuery in\n      // ConstantScoreQuery:\n      assert q instanceof ConstantScoreQuery;\n      q = ((ConstantScoreQuery) q).getQuery();\n\n      final int finalDimIndex = dimIndex;\n      subQuery.add(new QueryWrapper(q,\n                                    new SetWeight() {\n                                      @Override\n                                      public void set(Weight w) {\n                                        collector.setWeight(w, finalDimIndex);\n                                      }\n                                    }),\n                   BooleanClause.Occur.SHOULD);\n      dimIndex++;\n    }\n\n    // TODO: we could better optimize the \"just one drill\n    // down\" case w/ a separate [specialized]\n    // collector...\n    int minShouldMatch = drillDownDims.size()-1;\n    if (minShouldMatch == 0) {\n      // Must add another \"fake\" clause so BQ doesn't erase\n      // itself by rewriting to the single clause:\n      Query end = new MatchAllDocsQuery();\n      end.setBoost(0.0f);\n      subQuery.add(end, BooleanClause.Occur.SHOULD);\n      minShouldMatch++;\n    }\n\n    subQuery.setMinimumNumberShouldMatch(minShouldMatch);\n\n    // System.out.println(\"EXE \" + topQuery);\n\n    // Collects against the passed-in\n    // drillDown/SidewaysCollectors as a side effect:\n    searcher.search(topQuery, collector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"416910ae9ffe752ba5b6334f75d6c36e019626cc":["378fbd2626d3f584f8146e25acf62ee817361580"],"378fbd2626d3f584f8146e25acf62ee817361580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["416910ae9ffe752ba5b6334f75d6c36e019626cc","2e8428426152984b387a961487efefbe9cf62acf"],"2e8428426152984b387a961487efefbe9cf62acf":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"416910ae9ffe752ba5b6334f75d6c36e019626cc":["3cc728b07df73b197e6d940d27f9b08b63918f13","2e8428426152984b387a961487efefbe9cf62acf"],"378fbd2626d3f584f8146e25acf62ee817361580":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["378fbd2626d3f584f8146e25acf62ee817361580"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e8428426152984b387a961487efefbe9cf62acf":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}