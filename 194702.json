{"path":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#waitForRuleToExpire(String,String,String,long).mjava","commits":[{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#waitForRuleToExpire(String,String,String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#waitForRuleToExpire(String,long).mjava","sourceNew":"  private boolean waitForRuleToExpire(String collection, String shard, String splitKey, long finishTime) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    DocCollection state;\n    Slice slice;\n    boolean ruleRemoved = false;\n    long expiryTime = finishTime + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n    while (System.nanoTime() < expiryTime) {\n      cluster.getSolrClient().getZkStateReader().forceUpdateCollection(collection);\n      state = getCollectionState(collection);\n      slice = state.getSlice(shard);\n      Map<String,RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null || routingRules.isEmpty() || !routingRules.containsKey(splitKey)) {\n        ruleRemoved = true;\n        break;\n      }\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", splitKey + random().nextInt());\n      cluster.getSolrClient().add(collection, doc);\n      Thread.sleep(1000);\n    }\n    return ruleRemoved;\n  }\n\n","sourceOld":"  private boolean waitForRuleToExpire(String splitKey, long finishTime) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    ClusterState state;Slice slice;\n    boolean ruleRemoved = false;\n    long expiryTime = finishTime + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n    while (System.nanoTime() < expiryTime) {\n      getCommonCloudSolrClient().getZkStateReader().forceUpdateCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n      state = getCommonCloudSolrClient().getZkStateReader().getClusterState();\n      slice = state.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n      Map<String,RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null || routingRules.isEmpty() || !routingRules.containsKey(splitKey)) {\n        ruleRemoved = true;\n        break;\n      }\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", splitKey + random().nextInt());\n      cloudClient.add(doc);\n      Thread.sleep(1000);\n    }\n    return ruleRemoved;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#waitForRuleToExpire(String,String,String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#waitForRuleToExpire(String,long).mjava","sourceNew":"  private boolean waitForRuleToExpire(String collection, String shard, String splitKey, long finishTime) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    DocCollection state;\n    Slice slice;\n    boolean ruleRemoved = false;\n    long expiryTime = finishTime + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n    while (System.nanoTime() < expiryTime) {\n      cluster.getSolrClient().getZkStateReader().forceUpdateCollection(collection);\n      state = getCollectionState(collection);\n      slice = state.getSlice(shard);\n      Map<String,RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null || routingRules.isEmpty() || !routingRules.containsKey(splitKey)) {\n        ruleRemoved = true;\n        break;\n      }\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", splitKey + random().nextInt());\n      cluster.getSolrClient().add(collection, doc);\n      Thread.sleep(1000);\n    }\n    return ruleRemoved;\n  }\n\n","sourceOld":"  private boolean waitForRuleToExpire(String splitKey, long finishTime) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    ClusterState state;Slice slice;\n    boolean ruleRemoved = false;\n    long expiryTime = finishTime + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n    while (System.nanoTime() < expiryTime) {\n      getCommonCloudSolrClient().getZkStateReader().forceUpdateCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n      state = getCommonCloudSolrClient().getZkStateReader().getClusterState();\n      slice = state.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n      Map<String,RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null || routingRules.isEmpty() || !routingRules.containsKey(splitKey)) {\n        ruleRemoved = true;\n        break;\n      }\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", splitKey + random().nextInt());\n      cloudClient.add(doc);\n      Thread.sleep(1000);\n    }\n    return ruleRemoved;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#waitForRuleToExpire(String,String,String,long).mjava","pathOld":"/dev/null","sourceNew":"  private boolean waitForRuleToExpire(String collection, String shard, String splitKey, long finishTime) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    DocCollection state;\n    Slice slice;\n    boolean ruleRemoved = false;\n    long expiryTime = finishTime + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n    while (System.nanoTime() < expiryTime) {\n      cluster.getSolrClient().getZkStateReader().forceUpdateCollection(collection);\n      state = getCollectionState(collection);\n      slice = state.getSlice(shard);\n      Map<String,RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null || routingRules.isEmpty() || !routingRules.containsKey(splitKey)) {\n        ruleRemoved = true;\n        break;\n      }\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", splitKey + random().nextInt());\n      cluster.getSolrClient().add(collection, doc);\n      Thread.sleep(1000);\n    }\n    return ruleRemoved;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1967bed916cc89da82a1c2085f27976da6d08cbd"]},"commit2Childs":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}