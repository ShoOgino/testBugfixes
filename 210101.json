{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog#write(AddUpdateCommand,long).mjava","commits":[{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#write(AddUpdateCommand,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#write(AddUpdateCommand,long,int).mjava","sourceNew":"  /**\n   * Writes an add update command to the transaction log. This should be called only for\n   * writing in-place updates, or else pass -1 as the prevPointer.\n   * @param cmd The add update command to be written\n   * @param prevPointer The pointer in the transaction log which this update depends \n   * on (applicable for in-place updates)\n   * @return Returns the position pointer of the written update command\n   */\n  public long write(AddUpdateCommand cmd, long prevPointer) {\n    assert (-1 <= prevPointer && (cmd.isInPlaceUpdate() || (-1 == prevPointer)));\n    \n    LogCodec codec = new LogCodec(resolver);\n    SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n    try {\n      checkWriteHeader(codec, sdoc);\n\n      // adaptive buffer sizing\n      int bufSize = lastAddSize;    // unsynchronized access of lastAddSize should be fine\n      // at least 256 bytes and at most 1 MB\n      bufSize = Math.min(1024*1024, Math.max(256, bufSize+(bufSize>>3)+256));\n\n      MemOutputStream out = new MemOutputStream(new byte[bufSize]);\n      codec.init(out);\n      if (cmd.isInPlaceUpdate()) {\n        codec.writeTag(JavaBinCodec.ARR, 5);\n        codec.writeInt(UpdateLog.UPDATE_INPLACE);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeLong(prevPointer);\n        codec.writeLong(cmd.prevVersion);\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      } else {\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      }\n      lastAddSize = (int)out.size();\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n\n        /***\n         System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n         throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         }\n         ***/\n\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      // TODO: reset our file pointer back to \"pos\", the start of this record.\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error logging add\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes an add update command to the transaction log. This should be called only for\n   * writing in-place updates, or else pass -1 as the prevPointer.\n   * @param cmd The add update command to be written\n   * @param prevPointer The pointer in the transaction log which this update depends \n   * on (applicable for in-place updates)\n   * @param flags Options for writing the command to the transaction log\n   * @return Returns the position pointer of the written update command\n   */\n  public long write(AddUpdateCommand cmd, long prevPointer, int flags) {\n    assert (-1 <= prevPointer && (cmd.isInPlaceUpdate() || (-1 == prevPointer)));\n    \n    LogCodec codec = new LogCodec(resolver);\n    SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n    try {\n      checkWriteHeader(codec, sdoc);\n\n      // adaptive buffer sizing\n      int bufSize = lastAddSize;    // unsynchronized access of lastAddSize should be fine\n      // at least 256 bytes and at most 1 MB\n      bufSize = Math.min(1024*1024, Math.max(256, bufSize+(bufSize>>3)+256));\n\n      MemOutputStream out = new MemOutputStream(new byte[bufSize]);\n      codec.init(out);\n      if (cmd.isInPlaceUpdate()) {\n        codec.writeTag(JavaBinCodec.ARR, 5);\n        codec.writeInt(UpdateLog.UPDATE_INPLACE | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeLong(prevPointer);\n        codec.writeLong(cmd.prevVersion);\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      } else {\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      }\n      lastAddSize = (int)out.size();\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n\n        /***\n         System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n         throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         }\n         ***/\n\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      // TODO: reset our file pointer back to \"pos\", the start of this record.\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error logging add\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":1,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#write(AddUpdateCommand,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#write(AddUpdateCommand,long,int).mjava","sourceNew":"  /**\n   * Writes an add update command to the transaction log. This should be called only for\n   * writing in-place updates, or else pass -1 as the prevPointer.\n   * @param cmd The add update command to be written\n   * @param prevPointer The pointer in the transaction log which this update depends \n   * on (applicable for in-place updates)\n   * @return Returns the position pointer of the written update command\n   */\n  public long write(AddUpdateCommand cmd, long prevPointer) {\n    assert (-1 <= prevPointer && (cmd.isInPlaceUpdate() || (-1 == prevPointer)));\n    \n    LogCodec codec = new LogCodec(resolver);\n    SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n    try {\n      checkWriteHeader(codec, sdoc);\n\n      // adaptive buffer sizing\n      int bufSize = lastAddSize;    // unsynchronized access of lastAddSize should be fine\n      // at least 256 bytes and at most 1 MB\n      bufSize = Math.min(1024*1024, Math.max(256, bufSize+(bufSize>>3)+256));\n\n      MemOutputStream out = new MemOutputStream(new byte[bufSize]);\n      codec.init(out);\n      if (cmd.isInPlaceUpdate()) {\n        codec.writeTag(JavaBinCodec.ARR, 5);\n        codec.writeInt(UpdateLog.UPDATE_INPLACE);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeLong(prevPointer);\n        codec.writeLong(cmd.prevVersion);\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      } else {\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      }\n      lastAddSize = (int)out.size();\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n\n        /***\n         System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n         throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         }\n         ***/\n\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      // TODO: reset our file pointer back to \"pos\", the start of this record.\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error logging add\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes an add update command to the transaction log. This should be called only for\n   * writing in-place updates, or else pass -1 as the prevPointer.\n   * @param cmd The add update command to be written\n   * @param prevPointer The pointer in the transaction log which this update depends \n   * on (applicable for in-place updates)\n   * @param flags Options for writing the command to the transaction log\n   * @return Returns the position pointer of the written update command\n   */\n  public long write(AddUpdateCommand cmd, long prevPointer, int flags) {\n    assert (-1 <= prevPointer && (cmd.isInPlaceUpdate() || (-1 == prevPointer)));\n    \n    LogCodec codec = new LogCodec(resolver);\n    SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n    try {\n      checkWriteHeader(codec, sdoc);\n\n      // adaptive buffer sizing\n      int bufSize = lastAddSize;    // unsynchronized access of lastAddSize should be fine\n      // at least 256 bytes and at most 1 MB\n      bufSize = Math.min(1024*1024, Math.max(256, bufSize+(bufSize>>3)+256));\n\n      MemOutputStream out = new MemOutputStream(new byte[bufSize]);\n      codec.init(out);\n      if (cmd.isInPlaceUpdate()) {\n        codec.writeTag(JavaBinCodec.ARR, 5);\n        codec.writeInt(UpdateLog.UPDATE_INPLACE | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeLong(prevPointer);\n        codec.writeLong(cmd.prevVersion);\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      } else {\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      }\n      lastAddSize = (int)out.size();\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n\n        /***\n         System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n         throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         }\n         ***/\n\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      // TODO: reset our file pointer back to \"pos\", the start of this record.\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error logging add\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":1,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#write(AddUpdateCommand,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#write(AddUpdateCommand,long,int).mjava","sourceNew":"  /**\n   * Writes an add update command to the transaction log. This should be called only for\n   * writing in-place updates, or else pass -1 as the prevPointer.\n   * @param cmd The add update command to be written\n   * @param prevPointer The pointer in the transaction log which this update depends \n   * on (applicable for in-place updates)\n   * @return Returns the position pointer of the written update command\n   */\n  public long write(AddUpdateCommand cmd, long prevPointer) {\n    assert (-1 <= prevPointer && (cmd.isInPlaceUpdate() || (-1 == prevPointer)));\n    \n    LogCodec codec = new LogCodec(resolver);\n    SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n    try {\n      checkWriteHeader(codec, sdoc);\n\n      // adaptive buffer sizing\n      int bufSize = lastAddSize;    // unsynchronized access of lastAddSize should be fine\n      // at least 256 bytes and at most 1 MB\n      bufSize = Math.min(1024*1024, Math.max(256, bufSize+(bufSize>>3)+256));\n\n      MemOutputStream out = new MemOutputStream(new byte[bufSize]);\n      codec.init(out);\n      if (cmd.isInPlaceUpdate()) {\n        codec.writeTag(JavaBinCodec.ARR, 5);\n        codec.writeInt(UpdateLog.UPDATE_INPLACE);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeLong(prevPointer);\n        codec.writeLong(cmd.prevVersion);\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      } else {\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      }\n      lastAddSize = (int)out.size();\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n\n        /***\n         System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n         throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         }\n         ***/\n\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      // TODO: reset our file pointer back to \"pos\", the start of this record.\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error logging add\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes an add update command to the transaction log. This should be called only for\n   * writing in-place updates, or else pass -1 as the prevPointer.\n   * @param cmd The add update command to be written\n   * @param prevPointer The pointer in the transaction log which this update depends \n   * on (applicable for in-place updates)\n   * @param flags Options for writing the command to the transaction log\n   * @return Returns the position pointer of the written update command\n   */\n  public long write(AddUpdateCommand cmd, long prevPointer, int flags) {\n    assert (-1 <= prevPointer && (cmd.isInPlaceUpdate() || (-1 == prevPointer)));\n    \n    LogCodec codec = new LogCodec(resolver);\n    SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n    try {\n      checkWriteHeader(codec, sdoc);\n\n      // adaptive buffer sizing\n      int bufSize = lastAddSize;    // unsynchronized access of lastAddSize should be fine\n      // at least 256 bytes and at most 1 MB\n      bufSize = Math.min(1024*1024, Math.max(256, bufSize+(bufSize>>3)+256));\n\n      MemOutputStream out = new MemOutputStream(new byte[bufSize]);\n      codec.init(out);\n      if (cmd.isInPlaceUpdate()) {\n        codec.writeTag(JavaBinCodec.ARR, 5);\n        codec.writeInt(UpdateLog.UPDATE_INPLACE | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeLong(prevPointer);\n        codec.writeLong(cmd.prevVersion);\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      } else {\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      }\n      lastAddSize = (int)out.size();\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n\n        /***\n         System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n         throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         }\n         ***/\n\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      // TODO: reset our file pointer back to \"pos\", the start of this record.\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error logging add\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#write(AddUpdateCommand,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#write(AddUpdateCommand,long).mjava","sourceNew":"  /**\n   * Writes an add update command to the transaction log. This should be called only for\n   * writing in-place updates, or else pass -1 as the prevPointer.\n   * @param cmd         The add update command to be written\n   * @param prevPointer The pointer in the transaction log which this update depends\n   *                    on (applicable for in-place updates)\n   * @return Returns the position pointer of the written update command\n   */\n  public long write(AddUpdateCommand cmd, long prevPointer) {\n    assert (-1 <= prevPointer && (cmd.isInPlaceUpdate() || (-1 == prevPointer)));\n\n    LogCodec codec = new LogCodec(resolver);\n    SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n    try {\n      checkWriteHeader(codec, sdoc);\n\n      // adaptive buffer sizing\n      int bufSize = lastAddSize;    // unsynchronized access of lastAddSize should be fine\n      // at least 256 bytes and at most 1 MB\n      bufSize = Math.min(1024 * 1024, Math.max(256, bufSize + (bufSize >> 3) + 256));\n\n      MemOutputStream out = new MemOutputStream(new byte[bufSize]);\n      codec.init(out);\n      if (cmd.isInPlaceUpdate()) {\n        codec.writeTag(JavaBinCodec.ARR, 5);\n        codec.writeInt(UpdateLog.UPDATE_INPLACE);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeLong(prevPointer);\n        codec.writeLong(cmd.prevVersion);\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      } else {\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      }\n      lastAddSize = (int) out.size();\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n\n        /***\n         System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n         throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         }\n         ***/\n\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      // TODO: reset our file pointer back to \"pos\", the start of this record.\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error logging add\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes an add update command to the transaction log. This should be called only for\n   * writing in-place updates, or else pass -1 as the prevPointer.\n   * @param cmd The add update command to be written\n   * @param prevPointer The pointer in the transaction log which this update depends \n   * on (applicable for in-place updates)\n   * @return Returns the position pointer of the written update command\n   */\n  public long write(AddUpdateCommand cmd, long prevPointer) {\n    assert (-1 <= prevPointer && (cmd.isInPlaceUpdate() || (-1 == prevPointer)));\n    \n    LogCodec codec = new LogCodec(resolver);\n    SolrInputDocument sdoc = cmd.getSolrInputDocument();\n\n    try {\n      checkWriteHeader(codec, sdoc);\n\n      // adaptive buffer sizing\n      int bufSize = lastAddSize;    // unsynchronized access of lastAddSize should be fine\n      // at least 256 bytes and at most 1 MB\n      bufSize = Math.min(1024*1024, Math.max(256, bufSize+(bufSize>>3)+256));\n\n      MemOutputStream out = new MemOutputStream(new byte[bufSize]);\n      codec.init(out);\n      if (cmd.isInPlaceUpdate()) {\n        codec.writeTag(JavaBinCodec.ARR, 5);\n        codec.writeInt(UpdateLog.UPDATE_INPLACE);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeLong(prevPointer);\n        codec.writeLong(cmd.prevVersion);\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      } else {\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.ADD);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeSolrInputDocument(cmd.getSolrInputDocument());\n      }\n      lastAddSize = (int)out.size();\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n\n        /***\n         System.out.println(\"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         if (pos != fos.size()) {\n         throw new RuntimeException(\"ERROR\" + \"###writing at \" + pos + \" fos.size()=\" + fos.size() + \" raf.length()=\" + raf.length());\n         }\n         ***/\n\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      // TODO: reset our file pointer back to \"pos\", the start of this record.\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error logging add\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1455c941cc4ce652efc776fc23471b0e499246f6"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["1455c941cc4ce652efc776fc23471b0e499246f6"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"1455c941cc4ce652efc776fc23471b0e499246f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","1455c941cc4ce652efc776fc23471b0e499246f6"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"1455c941cc4ce652efc776fc23471b0e499246f6":["b70042a8a492f7054d480ccdd2be9796510d4327","ba33781da68babcaa5828121b443d3eb5c9d8480","f592209545c71895260367152601e9200399776d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}