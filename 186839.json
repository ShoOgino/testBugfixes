{"path":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(boolean,Class[#]).mjava","sourceNew":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","sourceOld":"  private static Collector collector(boolean needsScores, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return needsScores;\n      }\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(boolean,Class[#]).mjava","sourceNew":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","sourceOld":"  private static Collector collector(boolean needsScores, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return needsScores;\n      }\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff113a9993e8c54238f321fd07b74e8b28913b85","date":1531207054,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","sourceNew":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            while (expectedScorer.equals(scorer.getClass()) == false && scorer instanceof FilterScorer) {\n              scorer = ((FilterScorer) scorer).in;\n            }\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","sourceOld":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","sourceNew":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            while (expectedScorer.equals(scorer.getClass()) == false && scorer instanceof FilterScorer) {\n              scorer = ((FilterScorer) scorer).in;\n            }\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","sourceOld":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","sourceNew":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            while (expectedScorer.equals(scorer.getClass()) == false && scorer instanceof FilterScorer) {\n              scorer = ((FilterScorer) scorer).in;\n            }\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","sourceOld":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","sourceNew":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorable scorer) throws IOException {\n            while (expectedScorer.equals(scorer.getClass()) == false && scorer instanceof FilterScorable) {\n              scorer = ((FilterScorable) scorer).in;\n            }\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","sourceOld":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            while (expectedScorer.equals(scorer.getClass()) == false && scorer instanceof FilterScorer) {\n              scorer = ((FilterScorer) scorer).in;\n            }\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d488a38bddbdcc0d425b27beb126f54df6dd82a4","date":1598268476,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#collector(ScoreMode,Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","sourceNew":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorable scorer) throws IOException {\n            while (expectedScorer.equals(scorer.getClass()) == false && scorer instanceof FilterScorable) {\n              scorer = ((FilterScorable) scorer).in;\n            }\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","sourceOld":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorable scorer) throws IOException {\n            while (expectedScorer.equals(scorer.getClass()) == false && scorer instanceof FilterScorable) {\n              scorer = ((FilterScorable) scorer).in;\n            }\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["417142ff08fda9cf0b72d5133e63097a166c6458","ff113a9993e8c54238f321fd07b74e8b28913b85"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["ff113a9993e8c54238f321fd07b74e8b28913b85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff113a9993e8c54238f321fd07b74e8b28913b85":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["417142ff08fda9cf0b72d5133e63097a166c6458","ff113a9993e8c54238f321fd07b74e8b28913b85"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"285244982ce6aa163d1e60a707f0e6e121736ce5":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"ff113a9993e8c54238f321fd07b74e8b28913b85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","285244982ce6aa163d1e60a707f0e6e121736ce5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ff113a9993e8c54238f321fd07b74e8b28913b85","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}