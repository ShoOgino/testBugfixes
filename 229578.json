{"path":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","commits":[{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(InputStream,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n\n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new IOException(\"Unknown format version:\" + format);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      }\n      else{\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n      }\n    }\n\n  }\n\n","sourceOld":"  SegmentTermEnum(InputStream i, FieldInfos fis, boolean isi)\n          throws IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n\n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new IOException(\"Unknown format version:\" + format);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      }\n      else{\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n\n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      }\n      else{\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n      }\n    }\n\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n\n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new IOException(\"Unknown format version:\" + format);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      }\n      else{\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n      }\n    }\n\n  }\n\n","bugFix":["15c469602973ef1a33c9a07367a380d278ffab20","770281b8a8459cafcdd2354b6a06078fea2d83c9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709","date":1180597733,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        if (format == -3) {\n          // this new format introduces multi-level skipping\n          maxSkipLevels = input.readInt();\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n\n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      }\n      else{\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format + \" expected \" + TermInfosWriter.FORMAT_CURRENT + \" or higher\");\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        if (format <= TermInfosWriter.FORMAT) {\n          // this new format introduces multi-level skipping\n          maxSkipLevels = input.readInt();\n        }\n      }\n    }\n    if (format > TermInfosWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n      termBuffer.setPreUTF8Strings();\n      scanBuffer.setPreUTF8Strings();\n      prevBuffer.setPreUTF8Strings();\n    }\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        if (format == -3) {\n          // this new format introduces multi-level skipping\n          maxSkipLevels = input.readInt();\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7a2dcaefe8963b1ec6c84fe34339e810bbae515","date":1240907617,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format + \" expected \" + TermInfosWriter.FORMAT_CURRENT + \" or higher\");\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        if (format <= TermInfosWriter.FORMAT) {\n          // this new format introduces multi-level skipping\n          maxSkipLevels = input.readInt();\n        }\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n    if (format > TermInfosWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n      termBuffer.setPreUTF8Strings();\n      scanBuffer.setPreUTF8Strings();\n      prevBuffer.setPreUTF8Strings();\n    }\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format + \" expected \" + TermInfosWriter.FORMAT_CURRENT + \" or higher\");\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        if (format <= TermInfosWriter.FORMAT) {\n          // this new format introduces multi-level skipping\n          maxSkipLevels = input.readInt();\n        }\n      }\n    }\n    if (format > TermInfosWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n      termBuffer.setPreUTF8Strings();\n      scanBuffer.setPreUTF8Strings();\n      prevBuffer.setPreUTF8Strings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format + \" expected \" + TermInfosWriter.FORMAT_CURRENT + \" or higher\");\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        if (format <= TermInfosWriter.FORMAT) {\n          // this new format introduces multi-level skipping\n          maxSkipLevels = input.readInt();\n        }\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n    if (format > TermInfosWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n      termBuffer.setPreUTF8Strings();\n      scanBuffer.setPreUTF8Strings();\n      prevBuffer.setPreUTF8Strings();\n    }\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format + \" expected \" + TermInfosWriter.FORMAT_CURRENT + \" or higher\");\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        if (format <= TermInfosWriter.FORMAT) {\n          // this new format introduces multi-level skipping\n          maxSkipLevels = input.readInt();\n        }\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n    if (format > TermInfosWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n      termBuffer.setPreUTF8Strings();\n      scanBuffer.setPreUTF8Strings();\n      prevBuffer.setPreUTF8Strings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e971ba25509e21a130fef61f0687be0446ca27a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1b54a9bc667895a2095a886184bf69a3179e63df":["e971ba25509e21a130fef61f0687be0446ca27a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"e7a2dcaefe8963b1ec6c84fe34339e810bbae515":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e7a2dcaefe8963b1ec6c84fe34339e810bbae515"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["1b54a9bc667895a2095a886184bf69a3179e63df"]},"commit2Childs":{"e971ba25509e21a130fef61f0687be0446ca27a0":["1b54a9bc667895a2095a886184bf69a3179e63df"],"1b54a9bc667895a2095a886184bf69a3179e63df":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e971ba25509e21a130fef61f0687be0446ca27a0"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["e7a2dcaefe8963b1ec6c84fe34339e810bbae515"],"e7a2dcaefe8963b1ec6c84fe34339e810bbae515":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}