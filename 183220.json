{"path":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#CdcrReplicatorManager(SolrCore,String,SolrParams,Map[String,List[SolrParams]]).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#CdcrReplicatorManager(SolrCore,String,SolrParams,Map[String,List[SolrParams]]).mjava","pathOld":"/dev/null","sourceNew":"  CdcrReplicatorManager(final SolrCore core, String path,\n                        SolrParams replicatorConfiguration,\n                        Map<String, List<SolrParams>> replicasConfiguration) {\n    this.core = core;\n    this.path = path;\n\n    // create states\n    replicatorStates = new ArrayList<>();\n    String myCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    List<SolrParams> targets = replicasConfiguration.get(myCollection);\n    if (targets != null) {\n      for (SolrParams params : targets) {\n        String zkHost = params.get(CdcrParams.ZK_HOST_PARAM);\n        String targetCollection = params.get(CdcrParams.TARGET_COLLECTION_PARAM);\n\n        CloudSolrClient client = new CloudSolrClient(zkHost, true);\n        client.setDefaultCollection(targetCollection);\n        replicatorStates.add(new CdcrReplicatorState(targetCollection, zkHost, client));\n      }\n    }\n\n    this.scheduler = new CdcrReplicatorScheduler(this, replicatorConfiguration);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#CdcrReplicatorManager(SolrCore,String,SolrParams,Map[String,List[SolrParams]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#CdcrReplicatorManager(SolrCore,String,SolrParams,Map[String,List[SolrParams]]).mjava","sourceNew":"  CdcrReplicatorManager(final SolrCore core, String path,\n                        SolrParams replicatorConfiguration,\n                        Map<String, List<SolrParams>> replicasConfiguration) {\n    this.core = core;\n    this.path = path;\n\n    // create states\n    replicatorStates = new ArrayList<>();\n    String myCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    List<SolrParams> targets = replicasConfiguration.get(myCollection);\n    if (targets != null) {\n      for (SolrParams params : targets) {\n        String zkHost = params.get(CdcrParams.ZK_HOST_PARAM);\n        String targetCollection = params.get(CdcrParams.TARGET_COLLECTION_PARAM);\n\n        CloudSolrClient client = new Builder()\n            .withZkHost(zkHost)\n            .sendUpdatesOnlyToShardLeaders()\n            .build();\n        client.setDefaultCollection(targetCollection);\n        replicatorStates.add(new CdcrReplicatorState(targetCollection, zkHost, client));\n      }\n    }\n\n    this.scheduler = new CdcrReplicatorScheduler(this, replicatorConfiguration);\n  }\n\n","sourceOld":"  CdcrReplicatorManager(final SolrCore core, String path,\n                        SolrParams replicatorConfiguration,\n                        Map<String, List<SolrParams>> replicasConfiguration) {\n    this.core = core;\n    this.path = path;\n\n    // create states\n    replicatorStates = new ArrayList<>();\n    String myCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    List<SolrParams> targets = replicasConfiguration.get(myCollection);\n    if (targets != null) {\n      for (SolrParams params : targets) {\n        String zkHost = params.get(CdcrParams.ZK_HOST_PARAM);\n        String targetCollection = params.get(CdcrParams.TARGET_COLLECTION_PARAM);\n\n        CloudSolrClient client = new CloudSolrClient(zkHost, true);\n        client.setDefaultCollection(targetCollection);\n        replicatorStates.add(new CdcrReplicatorState(targetCollection, zkHost, client));\n      }\n    }\n\n    this.scheduler = new CdcrReplicatorScheduler(this, replicatorConfiguration);\n  }\n\n","bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#CdcrReplicatorManager(SolrCore,String,SolrParams,Map[String,List[SolrParams]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#CdcrReplicatorManager(SolrCore,String,SolrParams,Map[String,List[SolrParams]]).mjava","sourceNew":"  CdcrReplicatorManager(final SolrCore core, String path,\n                        SolrParams replicatorConfiguration,\n                        Map<String, List<SolrParams>> replicasConfiguration) {\n    this.core = core;\n    this.path = path;\n\n    // create states\n    replicatorStates = new ArrayList<>();\n    String myCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    List<SolrParams> targets = replicasConfiguration.get(myCollection);\n    if (targets != null) {\n      for (SolrParams params : targets) {\n        String zkHost = params.get(CdcrParams.ZK_HOST_PARAM);\n        String targetCollection = params.get(CdcrParams.TARGET_COLLECTION_PARAM);\n\n        CloudSolrClient client = new Builder()\n            .withZkHost(zkHost)\n            .sendUpdatesOnlyToShardLeaders()\n            .build();\n        client.setDefaultCollection(targetCollection);\n        replicatorStates.add(new CdcrReplicatorState(targetCollection, zkHost, client));\n      }\n    }\n\n    this.scheduler = new CdcrReplicatorScheduler(this, replicatorConfiguration);\n  }\n\n","sourceOld":"  CdcrReplicatorManager(final SolrCore core, String path,\n                        SolrParams replicatorConfiguration,\n                        Map<String, List<SolrParams>> replicasConfiguration) {\n    this.core = core;\n    this.path = path;\n\n    // create states\n    replicatorStates = new ArrayList<>();\n    String myCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    List<SolrParams> targets = replicasConfiguration.get(myCollection);\n    if (targets != null) {\n      for (SolrParams params : targets) {\n        String zkHost = params.get(CdcrParams.ZK_HOST_PARAM);\n        String targetCollection = params.get(CdcrParams.TARGET_COLLECTION_PARAM);\n\n        CloudSolrClient client = new CloudSolrClient(zkHost, true);\n        client.setDefaultCollection(targetCollection);\n        replicatorStates.add(new CdcrReplicatorState(targetCollection, zkHost, client));\n      }\n    }\n\n    this.scheduler = new CdcrReplicatorScheduler(this, replicatorConfiguration);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#CdcrReplicatorManager(SolrCore,String,SolrParams,Map[String,List[SolrParams]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#CdcrReplicatorManager(SolrCore,String,SolrParams,Map[String,List[SolrParams]]).mjava","sourceNew":"  CdcrReplicatorManager(final SolrCore core, String path,\n                        SolrParams replicatorConfiguration,\n                        Map<String, List<SolrParams>> replicasConfiguration) {\n    this.core = core;\n    this.path = path;\n\n    // create states\n    replicatorStates = new ArrayList<>();\n    String myCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    List<SolrParams> targets = replicasConfiguration.get(myCollection);\n    if (targets != null) {\n      for (SolrParams params : targets) {\n        String zkHost = params.get(CdcrParams.ZK_HOST_PARAM);\n        String targetCollection = params.get(CdcrParams.TARGET_COLLECTION_PARAM);\n\n        CloudSolrClient client = new Builder(Collections.singletonList(zkHost), Optional.empty())\n            .sendUpdatesOnlyToShardLeaders()\n            .build();\n        client.setDefaultCollection(targetCollection);\n        replicatorStates.add(new CdcrReplicatorState(targetCollection, zkHost, client));\n      }\n    }\n\n    this.scheduler = new CdcrReplicatorScheduler(this, replicatorConfiguration);\n  }\n\n","sourceOld":"  CdcrReplicatorManager(final SolrCore core, String path,\n                        SolrParams replicatorConfiguration,\n                        Map<String, List<SolrParams>> replicasConfiguration) {\n    this.core = core;\n    this.path = path;\n\n    // create states\n    replicatorStates = new ArrayList<>();\n    String myCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    List<SolrParams> targets = replicasConfiguration.get(myCollection);\n    if (targets != null) {\n      for (SolrParams params : targets) {\n        String zkHost = params.get(CdcrParams.ZK_HOST_PARAM);\n        String targetCollection = params.get(CdcrParams.TARGET_COLLECTION_PARAM);\n\n        CloudSolrClient client = new Builder()\n            .withZkHost(zkHost)\n            .sendUpdatesOnlyToShardLeaders()\n            .build();\n        client.setDefaultCollection(targetCollection);\n        replicatorStates.add(new CdcrReplicatorState(targetCollection, zkHost, client));\n      }\n    }\n\n    this.scheduler = new CdcrReplicatorScheduler(this, replicatorConfiguration);\n  }\n\n","bugFix":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#CdcrReplicatorManager(SolrCore,String,SolrParams,Map[String,List[SolrParams]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#CdcrReplicatorManager(SolrCore,String,SolrParams,Map[String,List[SolrParams]]).mjava","sourceNew":"  CdcrReplicatorManager(final SolrCore core, String path,\n                        SolrParams replicatorConfiguration,\n                        Map<String, List<SolrParams>> replicasConfiguration) {\n    this.core = core;\n    this.path = path;\n\n    // create states\n    replicatorStates = new ArrayList<>();\n    String myCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    List<SolrParams> targets = replicasConfiguration.get(myCollection);\n    if (targets != null) {\n      for (SolrParams params : targets) {\n        String zkHost = params.get(CdcrParams.ZK_HOST_PARAM);\n        String targetCollection = params.get(CdcrParams.TARGET_COLLECTION_PARAM);\n\n        CloudSolrClient client = new Builder(Collections.singletonList(zkHost), Optional.empty())\n            .withSocketTimeout(30000).withConnectionTimeout(15000)\n            .sendUpdatesOnlyToShardLeaders()\n            .build();\n        client.setDefaultCollection(targetCollection);\n        replicatorStates.add(new CdcrReplicatorState(targetCollection, zkHost, client));\n      }\n    }\n\n    this.scheduler = new CdcrReplicatorScheduler(this, replicatorConfiguration);\n  }\n\n","sourceOld":"  CdcrReplicatorManager(final SolrCore core, String path,\n                        SolrParams replicatorConfiguration,\n                        Map<String, List<SolrParams>> replicasConfiguration) {\n    this.core = core;\n    this.path = path;\n\n    // create states\n    replicatorStates = new ArrayList<>();\n    String myCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    List<SolrParams> targets = replicasConfiguration.get(myCollection);\n    if (targets != null) {\n      for (SolrParams params : targets) {\n        String zkHost = params.get(CdcrParams.ZK_HOST_PARAM);\n        String targetCollection = params.get(CdcrParams.TARGET_COLLECTION_PARAM);\n\n        CloudSolrClient client = new Builder(Collections.singletonList(zkHost), Optional.empty())\n            .sendUpdatesOnlyToShardLeaders()\n            .build();\n        client.setDefaultCollection(targetCollection);\n        replicatorStates.add(new CdcrReplicatorState(targetCollection, zkHost, client));\n      }\n    }\n\n    this.scheduler = new CdcrReplicatorScheduler(this, replicatorConfiguration);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#CdcrReplicatorManager(SolrCore,String,SolrParams,Map[String,List[SolrParams]]).mjava","sourceNew":null,"sourceOld":"  CdcrReplicatorManager(final SolrCore core, String path,\n                        SolrParams replicatorConfiguration,\n                        Map<String, List<SolrParams>> replicasConfiguration) {\n    this.core = core;\n    this.path = path;\n\n    // create states\n    replicatorStates = new ArrayList<>();\n    String myCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    List<SolrParams> targets = replicasConfiguration.get(myCollection);\n    if (targets != null) {\n      for (SolrParams params : targets) {\n        String zkHost = params.get(CdcrParams.ZK_HOST_PARAM);\n        String targetCollection = params.get(CdcrParams.TARGET_COLLECTION_PARAM);\n\n        CloudSolrClient client = new Builder(Collections.singletonList(zkHost), Optional.empty())\n            .withSocketTimeout(30000).withConnectionTimeout(15000)\n            .sendUpdatesOnlyToShardLeaders()\n            .build();\n        client.setDefaultCollection(targetCollection);\n        replicatorStates.add(new CdcrReplicatorState(targetCollection, zkHost, client));\n      }\n    }\n\n    this.scheduler = new CdcrReplicatorScheduler(this, replicatorConfiguration);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["86290366cefc1b9d4eced13b430858c4a4c0421d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}