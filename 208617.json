{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testResilienceWithDeleteByQueryOnTarget().mjava","commits":[{"id":"11f21773085db637873ba6e0bcd4265b2b4c7730","date":1534756753,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testResilienceWithDeleteByQueryOnTarget().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    createCollections();\n\n    // Start CDCR\n    CdcrTestsUtil.cdcrRestart(sourceSolrClient);\n\n    CdcrTestsUtil.indexRandomDocs(50, sourceSolrClient);\n\n    assertEquals(50, CdcrTestsUtil.waitForClusterToSync\n        (sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound(), targetSolrClient));\n\n    sourceSolrClient.deleteByQuery(ALL_Q, 1);\n\n    assertEquals(0, CdcrTestsUtil.waitForClusterToSync(0, sourceSolrClient));\n    assertEquals(0, CdcrTestsUtil.waitForClusterToSync\n        (sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound(), targetSolrClient));\n\n    CdcrTestsUtil.indexRandomDocs(51, 101, sourceSolrClient);\n\n    assertEquals(50, CdcrTestsUtil.waitForClusterToSync\n        (sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound(), targetSolrClient));\n\n    targetSolrClient.deleteByQuery(ALL_Q, 1);\n\n    assertEquals(50, sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound());\n    assertEquals(0, CdcrTestsUtil.waitForClusterToSync(0, targetSolrClient));\n\n    CdcrTestsUtil.indexRandomDocs(102, 152, sourceSolrClient);\n\n    assertEquals(100, sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound());\n    assertEquals(50, CdcrTestsUtil.waitForClusterToSync(50, targetSolrClient));\n\n    deleteCollections();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testResilienceWithDeleteByQueryOnTarget().mjava","sourceNew":null,"sourceOld":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    createCollections();\n\n    // Start CDCR\n    CdcrTestsUtil.cdcrRestart(sourceSolrClient);\n\n    CdcrTestsUtil.indexRandomDocs(50, sourceSolrClient);\n\n    assertEquals(50, CdcrTestsUtil.waitForClusterToSync\n        (sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound(), targetSolrClient));\n\n    sourceSolrClient.deleteByQuery(ALL_Q, 1);\n\n    assertEquals(0, CdcrTestsUtil.waitForClusterToSync(0, sourceSolrClient));\n    assertEquals(0, CdcrTestsUtil.waitForClusterToSync\n        (sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound(), targetSolrClient));\n\n    CdcrTestsUtil.indexRandomDocs(51, 101, sourceSolrClient);\n\n    assertEquals(50, CdcrTestsUtil.waitForClusterToSync\n        (sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound(), targetSolrClient));\n\n    targetSolrClient.deleteByQuery(ALL_Q, 1);\n\n    assertEquals(50, sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound());\n    assertEquals(0, CdcrTestsUtil.waitForClusterToSync(0, targetSolrClient));\n\n    CdcrTestsUtil.indexRandomDocs(102, 152, sourceSolrClient);\n\n    assertEquals(100, sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound());\n    assertEquals(50, CdcrTestsUtil.waitForClusterToSync(50, targetSolrClient));\n\n    deleteCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}