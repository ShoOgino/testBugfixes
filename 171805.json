{"path":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(CoreDescriptor).mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Remove the coreNodeName from terms map and also remove any expired listeners\r\n   * @return Return true if this object should not be reused\r\n   */\r\n  boolean removeTerm(CoreDescriptor cd) {\r\n    int numListeners;\r\n    synchronized (listeners) {\r\n      // solrcore already closed\r\n      listeners.removeIf(coreTermWatcher -> !coreTermWatcher.onTermChanged(terms));\r\n      numListeners = listeners.size();\r\n    }\r\n    Terms newTerms;\r\n    while ( (newTerms = terms.removeTerm(cd.getCloudDescriptor().getCoreNodeName())) != null) {\r\n      try {\r\n        if (saveTerms(newTerms)) return numListeners == 0;\r\n      } catch (KeeperException.NoNodeException e) {\r\n        return true;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9339df295b9162e4c81adbb4da44b5939d27c1ef","date":1520594349,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(CoreDescriptor).mjava","sourceNew":"  /**\r\n   * Remove the coreNodeName from terms map and also remove any expired listeners\r\n   * @return Return true if this object should not be reused\r\n   */\r\n  boolean removeTerm(CoreDescriptor cd) {\r\n    int numListeners;\r\n    synchronized (listeners) {\r\n      // solrcore already closed\r\n      listeners.removeIf(coreTermWatcher -> !coreTermWatcher.onTermChanged(terms));\r\n      numListeners = listeners.size();\r\n    }\r\n    return removeTerm(cd.getCloudDescriptor().getCoreNodeName()) || numListeners == 0;\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Remove the coreNodeName from terms map and also remove any expired listeners\r\n   * @return Return true if this object should not be reused\r\n   */\r\n  boolean removeTerm(CoreDescriptor cd) {\r\n    int numListeners;\r\n    synchronized (listeners) {\r\n      // solrcore already closed\r\n      listeners.removeIf(coreTermWatcher -> !coreTermWatcher.onTermChanged(terms));\r\n      numListeners = listeners.size();\r\n    }\r\n    Terms newTerms;\r\n    while ( (newTerms = terms.removeTerm(cd.getCloudDescriptor().getCoreNodeName())) != null) {\r\n      try {\r\n        if (saveTerms(newTerms)) return numListeners == 0;\r\n      } catch (KeeperException.NoNodeException e) {\r\n        return true;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b990ee56c39c454f5c6bc2e645d1286e93acee","date":1579181439,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(CoreDescriptor).mjava","sourceNew":"  /**\n   * Remove the coreNodeName from terms map and also remove any expired listeners\n   * @return Return true if this object should not be reused\n   */\n  boolean removeTerm(CoreDescriptor cd) {\n    int numListeners;\n    synchronized (listeners) {\n      // solrcore already closed\n      listeners.removeIf(coreTermWatcher -> !coreTermWatcher.onTermChanged(terms));\n      numListeners = listeners.size();\n    }\n    return removeTerm(cd.getCloudDescriptor().getCoreNodeName()) || numListeners == 0;\n  }\n\n","sourceOld":"  /**\r\n   * Remove the coreNodeName from terms map and also remove any expired listeners\r\n   * @return Return true if this object should not be reused\r\n   */\r\n  boolean removeTerm(CoreDescriptor cd) {\r\n    int numListeners;\r\n    synchronized (listeners) {\r\n      // solrcore already closed\r\n      listeners.removeIf(coreTermWatcher -> !coreTermWatcher.onTermChanged(terms));\r\n      numListeners = listeners.size();\r\n    }\r\n    return removeTerm(cd.getCloudDescriptor().getCoreNodeName()) || numListeners == 0;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64b136610bf3772c70e2d86fa4c913425cedbca5","date":1580107100,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#removeTerm(CoreDescriptor).mjava","sourceNew":"  /**\n   * Remove the coreNodeName from terms map and also remove any expired listeners\n   * @return Return true if this object should not be reused\n   */\n  boolean removeTerm(CoreDescriptor cd) {\n    int numListeners;\n    synchronized (listeners) {\n      // solrcore already closed\n      listeners.removeIf(coreTermWatcher -> !coreTermWatcher.onTermChanged(terms.get()));\n      numListeners = listeners.size();\n    }\n    return removeTerm(cd.getCloudDescriptor().getCoreNodeName()) || numListeners == 0;\n  }\n\n","sourceOld":"  /**\n   * Remove the coreNodeName from terms map and also remove any expired listeners\n   * @return Return true if this object should not be reused\n   */\n  boolean removeTerm(CoreDescriptor cd) {\n    int numListeners;\n    synchronized (listeners) {\n      // solrcore already closed\n      listeners.removeIf(coreTermWatcher -> !coreTermWatcher.onTermChanged(terms));\n      numListeners = listeners.size();\n    }\n    return removeTerm(cd.getCloudDescriptor().getCoreNodeName()) || numListeners == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14b990ee56c39c454f5c6bc2e645d1286e93acee":["9339df295b9162e4c81adbb4da44b5939d27c1ef"],"9339df295b9162e4c81adbb4da44b5939d27c1ef":["84f20f331d8001864545c7021812d8c6509c7593"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"64b136610bf3772c70e2d86fa4c913425cedbca5":["14b990ee56c39c454f5c6bc2e645d1286e93acee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64b136610bf3772c70e2d86fa4c913425cedbca5"]},"commit2Childs":{"14b990ee56c39c454f5c6bc2e645d1286e93acee":["64b136610bf3772c70e2d86fa4c913425cedbca5"],"9339df295b9162e4c81adbb4da44b5939d27c1ef":["14b990ee56c39c454f5c6bc2e645d1286e93acee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"84f20f331d8001864545c7021812d8c6509c7593":["9339df295b9162e4c81adbb4da44b5939d27c1ef"],"64b136610bf3772c70e2d86fa4c913425cedbca5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}