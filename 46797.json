{"path":"solr/core/src/java/org/apache/solr/handler/loader/JavabinLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","commits":[{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JavabinLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream, UpdateRequestProcessor processor) throws Exception {\n    InputStream is = null;\n    try {\n      is = stream.getStream();\n      parseAndLoadDocs(req, rsp, is, processor);\n    } finally {\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac35531329b1809368fb0780bcf1e72d0add3c21","date":1525474926,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JavabinLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JavabinLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream cs, UpdateRequestProcessor processor) throws Exception {\n    InputStream stream = cs.getStream();\n    UpdateRequest update = null;\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      private AddUpdateCommand addCmd = null;\n\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest updateRequest, Integer commitWithin, Boolean overwrite) {\n        if (document == null) {\n          // Perhaps commit from the parameters\n          try {\n            RequestHandlerUtils.handleCommit(req, processor, updateRequest.getParams(), false);\n            RequestHandlerUtils.handleRollback(req, processor, updateRequest.getParams(), false);\n          } catch (IOException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR handling commit/rollback\");\n          }\n          return;\n        }\n        if (addCmd == null) {\n          addCmd = getAddCommand(req, updateRequest.getParams());\n        }\n        addCmd.solrDoc = document;\n        if (commitWithin != null) {\n          addCmd.commitWithin = commitWithin;\n        }\n        if (overwrite != null) {\n          addCmd.overwrite = overwrite;\n        }\n\n        if (updateRequest.isLastDocInBatch()) {\n          // this is a hint to downstream code that indicates we've sent the last doc in a batch\n          addCmd.isLastDocInBatch = true;\n        }\n\n        try {\n          processor.processAdd(addCmd);\n          addCmd.clear();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document, e);\n        }\n      }\n    };\n    FastInputStream in = FastInputStream.wrap(stream);\n    for (; ; ) {\n      if (in.peek() == -1) return;\n      try {\n        update = new JavaBinUpdateRequestCodec().unmarshal(in, handler);\n      } catch (EOFException e) {\n        break; // this is expected\n      }\n      if (update.getDeleteByIdMap() != null || update.getDeleteQuery() != null) {\n        delete(req, update, processor);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream, UpdateRequestProcessor processor) throws Exception {\n    InputStream is = null;\n    try {\n      is = stream.getStream();\n      parseAndLoadDocs(req, rsp, is, processor);\n    } finally {\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cff47d27eb02068a9e554ff2d11e4bfd83875c20","date":1525634759,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JavabinLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JavabinLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream, UpdateRequestProcessor processor) throws Exception {\n    InputStream is = null;\n    try {\n      is = stream.getStream();\n      parseAndLoadDocs(req, rsp, is, processor);\n    } finally {\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream cs, UpdateRequestProcessor processor) throws Exception {\n    InputStream stream = cs.getStream();\n    UpdateRequest update = null;\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      private AddUpdateCommand addCmd = null;\n\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest updateRequest, Integer commitWithin, Boolean overwrite) {\n        if (document == null) {\n          // Perhaps commit from the parameters\n          try {\n            RequestHandlerUtils.handleCommit(req, processor, updateRequest.getParams(), false);\n            RequestHandlerUtils.handleRollback(req, processor, updateRequest.getParams(), false);\n          } catch (IOException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR handling commit/rollback\");\n          }\n          return;\n        }\n        if (addCmd == null) {\n          addCmd = getAddCommand(req, updateRequest.getParams());\n        }\n        addCmd.solrDoc = document;\n        if (commitWithin != null) {\n          addCmd.commitWithin = commitWithin;\n        }\n        if (overwrite != null) {\n          addCmd.overwrite = overwrite;\n        }\n\n        if (updateRequest.isLastDocInBatch()) {\n          // this is a hint to downstream code that indicates we've sent the last doc in a batch\n          addCmd.isLastDocInBatch = true;\n        }\n\n        try {\n          processor.processAdd(addCmd);\n          addCmd.clear();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"ERROR adding document \" + document, e);\n        }\n      }\n    };\n    FastInputStream in = FastInputStream.wrap(stream);\n    for (; ; ) {\n      if (in.peek() == -1) return;\n      try {\n        update = new JavaBinUpdateRequestCodec().unmarshal(in, handler);\n      } catch (EOFException e) {\n        break; // this is expected\n      }\n      if (update.getDeleteByIdMap() != null || update.getDeleteQuery() != null) {\n        delete(req, update, processor);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cff47d27eb02068a9e554ff2d11e4bfd83875c20":["ac35531329b1809368fb0780bcf1e72d0add3c21"],"042e4d934397657ba04c82b46cc5665076bc5c58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac35531329b1809368fb0780bcf1e72d0add3c21":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cff47d27eb02068a9e554ff2d11e4bfd83875c20"]},"commit2Childs":{"cff47d27eb02068a9e554ff2d11e4bfd83875c20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"042e4d934397657ba04c82b46cc5665076bc5c58":["ac35531329b1809368fb0780bcf1e72d0add3c21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["042e4d934397657ba04c82b46cc5665076bc5c58"],"ac35531329b1809368fb0780bcf1e72d0add3c21":["cff47d27eb02068a9e554ff2d11e4bfd83875c20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}