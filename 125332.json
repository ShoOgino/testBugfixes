{"path":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","pathOld":"solr/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    int ret=0;\n\n    OpenBitSet[] sets = new OpenBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        OpenBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        OpenBitSet res = ((OpenBitSet)bs1.clone());\n        res.and(bs);\n        int icount = (int)res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.memSize();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    int ret=0;\n\n    OpenBitSet[] sets = new OpenBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        OpenBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        OpenBitSet res = ((OpenBitSet)bs1.clone());\n        res.and(bs);\n        int icount = (int)res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.memSize();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","pathOld":"solr/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    int ret=0;\n\n    OpenBitSet[] sets = new OpenBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        OpenBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        OpenBitSet res = ((OpenBitSet)bs1.clone());\n        res.and(bs);\n        int icount = (int)res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.memSize();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    int ret=0;\n\n    OpenBitSet[] sets = new OpenBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        OpenBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        OpenBitSet res = ((OpenBitSet)bs1.clone());\n        res.and(bs);\n        int icount = (int)res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.memSize();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","pathOld":"solr/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    int ret=0;\n\n    OpenBitSet[] sets = new OpenBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        OpenBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        OpenBitSet res = ((OpenBitSet)bs1.clone());\n        res.and(bs);\n        int icount = (int)res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.memSize();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    int ret=0;\n\n    OpenBitSet[] sets = new OpenBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        OpenBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        OpenBitSet res = ((OpenBitSet)bs1.clone());\n        res.and(bs);\n        int icount = (int)res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.memSize();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    int ret=0;\n\n    FixedBitSet[] sets = new FixedBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        FixedBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        FixedBitSet res = bs1.clone();\n        res.and(bs);\n        int icount = res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.memSize();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    int ret=0;\n\n    OpenBitSet[] sets = new OpenBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        OpenBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        OpenBitSet res = ((OpenBitSet)bs1.clone());\n        res.and(bs);\n        int icount = (int)res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.memSize();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c996b769d988552a15ae14a911b94a2d4c534b08","date":1428592217,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    long ret=0;\n\n    FixedBitSet[] sets = new FixedBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        FixedBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        FixedBitSet res = bs1.clone();\n        res.and(bs);\n        int icount = res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.ramBytesUsed();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    int ret=0;\n\n    FixedBitSet[] sets = new FixedBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        FixedBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        FixedBitSet res = bs1.clone();\n        res.and(bs);\n        int icount = res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.memSize();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e6d6f6217dc04f29ee177d2837147dd47627787","date":1429543326,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    long ret=0;\n\n    FixedBitSet[] sets = new FixedBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    \n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        FixedBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        FixedBitSet res = bs1.clone();\n        res.and(bs);\n        int icount = res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.ramBytesUsed();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    System.out.println(\"ret=\"+ret);\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    long ret=0;\n\n    FixedBitSet[] sets = new FixedBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    BitSet scratch=new BitSet();\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        FixedBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        FixedBitSet res = bs1.clone();\n        res.and(bs);\n        int icount = res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.ramBytesUsed();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    // System.out.println(\"ret=\"+ret + \" scratchsize=\"+scratch.size());\n    System.out.println(\"ret=\"+ret);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    long ret=0;\n\n    FixedBitSet[] sets = new FixedBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    \n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    final RTimer timer = new RTimer();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        FixedBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        FixedBitSet res = bs1.clone();\n        res.and(bs);\n        int icount = res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.ramBytesUsed();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n    System.out.println(\"TIME=\"+timer.getTime());\n\n    System.out.println(\"ret=\"+ret);\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    long ret=0;\n\n    FixedBitSet[] sets = new FixedBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    \n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    long start = System.currentTimeMillis();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        FixedBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        FixedBitSet res = bs1.clone();\n        res.and(bs);\n        int icount = res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.ramBytesUsed();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"TIME=\"+(end-start));\n\n    System.out.println(\"ret=\"+ret);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7","date":1582642100,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/DocSetPerf#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    long ret=0;\n\n    FixedBitSet[] sets = new FixedBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n\n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n    }\n\n    final RTimer timer = new RTimer();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        FixedBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        FixedBitSet res = bs1.clone();\n        res.and(bs);\n        int icount = res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n          } else {\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.ramBytesUsed();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n    System.out.println(\"TIME=\"+timer.getTime());\n\n    System.out.println(\"ret=\"+ret);\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String bsSize=args[0];\n    boolean randSize=false;\n\n    if (bsSize.endsWith(\"-\")) {\n      bsSize=bsSize.substring(0,bsSize.length()-1);\n      randSize=true;\n    }\n\n    int bitSetSize = Integer.parseInt(bsSize);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3].intern();\n    int iter = Integer.parseInt(args[4]);\n\n    long ret=0;\n\n    FixedBitSet[] sets = new FixedBitSet[numSets];\n    DocSet[] bset = new DocSet[numSets];\n    DocSet[] hset = new DocSet[numSets];\n    \n    for (int i=0; i<numSets; i++) {\n      generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n      sets[i] = bs;\n      bset[i] = bds;\n      hset[i] = hds;\n    }\n\n    final RTimer timer = new RTimer();\n\n    if (\"test\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n        FixedBitSet bs1=bs;\n        BitDocSet bds1=bds;\n        HashDocSet hds1=hds;\n        generate(randSize ? rand.nextInt(bitSetSize) : bitSetSize, numBitsSet);\n\n        FixedBitSet res = bs1.clone();\n        res.and(bs);\n        int icount = res.cardinality();\n\n        test(bds1.intersection(bds).size() == icount);\n        test(bds1.intersectionSize(bds) == icount);\n        if (bds1.intersection(hds).size() != icount) {\n          DocSet ds = bds1.intersection(hds);\n          System.out.println(\"STOP\");\n        }\n\n        test(bds1.intersection(hds).size() == icount);\n        test(bds1.intersectionSize(hds) == icount);\n        test(hds1.intersection(bds).size() == icount);\n        test(hds1.intersectionSize(bds) == icount);\n        test(hds1.intersection(hds).size() == icount);\n        test(hds1.intersectionSize(hds) == icount);\n\n        ret += icount;\n      }\n    }\n\n    String type=null;\n    String oper=null;\n\n    if (test.endsWith(\"B\")) { type=\"B\"; }\n    if (test.endsWith(\"H\")) { type=\"H\"; }\n    if (test.endsWith(\"M\")) { type=\"M\"; }\n    if (test.startsWith(\"intersect\")) oper=\"intersect\";\n    if (test.startsWith(\"intersectSize\")) oper=\"intersectSize\";\n    if (test.startsWith(\"intersectAndSize\")) oper=\"intersectSize\";\n\n\n    if (oper!=null) {\n      for (int it=0; it<iter; it++) {\n        int idx1 = rand.nextInt(numSets);\n        int idx2 = rand.nextInt(numSets);\n        DocSet a=null,b=null;\n\n        if (type==\"B\") {\n          a=bset[idx1]; b=bset[idx2];\n        } else if (type==\"H\") {\n          a=hset[idx1]; b=bset[idx2];\n        } else if (type==\"M\") {\n          if (idx1 < idx2) {\n            a=bset[idx1];\n            b=hset[idx2];\n          } else {\n            a=hset[idx1];\n            b=bset[idx2];\n          }\n        }\n\n        if (oper==\"intersect\") {\n          DocSet res = a.intersection(b);\n          ret += res.ramBytesUsed();\n        } else if (oper==\"intersectSize\") {\n          ret += a.intersectionSize(b);\n        } else if (oper==\"intersectAndSize\") {\n          DocSet res = a.intersection(b);\n          ret += res.size();\n        }\n      }\n    }\n\n    System.out.println(\"TIME=\"+timer.getTime());\n\n    System.out.println(\"ret=\"+ret);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e6d6f6217dc04f29ee177d2837147dd47627787":["c996b769d988552a15ae14a911b94a2d4c534b08"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["7e6d6f6217dc04f29ee177d2837147dd47627787"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"c996b769d988552a15ae14a911b94a2d4c534b08":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"]},"commit2Childs":{"7e6d6f6217dc04f29ee177d2837147dd47627787":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["c996b769d988552a15ae14a911b94a2d4c534b08"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c996b769d988552a15ae14a911b94a2d4c534b08":["7e6d6f6217dc04f29ee177d2837147dd47627787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}