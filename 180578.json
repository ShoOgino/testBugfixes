{"path":"lucene/src/java/org/apache/lucene/util/IOUtils#closeSafely(boolean,Closeable...).mjava","commits":[{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#closeSafely(boolean,Closeable...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions.\n   * Some of the <tt>Closeable</tt>s may be null, they are ignored. After\n   * everything is closed, and if {@code suppressExceptions} is {@code false},\n   * method either throws the first of suppressed exceptions, or completes\n   * normally.\n   * \n   * @param suppressExceptions\n   *          if true then exceptions that occur during close() are suppressed\n   * @param objects\n   *          objects to call <tt>close()</tt> on\n   */\n  public static void closeSafely(boolean suppressExceptions, Closeable... objects) throws IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        if (th == null)\n          th = t;\n      }\n    }\n\n    if (th != null && !suppressExceptions) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#closeSafely(boolean,Closeable...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions.\n   * Some of the <tt>Closeable</tt>s may be null, they are ignored. After\n   * everything is closed, and if {@code suppressExceptions} is {@code false},\n   * method either throws the first of suppressed exceptions, or completes\n   * normally.\n   * \n   * @param suppressExceptions\n   *          if true then exceptions that occur during close() are suppressed\n   * @param objects\n   *          objects to call <tt>close()</tt> on\n   */\n  public static void closeSafely(boolean suppressExceptions, Closeable... objects) throws IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        if (th == null)\n          th = t;\n      }\n    }\n\n    if (th != null && !suppressExceptions) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#closeSafely(boolean,Closeable...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions.\n   * Some of the <tt>Closeable</tt>s may be null, they are ignored. After\n   * everything is closed, and if {@code suppressExceptions} is {@code false},\n   * method either throws the first of suppressed exceptions, or completes\n   * normally.\n   * \n   * @param suppressExceptions\n   *          if true then exceptions that occur during close() are suppressed\n   * @param objects\n   *          objects to call <tt>close()</tt> on\n   */\n  public static void closeSafely(boolean suppressExceptions, Closeable... objects) throws IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        if (th == null)\n          th = t;\n      }\n    }\n\n    if (th != null && !suppressExceptions) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d","date":1311520881,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#closeSafely(boolean,Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#closeSafely(boolean,Closeable...).mjava","sourceNew":"  /**\n   * Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions.\n   * Some of the <tt>Closeable</tt>s may be null, they are ignored. After\n   * everything is closed, and if {@code suppressExceptions} is {@code false},\n   * method either throws the first of suppressed exceptions, or completes\n   * normally.\n   * \n   * @param suppressExceptions\n   *          if true then exceptions that occur during close() are suppressed\n   * @param objects\n   *          objects to call <tt>close()</tt> on\n   */\n  public static void closeSafely(boolean suppressExceptions, Closeable... objects) throws IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed(th, t);\n        if (th == null)\n          th = t;\n      }\n    }\n\n    if (th != null && !suppressExceptions) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions.\n   * Some of the <tt>Closeable</tt>s may be null, they are ignored. After\n   * everything is closed, and if {@code suppressExceptions} is {@code false},\n   * method either throws the first of suppressed exceptions, or completes\n   * normally.\n   * \n   * @param suppressExceptions\n   *          if true then exceptions that occur during close() are suppressed\n   * @param objects\n   *          objects to call <tt>close()</tt> on\n   */\n  public static void closeSafely(boolean suppressExceptions, Closeable... objects) throws IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        if (th == null)\n          th = t;\n      }\n    }\n\n    if (th != null && !suppressExceptions) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#close(Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#closeSafely(boolean,Closeable...).mjava","sourceNew":"  /**\n   * Closes all given <tt>Closeable</tt>s.  Some of the\n   * <tt>Closeable</tt>s may be null; they are\n   * ignored.  After everything is closed, the method either\n   * throws the first exception it hit while closing, or\n   * completes normally if there were no exceptions.\n   * \n   * @param objects\n   *          objects to call <tt>close()</tt> on\n   */\n  public static void close(Closeable... objects) throws IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed(th, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions.\n   * Some of the <tt>Closeable</tt>s may be null, they are ignored. After\n   * everything is closed, and if {@code suppressExceptions} is {@code false},\n   * method either throws the first of suppressed exceptions, or completes\n   * normally.\n   * \n   * @param suppressExceptions\n   *          if true then exceptions that occur during close() are suppressed\n   * @param objects\n   *          objects to call <tt>close()</tt> on\n   */\n  public static void closeSafely(boolean suppressExceptions, Closeable... objects) throws IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed(th, t);\n        if (th == null)\n          th = t;\n      }\n    }\n\n    if (th != null && !suppressExceptions) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":6,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#closeWhileHandlingException(Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#closeSafely(boolean,Closeable...).mjava","sourceNew":"  /**\n   * Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions.\n   * Some of the <tt>Closeable</tt>s may be null, they are ignored.\n   * \n   * @param objects\n   *          objects to call <tt>close()</tt> on\n   */\n  public static void closeWhileHandlingException(Closeable... objects) throws IOException {\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions.\n   * Some of the <tt>Closeable</tt>s may be null, they are ignored. After\n   * everything is closed, and if {@code suppressExceptions} is {@code false},\n   * method either throws the first of suppressed exceptions, or completes\n   * normally.\n   * \n   * @param suppressExceptions\n   *          if true then exceptions that occur during close() are suppressed\n   * @param objects\n   *          objects to call <tt>close()</tt> on\n   */\n  public static void closeSafely(boolean suppressExceptions, Closeable... objects) throws IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed(th, t);\n        if (th == null)\n          th = t;\n      }\n    }\n\n    if (th != null && !suppressExceptions) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","efb7a19703a037c29e30440260d393500febc1f4"],"efb7a19703a037c29e30440260d393500febc1f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d":["efb7a19703a037c29e30440260d393500febc1f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24230fe54121f9be9d85f2c2067536296785e421"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"efb7a19703a037c29e30440260d393500febc1f4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","efb7a19703a037c29e30440260d393500febc1f4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d":["24230fe54121f9be9d85f2c2067536296785e421"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}