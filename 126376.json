{"path":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader(), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader(), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":null,"sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader(), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}