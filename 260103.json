{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    DocValues.Type[] values = DocValues.Type.values();\n    DocValues.Type type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"Lucene3x\".equals(codec.getName()) || doc.getField(name) != null)\n        return;\n    FieldType ft = new FieldType();\n    ft.setDocValueType(type);\n    ft.freeze();\n    final Field f;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      //make sure we use a valid unicode string with a fixed size byte length\n      final String randomUnicodeString = _TestUtil.randomFixedByteLengthUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      f = new Field(name, fixedRef, ft);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      f = new Field(name, new BytesRef(_TestUtil.randomUnicodeString(random, 200)), ft);\n      break;\n    case FLOAT_32:\n      f = new Field(name, random.nextFloat(), ft);\n      break;\n    case FLOAT_64:\n      f = new Field(name, random.nextDouble(), ft);\n      break;\n    case VAR_INTS:\n      f = new Field(name, random.nextLong(), ft);\n      break;\n    case FIXED_INTS_16:\n      f = new Field(name, random.nextInt(Short.MAX_VALUE), ft);\n      break;\n    case FIXED_INTS_32:\n      f = new Field(name, random.nextInt(), ft);\n      break;\n    case FIXED_INTS_64:\n      f = new Field(name, random.nextLong(), ft);\n      break;\n    case FIXED_INTS_8:\n      f = new Field(name, random.nextInt(128), ft);\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n    doc.add(f);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    DocValues.Type[] values = DocValues.Type.values();\n    DocValues.Type type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"Lucene3x\".equals(codec.getName()) || doc.getField(name) != null)\n        return;\n    FieldType ft = new FieldType();\n    ft.setDocValueType(type);\n    ft.freeze();\n    final Field f;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      //make sure we use a valid unicode string with a fixed size byte length\n      final String randomUnicodeString = _TestUtil.randomFixedByteLengthUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      f = new Field(name, fixedRef, ft);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      f = new Field(name, new BytesRef(_TestUtil.randomUnicodeString(random, 200)), ft);\n      break;\n    case FLOAT_32:\n      f = new Field(name, random.nextFloat(), ft);\n      break;\n    case FLOAT_64:\n      f = new Field(name, random.nextDouble(), ft);\n      break;\n    case VAR_INTS:\n      f = new Field(name, random.nextLong(), ft);\n      break;\n    case FIXED_INTS_16:\n      f = new Field(name, random.nextInt(Short.MAX_VALUE), ft);\n      break;\n    case FIXED_INTS_32:\n      f = new Field(name, random.nextInt(), ft);\n      break;\n    case FIXED_INTS_64:\n      f = new Field(name, random.nextLong(), ft);\n      break;\n    case FIXED_INTS_8:\n      f = new Field(name, random.nextInt(128), ft);\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n    doc.add(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    DocValues.Type[] values = DocValues.Type.values();\n    DocValues.Type type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"Lucene3x\".equals(codec.getName()) || doc.getField(name) != null)\n        return;\n    final Field f;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      //make sure we use a valid unicode string with a fixed size byte length\n      final String randomUnicodeString = _TestUtil.randomFixedByteLengthUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      f = new DocValuesField(name, fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      f = new DocValuesField(name, new BytesRef(_TestUtil.randomUnicodeString(random, 200)), type);\n      break;\n    case FLOAT_32:\n      f = new DocValuesField(name, random.nextFloat(), type);\n      break;\n    case FLOAT_64:\n      f = new DocValuesField(name, random.nextDouble(), type);\n      break;\n    case VAR_INTS:\n      f = new DocValuesField(name, random.nextLong(), type);\n      break;\n    case FIXED_INTS_16:\n      f = new DocValuesField(name, random.nextInt(Short.MAX_VALUE), type);\n      break;\n    case FIXED_INTS_32:\n      f = new DocValuesField(name, random.nextInt(), type);\n      break;\n    case FIXED_INTS_64:\n      f = new DocValuesField(name, random.nextLong(), type);\n      break;\n    case FIXED_INTS_8:\n      f = new DocValuesField(name, random.nextInt(128), type);\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n    doc.add(f);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    DocValues.Type[] values = DocValues.Type.values();\n    DocValues.Type type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"Lucene3x\".equals(codec.getName()) || doc.getField(name) != null)\n        return;\n    FieldType ft = new FieldType();\n    ft.setDocValueType(type);\n    ft.freeze();\n    final Field f;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      //make sure we use a valid unicode string with a fixed size byte length\n      final String randomUnicodeString = _TestUtil.randomFixedByteLengthUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      f = new Field(name, fixedRef, ft);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      f = new Field(name, new BytesRef(_TestUtil.randomUnicodeString(random, 200)), ft);\n      break;\n    case FLOAT_32:\n      f = new Field(name, random.nextFloat(), ft);\n      break;\n    case FLOAT_64:\n      f = new Field(name, random.nextDouble(), ft);\n      break;\n    case VAR_INTS:\n      f = new Field(name, random.nextLong(), ft);\n      break;\n    case FIXED_INTS_16:\n      f = new Field(name, random.nextInt(Short.MAX_VALUE), ft);\n      break;\n    case FIXED_INTS_32:\n      f = new Field(name, random.nextInt(), ft);\n      break;\n    case FIXED_INTS_64:\n      f = new Field(name, random.nextLong(), ft);\n      break;\n    case FIXED_INTS_8:\n      f = new Field(name, random.nextInt(128), ft);\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n    doc.add(f);\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89f25dae8ada65524f6808224b9f4f8202cf2c8c","date":1332501580,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    DocValues.Type[] values = DocValues.Type.values();\n    DocValues.Type type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"Lucene3x\".equals(codec.getName()) || doc.getField(name) != null)\n        return;\n    final Field f;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      //make sure we use a valid unicode string with a fixed size byte length\n      final String randomUnicodeString = _TestUtil.randomFixedByteLengthUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      f = new DocValuesField(name, fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      f = new DocValuesField(name, new BytesRef(_TestUtil.randomUnicodeString(random, 20)), type);\n      break;\n    case FLOAT_32:\n      f = new DocValuesField(name, random.nextFloat(), type);\n      break;\n    case FLOAT_64:\n      f = new DocValuesField(name, random.nextDouble(), type);\n      break;\n    case VAR_INTS:\n      f = new DocValuesField(name, random.nextLong(), type);\n      break;\n    case FIXED_INTS_16:\n      f = new DocValuesField(name, random.nextInt(Short.MAX_VALUE), type);\n      break;\n    case FIXED_INTS_32:\n      f = new DocValuesField(name, random.nextInt(), type);\n      break;\n    case FIXED_INTS_64:\n      f = new DocValuesField(name, random.nextLong(), type);\n      break;\n    case FIXED_INTS_8:\n      f = new DocValuesField(name, random.nextInt(128), type);\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n    doc.add(f);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    DocValues.Type[] values = DocValues.Type.values();\n    DocValues.Type type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"Lucene3x\".equals(codec.getName()) || doc.getField(name) != null)\n        return;\n    final Field f;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      //make sure we use a valid unicode string with a fixed size byte length\n      final String randomUnicodeString = _TestUtil.randomFixedByteLengthUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      f = new DocValuesField(name, fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      f = new DocValuesField(name, new BytesRef(_TestUtil.randomUnicodeString(random, 200)), type);\n      break;\n    case FLOAT_32:\n      f = new DocValuesField(name, random.nextFloat(), type);\n      break;\n    case FLOAT_64:\n      f = new DocValuesField(name, random.nextDouble(), type);\n      break;\n    case VAR_INTS:\n      f = new DocValuesField(name, random.nextLong(), type);\n      break;\n    case FIXED_INTS_16:\n      f = new DocValuesField(name, random.nextInt(Short.MAX_VALUE), type);\n      break;\n    case FIXED_INTS_32:\n      f = new DocValuesField(name, random.nextInt(), type);\n      break;\n    case FIXED_INTS_64:\n      f = new DocValuesField(name, random.nextLong(), type);\n      break;\n    case FIXED_INTS_8:\n      f = new DocValuesField(name, random.nextInt(128), type);\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n    doc.add(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"732de6718534f7b42fc956f4929b953ef4b1610f","date":1332871688,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    DocValues.Type[] values = DocValues.Type.values();\n    DocValues.Type type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"Lucene3x\".equals(codec.getName()) || doc.getField(name) != null) {\n      return;\n    }\n    final Field f;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      //make sure we use a valid unicode string with a fixed size byte length\n      final String randomUnicodeString = _TestUtil.randomFixedByteLengthUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      f = new DocValuesField(name, fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      f = new DocValuesField(name, new BytesRef(_TestUtil.randomUnicodeString(random, 20)), type);\n      break;\n    case FLOAT_32:\n      f = new DocValuesField(name, random.nextFloat(), type);\n      break;\n    case FLOAT_64:\n      f = new DocValuesField(name, random.nextDouble(), type);\n      break;\n    case VAR_INTS:\n      f = new DocValuesField(name, random.nextLong(), type);\n      break;\n    case FIXED_INTS_16:\n      f = new DocValuesField(name, random.nextInt(Short.MAX_VALUE), type);\n      break;\n    case FIXED_INTS_32:\n      f = new DocValuesField(name, random.nextInt(), type);\n      break;\n    case FIXED_INTS_64:\n      f = new DocValuesField(name, random.nextLong(), type);\n      break;\n    case FIXED_INTS_8:\n      f = new DocValuesField(name, random.nextInt(128), type);\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n    doc.add(f);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    DocValues.Type[] values = DocValues.Type.values();\n    DocValues.Type type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"Lucene3x\".equals(codec.getName()) || doc.getField(name) != null)\n        return;\n    final Field f;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      //make sure we use a valid unicode string with a fixed size byte length\n      final String randomUnicodeString = _TestUtil.randomFixedByteLengthUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      f = new DocValuesField(name, fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      f = new DocValuesField(name, new BytesRef(_TestUtil.randomUnicodeString(random, 20)), type);\n      break;\n    case FLOAT_32:\n      f = new DocValuesField(name, random.nextFloat(), type);\n      break;\n    case FLOAT_64:\n      f = new DocValuesField(name, random.nextDouble(), type);\n      break;\n    case VAR_INTS:\n      f = new DocValuesField(name, random.nextLong(), type);\n      break;\n    case FIXED_INTS_16:\n      f = new DocValuesField(name, random.nextInt(Short.MAX_VALUE), type);\n      break;\n    case FIXED_INTS_32:\n      f = new DocValuesField(name, random.nextInt(), type);\n      break;\n    case FIXED_INTS_64:\n      f = new DocValuesField(name, random.nextLong(), type);\n      break;\n    case FIXED_INTS_8:\n      f = new DocValuesField(name, random.nextInt(128), type);\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n    doc.add(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Document).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Document doc) {\n    \n    DocValues.Type[] values = DocValues.Type.values();\n    DocValues.Type type = values[r.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"Lucene3x\".equals(codec.getName()) || doc.getField(name) != null) {\n      return;\n    }\n    final Field f;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n      f = new DerefBytesDocValuesField(name, getFixedRandomBytes(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      f = new DerefBytesDocValuesField(name, new BytesRef(_TestUtil.randomUnicodeString(r, 20)), false);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      f = new StraightBytesDocValuesField(name, getFixedRandomBytes(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      f = new StraightBytesDocValuesField(name, new BytesRef(_TestUtil.randomUnicodeString(r, 20)), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      f = new SortedBytesDocValuesField(name, getFixedRandomBytes(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      f = new SortedBytesDocValuesField(name, new BytesRef(_TestUtil.randomUnicodeString(r, 20)), false);\n      break;\n    case FLOAT_32:\n      f = new FloatDocValuesField(name, r.nextFloat());\n      break;\n    case FLOAT_64:\n      f = new DoubleDocValuesField(name, r.nextDouble());\n      break;\n    case VAR_INTS:\n      f = new PackedLongDocValuesField(name, r.nextLong());\n      break;\n    case FIXED_INTS_16:\n      // TODO: we should test negatives too?\n      f = new ShortDocValuesField(name, (short) r.nextInt(Short.MAX_VALUE));\n      break;\n    case FIXED_INTS_32:\n      f = new IntDocValuesField(name, r.nextInt());\n      break;\n    case FIXED_INTS_64:\n      f = new LongDocValuesField(name, r.nextLong());\n      break;\n    case FIXED_INTS_8:  \n      // TODO: we should test negatives too?\n      f = new ByteDocValuesField(name, (byte) r.nextInt(128));\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n    doc.add(f);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    DocValues.Type[] values = DocValues.Type.values();\n    DocValues.Type type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"Lucene3x\".equals(codec.getName()) || doc.getField(name) != null) {\n      return;\n    }\n    final Field f;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      //make sure we use a valid unicode string with a fixed size byte length\n      final String randomUnicodeString = _TestUtil.randomFixedByteLengthUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      f = new DocValuesField(name, fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      f = new DocValuesField(name, new BytesRef(_TestUtil.randomUnicodeString(random, 20)), type);\n      break;\n    case FLOAT_32:\n      f = new DocValuesField(name, random.nextFloat(), type);\n      break;\n    case FLOAT_64:\n      f = new DocValuesField(name, random.nextDouble(), type);\n      break;\n    case VAR_INTS:\n      f = new DocValuesField(name, random.nextLong(), type);\n      break;\n    case FIXED_INTS_16:\n      f = new DocValuesField(name, random.nextInt(Short.MAX_VALUE), type);\n      break;\n    case FIXED_INTS_32:\n      f = new DocValuesField(name, random.nextInt(), type);\n      break;\n    case FIXED_INTS_64:\n      f = new DocValuesField(name, random.nextLong(), type);\n      break;\n    case FIXED_INTS_8:\n      f = new DocValuesField(name, random.nextInt(128), type);\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n    doc.add(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"732de6718534f7b42fc956f4929b953ef4b1610f":["89f25dae8ada65524f6808224b9f4f8202cf2c8c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89f25dae8ada65524f6808224b9f4f8202cf2c8c":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["732de6718534f7b42fc956f4929b953ef4b1610f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"]},"commit2Childs":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["89f25dae8ada65524f6808224b9f4f8202cf2c8c"],"732de6718534f7b42fc956f4929b953ef4b1610f":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"89f25dae8ada65524f6808224b9f4f8202cf2c8c":["732de6718534f7b42fc956f4929b953ef4b1610f"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}