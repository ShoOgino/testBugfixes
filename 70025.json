{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#atLeast(Random,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#atLeast(Random,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#atLeast(Random,int).mjava","sourceNew":"  /**\n   * Returns a number of at least <code>i</code>\n   * <p>\n   * The actual number returned will be influenced by whether {@link #TEST_NIGHTLY}\n   * is active and {@link #RANDOM_MULTIPLIER}, but also with some random fudge.\n   */\n  public static int atLeast(Random random, int i) {\n    int min = (TEST_NIGHTLY ? 3*i : i) * RANDOM_MULTIPLIER;\n    int max = min+(min/2);\n    return _TestUtil.nextInt(random, min, max);\n  }\n\n","sourceOld":"  /**\n   * Returns a number of at least <code>i</code>\n   * <p>\n   * The actual number returned will be influenced by whether {@link #TEST_NIGHTLY}\n   * is active and {@link #RANDOM_MULTIPLIER}, but also with some random fudge.\n   */\n  public static int atLeast(Random random, int i) {\n    int min = (TEST_NIGHTLY ? 3*i : i) * RANDOM_MULTIPLIER;\n    int max = min+(min/2);\n    return _TestUtil.nextInt(random, min, max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9","date":1334679794,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#atLeast(Random,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#atLeast(Random,int).mjava","sourceNew":"  /**\n   * Returns a number of at least <code>i</code>\n   * <p>\n   * The actual number returned will be influenced by whether {@link #TEST_NIGHTLY}\n   * is active and {@link #RANDOM_MULTIPLIER}, but also with some random fudge.\n   */\n  public static int atLeast(Random random, int i) {\n    int min = (TEST_NIGHTLY ? 2*i : i) * RANDOM_MULTIPLIER;\n    int max = min+(min/2);\n    return _TestUtil.nextInt(random, min, max);\n  }\n\n","sourceOld":"  /**\n   * Returns a number of at least <code>i</code>\n   * <p>\n   * The actual number returned will be influenced by whether {@link #TEST_NIGHTLY}\n   * is active and {@link #RANDOM_MULTIPLIER}, but also with some random fudge.\n   */\n  public static int atLeast(Random random, int i) {\n    int min = (TEST_NIGHTLY ? 3*i : i) * RANDOM_MULTIPLIER;\n    int max = min+(min/2);\n    return _TestUtil.nextInt(random, min, max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#atLeast(Random,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#atLeast(Random,int).mjava","sourceNew":"  /**\n   * Returns a number of at least <code>i</code>\n   * <p>\n   * The actual number returned will be influenced by whether {@link #TEST_NIGHTLY}\n   * is active and {@link #RANDOM_MULTIPLIER}, but also with some random fudge.\n   */\n  public static int atLeast(Random random, int i) {\n    int min = (TEST_NIGHTLY ? 2*i : i) * RANDOM_MULTIPLIER;\n    int max = min+(min/2);\n    return TestUtil.nextInt(random, min, max);\n  }\n\n","sourceOld":"  /**\n   * Returns a number of at least <code>i</code>\n   * <p>\n   * The actual number returned will be influenced by whether {@link #TEST_NIGHTLY}\n   * is active and {@link #RANDOM_MULTIPLIER}, but also with some random fudge.\n   */\n  public static int atLeast(Random random, int i) {\n    int min = (TEST_NIGHTLY ? 2*i : i) * RANDOM_MULTIPLIER;\n    int max = min+(min/2);\n    return _TestUtil.nextInt(random, min, max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9"],"d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9":["6613659748fe4411a7dcf85266e55db1f95f7315"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}