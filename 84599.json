{"path":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","commits":[{"id":"de1b6a0d783df025fde1688ad90fa19587631b4e","date":1094070708,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    this.name = name.intern();        // field names are interned\n    this.readerValue = reader;\n    this.isStored = false;\n    this.isIndexed = true;\n    this.isTokenized = true;\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3d038c41e70424a134ef69a524f3cc0fb40d854","date":1096548028,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    this.name = name.intern();        // field names are interned\n    this.fieldsData = reader;\n    this.isStored = false;\n    this.isIndexed = true;\n    this.isTokenized = true;\n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    this.name = name.intern();        // field names are interned\n    this.readerValue = reader;\n    this.isStored = false;\n    this.isIndexed = true;\n    this.isTokenized = true;\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    this.name = name.intern();        // field names are interned\n    this.fieldsData = reader;\n    this.isStored = false;\n    this.isIndexed = true;\n    this.isTokenized = true;\n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"270538c3113d693a2bb6cf82e1460791ffe27293","date":1149822910,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea0feeb0b66a4c749ca3721503e19b6364f80a27","date":1176036033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf93f7a278746d4746fa3ebb3d53267b22fd040f","date":1249495506,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,Reader,TermVector).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  The Reader is read only when the Document is added to the index,\n   * i.e. you may not close the Reader until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param reader The reader with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or reader is <code>null</code>\n   */ \n  public Field(String name, Reader reader, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (reader == null)\n      throw new NullPointerException(\"reader cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    this.fieldsData = reader;\n    \n    this.isStored = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["ea0feeb0b66a4c749ca3721503e19b6364f80a27"],"de1b6a0d783df025fde1688ad90fa19587631b4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea0feeb0b66a4c749ca3721503e19b6364f80a27":["270538c3113d693a2bb6cf82e1460791ffe27293"],"270538c3113d693a2bb6cf82e1460791ffe27293":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["b3d038c41e70424a134ef69a524f3cc0fb40d854"],"e0c804f7aa477229414a7e12882af490c241f64d":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"b3d038c41e70424a134ef69a524f3cc0fb40d854":["de1b6a0d783df025fde1688ad90fa19587631b4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e0c804f7aa477229414a7e12882af490c241f64d"]},"commit2Childs":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["e0c804f7aa477229414a7e12882af490c241f64d"],"de1b6a0d783df025fde1688ad90fa19587631b4e":["b3d038c41e70424a134ef69a524f3cc0fb40d854"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de1b6a0d783df025fde1688ad90fa19587631b4e"],"ea0feeb0b66a4c749ca3721503e19b6364f80a27":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"270538c3113d693a2bb6cf82e1460791ffe27293":["ea0feeb0b66a4c749ca3721503e19b6364f80a27"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["270538c3113d693a2bb6cf82e1460791ffe27293"],"b3d038c41e70424a134ef69a524f3cc0fb40d854":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"e0c804f7aa477229414a7e12882af490c241f64d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}