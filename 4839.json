{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewSearcherAndUpdateCommitPoint(boolean).mjava","commits":[{"id":"d8a3067239133ceb0117bc3d48356169cf03894f","date":1372268205,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewSearcherAndUpdateCommitPoint(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewWriterAndSearcher(boolean).mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","sourceOld":"  private void openNewWriterAndSearcher(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewSearcherAndUpdateCommitPoint(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewSearcherAndUpdateCommitPoint(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewSearcherAndUpdateCommitPoint(boolean).mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","sourceOld":"  private void openNewSearcherAndUpdateCommitPoint(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewSearcherAndUpdateCommitPoint().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewSearcherAndUpdateCommitPoint(boolean).mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","sourceOld":"  private void openNewSearcherAndUpdateCommitPoint(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["d8a3067239133ceb0117bc3d48356169cf03894f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d8a3067239133ceb0117bc3d48356169cf03894f"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8a3067239133ceb0117bc3d48356169cf03894f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dea8e36e8c36d610840396c282a5affe3f722f4e"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d8a3067239133ceb0117bc3d48356169cf03894f"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8a3067239133ceb0117bc3d48356169cf03894f":["c6e1dc1bb4254226c8d7151b596cc1be40671751","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}