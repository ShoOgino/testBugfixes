{"path":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#downHeapMaxScore(DisiWrapper[],int).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#downHeapMaxScore(DisiWrapper[],int).mjava","pathOld":"/dev/null","sourceNew":"  private static void downHeapMaxScore(DisiWrapper[] heap, int size) {\n    int i = 0;\n    final DisiWrapper node = heap[0];\n    int j = leftNode(i);\n    if (j < size) {\n      int k = rightNode(j);\n      if (k < size && greaterMaxScore(heap[k], heap[j])) {\n        j = k;\n      }\n      if (greaterMaxScore(heap[j], node)) {\n        do {\n          heap[i] = heap[j];\n          i = j;\n          j = leftNode(i);\n          k = rightNode(j);\n          if (k < size && greaterMaxScore(heap[k], heap[j])) {\n            j = k;\n          }\n        } while (j < size && greaterMaxScore(heap[j], node));\n        heap[i] = node;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#downHeapMaxScore(DisiWrapper[],int).mjava","pathOld":"/dev/null","sourceNew":"  private static void downHeapMaxScore(DisiWrapper[] heap, int size) {\n    int i = 0;\n    final DisiWrapper node = heap[0];\n    int j = leftNode(i);\n    if (j < size) {\n      int k = rightNode(j);\n      if (k < size && greaterMaxScore(heap[k], heap[j])) {\n        j = k;\n      }\n      if (greaterMaxScore(heap[j], node)) {\n        do {\n          heap[i] = heap[j];\n          i = j;\n          j = leftNode(i);\n          k = rightNode(j);\n          if (k < size && greaterMaxScore(heap[k], heap[j])) {\n            j = k;\n          }\n        } while (j < size && greaterMaxScore(heap[j], node));\n        heap[i] = node;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}