{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testReadaheadWithFiltering().mjava","commits":[{"id":"57e34488c685935a055be1bc57b850be1e8c850d","date":1526645499,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testReadaheadWithFiltering().mjava","pathOld":"/dev/null","sourceNew":"  public void testReadaheadWithFiltering() throws IOException {\n\n    CharArraySet exclusions = new CharArraySet(2, true);\n    exclusions.add(\"three\");\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ClassicTokenizer();\n        TokenStream sink = new TermExclusionFilter(exclusions, source, in -> new ShingleFilter(in, 2));\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    String input = \"one two three four\";\n\n    try (TokenStream ts = analyzer.tokenStream(\"\", input)) {\n      assertTokenStreamContents(ts, new String[]{\n          \"one\", \"one two\",\n          \"two\",\n          \"three\",\n          \"four\"\n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9809bf55e3bf03659b8b93fd16170aaa7eb92012","date":1526860327,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testReadaheadWithFiltering().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testReadaheadWithFiltering().mjava","sourceNew":"  public void testReadaheadWithFiltering() throws IOException {\n\n    CharArraySet protectedTerms = new CharArraySet(2, true);\n    protectedTerms.add(\"three\");\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ClassicTokenizer();\n        TokenStream sink = new ProtectedTermFilter(protectedTerms, source, in -> new ShingleFilter(in, 2));\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    String input = \"one two three four\";\n\n    try (TokenStream ts = analyzer.tokenStream(\"\", input)) {\n      assertTokenStreamContents(ts, new String[]{\n          \"one\", \"one two\",\n          \"two\",\n          \"three\",\n          \"four\"\n      });\n    }\n  }\n\n","sourceOld":"  public void testReadaheadWithFiltering() throws IOException {\n\n    CharArraySet exclusions = new CharArraySet(2, true);\n    exclusions.add(\"three\");\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ClassicTokenizer();\n        TokenStream sink = new TermExclusionFilter(exclusions, source, in -> new ShingleFilter(in, 2));\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    String input = \"one two three four\";\n\n    try (TokenStream ts = analyzer.tokenStream(\"\", input)) {\n      assertTokenStreamContents(ts, new String[]{\n          \"one\", \"one two\",\n          \"two\",\n          \"three\",\n          \"four\"\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","date":1529312258,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testReadaheadWithFiltering().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testReadaheadWithFiltering().mjava","sourceNew":"  public void testReadaheadWithFiltering() throws IOException {\n\n    CharArraySet protectedTerms = new CharArraySet(2, true);\n    protectedTerms.add(\"three\");\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ClassicTokenizer();\n        TokenStream sink = new ProtectedTermFilter(protectedTerms, source, in -> new ShingleFilter(in, 2));\n        sink = new ValidatingTokenFilter(sink, \"1\");\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    String input = \"one two three four\";\n\n    try (TokenStream ts = analyzer.tokenStream(\"\", input)) {\n      assertTokenStreamContents(ts, new String[]{\n          \"one\", \"one two\", \"two\", \"three\", \"four\"\n      }, new int[]{\n           0,     0,         4,     8,       14\n      }, new int[]{\n           3,     7,         7,     13,      18\n      }, new int[]{\n           1,     0,         1,     1,       1\n      }, new int[]{\n           1,     2,         1,     1,       1\n      }, 18);\n    }\n  }\n\n","sourceOld":"  public void testReadaheadWithFiltering() throws IOException {\n\n    CharArraySet protectedTerms = new CharArraySet(2, true);\n    protectedTerms.add(\"three\");\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ClassicTokenizer();\n        TokenStream sink = new ProtectedTermFilter(protectedTerms, source, in -> new ShingleFilter(in, 2));\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    String input = \"one two three four\";\n\n    try (TokenStream ts = analyzer.tokenStream(\"\", input)) {\n      assertTokenStreamContents(ts, new String[]{\n          \"one\", \"one two\",\n          \"two\",\n          \"three\",\n          \"four\"\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testReadaheadWithFiltering().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testReadaheadWithFiltering().mjava","sourceNew":"  public void testReadaheadWithFiltering() throws IOException {\n\n    CharArraySet protectedTerms = new CharArraySet(2, true);\n    protectedTerms.add(\"three\");\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ClassicTokenizer();\n        TokenStream sink = new ProtectedTermFilter(protectedTerms, source, in -> new ShingleFilter(in, 2));\n        sink = new ValidatingTokenFilter(sink, \"1\");\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    String input = \"one two three four\";\n\n    try (TokenStream ts = analyzer.tokenStream(\"\", input)) {\n      assertTokenStreamContents(ts, new String[]{\n          \"one\", \"one two\", \"two\", \"three\", \"four\"\n      }, new int[]{\n           0,     0,         4,     8,       14\n      }, new int[]{\n           3,     7,         7,     13,      18\n      }, new int[]{\n           1,     0,         1,     1,       1\n      }, new int[]{\n           1,     2,         1,     1,       1\n      }, 18);\n    }\n  }\n\n","sourceOld":"  public void testReadaheadWithFiltering() throws IOException {\n\n    CharArraySet protectedTerms = new CharArraySet(2, true);\n    protectedTerms.add(\"three\");\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ClassicTokenizer();\n        TokenStream sink = new ProtectedTermFilter(protectedTerms, source, in -> new ShingleFilter(in, 2));\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    String input = \"one two three four\";\n\n    try (TokenStream ts = analyzer.tokenStream(\"\", input)) {\n      assertTokenStreamContents(ts, new String[]{\n          \"one\", \"one two\",\n          \"two\",\n          \"three\",\n          \"four\"\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testReadaheadWithFiltering().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testReadaheadWithFiltering().mjava","sourceNew":"  public void testReadaheadWithFiltering() throws IOException {\n\n    CharArraySet protectedTerms = new CharArraySet(2, true);\n    protectedTerms.add(\"three\");\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ClassicTokenizer();\n        TokenStream sink = new ProtectedTermFilter(protectedTerms, source, in -> new ShingleFilter(in, 2));\n        sink = new ValidatingTokenFilter(sink, \"1\");\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    String input = \"one two three four\";\n\n    try (TokenStream ts = analyzer.tokenStream(\"\", input)) {\n      assertTokenStreamContents(ts, new String[]{\n          \"one\", \"one two\", \"two\", \"three\", \"four\"\n      }, new int[]{\n           0,     0,         4,     8,       14\n      }, new int[]{\n           3,     7,         7,     13,      18\n      }, new int[]{\n           1,     0,         1,     1,       1\n      }, new int[]{\n           1,     2,         1,     1,       1\n      }, 18);\n    }\n  }\n\n","sourceOld":"  public void testReadaheadWithFiltering() throws IOException {\n\n    CharArraySet protectedTerms = new CharArraySet(2, true);\n    protectedTerms.add(\"three\");\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new ClassicTokenizer();\n        TokenStream sink = new ProtectedTermFilter(protectedTerms, source, in -> new ShingleFilter(in, 2));\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    String input = \"one two three four\";\n\n    try (TokenStream ts = analyzer.tokenStream(\"\", input)) {\n      assertTokenStreamContents(ts, new String[]{\n          \"one\", \"one two\",\n          \"two\",\n          \"three\",\n          \"four\"\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9809bf55e3bf03659b8b93fd16170aaa7eb92012","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"9809bf55e3bf03659b8b93fd16170aaa7eb92012":["57e34488c685935a055be1bc57b850be1e8c850d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["9809bf55e3bf03659b8b93fd16170aaa7eb92012"],"57e34488c685935a055be1bc57b850be1e8c850d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["9809bf55e3bf03659b8b93fd16170aaa7eb92012","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"9809bf55e3bf03659b8b93fd16170aaa7eb92012":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57e34488c685935a055be1bc57b850be1e8c850d"],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"57e34488c685935a055be1bc57b850be1e8c850d":["9809bf55e3bf03659b8b93fd16170aaa7eb92012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}