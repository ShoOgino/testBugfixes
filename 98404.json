{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValues.Type).mjava","commits":[{"id":"6cce7e17930f156b7456ee7fc32f691979f641e2","date":1349444322,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValues.Type).mjava","pathOld":"/dev/null","sourceNew":"  public void test(DocValues.Type type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new IntDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BYTES_FIXED_DEREF:\n        f = new DerefBytesDocValuesField(\"dv\", new BytesRef(), true);\n        break;\n      case BYTES_FIXED_SORTED:\n        f = new SortedBytesDocValuesField(\"dv\", new BytesRef(), true);\n        break;\n      case BYTES_FIXED_STRAIGHT:\n        f = new StraightBytesDocValuesField(\"dv\", new BytesRef(), true);\n        break;\n      case BYTES_VAR_DEREF:\n        f = new DerefBytesDocValuesField(\"dv\", new BytesRef(), false);\n        break;\n      case BYTES_VAR_SORTED:\n        f = new SortedBytesDocValuesField(\"dv\", new BytesRef(), false);\n        break;\n      case BYTES_VAR_STRAIGHT:\n        f = new StraightBytesDocValuesField(\"dv\", new BytesRef(), false);\n        break;\n      case FIXED_INTS_8:\n        f = new ByteDocValuesField(\"dv\", (byte) 0);\n        break;\n      case FIXED_INTS_16:\n        f = new ShortDocValuesField(\"dv\", (short) 0);\n        break;\n      case FIXED_INTS_32:\n        f = new IntDocValuesField(\"dv\", 0);\n        break;\n      case FIXED_INTS_64:\n        f = new LongDocValuesField(\"dv\", 0L);\n        break;\n      case VAR_INTS:\n        f = new PackedLongDocValuesField(\"dv\", 0L);\n        break;\n      case FLOAT_32:\n        f = new FloatDocValuesField(\"dv\", 0f);\n        break;\n      case FLOAT_64:\n        f = new DoubleDocValuesField(\"dv\", 0d);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setIntValue(i);\n      switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n          vals[i] = _TestUtil.randomFixedByteLengthUnicodeString(random(), 10);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case FIXED_INTS_8:\n          vals[i] = (byte) random().nextInt(256);\n          f.setByteValue((Byte) vals[i]);\n          break;\n        case FIXED_INTS_16:\n          vals[i] = (short) random().nextInt(1 << 16);\n          f.setShortValue((Short) vals[i]);\n          break;\n        case FIXED_INTS_32:\n          vals[i] = random().nextInt();\n          f.setIntValue((Integer) vals[i]);\n          break;\n        case FIXED_INTS_64:\n        case VAR_INTS:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n        case FLOAT_32:\n          vals[i] = random().nextFloat();\n          f.setFloatValue((Float) vals[i]);\n          break;\n        case FLOAT_64:\n          vals[i] = random().nextDouble();\n          f.setDoubleValue((Double) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new NumericDocValuesFieldSource(\"id\", false).getValues(null, leave);\n      final ValueSource vs;\n      final boolean direct = random().nextBoolean();\n      switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          vs = new StrDocValuesFieldSource(\"dv\", direct);\n          break;\n        case FLOAT_32:\n        case FLOAT_64:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n          vs = new NumericDocValuesFieldSource(\"dv\", direct);\n          break;\n        case FIXED_INTS_64:\n        case VAR_INTS:\n          if (random().nextBoolean()) {\n            vs = new NumericDocValuesFieldSource(\"dv\", direct);\n          } else {\n            vs = new DateDocValuesFieldSource(\"dv\", direct);\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof StrDocValuesFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof NumericDocValuesFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Number);\n          switch (type) {\n            case FIXED_INTS_8:\n              assertTrue(values.objectVal(i) instanceof Byte);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(1, bytes.length);\n              break;\n            case FIXED_INTS_16:\n              assertTrue(values.objectVal(i) instanceof Short);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(2, bytes.length);\n              break;\n            case FIXED_INTS_32:\n              assertTrue(values.objectVal(i) instanceof Integer);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(4, bytes.length);\n              break;\n            case FIXED_INTS_64:\n            case VAR_INTS:\n              assertTrue(values.objectVal(i) instanceof Long);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(8, bytes.length);\n              break;\n            case FLOAT_32:\n              assertTrue(values.objectVal(i) instanceof Float);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(4, bytes.length);\n              break;\n            case FLOAT_64:\n              assertTrue(values.objectVal(i) instanceof Double);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(8, bytes.length);\n              break;\n            default:\n              throw new AssertionError();\n          }\n        } else if (vs instanceof DateDocValuesFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Date);\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BYTES_FIXED_DEREF:\n          case BYTES_FIXED_STRAIGHT:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case FLOAT_32:\n            assertEquals(((Number) expected).floatValue(), values.floatVal(i), 0.001);\n            break;\n          case FLOAT_64:\n            assertEquals(((Number) expected).doubleValue(), values.doubleVal(i), 0.001d);\n            break;\n          case FIXED_INTS_8:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case VAR_INTS:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b0a6e8dd22135bf4d258b5977f896ccb87cd5aa","date":1358521177,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValues.Type).mjava","sourceNew":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new IntDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedBytesDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new LongDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setIntValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new StrFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof StrFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n          assertEquals(8, bytes.length);\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test(DocValues.Type type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new IntDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BYTES_FIXED_DEREF:\n        f = new DerefBytesDocValuesField(\"dv\", new BytesRef(), true);\n        break;\n      case BYTES_FIXED_SORTED:\n        f = new SortedBytesDocValuesField(\"dv\", new BytesRef(), true);\n        break;\n      case BYTES_FIXED_STRAIGHT:\n        f = new StraightBytesDocValuesField(\"dv\", new BytesRef(), true);\n        break;\n      case BYTES_VAR_DEREF:\n        f = new DerefBytesDocValuesField(\"dv\", new BytesRef(), false);\n        break;\n      case BYTES_VAR_SORTED:\n        f = new SortedBytesDocValuesField(\"dv\", new BytesRef(), false);\n        break;\n      case BYTES_VAR_STRAIGHT:\n        f = new StraightBytesDocValuesField(\"dv\", new BytesRef(), false);\n        break;\n      case FIXED_INTS_8:\n        f = new ByteDocValuesField(\"dv\", (byte) 0);\n        break;\n      case FIXED_INTS_16:\n        f = new ShortDocValuesField(\"dv\", (short) 0);\n        break;\n      case FIXED_INTS_32:\n        f = new IntDocValuesField(\"dv\", 0);\n        break;\n      case FIXED_INTS_64:\n        f = new LongDocValuesField(\"dv\", 0L);\n        break;\n      case VAR_INTS:\n        f = new PackedLongDocValuesField(\"dv\", 0L);\n        break;\n      case FLOAT_32:\n        f = new FloatDocValuesField(\"dv\", 0f);\n        break;\n      case FLOAT_64:\n        f = new DoubleDocValuesField(\"dv\", 0d);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setIntValue(i);\n      switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n          vals[i] = _TestUtil.randomFixedByteLengthUnicodeString(random(), 10);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case FIXED_INTS_8:\n          vals[i] = (byte) random().nextInt(256);\n          f.setByteValue((Byte) vals[i]);\n          break;\n        case FIXED_INTS_16:\n          vals[i] = (short) random().nextInt(1 << 16);\n          f.setShortValue((Short) vals[i]);\n          break;\n        case FIXED_INTS_32:\n          vals[i] = random().nextInt();\n          f.setIntValue((Integer) vals[i]);\n          break;\n        case FIXED_INTS_64:\n        case VAR_INTS:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n        case FLOAT_32:\n          vals[i] = random().nextFloat();\n          f.setFloatValue((Float) vals[i]);\n          break;\n        case FLOAT_64:\n          vals[i] = random().nextDouble();\n          f.setDoubleValue((Double) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new NumericDocValuesFieldSource(\"id\", false).getValues(null, leave);\n      final ValueSource vs;\n      final boolean direct = random().nextBoolean();\n      switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          vs = new StrDocValuesFieldSource(\"dv\", direct);\n          break;\n        case FLOAT_32:\n        case FLOAT_64:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n          vs = new NumericDocValuesFieldSource(\"dv\", direct);\n          break;\n        case FIXED_INTS_64:\n        case VAR_INTS:\n          if (random().nextBoolean()) {\n            vs = new NumericDocValuesFieldSource(\"dv\", direct);\n          } else {\n            vs = new DateDocValuesFieldSource(\"dv\", direct);\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof StrDocValuesFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof NumericDocValuesFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Number);\n          switch (type) {\n            case FIXED_INTS_8:\n              assertTrue(values.objectVal(i) instanceof Byte);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(1, bytes.length);\n              break;\n            case FIXED_INTS_16:\n              assertTrue(values.objectVal(i) instanceof Short);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(2, bytes.length);\n              break;\n            case FIXED_INTS_32:\n              assertTrue(values.objectVal(i) instanceof Integer);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(4, bytes.length);\n              break;\n            case FIXED_INTS_64:\n            case VAR_INTS:\n              assertTrue(values.objectVal(i) instanceof Long);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(8, bytes.length);\n              break;\n            case FLOAT_32:\n              assertTrue(values.objectVal(i) instanceof Float);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(4, bytes.length);\n              break;\n            case FLOAT_64:\n              assertTrue(values.objectVal(i) instanceof Double);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(8, bytes.length);\n              break;\n            default:\n              throw new AssertionError();\n          }\n        } else if (vs instanceof DateDocValuesFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Date);\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BYTES_FIXED_DEREF:\n          case BYTES_FIXED_STRAIGHT:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case FLOAT_32:\n            assertEquals(((Number) expected).floatValue(), values.floatVal(i), 0.001);\n            break;\n          case FLOAT_64:\n            assertEquals(((Number) expected).doubleValue(), values.doubleVal(i), 0.001d);\n            break;\n          case FIXED_INTS_8:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case VAR_INTS:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValues.Type).mjava","sourceNew":null,"sourceOld":"  public void test(DocValues.Type type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new IntDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BYTES_FIXED_DEREF:\n        f = new DerefBytesDocValuesField(\"dv\", new BytesRef(), true);\n        break;\n      case BYTES_FIXED_SORTED:\n        f = new SortedBytesDocValuesField(\"dv\", new BytesRef(), true);\n        break;\n      case BYTES_FIXED_STRAIGHT:\n        f = new StraightBytesDocValuesField(\"dv\", new BytesRef(), true);\n        break;\n      case BYTES_VAR_DEREF:\n        f = new DerefBytesDocValuesField(\"dv\", new BytesRef(), false);\n        break;\n      case BYTES_VAR_SORTED:\n        f = new SortedBytesDocValuesField(\"dv\", new BytesRef(), false);\n        break;\n      case BYTES_VAR_STRAIGHT:\n        f = new StraightBytesDocValuesField(\"dv\", new BytesRef(), false);\n        break;\n      case FIXED_INTS_8:\n        f = new ByteDocValuesField(\"dv\", (byte) 0);\n        break;\n      case FIXED_INTS_16:\n        f = new ShortDocValuesField(\"dv\", (short) 0);\n        break;\n      case FIXED_INTS_32:\n        f = new IntDocValuesField(\"dv\", 0);\n        break;\n      case FIXED_INTS_64:\n        f = new LongDocValuesField(\"dv\", 0L);\n        break;\n      case VAR_INTS:\n        f = new PackedLongDocValuesField(\"dv\", 0L);\n        break;\n      case FLOAT_32:\n        f = new FloatDocValuesField(\"dv\", 0f);\n        break;\n      case FLOAT_64:\n        f = new DoubleDocValuesField(\"dv\", 0d);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setIntValue(i);\n      switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n          vals[i] = _TestUtil.randomFixedByteLengthUnicodeString(random(), 10);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case FIXED_INTS_8:\n          vals[i] = (byte) random().nextInt(256);\n          f.setByteValue((Byte) vals[i]);\n          break;\n        case FIXED_INTS_16:\n          vals[i] = (short) random().nextInt(1 << 16);\n          f.setShortValue((Short) vals[i]);\n          break;\n        case FIXED_INTS_32:\n          vals[i] = random().nextInt();\n          f.setIntValue((Integer) vals[i]);\n          break;\n        case FIXED_INTS_64:\n        case VAR_INTS:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n        case FLOAT_32:\n          vals[i] = random().nextFloat();\n          f.setFloatValue((Float) vals[i]);\n          break;\n        case FLOAT_64:\n          vals[i] = random().nextDouble();\n          f.setDoubleValue((Double) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new NumericDocValuesFieldSource(\"id\", false).getValues(null, leave);\n      final ValueSource vs;\n      final boolean direct = random().nextBoolean();\n      switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          vs = new StrDocValuesFieldSource(\"dv\", direct);\n          break;\n        case FLOAT_32:\n        case FLOAT_64:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n          vs = new NumericDocValuesFieldSource(\"dv\", direct);\n          break;\n        case FIXED_INTS_64:\n        case VAR_INTS:\n          if (random().nextBoolean()) {\n            vs = new NumericDocValuesFieldSource(\"dv\", direct);\n          } else {\n            vs = new DateDocValuesFieldSource(\"dv\", direct);\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof StrDocValuesFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof NumericDocValuesFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Number);\n          switch (type) {\n            case FIXED_INTS_8:\n              assertTrue(values.objectVal(i) instanceof Byte);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(1, bytes.length);\n              break;\n            case FIXED_INTS_16:\n              assertTrue(values.objectVal(i) instanceof Short);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(2, bytes.length);\n              break;\n            case FIXED_INTS_32:\n              assertTrue(values.objectVal(i) instanceof Integer);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(4, bytes.length);\n              break;\n            case FIXED_INTS_64:\n            case VAR_INTS:\n              assertTrue(values.objectVal(i) instanceof Long);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(8, bytes.length);\n              break;\n            case FLOAT_32:\n              assertTrue(values.objectVal(i) instanceof Float);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(4, bytes.length);\n              break;\n            case FLOAT_64:\n              assertTrue(values.objectVal(i) instanceof Double);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(8, bytes.length);\n              break;\n            default:\n              throw new AssertionError();\n          }\n        } else if (vs instanceof DateDocValuesFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Date);\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BYTES_FIXED_DEREF:\n          case BYTES_FIXED_STRAIGHT:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case FLOAT_32:\n            assertEquals(((Number) expected).floatValue(), values.floatVal(i), 0.001);\n            break;\n          case FLOAT_64:\n            assertEquals(((Number) expected).doubleValue(), values.doubleVal(i), 0.001d);\n            break;\n          case FIXED_INTS_8:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case VAR_INTS:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["6cce7e17930f156b7456ee7fc32f691979f641e2","0b0a6e8dd22135bf4d258b5977f896ccb87cd5aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0b0a6e8dd22135bf4d258b5977f896ccb87cd5aa":["6cce7e17930f156b7456ee7fc32f691979f641e2"],"6cce7e17930f156b7456ee7fc32f691979f641e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6cce7e17930f156b7456ee7fc32f691979f641e2"],"0b0a6e8dd22135bf4d258b5977f896ccb87cd5aa":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"6cce7e17930f156b7456ee7fc32f691979f641e2":["d4d69c535930b5cce125cff868d40f6373dc27d4","0b0a6e8dd22135bf4d258b5977f896ccb87cd5aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}