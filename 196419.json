{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","commits":[{"id":"6209d9025a3f5ce74a8295606b15060efd4d7542","date":1442585859,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n\n    try {\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.solrStream = constructStream(sql);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(sqlSolrClientCache);\n      this.solrStream.setStreamContext(context);\n      this.solrStream.open();\n      return new ResultSetImpl(this.solrStream);\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bf38d05ea0037f06f6e05ed747948f19a746d3c","date":1453230855,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","sourceNew":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.solrStream = constructStream(sql);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(this.connection.getSolrClientCache());\n      this.solrStream.setStreamContext(context);\n      this.solrStream.open();\n      return new ResultSetImpl(this.solrStream);\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n\n    try {\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.solrStream = constructStream(sql);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(sqlSolrClientCache);\n      this.solrStream.setStreamContext(context);\n      this.solrStream.open();\n      return new ResultSetImpl(this.solrStream);\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bfa791a98ccf60d39ab77c21b92b710687fc3ac","date":1453238736,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","sourceNew":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.solrStream = constructStream(sql);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(this.connection.getSolrClientCache());\n      this.solrStream.setStreamContext(context);\n      this.solrStream.open();\n      return new ResultSetImpl(this);\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.solrStream = constructStream(sql);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(this.connection.getSolrClientCache());\n      this.solrStream.setStreamContext(context);\n      this.solrStream.open();\n      return new ResultSetImpl(this.solrStream);\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5b786e8a2ab6d8bb552c5bac69728c7d2983266","date":1453255950,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","sourceNew":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n        this.solrStream.close();\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.solrStream = constructStream(sql);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(this.connection.getSolrClientCache());\n      this.solrStream.setStreamContext(context);\n      this.solrStream.open();\n      this.currentResultSet = new ResultSetImpl(this);\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.solrStream = constructStream(sql);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(this.connection.getSolrClientCache());\n      this.solrStream.setStreamContext(context);\n      this.solrStream.open();\n      return new ResultSetImpl(this);\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5097637ef592ed17c3125d5982c87b6629fcda6","date":1453823732,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","sourceNew":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n        this.solrStream.close();\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.solrStream = constructStream(sql);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(this.connection.getSolrClientCache());\n      this.solrStream.setStreamContext(context);\n      this.solrStream.open();\n      this.currentResultSet = new ResultSetImpl(this);\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n        this.solrStream.close();\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.solrStream = constructStream(sql);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(this.connection.getSolrClientCache());\n      this.solrStream.setStreamContext(context);\n      this.solrStream.open();\n      this.currentResultSet = new ResultSetImpl(this);\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2af3708aa5f155e8f27905be60c119be0e39be8","date":1454361673,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","sourceNew":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.currentResultSet = new ResultSetImpl(this, constructStream(sql));\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n        this.solrStream.close();\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.solrStream = constructStream(sql);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(this.connection.getSolrClientCache());\n      this.solrStream.setStreamContext(context);\n      this.solrStream.open();\n      this.currentResultSet = new ResultSetImpl(this);\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","sourceNew":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.currentResultSet = new ResultSetImpl(this, constructStream(sql));\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n        this.solrStream.close();\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.solrStream = constructStream(sql);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(this.connection.getSolrClientCache());\n      this.solrStream.setStreamContext(context);\n      this.solrStream.open();\n      this.currentResultSet = new ResultSetImpl(this);\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7121ec4e1df19472c24776b18057768763038345","date":1454810625,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","sourceNew":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n      }\n\n      if(maxRows > 0 && !(sql.toLowerCase()).contains(\"limit\")) {\n        sql = sql + \" limit \"+Integer.toString(maxRows);\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.currentResultSet = new ResultSetImpl(this, constructStream(sql));\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.currentResultSet = new ResultSetImpl(this, constructStream(sql));\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14aa1c2dd0c9716e5909bf1540ab3dd5f9864d56","date":1454811905,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","sourceNew":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n      }\n\n      if(maxRows > 0 && !containsLimit(sql)) {\n        sql = sql + \" limit \"+Integer.toString(maxRows);\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.currentResultSet = new ResultSetImpl(this, constructStream(sql));\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n      }\n\n      if(maxRows > 0 && !(sql.toLowerCase()).contains(\"limit\")) {\n        sql = sql + \" limit \"+Integer.toString(maxRows);\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.currentResultSet = new ResultSetImpl(this, constructStream(sql));\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd75f58072bba84066e89d61bd7028de1bd5b632","date":1454871793,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","sourceNew":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n      }\n\n      if(maxRows > 0 && !containsLimit(sql)) {\n        sql = sql + \" limit \"+Integer.toString(maxRows);\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.currentResultSet = new ResultSetImpl(this, constructStream(sql));\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.currentResultSet = new ResultSetImpl(this, constructStream(sql));\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc31ac5f90047da49b5f81fb52a0b874e352549","date":1461164441,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","sourceNew":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    return this.executeQueryImpl(sql);\n  }\n\n","sourceOld":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n      }\n\n      if(maxRows > 0 && !containsLimit(sql)) {\n        sql = sql + \" limit \"+Integer.toString(maxRows);\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.currentResultSet = new ResultSetImpl(this, constructStream(sql));\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/StatementImpl#executeQuery(String).mjava","sourceNew":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    return this.executeQueryImpl(sql);\n  }\n\n","sourceOld":"  @Override\n  public ResultSet executeQuery(String sql) throws SQLException {\n    try {\n      if(this.currentResultSet != null) {\n        this.currentResultSet.close();\n        this.currentResultSet = null;\n      }\n\n      if(maxRows > 0 && !containsLimit(sql)) {\n        sql = sql + \" limit \"+Integer.toString(maxRows);\n      }\n\n      closed = false;  // If closed reopen so Statement can be reused.\n      this.currentResultSet = new ResultSetImpl(this, constructStream(sql));\n      return this.currentResultSet;\n    } catch(Exception e) {\n      throw new SQLException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b701e0fcef214f86bab1daf107adce0b0131212":["14aa1c2dd0c9716e5909bf1540ab3dd5f9864d56","6bc31ac5f90047da49b5f81fb52a0b874e352549"],"d2af3708aa5f155e8f27905be60c119be0e39be8":["d5097637ef592ed17c3125d5982c87b6629fcda6"],"7121ec4e1df19472c24776b18057768763038345":["d2af3708aa5f155e8f27905be60c119be0e39be8"],"d5097637ef592ed17c3125d5982c87b6629fcda6":["b5b786e8a2ab6d8bb552c5bac69728c7d2983266"],"14aa1c2dd0c9716e5909bf1540ab3dd5f9864d56":["7121ec4e1df19472c24776b18057768763038345"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["b5b786e8a2ab6d8bb552c5bac69728c7d2983266","d2af3708aa5f155e8f27905be60c119be0e39be8"],"6209d9025a3f5ce74a8295606b15060efd4d7542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5b786e8a2ab6d8bb552c5bac69728c7d2983266":["4bfa791a98ccf60d39ab77c21b92b710687fc3ac"],"dd75f58072bba84066e89d61bd7028de1bd5b632":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","14aa1c2dd0c9716e5909bf1540ab3dd5f9864d56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bf38d05ea0037f06f6e05ed747948f19a746d3c":["6209d9025a3f5ce74a8295606b15060efd4d7542"],"4bfa791a98ccf60d39ab77c21b92b710687fc3ac":["9bf38d05ea0037f06f6e05ed747948f19a746d3c"],"6bc31ac5f90047da49b5f81fb52a0b874e352549":["14aa1c2dd0c9716e5909bf1540ab3dd5f9864d56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b701e0fcef214f86bab1daf107adce0b0131212"]},"commit2Childs":{"9b701e0fcef214f86bab1daf107adce0b0131212":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2af3708aa5f155e8f27905be60c119be0e39be8":["7121ec4e1df19472c24776b18057768763038345","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"d5097637ef592ed17c3125d5982c87b6629fcda6":["d2af3708aa5f155e8f27905be60c119be0e39be8"],"7121ec4e1df19472c24776b18057768763038345":["14aa1c2dd0c9716e5909bf1540ab3dd5f9864d56"],"14aa1c2dd0c9716e5909bf1540ab3dd5f9864d56":["9b701e0fcef214f86bab1daf107adce0b0131212","dd75f58072bba84066e89d61bd7028de1bd5b632","6bc31ac5f90047da49b5f81fb52a0b874e352549"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["dd75f58072bba84066e89d61bd7028de1bd5b632"],"6209d9025a3f5ce74a8295606b15060efd4d7542":["9bf38d05ea0037f06f6e05ed747948f19a746d3c"],"b5b786e8a2ab6d8bb552c5bac69728c7d2983266":["d5097637ef592ed17c3125d5982c87b6629fcda6","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"dd75f58072bba84066e89d61bd7028de1bd5b632":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6209d9025a3f5ce74a8295606b15060efd4d7542"],"9bf38d05ea0037f06f6e05ed747948f19a746d3c":["4bfa791a98ccf60d39ab77c21b92b710687fc3ac"],"4bfa791a98ccf60d39ab77c21b92b710687fc3ac":["b5b786e8a2ab6d8bb552c5bac69728c7d2983266"],"6bc31ac5f90047da49b5f81fb52a0b874e352549":["9b701e0fcef214f86bab1daf107adce0b0131212"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd75f58072bba84066e89d61bd7028de1bd5b632","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}