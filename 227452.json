{"path":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","commits":[{"id":"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc","date":1582124610,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                       double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // short cut, lines and points cannot contain this type of shape\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    if (calculator.disjoint(minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // if any of the points is inside the polygon, the polygon cannot be within this indexed\n    // shape because points belong to the original indexed shape.\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    WithinRelation relation = WithinRelation.DISJOINT;\n    // if any of the edges intersects an the edge belongs to the shape then it cannot be within.\n    // if it only intersects edges that do not belong to the shape, then it is a candidate\n    // we skip edges at the dateline to support shapes crossing it\n    if (intersectsLine(ax, ay, bx, by)) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (intersectsLine(bx, by, cx, cy)) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (intersectsLine(cx, cy, ax, ay)) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    // if any of the edges crosses and edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, calculator.geX(), calculator.getY(), ax, ay, bx, by, cx, cy) == true) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1","70415dda6f35463c2ad9b2367f3eed05fb3c029b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1","date":1582881747,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","sourceNew":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                       double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // short cut, lines and points cannot contain this type of shape\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    if (calculator.disjoint(minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // if any of the points is inside the polygon, the polygon cannot be within this indexed\n    // shape because points belong to the original indexed shape.\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    WithinRelation relation = WithinRelation.DISJOINT;\n    // if any of the edges intersects an the edge belongs to the shape then it cannot be within.\n    // if it only intersects edges that do not belong to the shape, then it is a candidate\n    // we skip edges at the dateline to support shapes crossing it\n    if (calculator.intersectsLine(ax, ay, bx, by)) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (calculator.intersectsLine(bx, by, cx, cy)) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (calculator.intersectsLine(cx, cy, ax, ay)) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    // if any of the edges crosses and edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, calculator.geX(), calculator.getY(), ax, ay, bx, by, cx, cy) == true) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","sourceOld":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                       double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // short cut, lines and points cannot contain this type of shape\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    if (calculator.disjoint(minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // if any of the points is inside the polygon, the polygon cannot be within this indexed\n    // shape because points belong to the original indexed shape.\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    WithinRelation relation = WithinRelation.DISJOINT;\n    // if any of the edges intersects an the edge belongs to the shape then it cannot be within.\n    // if it only intersects edges that do not belong to the shape, then it is a candidate\n    // we skip edges at the dateline to support shapes crossing it\n    if (intersectsLine(ax, ay, bx, by)) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (intersectsLine(bx, by, cx, cy)) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (intersectsLine(cx, cy, ax, ay)) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    // if any of the edges crosses and edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, calculator.geX(), calculator.getY(), ax, ay, bx, by, cx, cy) == true) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","bugFix":["8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc"],"bugIntro":["70415dda6f35463c2ad9b2367f3eed05fb3c029b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70415dda6f35463c2ad9b2367f3eed05fb3c029b","date":1583214275,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","sourceNew":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                       double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // short cut, lines and points cannot contain this type of shape\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    if (calculator.disjoint(minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // if any of the points is inside the circle then we cannot be within this\n    // indexed shape\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    // we only check edges that belong to the original polygon. If we intersect any of them, then\n    // we are not within.\n    if (ab == true && calculator.intersectsLine(ax, ay, bx, by)) {\n      return WithinRelation.NOTWITHIN;\n    }\n    if (bc == true && calculator.intersectsLine(bx, by, cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n    if (ca == true && calculator.intersectsLine(cx, cy, ax, ay)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    // check if center is within the triangle. This is the only check that returns this circle as a candidate but that is ol\n    // is fine as the center must be inside to be one of the triangles.\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, calculator.geX(), calculator.getY(), ax, ay, bx, by, cx, cy) == true) {\n      return WithinRelation.CANDIDATE;\n    }\n    return WithinRelation.DISJOINT;\n  }\n\n","sourceOld":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                       double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // short cut, lines and points cannot contain this type of shape\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    if (calculator.disjoint(minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // if any of the points is inside the polygon, the polygon cannot be within this indexed\n    // shape because points belong to the original indexed shape.\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    WithinRelation relation = WithinRelation.DISJOINT;\n    // if any of the edges intersects an the edge belongs to the shape then it cannot be within.\n    // if it only intersects edges that do not belong to the shape, then it is a candidate\n    // we skip edges at the dateline to support shapes crossing it\n    if (calculator.intersectsLine(ax, ay, bx, by)) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (calculator.intersectsLine(bx, by, cx, cy)) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (calculator.intersectsLine(cx, cy, ax, ay)) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    // if any of the edges crosses and edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, calculator.geX(), calculator.getY(), ax, ay, bx, by, cx, cy) == true) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","bugFix":["ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1","8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","sourceNew":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                       double aX, double aY, boolean ab, double bX, double bY, boolean bc, double cX, double cY, boolean ca) {\n    if (calculator.disjoint(minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // if any of the points is inside the circle then we cannot be within this\n    // indexed shape\n    if (contains(aX, aY) || contains(bX, bY) || contains(cX, cY)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    // we only check edges that belong to the original polygon. If we intersect any of them, then\n    // we are not within.\n    if (ab == true && calculator.intersectsLine(aX, aY, bX, bY)) {\n      return WithinRelation.NOTWITHIN;\n    }\n    if (bc == true && calculator.intersectsLine(bX, bY, cX, cY)) {\n      return WithinRelation.NOTWITHIN;\n    }\n    if (ca == true && calculator.intersectsLine(cX, cY, aX, aY)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    // check if center is within the triangle. This is the only check that returns this circle as a candidate but that is ol\n    // is fine as the center must be inside to be one of the triangles.\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, calculator.geX(), calculator.getY(), aX, aY, bX, bY, cX, cY) == true) {\n      return WithinRelation.CANDIDATE;\n    }\n    return WithinRelation.DISJOINT;\n  }\n\n","sourceOld":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                       double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // short cut, lines and points cannot contain this type of shape\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    if (calculator.disjoint(minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // if any of the points is inside the circle then we cannot be within this\n    // indexed shape\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    // we only check edges that belong to the original polygon. If we intersect any of them, then\n    // we are not within.\n    if (ab == true && calculator.intersectsLine(ax, ay, bx, by)) {\n      return WithinRelation.NOTWITHIN;\n    }\n    if (bc == true && calculator.intersectsLine(bx, by, cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n    if (ca == true && calculator.intersectsLine(cx, cy, ax, ay)) {\n      return WithinRelation.NOTWITHIN;\n    }\n\n    // check if center is within the triangle. This is the only check that returns this circle as a candidate but that is ol\n    // is fine as the center must be inside to be one of the triangles.\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, calculator.geX(), calculator.getY(), ax, ay, bx, by, cx, cy) == true) {\n      return WithinRelation.CANDIDATE;\n    }\n    return WithinRelation.DISJOINT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1":["8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc"],"c568a1e2a5125c2245150eebb030a81baa158b31":["70415dda6f35463c2ad9b2367f3eed05fb3c029b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70415dda6f35463c2ad9b2367f3eed05fb3c029b":["ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1":["70415dda6f35463c2ad9b2367f3eed05fb3c029b"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc"],"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc":["ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1"],"70415dda6f35463c2ad9b2367f3eed05fb3c029b":["c568a1e2a5125c2245150eebb030a81baa158b31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}