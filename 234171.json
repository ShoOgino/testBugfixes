{"path":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#search(Query,Filter,int,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#search(Query,Filter,int,String).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#search(Query,Filter,int,String).mjava","sourceNew":"  private static void search(Query query, Filter filter, int hitNumber, String typeValue) throws Exception {\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query,filter, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[hitNumber].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(typeValue, document.get(\"type\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 3, document.getFields().size() == 3);\n  }\n\n","sourceOld":"  private static void search(Query query, Filter filter, int hitNumber, String typeValue) throws Exception {\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query,filter, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[hitNumber].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(typeValue, document.get(\"type\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 3, document.getFields().size() == 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"084b18e2b1c84d66746d1a94b6668766d357c2d4","date":1270935846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#search(Query,Filter,int,String).mjava","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#search(Query,Filter,int,String).mjava","sourceNew":"  private static void search(Query query, Filter filter, int hitNumber, String typeValue) throws Exception {\n    Searchable[] searchables = { lookupRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query,filter, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[hitNumber].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(typeValue, document.get(\"type\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 3, document.getFields().size() == 3);\n  }\n\n","sourceOld":"  private static void search(Query query, Filter filter, int hitNumber, String typeValue) throws Exception {\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query,filter, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[hitNumber].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(typeValue, document.get(\"type\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 3, document.getFields().size() == 3);\n  }\n\n","bugFix":["203bc84a5a9461a17a2a8e136f872bf4657aaee4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#search(Query,Filter,int,String).mjava","sourceNew":null,"sourceOld":"  private static void search(Query query, Filter filter, int hitNumber, String typeValue) throws Exception {\n    Searchable[] searchables = { lookupRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query,filter, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[hitNumber].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(typeValue, document.get(\"type\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 3, document.getFields().size() == 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#search(Query,Filter,int,String).mjava","sourceNew":null,"sourceOld":"  private static void search(Query query, Filter filter, int hitNumber, String typeValue) throws Exception {\n    Searchable[] searchables = { lookupRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query,filter, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[hitNumber].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(typeValue, document.get(\"type\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 3, document.getFields().size() == 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#search(Query,Filter,int,String).mjava","sourceNew":null,"sourceOld":"  private static void search(Query query, Filter filter, int hitNumber, String typeValue) throws Exception {\n    Searchable[] searchables = { lookupRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query,filter, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[hitNumber].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(typeValue, document.get(\"type\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 3, document.getFields().size() == 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["084b18e2b1c84d66746d1a94b6668766d357c2d4","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["084b18e2b1c84d66746d1a94b6668766d357c2d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"084b18e2b1c84d66746d1a94b6668766d357c2d4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["084b18e2b1c84d66746d1a94b6668766d357c2d4","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"084b18e2b1c84d66746d1a94b6668766d357c2d4":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["084b18e2b1c84d66746d1a94b6668766d357c2d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}