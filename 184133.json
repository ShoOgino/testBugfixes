{"path":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new ConstantScoreRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new ConstantScoreRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["c220849f876de24a79f756f65b3eb045db59f63f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c220849f876de24a79f756f65b3eb045db59f63f":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c220849f876de24a79f756f65b3eb045db59f63f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["c220849f876de24a79f756f65b3eb045db59f63f"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c220849f876de24a79f756f65b3eb045db59f63f":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}