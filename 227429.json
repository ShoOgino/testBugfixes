{"path":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testURI().mjava","commits":[{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testURI().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testURI().mjava","sourceNew":"  public void testURI() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    Path f1 = wrapped.resolve(\"file1\");\n    URI uri = f1.toUri();\n    Path f2 = fs.provider().getPath(uri);\n    assertEquals(f1, f2);\n    \n    assumeTrue(Charset.defaultCharset().name() + \" can't encode chinese\", \n               Charset.defaultCharset().newEncoder().canEncode(\"中国\"));\n    Path f3 = wrapped.resolve(\"中国\");\n    URI uri2 = f3.toUri();\n    Path f4 = fs.provider().getPath(uri2);\n    assertEquals(f3, f4);\n  }\n\n","sourceOld":"  public void testURI() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    Path f1 = wrapped.resolve(\"file1\");\n    URI uri = f1.toUri();\n    Path f2 = fs.provider().getPath(uri);\n    assertEquals(f1, f2);\n    \n    assumeTrue(Charset.defaultCharset().name() + \" can't encode chinese\", \n               Charset.defaultCharset().newEncoder().canEncode(\"中国\"));\n    Path f3 = wrapped.resolve(\"中国\");\n    URI uri2 = f3.toUri();\n    Path f4 = fs.provider().getPath(uri2);\n    assertEquals(f3, f4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0570a6b8fbda74e4718ba36c70fd1953103a3dcb","date":1429616032,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/MockFileSystemTestCase#testURI().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testURI().mjava","sourceNew":"  /** Test that URIs are not corrumpted */\n  public void testURI() throws IOException {\n    Path dir = wrap(createTempDir());\n\n    Path f1 = dir.resolve(\"file1\");\n    URI uri = f1.toUri();\n    Path f2 = dir.getFileSystem().provider().getPath(uri);\n    assertEquals(f1, f2);\n    \n    assumeTrue(Charset.defaultCharset().name() + \" can't encode chinese\", \n               Charset.defaultCharset().newEncoder().canEncode(\"中国\"));\n    Path f3 = dir.resolve(\"中国\");\n    URI uri2 = f3.toUri();\n    Path f4 = dir.getFileSystem().provider().getPath(uri2);\n    assertEquals(f3, f4);\n    dir.getFileSystem().close();\n  }\n\n","sourceOld":"  public void testURI() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    Path f1 = wrapped.resolve(\"file1\");\n    URI uri = f1.toUri();\n    Path f2 = fs.provider().getPath(uri);\n    assertEquals(f1, f2);\n    \n    assumeTrue(Charset.defaultCharset().name() + \" can't encode chinese\", \n               Charset.defaultCharset().newEncoder().canEncode(\"中国\"));\n    Path f3 = wrapped.resolve(\"中国\");\n    URI uri2 = f3.toUri();\n    Path f4 = fs.provider().getPath(uri2);\n    assertEquals(f3, f4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0570a6b8fbda74e4718ba36c70fd1953103a3dcb":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0570a6b8fbda74e4718ba36c70fd1953103a3dcb"]},"commit2Childs":{"0570a6b8fbda74e4718ba36c70fd1953103a3dcb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["0570a6b8fbda74e4718ba36c70fd1953103a3dcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}