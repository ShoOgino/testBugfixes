{"path":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#markRecentlyUsed(TFCKey).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#markRecentlyUsed(TFCKey).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Mark key as it as recently used.\n   * <p>\n   * <b>Implementation notes: Synchronization considerations and the interaction between lruKeys and cache:</b>\n   * <ol>\n   *  <li>A concurrent {@link LinkedHashMap} would have made this class much simpler.\n   *      But unfortunately, Java does not provide one.\n   *      Instead, we combine two concurrent objects:\n   *  <ul>\n   *   <li>{@link ConcurrentHashMap} for the cached TFCs.\n   *   <li>{@link ConcurrentLinkedQueue} for active keys\n   *  </ul>\n   *  <li>Both {@link #lruKeys} and {@link #cache} are concurrently safe.\n   *  <li>Checks for a cached item through getTotalCounts() are not synchronized.\n   *      Therefore, the case that a needed TFC is in the cache is very fast:\n   *      it does not wait for the computation of other TFCs.\n   *  <li>computeAndCache() is synchronized, and, has a (double) check of the required\n   *       TFC, to avoid computing the same TFC twice. \n   *  <li>A race condition in this method (markRecentlyUsed) might result in two copies \n   *      of the same 'key' in lruKeys, but this is handled by the loop in trimCache(), \n   *      where an attempt to remove the same key twice is a no-op.\n   * </ol>\n   */\n  private void markRecentlyUsed(TFCKey key) {\n    lruKeys.remove(key);  \n    lruKeys.add(key);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#markRecentlyUsed(TFCKey).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Mark key as it as recently used.\n   * <p>\n   * <b>Implementation notes: Synchronization considerations and the interaction between lruKeys and cache:</b>\n   * <ol>\n   *  <li>A concurrent {@link LinkedHashMap} would have made this class much simpler.\n   *      But unfortunately, Java does not provide one.\n   *      Instead, we combine two concurrent objects:\n   *  <ul>\n   *   <li>{@link ConcurrentHashMap} for the cached TFCs.\n   *   <li>{@link ConcurrentLinkedQueue} for active keys\n   *  </ul>\n   *  <li>Both {@link #lruKeys} and {@link #cache} are concurrently safe.\n   *  <li>Checks for a cached item through getTotalCounts() are not synchronized.\n   *      Therefore, the case that a needed TFC is in the cache is very fast:\n   *      it does not wait for the computation of other TFCs.\n   *  <li>computeAndCache() is synchronized, and, has a (double) check of the required\n   *       TFC, to avoid computing the same TFC twice. \n   *  <li>A race condition in this method (markRecentlyUsed) might result in two copies \n   *      of the same 'key' in lruKeys, but this is handled by the loop in trimCache(), \n   *      where an attempt to remove the same key twice is a no-op.\n   * </ol>\n   */\n  private void markRecentlyUsed(TFCKey key) {\n    lruKeys.remove(key);  \n    lruKeys.add(key);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#markRecentlyUsed(TFCKey).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Mark key as it as recently used.\n   * <p>\n   * <b>Implementation notes: Synchronization considerations and the interaction between lruKeys and cache:</b>\n   * <ol>\n   *  <li>A concurrent {@link LinkedHashMap} would have made this class much simpler.\n   *      But unfortunately, Java does not provide one.\n   *      Instead, we combine two concurrent objects:\n   *  <ul>\n   *   <li>{@link ConcurrentHashMap} for the cached TFCs.\n   *   <li>{@link ConcurrentLinkedQueue} for active keys\n   *  </ul>\n   *  <li>Both {@link #lruKeys} and {@link #cache} are concurrently safe.\n   *  <li>Checks for a cached item through getTotalCounts() are not synchronized.\n   *      Therefore, the case that a needed TFC is in the cache is very fast:\n   *      it does not wait for the computation of other TFCs.\n   *  <li>computeAndCache() is synchronized, and, has a (double) check of the required\n   *       TFC, to avoid computing the same TFC twice. \n   *  <li>A race condition in this method (markRecentlyUsed) might result in two copies \n   *      of the same 'key' in lruKeys, but this is handled by the loop in trimCache(), \n   *      where an attempt to remove the same key twice is a no-op.\n   * </ol>\n   */\n  private void markRecentlyUsed(TFCKey key) {\n    lruKeys.remove(key);  \n    lruKeys.add(key);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#markRecentlyUsed(TFCKey).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#markRecentlyUsed(TFCKey).mjava","sourceNew":"  /**\n   * Mark key as it as recently used.\n   * <p>\n   * <b>Implementation notes: Synchronization considerations and the interaction between lruKeys and cache:</b>\n   * <ol>\n   *  <li>A concurrent {@link LinkedHashMap} would have made this class much simpler.\n   *      But unfortunately, Java does not provide one.\n   *      Instead, we combine two concurrent objects:\n   *  <ul>\n   *   <li>{@link ConcurrentHashMap} for the cached TFCs.\n   *   <li>{@link ConcurrentLinkedQueue} for active keys\n   *  </ul>\n   *  <li>Both {@link #lruKeys} and {@link #cache} are concurrently safe.\n   *  <li>Checks for a cached item through getTotalCounts() are not synchronized.\n   *      Therefore, the case that a needed TFC is in the cache is very fast:\n   *      it does not wait for the computation of other TFCs.\n   *  <li>computeAndCache() is synchronized, and, has a (double) check of the required\n   *       TFC, to avoid computing the same TFC twice. \n   *  <li>A race condition in this method (markRecentlyUsed) might result in two copies \n   *      of the same 'key' in lruKeys, but this is handled by the loop in trimCache(), \n   *      where an attempt to remove the same key twice is a no-op.\n   * </ol>\n   */\n  private void markRecentlyUsed(TFCKey key) {\n    lruKeys.remove(key);  \n    lruKeys.add(key);\n  }\n\n","sourceOld":"  /**\n   * Mark key as it as recently used.\n   * <p>\n   * <b>Implementation notes: Synchronization considerations and the interaction between lruKeys and cache:</b>\n   * <ol>\n   *  <li>A concurrent {@link LinkedHashMap} would have made this class much simpler.\n   *      But unfortunately, Java does not provide one.\n   *      Instead, we combine two concurrent objects:\n   *  <ul>\n   *   <li>{@link ConcurrentHashMap} for the cached TFCs.\n   *   <li>{@link ConcurrentLinkedQueue} for active keys\n   *  </ul>\n   *  <li>Both {@link #lruKeys} and {@link #cache} are concurrently safe.\n   *  <li>Checks for a cached item through getTotalCounts() are not synchronized.\n   *      Therefore, the case that a needed TFC is in the cache is very fast:\n   *      it does not wait for the computation of other TFCs.\n   *  <li>computeAndCache() is synchronized, and, has a (double) check of the required\n   *       TFC, to avoid computing the same TFC twice. \n   *  <li>A race condition in this method (markRecentlyUsed) might result in two copies \n   *      of the same 'key' in lruKeys, but this is handled by the loop in trimCache(), \n   *      where an attempt to remove the same key twice is a no-op.\n   * </ol>\n   */\n  private void markRecentlyUsed(TFCKey key) {\n    lruKeys.remove(key);  \n    lruKeys.add(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}