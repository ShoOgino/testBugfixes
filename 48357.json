{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","commits":[{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo);\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo.toMap());\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo.toMap());\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo.toMap());\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo);\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo);\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f7df713a0f1e310d18dd8da91c89a07a13f86f8","date":1483441921,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (metricsInfo != null) {\n      m.put(\"metrics\", metricsInfo);\n    }\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo);\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo);\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (metricsInfo != null) {\n      m.put(\"metrics\", metricsInfo);\n    }\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo);\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo);\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d848516a5d0b23d183a2ceb4f4fb8634205956","date":1496408348,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", useCompoundFile,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (metricsInfo != null) {\n      m.put(\"metrics\", metricsInfo);\n    }\n    if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (metricsInfo != null) {\n      m.put(\"metrics\", metricsInfo);\n    }\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo);\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", useCompoundFile,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (metricsInfo != null) {\n      m.put(\"metrics\", metricsInfo);\n    }\n    if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (metricsInfo != null) {\n      m.put(\"metrics\", metricsInfo);\n    }\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo);\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", useCompoundFile,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (metricsInfo != null) {\n      m.put(\"metrics\", metricsInfo);\n    }\n    if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (metricsInfo != null) {\n      m.put(\"metrics\", metricsInfo);\n    }\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo);\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"151c786e439f34edb91b77d019109463ab0a6548","date":1562001139,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", useCompoundFile,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"ramPerThreadHardLimitMB\", ramPerThreadHardLimitMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (metricsInfo != null) {\n      m.put(\"metrics\", metricsInfo);\n    }\n    if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", useCompoundFile,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (metricsInfo != null) {\n      m.put(\"metrics\", metricsInfo);\n    }\n    if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d7561aa9163e566b45895f013690403401d5e5c","date":1596822876,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", useCompoundFile,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"ramPerThreadHardLimitMB\", ramPerThreadHardLimitMB,\n        \"maxCommitMergeWaitTime\", maxCommitMergeWaitMillis,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (metricsInfo != null) {\n      m.put(\"metrics\", metricsInfo);\n    }\n    if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", useCompoundFile,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"ramPerThreadHardLimitMB\", ramPerThreadHardLimitMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (metricsInfo != null) {\n      m.put(\"metrics\", metricsInfo);\n    }\n    if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"151c786e439f34edb91b77d019109463ab0a6548":["28288370235ed02234a64753cdbf0c6ec096304a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"5d7561aa9163e566b45895f013690403401d5e5c":["151c786e439f34edb91b77d019109463ab0a6548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f1f31880696765d6aec499d3b01fa501129af45"],"1f1f31880696765d6aec499d3b01fa501129af45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"28288370235ed02234a64753cdbf0c6ec096304a":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d7561aa9163e566b45895f013690403401d5e5c"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"]},"commit2Childs":{"151c786e439f34edb91b77d019109463ab0a6548":["5d7561aa9163e566b45895f013690403401d5e5c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"5d7561aa9163e566b45895f013690403401d5e5c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","1f1f31880696765d6aec499d3b01fa501129af45","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f1f31880696765d6aec499d3b01fa501129af45":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["e9017cf144952056066919f1ebc7897ff9bd71b1","70d848516a5d0b23d183a2ceb4f4fb8634205956","28288370235ed02234a64753cdbf0c6ec096304a","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["151c786e439f34edb91b77d019109463ab0a6548"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}