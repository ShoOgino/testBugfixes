{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","commits":[{"id":"e6af5ddb3f8b6e8d63c23b3336cf936bb9d79c62","date":1248886025,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    QueryParser qp = new QueryParser(f1, analyzer);\n    Query query = qp.parse(q);\n    CachingTokenFilter stream = new CachingTokenFilter(analyzer.tokenStream(f1,\n        new StringReader(content)));\n    Scorer scorer = new SpanScorer(query, f1, stream, false);\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    QueryParser qp = new QueryParser(f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    QueryParser qp = new QueryParser(f1, analyzer);\n    Query query = qp.parse(q);\n    CachingTokenFilter stream = new CachingTokenFilter(analyzer.tokenStream(f1,\n        new StringReader(content)));\n    Scorer scorer = new SpanScorer(query, f1, stream, false);\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    QueryParser qp = new QueryParser(f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464a71190fd7694704427cd763d7c957c10e935b","date":1256329736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    QueryParser qp = new QueryParser(TEST_VERSION, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ced3401b9c4e7ed2be67711dbc83e48b81aa736","date":1265394056,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    QueryParser qp = new QueryParser(TEST_VERSION, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6af5ddb3f8b6e8d63c23b3336cf936bb9d79c62":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"464a71190fd7694704427cd763d7c957c10e935b":["ba1116b3450a9c1642c89445d131b37344055245"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["464a71190fd7694704427cd763d7c957c10e935b"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["e6af5ddb3f8b6e8d63c23b3336cf936bb9d79c62"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ba1116b3450a9c1642c89445d131b37344055245":["943c3f9cf96b8df37f4273d66a66182e2a669467"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6af5ddb3f8b6e8d63c23b3336cf936bb9d79c62"],"e6af5ddb3f8b6e8d63c23b3336cf936bb9d79c62":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"464a71190fd7694704427cd763d7c957c10e935b":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["ba1116b3450a9c1642c89445d131b37344055245"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"ba1116b3450a9c1642c89445d131b37344055245":["464a71190fd7694704427cd763d7c957c10e935b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}