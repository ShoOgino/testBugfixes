{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testGetChildren().mjava","commits":[{"id":"3b2903a7a87a18de2500304882a7f4734082e7cb","date":1365107450,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testGetChildren().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int numCategories = atLeast(10);\n    int numA = 0, numB = 0;\n    Random random = random();\n    for (int i = 0; i < numCategories; i++) {\n      if (random.nextBoolean()) {\n        taxoWriter.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n        ++numA;\n      } else {\n        taxoWriter.addCategory(new CategoryPath(\"b\", Integer.toString(i)));\n        ++numB;\n      }\n    }\n    // add category with no children\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.close();\n    \n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n\n    // non existing category\n    ChildrenIterator it = taxoReader.getChildren(taxoReader.getOrdinal(new CategoryPath(\"invalid\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // a category with no children\n    it = taxoReader.getChildren(taxoReader.getOrdinal(new CategoryPath(\"c\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // arbitrary negative ordinal\n    it = taxoReader.getChildren(-2);\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // root's children\n    Set<String> roots = new HashSet<String>(Arrays.asList(\"a\", \"b\", \"c\"));\n    it = taxoReader.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    while (!roots.isEmpty()) {\n      CategoryPath root = taxoReader.getPath(it.next());\n      assertEquals(1, root.length);\n      assertTrue(roots.remove(root.components[0]));\n    }\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n    \n    for (int i = 0; i < 2; i++) {\n      CategoryPath cp = i == 0 ? new CategoryPath(\"a\") : new CategoryPath(\"b\");\n      int ordinal = taxoReader.getOrdinal(cp);\n      it = taxoReader.getChildren(ordinal);\n      int numChildren = 0;\n      int child;\n      while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n        CategoryPath path = taxoReader.getPath(child);\n        assertEquals(2, path.length);\n        assertEquals(path.components[0], i == 0 ? \"a\" : \"b\");\n        ++numChildren;\n      }\n      int expected = i == 0 ? numA : numB;\n      assertEquals(\"invalid num children\", expected, numChildren);\n    }\n    taxoReader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"778b3e9a8470b694f1353eba9064cf1397876362","date":1381683986,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testGetChildren().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testGetChildren().mjava","sourceNew":"  @Test\n  public void testGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int numCategories = atLeast(10);\n    int numA = 0, numB = 0;\n    Random random = random();\n    // add the two categories for which we'll also add children (so asserts are simpler)\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.addCategory(new CategoryPath(\"b\"));\n    for (int i = 0; i < numCategories; i++) {\n      if (random.nextBoolean()) {\n        taxoWriter.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n        ++numA;\n      } else {\n        taxoWriter.addCategory(new CategoryPath(\"b\", Integer.toString(i)));\n        ++numB;\n      }\n    }\n    // add category with no children\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.close();\n    \n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n\n    // non existing category\n    ChildrenIterator it = taxoReader.getChildren(taxoReader.getOrdinal(new CategoryPath(\"invalid\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // a category with no children\n    it = taxoReader.getChildren(taxoReader.getOrdinal(new CategoryPath(\"c\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // arbitrary negative ordinal\n    it = taxoReader.getChildren(-2);\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // root's children\n    Set<String> roots = new HashSet<String>(Arrays.asList(\"a\", \"b\", \"c\"));\n    it = taxoReader.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    while (!roots.isEmpty()) {\n      CategoryPath root = taxoReader.getPath(it.next());\n      assertEquals(1, root.length);\n      assertTrue(roots.remove(root.components[0]));\n    }\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n    \n    for (int i = 0; i < 2; i++) {\n      CategoryPath cp = i == 0 ? new CategoryPath(\"a\") : new CategoryPath(\"b\");\n      int ordinal = taxoReader.getOrdinal(cp);\n      it = taxoReader.getChildren(ordinal);\n      int numChildren = 0;\n      int child;\n      while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n        CategoryPath path = taxoReader.getPath(child);\n        assertEquals(2, path.length);\n        assertEquals(path.components[0], i == 0 ? \"a\" : \"b\");\n        ++numChildren;\n      }\n      int expected = i == 0 ? numA : numB;\n      assertEquals(\"invalid num children\", expected, numChildren);\n    }\n    taxoReader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int numCategories = atLeast(10);\n    int numA = 0, numB = 0;\n    Random random = random();\n    for (int i = 0; i < numCategories; i++) {\n      if (random.nextBoolean()) {\n        taxoWriter.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n        ++numA;\n      } else {\n        taxoWriter.addCategory(new CategoryPath(\"b\", Integer.toString(i)));\n        ++numB;\n      }\n    }\n    // add category with no children\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.close();\n    \n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n\n    // non existing category\n    ChildrenIterator it = taxoReader.getChildren(taxoReader.getOrdinal(new CategoryPath(\"invalid\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // a category with no children\n    it = taxoReader.getChildren(taxoReader.getOrdinal(new CategoryPath(\"c\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // arbitrary negative ordinal\n    it = taxoReader.getChildren(-2);\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // root's children\n    Set<String> roots = new HashSet<String>(Arrays.asList(\"a\", \"b\", \"c\"));\n    it = taxoReader.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    while (!roots.isEmpty()) {\n      CategoryPath root = taxoReader.getPath(it.next());\n      assertEquals(1, root.length);\n      assertTrue(roots.remove(root.components[0]));\n    }\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n    \n    for (int i = 0; i < 2; i++) {\n      CategoryPath cp = i == 0 ? new CategoryPath(\"a\") : new CategoryPath(\"b\");\n      int ordinal = taxoReader.getOrdinal(cp);\n      it = taxoReader.getChildren(ordinal);\n      int numChildren = 0;\n      int child;\n      while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n        CategoryPath path = taxoReader.getPath(child);\n        assertEquals(2, path.length);\n        assertEquals(path.components[0], i == 0 ? \"a\" : \"b\");\n        ++numChildren;\n      }\n      int expected = i == 0 ? numA : numB;\n      assertEquals(\"invalid num children\", expected, numChildren);\n    }\n    taxoReader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testGetChildren().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testGetChildren().mjava","sourceNew":"  @Test\n  public void testGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int numCategories = atLeast(10);\n    int numA = 0, numB = 0;\n    Random random = random();\n    // add the two categories for which we'll also add children (so asserts are simpler)\n    taxoWriter.addCategory(new FacetLabel(\"a\"));\n    taxoWriter.addCategory(new FacetLabel(\"b\"));\n    for (int i = 0; i < numCategories; i++) {\n      if (random.nextBoolean()) {\n        taxoWriter.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n        ++numA;\n      } else {\n        taxoWriter.addCategory(new FacetLabel(\"b\", Integer.toString(i)));\n        ++numB;\n      }\n    }\n    // add category with no children\n    taxoWriter.addCategory(new FacetLabel(\"c\"));\n    taxoWriter.close();\n    \n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n\n    // non existing category\n    ChildrenIterator it = taxoReader.getChildren(taxoReader.getOrdinal(new FacetLabel(\"invalid\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // a category with no children\n    it = taxoReader.getChildren(taxoReader.getOrdinal(new FacetLabel(\"c\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // arbitrary negative ordinal\n    it = taxoReader.getChildren(-2);\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // root's children\n    Set<String> roots = new HashSet<String>(Arrays.asList(\"a\", \"b\", \"c\"));\n    it = taxoReader.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    while (!roots.isEmpty()) {\n      FacetLabel root = taxoReader.getPath(it.next());\n      assertEquals(1, root.length);\n      assertTrue(roots.remove(root.components[0]));\n    }\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n    \n    for (int i = 0; i < 2; i++) {\n      FacetLabel cp = i == 0 ? new FacetLabel(\"a\") : new FacetLabel(\"b\");\n      int ordinal = taxoReader.getOrdinal(cp);\n      it = taxoReader.getChildren(ordinal);\n      int numChildren = 0;\n      int child;\n      while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n        FacetLabel path = taxoReader.getPath(child);\n        assertEquals(2, path.length);\n        assertEquals(path.components[0], i == 0 ? \"a\" : \"b\");\n        ++numChildren;\n      }\n      int expected = i == 0 ? numA : numB;\n      assertEquals(\"invalid num children\", expected, numChildren);\n    }\n    taxoReader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int numCategories = atLeast(10);\n    int numA = 0, numB = 0;\n    Random random = random();\n    // add the two categories for which we'll also add children (so asserts are simpler)\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.addCategory(new CategoryPath(\"b\"));\n    for (int i = 0; i < numCategories; i++) {\n      if (random.nextBoolean()) {\n        taxoWriter.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n        ++numA;\n      } else {\n        taxoWriter.addCategory(new CategoryPath(\"b\", Integer.toString(i)));\n        ++numB;\n      }\n    }\n    // add category with no children\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.close();\n    \n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n\n    // non existing category\n    ChildrenIterator it = taxoReader.getChildren(taxoReader.getOrdinal(new CategoryPath(\"invalid\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // a category with no children\n    it = taxoReader.getChildren(taxoReader.getOrdinal(new CategoryPath(\"c\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // arbitrary negative ordinal\n    it = taxoReader.getChildren(-2);\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // root's children\n    Set<String> roots = new HashSet<String>(Arrays.asList(\"a\", \"b\", \"c\"));\n    it = taxoReader.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    while (!roots.isEmpty()) {\n      CategoryPath root = taxoReader.getPath(it.next());\n      assertEquals(1, root.length);\n      assertTrue(roots.remove(root.components[0]));\n    }\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n    \n    for (int i = 0; i < 2; i++) {\n      CategoryPath cp = i == 0 ? new CategoryPath(\"a\") : new CategoryPath(\"b\");\n      int ordinal = taxoReader.getOrdinal(cp);\n      it = taxoReader.getChildren(ordinal);\n      int numChildren = 0;\n      int child;\n      while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n        CategoryPath path = taxoReader.getPath(child);\n        assertEquals(2, path.length);\n        assertEquals(path.components[0], i == 0 ? \"a\" : \"b\");\n        ++numChildren;\n      }\n      int expected = i == 0 ? numA : numB;\n      assertEquals(\"invalid num children\", expected, numChildren);\n    }\n    taxoReader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testGetChildren().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testGetChildren().mjava","sourceNew":"  @Test\n  public void testGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int numCategories = atLeast(10);\n    int numA = 0, numB = 0;\n    Random random = random();\n    // add the two categories for which we'll also add children (so asserts are simpler)\n    taxoWriter.addCategory(new FacetLabel(\"a\"));\n    taxoWriter.addCategory(new FacetLabel(\"b\"));\n    for (int i = 0; i < numCategories; i++) {\n      if (random.nextBoolean()) {\n        taxoWriter.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n        ++numA;\n      } else {\n        taxoWriter.addCategory(new FacetLabel(\"b\", Integer.toString(i)));\n        ++numB;\n      }\n    }\n    // add category with no children\n    taxoWriter.addCategory(new FacetLabel(\"c\"));\n    taxoWriter.close();\n    \n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n\n    // non existing category\n    ChildrenIterator it = taxoReader.getChildren(taxoReader.getOrdinal(new FacetLabel(\"invalid\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // a category with no children\n    it = taxoReader.getChildren(taxoReader.getOrdinal(new FacetLabel(\"c\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // arbitrary negative ordinal\n    it = taxoReader.getChildren(-2);\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // root's children\n    Set<String> roots = new HashSet<String>(Arrays.asList(\"a\", \"b\", \"c\"));\n    it = taxoReader.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    while (!roots.isEmpty()) {\n      FacetLabel root = taxoReader.getPath(it.next());\n      assertEquals(1, root.length);\n      assertTrue(roots.remove(root.components[0]));\n    }\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n    \n    for (int i = 0; i < 2; i++) {\n      FacetLabel cp = i == 0 ? new FacetLabel(\"a\") : new FacetLabel(\"b\");\n      int ordinal = taxoReader.getOrdinal(cp);\n      it = taxoReader.getChildren(ordinal);\n      int numChildren = 0;\n      int child;\n      while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n        FacetLabel path = taxoReader.getPath(child);\n        assertEquals(2, path.length);\n        assertEquals(path.components[0], i == 0 ? \"a\" : \"b\");\n        ++numChildren;\n      }\n      int expected = i == 0 ? numA : numB;\n      assertEquals(\"invalid num children\", expected, numChildren);\n    }\n    taxoReader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int numCategories = atLeast(10);\n    int numA = 0, numB = 0;\n    Random random = random();\n    // add the two categories for which we'll also add children (so asserts are simpler)\n    taxoWriter.addCategory(new CategoryPath(\"a\"));\n    taxoWriter.addCategory(new CategoryPath(\"b\"));\n    for (int i = 0; i < numCategories; i++) {\n      if (random.nextBoolean()) {\n        taxoWriter.addCategory(new CategoryPath(\"a\", Integer.toString(i)));\n        ++numA;\n      } else {\n        taxoWriter.addCategory(new CategoryPath(\"b\", Integer.toString(i)));\n        ++numB;\n      }\n    }\n    // add category with no children\n    taxoWriter.addCategory(new CategoryPath(\"c\"));\n    taxoWriter.close();\n    \n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n\n    // non existing category\n    ChildrenIterator it = taxoReader.getChildren(taxoReader.getOrdinal(new CategoryPath(\"invalid\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // a category with no children\n    it = taxoReader.getChildren(taxoReader.getOrdinal(new CategoryPath(\"c\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // arbitrary negative ordinal\n    it = taxoReader.getChildren(-2);\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // root's children\n    Set<String> roots = new HashSet<String>(Arrays.asList(\"a\", \"b\", \"c\"));\n    it = taxoReader.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    while (!roots.isEmpty()) {\n      CategoryPath root = taxoReader.getPath(it.next());\n      assertEquals(1, root.length);\n      assertTrue(roots.remove(root.components[0]));\n    }\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n    \n    for (int i = 0; i < 2; i++) {\n      CategoryPath cp = i == 0 ? new CategoryPath(\"a\") : new CategoryPath(\"b\");\n      int ordinal = taxoReader.getOrdinal(cp);\n      it = taxoReader.getChildren(ordinal);\n      int numChildren = 0;\n      int child;\n      while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n        CategoryPath path = taxoReader.getPath(child);\n        assertEquals(2, path.length);\n        assertEquals(path.components[0], i == 0 ? \"a\" : \"b\");\n        ++numChildren;\n      }\n      int expected = i == 0 ? numA : numB;\n      assertEquals(\"invalid num children\", expected, numChildren);\n    }\n    taxoReader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testGetChildren().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testGetChildren().mjava","sourceNew":"  @Test\n  public void testGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int numCategories = atLeast(10);\n    int numA = 0, numB = 0;\n    Random random = random();\n    // add the two categories for which we'll also add children (so asserts are simpler)\n    taxoWriter.addCategory(new FacetLabel(\"a\"));\n    taxoWriter.addCategory(new FacetLabel(\"b\"));\n    for (int i = 0; i < numCategories; i++) {\n      if (random.nextBoolean()) {\n        taxoWriter.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n        ++numA;\n      } else {\n        taxoWriter.addCategory(new FacetLabel(\"b\", Integer.toString(i)));\n        ++numB;\n      }\n    }\n    // add category with no children\n    taxoWriter.addCategory(new FacetLabel(\"c\"));\n    taxoWriter.close();\n    \n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n\n    // non existing category\n    ChildrenIterator it = taxoReader.getChildren(taxoReader.getOrdinal(new FacetLabel(\"invalid\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // a category with no children\n    it = taxoReader.getChildren(taxoReader.getOrdinal(new FacetLabel(\"c\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // arbitrary negative ordinal\n    it = taxoReader.getChildren(-2);\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // root's children\n    Set<String> roots = new HashSet<>(Arrays.asList(\"a\", \"b\", \"c\"));\n    it = taxoReader.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    while (!roots.isEmpty()) {\n      FacetLabel root = taxoReader.getPath(it.next());\n      assertEquals(1, root.length);\n      assertTrue(roots.remove(root.components[0]));\n    }\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n    \n    for (int i = 0; i < 2; i++) {\n      FacetLabel cp = i == 0 ? new FacetLabel(\"a\") : new FacetLabel(\"b\");\n      int ordinal = taxoReader.getOrdinal(cp);\n      it = taxoReader.getChildren(ordinal);\n      int numChildren = 0;\n      int child;\n      while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n        FacetLabel path = taxoReader.getPath(child);\n        assertEquals(2, path.length);\n        assertEquals(path.components[0], i == 0 ? \"a\" : \"b\");\n        ++numChildren;\n      }\n      int expected = i == 0 ? numA : numB;\n      assertEquals(\"invalid num children\", expected, numChildren);\n    }\n    taxoReader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int numCategories = atLeast(10);\n    int numA = 0, numB = 0;\n    Random random = random();\n    // add the two categories for which we'll also add children (so asserts are simpler)\n    taxoWriter.addCategory(new FacetLabel(\"a\"));\n    taxoWriter.addCategory(new FacetLabel(\"b\"));\n    for (int i = 0; i < numCategories; i++) {\n      if (random.nextBoolean()) {\n        taxoWriter.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n        ++numA;\n      } else {\n        taxoWriter.addCategory(new FacetLabel(\"b\", Integer.toString(i)));\n        ++numB;\n      }\n    }\n    // add category with no children\n    taxoWriter.addCategory(new FacetLabel(\"c\"));\n    taxoWriter.close();\n    \n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n\n    // non existing category\n    ChildrenIterator it = taxoReader.getChildren(taxoReader.getOrdinal(new FacetLabel(\"invalid\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // a category with no children\n    it = taxoReader.getChildren(taxoReader.getOrdinal(new FacetLabel(\"c\")));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // arbitrary negative ordinal\n    it = taxoReader.getChildren(-2);\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n\n    // root's children\n    Set<String> roots = new HashSet<String>(Arrays.asList(\"a\", \"b\", \"c\"));\n    it = taxoReader.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    while (!roots.isEmpty()) {\n      FacetLabel root = taxoReader.getPath(it.next());\n      assertEquals(1, root.length);\n      assertTrue(roots.remove(root.components[0]));\n    }\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, it.next());\n    \n    for (int i = 0; i < 2; i++) {\n      FacetLabel cp = i == 0 ? new FacetLabel(\"a\") : new FacetLabel(\"b\");\n      int ordinal = taxoReader.getOrdinal(cp);\n      it = taxoReader.getChildren(ordinal);\n      int numChildren = 0;\n      int child;\n      while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n        FacetLabel path = taxoReader.getPath(child);\n        assertEquals(2, path.length);\n        assertEquals(path.components[0], i == 0 ? \"a\" : \"b\");\n        ++numChildren;\n      }\n      int expected = i == 0 ? numA : numB;\n      assertEquals(\"invalid num children\", expected, numChildren);\n    }\n    taxoReader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"778b3e9a8470b694f1353eba9064cf1397876362":["3b2903a7a87a18de2500304882a7f4734082e7cb"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["778b3e9a8470b694f1353eba9064cf1397876362","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3b2903a7a87a18de2500304882a7f4734082e7cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["778b3e9a8470b694f1353eba9064cf1397876362"]},"commit2Childs":{"778b3e9a8470b694f1353eba9064cf1397876362":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b2903a7a87a18de2500304882a7f4734082e7cb"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3b2903a7a87a18de2500304882a7f4734082e7cb":["778b3e9a8470b694f1353eba9064cf1397876362"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}