{"path":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/SamplePluginMinimizeCores#computePlacement(Cluster,PlacementRequest,AttributeFetcher,PlacementPlanFactory).mjava","commits":[{"id":"f5d9700b23e8e9b11b845fcecef89dbdf21373d9","date":1600294231,"type":0,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/SamplePluginMinimizeCores#computePlacement(Cluster,PlacementRequest,AttributeFetcher,PlacementPlanFactory).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressForbidden(reason = \"Ordering.arbitrary() has no equivalent in Comparator class. Rather reuse than copy.\")\n  public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                        PlacementPlanFactory placementPlanFactory) throws PlacementException {\n    int totalReplicasPerShard = 0;\n    for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n      totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n    }\n\n    if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n      throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n    }\n\n    // Get number of cores on each Node\n    TreeMultimap<Integer, Node> nodesByCores = TreeMultimap.create(Comparator.naturalOrder(), Ordering.arbitrary());\n\n    Set<Node> nodes = request.getTargetNodes();\n\n    attributeFetcher.requestNodeCoreCount();\n    attributeFetcher.fetchFrom(nodes);\n    AttributeValues attrValues = attributeFetcher.fetchAttributes();\n\n\n    // Get the number of cores on each node and sort the nodes by increasing number of cores\n    for (Node node : nodes) {\n      if (attrValues.getCoresCount(node).isEmpty()) {\n        throw new PlacementException(\"Can't get number of cores in \" + node);\n      }\n      nodesByCores.put(attrValues.getCoresCount(node).get(), node);\n    }\n\n    Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n    // Now place all replicas of all shards on nodes, by placing on nodes with the smallest number of cores and taking\n    // into account replicas placed during this computation. Note that for each shard we must place replicas on different\n    // nodes, when moving to the next shard we use the nodes sorted by their updated number of cores (due to replica\n    // placements for previous shards).\n    for (String shardName : request.getShardNames()) {\n      // Assign replicas based on the sort order of the nodesByCores tree multimap to put replicas on nodes with less\n      // cores first. We only need totalReplicasPerShard nodes given that's the number of replicas to place.\n      // We assign based on the passed nodeEntriesToAssign list so the right nodes get replicas.\n      ArrayList<Map.Entry<Integer, Node>> nodeEntriesToAssign = new ArrayList<>(totalReplicasPerShard);\n      Iterator<Map.Entry<Integer, Node>> treeIterator = nodesByCores.entries().iterator();\n      for (int i = 0; i < totalReplicasPerShard; i++) {\n        nodeEntriesToAssign.add(treeIterator.next());\n      }\n\n      // Update the number of cores each node will have once the assignments below got executed so the next shard picks the\n      // lowest loaded nodes for its replicas.\n      for (Map.Entry<Integer, Node> e : nodeEntriesToAssign) {\n        int coreCount = e.getKey();\n        Node node = e.getValue();\n        nodesByCores.remove(coreCount, node);\n        nodesByCores.put(coreCount + 1, node);\n      }\n\n      for (Replica.ReplicaType replicaType : Replica.ReplicaType.values()) {\n        placeReplicas(request.getCollection(), nodeEntriesToAssign, placementPlanFactory, replicaPlacements, shardName, request, replicaType);\n      }\n    }\n\n    return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65352f844eb9e9a677ec4eb2abced4404f08181d","date":1600297608,"type":0,"author":"noblepaul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/SamplePluginMinimizeCores#computePlacement(Cluster,PlacementRequest,AttributeFetcher,PlacementPlanFactory).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressForbidden(reason = \"Ordering.arbitrary() has no equivalent in Comparator class. Rather reuse than copy.\")\n  public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                        PlacementPlanFactory placementPlanFactory) throws PlacementException {\n    int totalReplicasPerShard = 0;\n    for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n      totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n    }\n\n    if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n      throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n    }\n\n    // Get number of cores on each Node\n    TreeMultimap<Integer, Node> nodesByCores = TreeMultimap.create(Comparator.naturalOrder(), Ordering.arbitrary());\n\n    Set<Node> nodes = request.getTargetNodes();\n\n    attributeFetcher.requestNodeCoreCount();\n    attributeFetcher.fetchFrom(nodes);\n    AttributeValues attrValues = attributeFetcher.fetchAttributes();\n\n\n    // Get the number of cores on each node and sort the nodes by increasing number of cores\n    for (Node node : nodes) {\n      if (attrValues.getCoresCount(node).isEmpty()) {\n        throw new PlacementException(\"Can't get number of cores in \" + node);\n      }\n      nodesByCores.put(attrValues.getCoresCount(node).get(), node);\n    }\n\n    Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n    // Now place all replicas of all shards on nodes, by placing on nodes with the smallest number of cores and taking\n    // into account replicas placed during this computation. Note that for each shard we must place replicas on different\n    // nodes, when moving to the next shard we use the nodes sorted by their updated number of cores (due to replica\n    // placements for previous shards).\n    for (String shardName : request.getShardNames()) {\n      // Assign replicas based on the sort order of the nodesByCores tree multimap to put replicas on nodes with less\n      // cores first. We only need totalReplicasPerShard nodes given that's the number of replicas to place.\n      // We assign based on the passed nodeEntriesToAssign list so the right nodes get replicas.\n      ArrayList<Map.Entry<Integer, Node>> nodeEntriesToAssign = new ArrayList<>(totalReplicasPerShard);\n      Iterator<Map.Entry<Integer, Node>> treeIterator = nodesByCores.entries().iterator();\n      for (int i = 0; i < totalReplicasPerShard; i++) {\n        nodeEntriesToAssign.add(treeIterator.next());\n      }\n\n      // Update the number of cores each node will have once the assignments below got executed so the next shard picks the\n      // lowest loaded nodes for its replicas.\n      for (Map.Entry<Integer, Node> e : nodeEntriesToAssign) {\n        int coreCount = e.getKey();\n        Node node = e.getValue();\n        nodesByCores.remove(coreCount, node);\n        nodesByCores.put(coreCount + 1, node);\n      }\n\n      for (Replica.ReplicaType replicaType : Replica.ReplicaType.values()) {\n        placeReplicas(request.getCollection(), nodeEntriesToAssign, placementPlanFactory, replicaPlacements, shardName, request, replicaType);\n      }\n    }\n\n    return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65352f844eb9e9a677ec4eb2abced4404f08181d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5d9700b23e8e9b11b845fcecef89dbdf21373d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65352f844eb9e9a677ec4eb2abced4404f08181d"]},"commit2Childs":{"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f5d9700b23e8e9b11b845fcecef89dbdf21373d9","65352f844eb9e9a677ec4eb2abced4404f08181d"],"65352f844eb9e9a677ec4eb2abced4404f08181d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}