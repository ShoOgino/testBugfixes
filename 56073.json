{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#getSlices(String,ZkStateReader,boolean).mjava","commits":[{"id":"6fa0fff8102ba352427001188190711b7295a1c2","date":1559148790,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#getSlices(String,ZkStateReader,boolean).mjava","sourceNew":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#getSlices(String,ZkStateReader,boolean).mjava","sourceNew":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#getSlices(String,ZkStateReader,boolean).mjava","sourceNew":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList<>();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["6fa0fff8102ba352427001188190711b7295a1c2"],"6fa0fff8102ba352427001188190711b7295a1c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6fa0fff8102ba352427001188190711b7295a1c2"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"b0b597c65628ca9e73913a07e81691f8229bae35":["6fa0fff8102ba352427001188190711b7295a1c2","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","b0b597c65628ca9e73913a07e81691f8229bae35"],"6fa0fff8102ba352427001188190711b7295a1c2":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","58af973abe9f7c0faa777c1a6285fc7f72c171c5","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6fa0fff8102ba352427001188190711b7295a1c2","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}