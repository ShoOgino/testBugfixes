{"path":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory.RequestTrackingQueue#getShardRequests(ZkStateReader,String,String).mjava","commits":[{"id":"1fc56848da7b3f927bb9840e8aedf09ee11cede1","date":1424871235,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory.RequestTrackingQueue#getShardRequests(ZkStateReader,String,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Retrieve all requests recorded by this queue which were sent to given collection and shard\n     *\n     * @param zkStateReader  the {@link org.apache.solr.common.cloud.ZkStateReader} from which cluster state is read\n     * @param collectionName the given collection name for which requests have to be extracted\n     * @param shardId        the given shard name for which requests have to be extracted\n     * @return a list of {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n     * or empty list if none are found\n     */\n    public List<ShardRequestAndParams> getShardRequests(ZkStateReader zkStateReader, String collectionName, String shardId) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      assert collection != null;\n      Slice slice = collection.getSlice(shardId);\n      assert slice != null;\n\n      List<TrackingShardHandlerFactory.ShardRequestAndParams> results = new ArrayList<>();\n      for (Map.Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {\n        String coreUrl = new ZkCoreNodeProps(entry.getValue()).getCoreUrl();\n        List<TrackingShardHandlerFactory.ShardRequestAndParams> list = requests.get(coreUrl);\n        if (list != null) {\n          results.addAll(list);\n        }\n      }\n      return results;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9462fd545ab5a12dc9df2b47945228d02bf613a","date":1424895453,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory.RequestTrackingQueue#getShardRequests(ZkStateReader,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory.RequestTrackingQueue#getShardRequests(ZkStateReader,String,String).mjava","sourceNew":"    /**\n     * Retrieve all requests recorded by this queue which were sent to given collection and shard\n     *\n     * @param zkStateReader  the {@link org.apache.solr.common.cloud.ZkStateReader} from which cluster state is read\n     * @param collectionName the given collection name for which requests have to be extracted\n     * @param shardId        the given shard name for which requests have to be extracted\n     * @return a list of {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n     * or empty list if none are found\n     */\n    public List<ShardRequestAndParams> getShardRequests(ZkStateReader zkStateReader, String collectionName, String shardId) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      assert collection != null;\n      Slice slice = collection.getSlice(shardId);\n      assert slice != null;\n\n      for (Map.Entry<String, List<ShardRequestAndParams>> entry : requests.entrySet()) {\n        // multiple shard addresses may be present separated by '|'\n        List<String> list = StrUtils.splitSmart(entry.getKey(), '|');\n        for (Map.Entry<String, Replica> replica : slice.getReplicasMap().entrySet()) {\n          String coreUrl = new ZkCoreNodeProps(replica.getValue()).getCoreUrl();\n          if (list.contains(coreUrl)) {\n            return new ArrayList<>(entry.getValue());\n          }\n        }\n      }\n      return Collections.emptyList();\n    }\n\n","sourceOld":"    /**\n     * Retrieve all requests recorded by this queue which were sent to given collection and shard\n     *\n     * @param zkStateReader  the {@link org.apache.solr.common.cloud.ZkStateReader} from which cluster state is read\n     * @param collectionName the given collection name for which requests have to be extracted\n     * @param shardId        the given shard name for which requests have to be extracted\n     * @return a list of {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n     * or empty list if none are found\n     */\n    public List<ShardRequestAndParams> getShardRequests(ZkStateReader zkStateReader, String collectionName, String shardId) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      assert collection != null;\n      Slice slice = collection.getSlice(shardId);\n      assert slice != null;\n\n      List<TrackingShardHandlerFactory.ShardRequestAndParams> results = new ArrayList<>();\n      for (Map.Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {\n        String coreUrl = new ZkCoreNodeProps(entry.getValue()).getCoreUrl();\n        List<TrackingShardHandlerFactory.ShardRequestAndParams> list = requests.get(coreUrl);\n        if (list != null) {\n          results.addAll(list);\n        }\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory.RequestTrackingQueue#getShardRequests(ZkStateReader,String,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Retrieve all requests recorded by this queue which were sent to given collection and shard\n     *\n     * @param zkStateReader  the {@link org.apache.solr.common.cloud.ZkStateReader} from which cluster state is read\n     * @param collectionName the given collection name for which requests have to be extracted\n     * @param shardId        the given shard name for which requests have to be extracted\n     * @return a list of {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}\n     * or empty list if none are found\n     */\n    public List<ShardRequestAndParams> getShardRequests(ZkStateReader zkStateReader, String collectionName, String shardId) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      assert collection != null;\n      Slice slice = collection.getSlice(shardId);\n      assert slice != null;\n\n      for (Map.Entry<String, List<ShardRequestAndParams>> entry : requests.entrySet()) {\n        // multiple shard addresses may be present separated by '|'\n        List<String> list = StrUtils.splitSmart(entry.getKey(), '|');\n        for (Map.Entry<String, Replica> replica : slice.getReplicasMap().entrySet()) {\n          String coreUrl = new ZkCoreNodeProps(replica.getValue()).getCoreUrl();\n          if (list.contains(coreUrl)) {\n            return new ArrayList<>(entry.getValue());\n          }\n        }\n      }\n      return Collections.emptyList();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e9462fd545ab5a12dc9df2b47945228d02bf613a"],"1fc56848da7b3f927bb9840e8aedf09ee11cede1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e9462fd545ab5a12dc9df2b47945228d02bf613a":["1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9462fd545ab5a12dc9df2b47945228d02bf613a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1fc56848da7b3f927bb9840e8aedf09ee11cede1":["e9462fd545ab5a12dc9df2b47945228d02bf613a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"e9462fd545ab5a12dc9df2b47945228d02bf613a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}