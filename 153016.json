{"path":"solr/core/src/java/org/apache/solr/schema/SpatialTwoDoublesFieldType#inform(IndexSchema).mjava","commits":[{"id":"c11e1d33f2ba742976268153f6edd2d29710cf69","date":1347851822,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialTwoDoublesFieldType#inform(IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(IndexSchema schema) {\n    FieldType fieldType = schema.getFieldTypeByName(numberFieldName);\n    if( fieldType == null ) {\n      throw new RuntimeException( \"Can not find number field: \"+ numberFieldName);\n    }\n    //TODO support other numeric types in the future\n    if( !(fieldType instanceof TrieDoubleField) ) {\n      throw new RuntimeException( \"field type must be TrieDoubleField: \"+ fieldType);\n    }\n    precisionStep = ((TrieField)fieldType).getPrecisionStep();\n\n    //Just set these, delegate everything else to the field type\n    final int p = (INDEXED | TOKENIZED | OMIT_NORMS | OMIT_TF_POSITIONS);\n    List<SchemaField> newFields = new ArrayList<SchemaField>();\n    for( SchemaField sf : schema.getFields().values() ) {\n      if( sf.getType() == this ) {\n        String name = sf.getName();\n        newFields.add(new SchemaField(name + TwoDoublesStrategy.SUFFIX_X, fieldType, p, null));\n        newFields.add(new SchemaField(name + TwoDoublesStrategy.SUFFIX_Y, fieldType, p, null));\n      }\n    }\n    for (SchemaField newField : newFields) {\n      schema.getFields().put(newField.getName(), newField);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc1e76fdb8a9952244528f098da956d2f52acec","date":1348348531,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialPointVectorFieldType#inform(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SpatialTwoDoublesFieldType#inform(IndexSchema).mjava","sourceNew":"  @Override\n  public void inform(IndexSchema schema) {\n    FieldType fieldType = schema.getFieldTypeByName(numberFieldName);\n    if( fieldType == null ) {\n      throw new RuntimeException( \"Can not find number field: \"+ numberFieldName);\n    }\n    //TODO support other numeric types in the future\n    if( !(fieldType instanceof TrieDoubleField) ) {\n      throw new RuntimeException( \"field type must be TrieDoubleField: \"+ fieldType);\n    }\n    precisionStep = ((TrieField)fieldType).getPrecisionStep();\n\n    //Just set these, delegate everything else to the field type\n    final int p = (INDEXED | TOKENIZED | OMIT_NORMS | OMIT_TF_POSITIONS);\n    List<SchemaField> newFields = new ArrayList<SchemaField>();\n    for( SchemaField sf : schema.getFields().values() ) {\n      if( sf.getType() == this ) {\n        String name = sf.getName();\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_X, fieldType, p, null));\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_Y, fieldType, p, null));\n      }\n    }\n    for (SchemaField newField : newFields) {\n      schema.getFields().put(newField.getName(), newField);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(IndexSchema schema) {\n    FieldType fieldType = schema.getFieldTypeByName(numberFieldName);\n    if( fieldType == null ) {\n      throw new RuntimeException( \"Can not find number field: \"+ numberFieldName);\n    }\n    //TODO support other numeric types in the future\n    if( !(fieldType instanceof TrieDoubleField) ) {\n      throw new RuntimeException( \"field type must be TrieDoubleField: \"+ fieldType);\n    }\n    precisionStep = ((TrieField)fieldType).getPrecisionStep();\n\n    //Just set these, delegate everything else to the field type\n    final int p = (INDEXED | TOKENIZED | OMIT_NORMS | OMIT_TF_POSITIONS);\n    List<SchemaField> newFields = new ArrayList<SchemaField>();\n    for( SchemaField sf : schema.getFields().values() ) {\n      if( sf.getType() == this ) {\n        String name = sf.getName();\n        newFields.add(new SchemaField(name + TwoDoublesStrategy.SUFFIX_X, fieldType, p, null));\n        newFields.add(new SchemaField(name + TwoDoublesStrategy.SUFFIX_Y, fieldType, p, null));\n      }\n    }\n    for (SchemaField newField : newFields) {\n      schema.getFields().put(newField.getName(), newField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bc1e76fdb8a9952244528f098da956d2f52acec":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bc1e76fdb8a9952244528f098da956d2f52acec"]},"commit2Childs":{"6bc1e76fdb8a9952244528f098da956d2f52acec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["6bc1e76fdb8a9952244528f098da956d2f52acec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}