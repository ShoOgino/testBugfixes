{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","commits":[{"id":"b1b26212116cd764dfc34c7f93ecaa718ec27ef3","date":1493832602,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: must have UNIQUE_FIELD_VALS < FACET_LIMIT since refinement not currently supported\",\n               UNIQUE_FIELD_VALS < FACET_LIMIT);\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: must have UNIQUE_FIELD_VALS < FACET_LIMIT since refinement not currently supported\",\n               UNIQUE_FIELD_VALS < FACET_LIMIT);\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"494cdc6d3b60067f83082f0c19e18dc33dc2b375","date":1505902929,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: must have UNIQUE_FIELD_VALS < FACET_LIMIT to get accurate counts without refinements\",\n               UNIQUE_FIELD_VALS < FACET_LIMIT);\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  // commit 1% of the time to create new segments\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  // duplicate the doc 5% of the time to create deleted docs\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: must have UNIQUE_FIELD_VALS < FACET_LIMIT since refinement not currently supported\",\n               UNIQUE_FIELD_VALS < FACET_LIMIT);\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: must have UNIQUE_FIELD_VALS < FACET_LIMIT to get accurate counts without refinements\",\n               UNIQUE_FIELD_VALS < FACET_LIMIT);\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  // commit 1% of the time to create new segments\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  // duplicate the doc 5% of the time to create deleted docs\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: must have UNIQUE_FIELD_VALS < FACET_LIMIT since refinement not currently supported\",\n               UNIQUE_FIELD_VALS < FACET_LIMIT);\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e27469285c87fe39ba0fcaf9c290f18bb0f1cf","date":1507135648,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  // commit 1% of the time to create new segments\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  // duplicate the doc 5% of the time to create deleted docs\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: must have UNIQUE_FIELD_VALS < FACET_LIMIT to get accurate counts without refinements\",\n               UNIQUE_FIELD_VALS < FACET_LIMIT);\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  // commit 1% of the time to create new segments\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  // duplicate the doc 5% of the time to create deleted docs\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7859b8e6a469429413db808a609e8468be14c03","date":1507222263,"type":3,"author":"tballison","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  // commit 1% of the time to create new segments\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  // duplicate the doc 5% of the time to create deleted docs\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: must have UNIQUE_FIELD_VALS < FACET_LIMIT to get accurate counts without refinements\",\n               UNIQUE_FIELD_VALS < FACET_LIMIT);\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  // commit 1% of the time to create new segments\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  // duplicate the doc 5% of the time to create deleted docs\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1","date":1527210146,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // we need DVs on point fields to compute stats & facets\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  // commit 1% of the time to create new segments\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  // duplicate the doc 5% of the time to create deleted docs\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  // commit 1% of the time to create new segments\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  // duplicate the doc 5% of the time to create deleted docs\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // we need DVs on point fields to compute stats & facets\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  // commit 1% of the time to create new segments\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  // duplicate the doc 5% of the time to create deleted docs\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // sanity check constants\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    // we need DVs on point fields to compute stats & facets\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    // multi replicas should not matter...\n    final int repFactor = usually() ? 1 : 2;\n    // ... but we definitely want to test multiple shards\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        // NOTE: some docs may have no value in a field\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          // for each fieldNum, there are actaully two fields: one string, and one integer\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  // commit 1% of the time to create new segments\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  // duplicate the doc 5% of the time to create deleted docs\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1":["20e27469285c87fe39ba0fcaf9c290f18bb0f1cf"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"494cdc6d3b60067f83082f0c19e18dc33dc2b375":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["e9017cf144952056066919f1ebc7897ff9bd71b1","494cdc6d3b60067f83082f0c19e18dc33dc2b375"],"d7859b8e6a469429413db808a609e8468be14c03":["494cdc6d3b60067f83082f0c19e18dc33dc2b375","20e27469285c87fe39ba0fcaf9c290f18bb0f1cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1"],"20e27469285c87fe39ba0fcaf9c290f18bb0f1cf":["494cdc6d3b60067f83082f0c19e18dc33dc2b375"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["e9017cf144952056066919f1ebc7897ff9bd71b1","494cdc6d3b60067f83082f0c19e18dc33dc2b375"],"efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"494cdc6d3b60067f83082f0c19e18dc33dc2b375":["6240b74b884c5587f2a4062dd27d6c32bf228889","d7859b8e6a469429413db808a609e8468be14c03","20e27469285c87fe39ba0fcaf9c290f18bb0f1cf"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"d7859b8e6a469429413db808a609e8468be14c03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3","e9017cf144952056066919f1ebc7897ff9bd71b1"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"20e27469285c87fe39ba0fcaf9c290f18bb0f1cf":["efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1","d7859b8e6a469429413db808a609e8468be14c03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","d7859b8e6a469429413db808a609e8468be14c03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}