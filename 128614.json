{"path":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.BoostedComp#BoostedComp(IntIntHashMap,ScoreDoc[],float).mjava","commits":[{"id":"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","date":1440409984,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.BoostedComp#BoostedComp(IntIntHashMap,ScoreDoc[],float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.BoostedComp#BoostedComp(IntIntOpenHashMap,ScoreDoc[],float).mjava","sourceNew":"    public BoostedComp(IntIntHashMap boostedDocs, ScoreDoc[] scoreDocs, float maxScore) {\n      this.boostedMap = new IntFloatHashMap(boostedDocs.size()*2);\n\n      for(int i=0; i<scoreDocs.length; i++) {\n        final int idx;\n        if((idx = boostedDocs.indexOf(scoreDocs[i].doc)) >= 0) {\n          boostedMap.put(scoreDocs[i].doc, maxScore+boostedDocs.indexGet(idx));\n        } else {\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    public BoostedComp(IntIntOpenHashMap boostedDocs, ScoreDoc[] scoreDocs, float maxScore) {\n      this.boostedMap = new IntFloatOpenHashMap(boostedDocs.size()*2);\n\n      for(int i=0; i<scoreDocs.length; i++) {\n        if(boostedDocs.containsKey(scoreDocs[i].doc)) {\n          boostedMap.put(scoreDocs[i].doc, maxScore+boostedDocs.lget());\n        } else {\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d729a652b9a64220536d47218ed1c8324955e86d","date":1474975102,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector.BoostedComp#BoostedComp(IntIntHashMap,ScoreDoc[],float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.BoostedComp#BoostedComp(IntIntHashMap,ScoreDoc[],float).mjava","sourceNew":"    public BoostedComp(IntIntHashMap boostedDocs, ScoreDoc[] scoreDocs, float maxScore) {\n      this.boostedMap = new IntFloatHashMap(boostedDocs.size()*2);\n\n      for(int i=0; i<scoreDocs.length; i++) {\n        final int idx;\n        if((idx = boostedDocs.indexOf(scoreDocs[i].doc)) >= 0) {\n          boostedMap.put(scoreDocs[i].doc, maxScore+boostedDocs.indexGet(idx));\n        } else {\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    public BoostedComp(IntIntHashMap boostedDocs, ScoreDoc[] scoreDocs, float maxScore) {\n      this.boostedMap = new IntFloatHashMap(boostedDocs.size()*2);\n\n      for(int i=0; i<scoreDocs.length; i++) {\n        final int idx;\n        if((idx = boostedDocs.indexOf(scoreDocs[i].doc)) >= 0) {\n          boostedMap.put(scoreDocs[i].doc, maxScore+boostedDocs.indexGet(idx));\n        } else {\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector.BoostedComp#BoostedComp(IntIntHashMap,ScoreDoc[],float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.BoostedComp#BoostedComp(IntIntHashMap,ScoreDoc[],float).mjava","sourceNew":"    public BoostedComp(IntIntHashMap boostedDocs, ScoreDoc[] scoreDocs, float maxScore) {\n      this.boostedMap = new IntFloatHashMap(boostedDocs.size()*2);\n\n      for(int i=0; i<scoreDocs.length; i++) {\n        final int idx;\n        if((idx = boostedDocs.indexOf(scoreDocs[i].doc)) >= 0) {\n          boostedMap.put(scoreDocs[i].doc, maxScore+boostedDocs.indexGet(idx));\n        } else {\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    public BoostedComp(IntIntHashMap boostedDocs, ScoreDoc[] scoreDocs, float maxScore) {\n      this.boostedMap = new IntFloatHashMap(boostedDocs.size()*2);\n\n      for(int i=0; i<scoreDocs.length; i++) {\n        final int idx;\n        if((idx = boostedDocs.indexOf(scoreDocs[i].doc)) >= 0) {\n          boostedMap.put(scoreDocs[i].doc, maxScore+boostedDocs.indexGet(idx));\n        } else {\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector.BoostedComp#BoostedComp(IntIntHashMap,ScoreDoc[],float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.BoostedComp#BoostedComp(IntIntHashMap,ScoreDoc[],float).mjava","sourceNew":"    public BoostedComp(IntIntHashMap boostedDocs, ScoreDoc[] scoreDocs, float maxScore) {\n      this.boostedMap = new IntFloatHashMap(boostedDocs.size()*2);\n\n      for(int i=0; i<scoreDocs.length; i++) {\n        final int idx;\n        if((idx = boostedDocs.indexOf(scoreDocs[i].doc)) >= 0) {\n          boostedMap.put(scoreDocs[i].doc, maxScore+boostedDocs.indexGet(idx));\n        } else {\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    public BoostedComp(IntIntHashMap boostedDocs, ScoreDoc[] scoreDocs, float maxScore) {\n      this.boostedMap = new IntFloatHashMap(boostedDocs.size()*2);\n\n      for(int i=0; i<scoreDocs.length; i++) {\n        final int idx;\n        if((idx = boostedDocs.indexOf(scoreDocs[i].doc)) >= 0) {\n          boostedMap.put(scoreDocs[i].doc, maxScore+boostedDocs.indexGet(idx));\n        } else {\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d729a652b9a64220536d47218ed1c8324955e86d":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","d729a652b9a64220536d47218ed1c8324955e86d"],"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"d729a652b9a64220536d47218ed1c8324955e86d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87":["d729a652b9a64220536d47218ed1c8324955e86d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}