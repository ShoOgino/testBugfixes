{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2989b58779e186266a5d5ab0c6fc46096e68b848","date":1350919624,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs),\n            true);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs),\n            true);\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0),\n            false);\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0),\n            false);\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, 0));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, 0),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, 0));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, 0));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, 0),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, 0));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["2989b58779e186266a5d5ab0c6fc46096e68b848","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"99eb4a732d1a908f4636ace52928876136bf1896":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e52115b56781006682fd92c6938efaf174304d":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","2989b58779e186266a5d5ab0c6fc46096e68b848"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["2989b58779e186266a5d5ab0c6fc46096e68b848"],"2989b58779e186266a5d5ab0c6fc46096e68b848":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["2989b58779e186266a5d5ab0c6fc46096e68b848","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"62e52115b56781006682fd92c6938efaf174304d":[],"2989b58779e186266a5d5ab0c6fc46096e68b848":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","62e52115b56781006682fd92c6938efaf174304d","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["62e52115b56781006682fd92c6938efaf174304d"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}