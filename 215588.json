{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#toString().mjava","commits":[{"id":"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9","date":1459984736,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#toString().mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public String toString() {\n        double xMin = PointInShapeIntersectVisitor.decodeValueMin(NumericUtils.sortableBytesToInt(minPackedValue, 0));\n        double xMax = PointInShapeIntersectVisitor.decodeValueMax(NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n        double yMin = PointInShapeIntersectVisitor.decodeValueMin(NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n        double yMax = PointInShapeIntersectVisitor.decodeValueMax(NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n        double zMin = PointInShapeIntersectVisitor.decodeValueMin(NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n        double zMax = PointInShapeIntersectVisitor.decodeValueMax(NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n        return \"Cell(x=\" + xMin + \" TO \" + xMax + \" y=\" + yMin + \" TO \" + yMax + \" z=\" + zMin + \" TO \" + zMax + \")\";\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"873caa2b3b10bf0e4724a950c3a11b841ebb0e4a","date":1460035668,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#toString().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#toString().mjava","sourceNew":"      @Override\n      public String toString() {\n        double xMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 0));\n        double xMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n        double yMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n        double yMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n        double zMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n        double zMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n        return \"Cell(x=\" + xMin + \" TO \" + xMax + \" y=\" + yMin + \" TO \" + yMax + \" z=\" + zMin + \" TO \" + zMax + \")\";\n      }\n\n","sourceOld":"      @Override\n      public String toString() {\n        double xMin = PointInShapeIntersectVisitor.decodeValueMin(NumericUtils.sortableBytesToInt(minPackedValue, 0));\n        double xMax = PointInShapeIntersectVisitor.decodeValueMax(NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n        double yMin = PointInShapeIntersectVisitor.decodeValueMin(NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n        double yMax = PointInShapeIntersectVisitor.decodeValueMax(NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n        double zMin = PointInShapeIntersectVisitor.decodeValueMin(NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n        double zMax = PointInShapeIntersectVisitor.decodeValueMax(NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n        return \"Cell(x=\" + xMin + \" TO \" + xMax + \" y=\" + yMin + \" TO \" + yMax + \" z=\" + zMin + \" TO \" + zMax + \")\";\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62d7a29c02d2e863a5d8859ecc18a20c743e7f79","date":1460177787,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#toString().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#toString().mjava","sourceNew":"      @Override\n      public String toString() {\n        double xMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 0));\n        double xMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n        double yMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n        double yMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n        double zMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n        double zMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n        final XYZSolid xyzSolid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84, xMin, xMax, yMin, yMax, zMin, zMax);\n        final int relationship = xyzSolid.getRelationship(shape);\n        final boolean pointWithinShape = shape.isWithin(targetDocPoint);\n        final boolean pointWithinCell = xyzSolid.isWithin(targetDocPoint);\n        final String relationshipString;\n        switch (relationship) {\n        case GeoArea.CONTAINS:\n          relationshipString = \"CONTAINS\";\n          break;\n        case GeoArea.WITHIN:\n          relationshipString = \"WITHIN\";\n          break;\n        case GeoArea.OVERLAPS:\n          relationshipString = \"OVERLAPS\";\n          break;\n        case GeoArea.DISJOINT:\n          relationshipString = \"DISJOINT\";\n          break;\n        default:\n          relationshipString = \"UNKNOWN\";\n          break;\n        }\n        return \"Cell(x=\" + xMin + \" TO \" + xMax + \" y=\" + yMin + \" TO \" + yMax + \" z=\" + zMin + \" TO \" + zMax + \"); Shape relationship = \"+relationshipString+\"; Point within cell = \"+pointWithinCell+\"; Point within shape = \"+pointWithinShape;\n      }\n\n","sourceOld":"      @Override\n      public String toString() {\n        double xMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 0));\n        double xMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n        double yMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n        double yMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n        double zMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n        double zMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n        return \"Cell(x=\" + xMin + \" TO \" + xMax + \" y=\" + yMin + \" TO \" + yMax + \" z=\" + zMin + \" TO \" + zMax + \")\";\n      }\n\n","bugFix":null,"bugIntro":["dc584fa95053c03d95035277a2d2aaddd537c0fa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc584fa95053c03d95035277a2d2aaddd537c0fa","date":1460232759,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#toString().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#toString().mjava","sourceNew":"      @Override\n      public String toString() {\n        double xMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 0));\n        double xMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n        double yMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n        double yMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n        double zMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n        double zMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n        final XYZSolid xyzSolid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84, xMin, xMax, yMin, yMax, zMin, zMax);\n        final int relationship = xyzSolid.getRelationship(shape);\n        final boolean pointWithinShape = shape.isWithin(targetDocPoint);\n        final boolean pointWithinCell = xyzSolid.isWithin(targetDocPoint);\n        final boolean scaledWithinShape = shape.isWithin(scaledDocPoint);\n        final boolean scaledWithinCell = xyzSolid.isWithin(scaledDocPoint);\n\n        final String relationshipString;\n        switch (relationship) {\n        case GeoArea.CONTAINS:\n          relationshipString = \"CONTAINS\";\n          break;\n        case GeoArea.WITHIN:\n          relationshipString = \"WITHIN\";\n          break;\n        case GeoArea.OVERLAPS:\n          relationshipString = \"OVERLAPS\";\n          break;\n        case GeoArea.DISJOINT:\n          relationshipString = \"DISJOINT\";\n          break;\n        default:\n          relationshipString = \"UNKNOWN\";\n          break;\n        }\n        return \"Cell(x=\" + xMin + \" TO \" + xMax + \" y=\" + yMin + \" TO \" + yMax + \" z=\" + zMin + \" TO \" + zMax +\n          \"); Shape relationship = \"+relationshipString+\n          \"; Point within cell = \"+pointWithinCell+\"; Point within shape = \"+pointWithinShape+\n          \"; Scaled point within cell = \"+scaledWithinCell+\"; Scaled point within shape = \"+scaledWithinShape;\n      }\n\n","sourceOld":"      @Override\n      public String toString() {\n        double xMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 0));\n        double xMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n        double yMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n        double yMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n        double zMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n        double zMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n        final XYZSolid xyzSolid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84, xMin, xMax, yMin, yMax, zMin, zMax);\n        final int relationship = xyzSolid.getRelationship(shape);\n        final boolean pointWithinShape = shape.isWithin(targetDocPoint);\n        final boolean pointWithinCell = xyzSolid.isWithin(targetDocPoint);\n        final String relationshipString;\n        switch (relationship) {\n        case GeoArea.CONTAINS:\n          relationshipString = \"CONTAINS\";\n          break;\n        case GeoArea.WITHIN:\n          relationshipString = \"WITHIN\";\n          break;\n        case GeoArea.OVERLAPS:\n          relationshipString = \"OVERLAPS\";\n          break;\n        case GeoArea.DISJOINT:\n          relationshipString = \"DISJOINT\";\n          break;\n        default:\n          relationshipString = \"UNKNOWN\";\n          break;\n        }\n        return \"Cell(x=\" + xMin + \" TO \" + xMax + \" y=\" + yMin + \" TO \" + yMax + \" z=\" + zMin + \" TO \" + zMax + \"); Shape relationship = \"+relationshipString+\"; Point within cell = \"+pointWithinCell+\"; Point within shape = \"+pointWithinShape;\n      }\n\n","bugFix":["62d7a29c02d2e863a5d8859ecc18a20c743e7f79"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fce328ef870a3ecd74b752ab0906156ff29a4b93","date":1460809783,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#toString().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#toString().mjava","sourceNew":"      @Override\n      public String toString() {\n        double xMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 0));\n        double xMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n        double yMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n        double yMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n        double zMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n        double zMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n        final XYZSolid xyzSolid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84, xMin, xMax, yMin, yMax, zMin, zMax);\n        final int relationship = xyzSolid.getRelationship(shape);\n        final boolean pointWithinCell = xyzSolid.isWithin(targetDocPoint);\n        final boolean scaledWithinCell = xyzSolid.isWithin(scaledDocPoint);\n\n        final String relationshipString;\n        switch (relationship) {\n        case GeoArea.CONTAINS:\n          relationshipString = \"CONTAINS\";\n          break;\n        case GeoArea.WITHIN:\n          relationshipString = \"WITHIN\";\n          break;\n        case GeoArea.OVERLAPS:\n          relationshipString = \"OVERLAPS\";\n          break;\n        case GeoArea.DISJOINT:\n          relationshipString = \"DISJOINT\";\n          break;\n        default:\n          relationshipString = \"UNKNOWN\";\n          break;\n        }\n        return \"Cell(x=\" + xMin + \" TO \" + xMax + \" y=\" + yMin + \" TO \" + yMax + \" z=\" + zMin + \" TO \" + zMax +\n          \"); Shape relationship = \"+relationshipString+\n          \"; Quantized point within cell = \"+pointWithinCell+\n          \"; Unquantized point within cell = \"+scaledWithinCell;\n      }\n\n","sourceOld":"      @Override\n      public String toString() {\n        double xMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 0));\n        double xMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n        double yMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n        double yMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n        double zMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n        double zMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n        final XYZSolid xyzSolid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84, xMin, xMax, yMin, yMax, zMin, zMax);\n        final int relationship = xyzSolid.getRelationship(shape);\n        final boolean pointWithinShape = shape.isWithin(targetDocPoint);\n        final boolean pointWithinCell = xyzSolid.isWithin(targetDocPoint);\n        final boolean scaledWithinShape = shape.isWithin(scaledDocPoint);\n        final boolean scaledWithinCell = xyzSolid.isWithin(scaledDocPoint);\n\n        final String relationshipString;\n        switch (relationship) {\n        case GeoArea.CONTAINS:\n          relationshipString = \"CONTAINS\";\n          break;\n        case GeoArea.WITHIN:\n          relationshipString = \"WITHIN\";\n          break;\n        case GeoArea.OVERLAPS:\n          relationshipString = \"OVERLAPS\";\n          break;\n        case GeoArea.DISJOINT:\n          relationshipString = \"DISJOINT\";\n          break;\n        default:\n          relationshipString = \"UNKNOWN\";\n          break;\n        }\n        return \"Cell(x=\" + xMin + \" TO \" + xMax + \" y=\" + yMin + \" TO \" + yMax + \" z=\" + zMin + \" TO \" + zMax +\n          \"); Shape relationship = \"+relationshipString+\n          \"; Point within cell = \"+pointWithinCell+\"; Point within shape = \"+pointWithinShape+\n          \"; Scaled point within cell = \"+scaledWithinCell+\"; Scaled point within shape = \"+scaledWithinShape;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#toString().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor.Cell#toString().mjava","sourceNew":"      @Override\n      public String toString() {\n        double xMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 0), shape.getPlanetModel());\n        double xMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 0), shape.getPlanetModel());\n        double yMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES), shape.getPlanetModel());\n        double yMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES), shape.getPlanetModel());\n        double zMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES), shape.getPlanetModel());\n        double zMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES), shape.getPlanetModel());\n        final XYZSolid xyzSolid = XYZSolidFactory.makeXYZSolid(shape.getPlanetModel(), xMin, xMax, yMin, yMax, zMin, zMax);\n        final int relationship = xyzSolid.getRelationship(shape);\n        final boolean pointWithinCell = xyzSolid.isWithin(targetDocPoint);\n        final boolean scaledWithinCell = xyzSolid.isWithin(scaledDocPoint);\n\n        final String relationshipString;\n        switch (relationship) {\n        case GeoArea.CONTAINS:\n          relationshipString = \"CONTAINS\";\n          break;\n        case GeoArea.WITHIN:\n          relationshipString = \"WITHIN\";\n          break;\n        case GeoArea.OVERLAPS:\n          relationshipString = \"OVERLAPS\";\n          break;\n        case GeoArea.DISJOINT:\n          relationshipString = \"DISJOINT\";\n          break;\n        default:\n          relationshipString = \"UNKNOWN\";\n          break;\n        }\n        return \"Cell(x=\" + xMin + \" TO \" + xMax + \" y=\" + yMin + \" TO \" + yMax + \" z=\" + zMin + \" TO \" + zMax +\n          \"); Shape relationship = \"+relationshipString+\n          \"; Quantized point within cell = \"+pointWithinCell+\n          \"; Unquantized point within cell = \"+scaledWithinCell;\n      }\n\n","sourceOld":"      @Override\n      public String toString() {\n        double xMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 0));\n        double xMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n        double yMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n        double yMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n        double zMin = Geo3DUtil.decodeValueFloor(NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n        double zMax = Geo3DUtil.decodeValueCeil(NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n        final XYZSolid xyzSolid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84, xMin, xMax, yMin, yMax, zMin, zMax);\n        final int relationship = xyzSolid.getRelationship(shape);\n        final boolean pointWithinCell = xyzSolid.isWithin(targetDocPoint);\n        final boolean scaledWithinCell = xyzSolid.isWithin(scaledDocPoint);\n\n        final String relationshipString;\n        switch (relationship) {\n        case GeoArea.CONTAINS:\n          relationshipString = \"CONTAINS\";\n          break;\n        case GeoArea.WITHIN:\n          relationshipString = \"WITHIN\";\n          break;\n        case GeoArea.OVERLAPS:\n          relationshipString = \"OVERLAPS\";\n          break;\n        case GeoArea.DISJOINT:\n          relationshipString = \"DISJOINT\";\n          break;\n        default:\n          relationshipString = \"UNKNOWN\";\n          break;\n        }\n        return \"Cell(x=\" + xMin + \" TO \" + xMax + \" y=\" + yMin + \" TO \" + yMax + \" z=\" + zMin + \" TO \" + zMax +\n          \"); Shape relationship = \"+relationshipString+\n          \"; Quantized point within cell = \"+pointWithinCell+\n          \"; Unquantized point within cell = \"+scaledWithinCell;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc584fa95053c03d95035277a2d2aaddd537c0fa":["62d7a29c02d2e863a5d8859ecc18a20c743e7f79"],"62d7a29c02d2e863a5d8859ecc18a20c743e7f79":["873caa2b3b10bf0e4724a950c3a11b841ebb0e4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fce328ef870a3ecd74b752ab0906156ff29a4b93":["dc584fa95053c03d95035277a2d2aaddd537c0fa"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["fce328ef870a3ecd74b752ab0906156ff29a4b93"],"873caa2b3b10bf0e4724a950c3a11b841ebb0e4a":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"]},"commit2Childs":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["873caa2b3b10bf0e4724a950c3a11b841ebb0e4a"],"dc584fa95053c03d95035277a2d2aaddd537c0fa":["fce328ef870a3ecd74b752ab0906156ff29a4b93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"62d7a29c02d2e863a5d8859ecc18a20c743e7f79":["dc584fa95053c03d95035277a2d2aaddd537c0fa"],"fce328ef870a3ecd74b752ab0906156ff29a4b93":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"873caa2b3b10bf0e4724a950c3a11b841ebb0e4a":["62d7a29c02d2e863a5d8859ecc18a20c743e7f79"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}