{"path":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","commits":[{"id":"d0e21d913dd196ddb03bd8eba703d966f9aead69","date":1237540237,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(1);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba8376d112bb95ab94d979a28d968ba1ed774ebc","date":1253737604,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","pathOld":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(1000);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(1);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35e8f8c486e79a55058bbab4d089135c9bfb8979","date":1255796811,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","pathOld":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(1000);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","pathOld":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba8376d112bb95ab94d979a28d968ba1ed774ebc":["d0e21d913dd196ddb03bd8eba703d966f9aead69"],"d0e21d913dd196ddb03bd8eba703d966f9aead69":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["35e8f8c486e79a55058bbab4d089135c9bfb8979"],"35e8f8c486e79a55058bbab4d089135c9bfb8979":["ba8376d112bb95ab94d979a28d968ba1ed774ebc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba8376d112bb95ab94d979a28d968ba1ed774ebc":["35e8f8c486e79a55058bbab4d089135c9bfb8979"],"d0e21d913dd196ddb03bd8eba703d966f9aead69":["ba8376d112bb95ab94d979a28d968ba1ed774ebc"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d0e21d913dd196ddb03bd8eba703d966f9aead69"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"35e8f8c486e79a55058bbab4d089135c9bfb8979":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}