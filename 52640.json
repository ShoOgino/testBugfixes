{"path":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4c74000f48f15dd52e66dc2f279abd04cb226ed2","4c74000f48f15dd52e66dc2f279abd04cb226ed2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_POSITIONS);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_POSITIONS);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, postingsFlags);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_POSITIONS);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_POSITIONS);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, postingsFlags);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.postings(liveDocs, null, PostingsEnum.NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_POSITIONS);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          // nocommit: check\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.postings(liveDocs, null, PostingsEnum.NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.postings(liveDocs, null, PostingsEnum.NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4132f4678da3e90a8f5edca357516b86b1636e5","date":1427817153,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (!fieldTerms.hasPositions()) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run PhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          // nocommit: check\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.postings(liveDocs, null, PostingsEnum.NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"544428a1bff160a46b059862575074fe0c1d92ee","date":1427821909,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (!fieldTerms.hasPositions()) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (!fieldTerms.hasPositions()) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run PhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"611f44c3f4f09e009cc5fcf28aad2343e541d849","date":1427824904,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (!fieldTerms.hasPositions()) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.postings(liveDocs, null, PostingsEnum.NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8ac81480868d6bcd251ab080a87395b9e23d7c7","date":1429050381,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n        List<PostingsEnum> postings = new ArrayList<>();\n        \n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postings.add(termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS));\n        }\n        \n        if (postings.isEmpty()) {\n          return null;\n        }\n        \n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d5e43895c6f1bdbf4f7260372c0526309ea78ee","date":1429052573,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n        List<PostingsEnum> postings = new ArrayList<>();\n        \n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postings.add(termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS));\n        }\n        \n        if (postings.isEmpty()) {\n          return null;\n        }\n        \n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c74000f48f15dd52e66dc2f279abd04cb226ed2","date":1429059243,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n        List<PostingsEnum> postings = new ArrayList<>();\n        \n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS));\n          }\n        }\n        \n        if (postings.isEmpty()) {\n          return null;\n        }\n        \n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final PostingsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionPostingsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6d5e43895c6f1bdbf4f7260372c0526309ea78ee"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n        List<PostingsEnum> postings = new ArrayList<>();\n        \n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n          }\n        }\n        \n        if (postings.isEmpty()) {\n          return null;\n        }\n        \n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n        List<PostingsEnum> postings = new ArrayList<>();\n        \n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS));\n          }\n        }\n        \n        if (postings.isEmpty()) {\n          return null;\n        }\n        \n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"611f44c3f4f09e009cc5fcf28aad2343e541d849":["544428a1bff160a46b059862575074fe0c1d92ee"],"544428a1bff160a46b059862575074fe0c1d92ee":["e4132f4678da3e90a8f5edca357516b86b1636e5"],"e4132f4678da3e90a8f5edca357516b86b1636e5":["cb5311f0bff57ce15a23909f4cfb953773630534"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"4c74000f48f15dd52e66dc2f279abd04cb226ed2":["6d5e43895c6f1bdbf4f7260372c0526309ea78ee"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d5e43895c6f1bdbf4f7260372c0526309ea78ee":["f8ac81480868d6bcd251ab080a87395b9e23d7c7"],"cb5311f0bff57ce15a23909f4cfb953773630534":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","611f44c3f4f09e009cc5fcf28aad2343e541d849"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8ac81480868d6bcd251ab080a87395b9e23d7c7":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["f8ac81480868d6bcd251ab080a87395b9e23d7c7"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"611f44c3f4f09e009cc5fcf28aad2343e541d849":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"544428a1bff160a46b059862575074fe0c1d92ee":["611f44c3f4f09e009cc5fcf28aad2343e541d849"],"e4132f4678da3e90a8f5edca357516b86b1636e5":["544428a1bff160a46b059862575074fe0c1d92ee"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"4c74000f48f15dd52e66dc2f279abd04cb226ed2":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cb5311f0bff57ce15a23909f4cfb953773630534":["e4132f4678da3e90a8f5edca357516b86b1636e5"],"6d5e43895c6f1bdbf4f7260372c0526309ea78ee":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["cb5311f0bff57ce15a23909f4cfb953773630534","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"f8ac81480868d6bcd251ab080a87395b9e23d7c7":["6d5e43895c6f1bdbf4f7260372c0526309ea78ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}