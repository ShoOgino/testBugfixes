{"path":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testGetHighFreqTerms().mjava","commits":[{"id":"1513361122ebc5ddd6075f633cd77d2345611767","date":1273770174,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testGetHighFreqTerms().mjava","pathOld":"/dev/null","sourceNew":"  public static void testGetHighFreqTerms () throws Exception{\n    int numTerms=12;\n    String field=\"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n       \n    for (int i = 0; i < terms.length; i++) {\n      String termtext = terms[i].termtext.utf8ToString();\n      // hardcoded highTF or highTFmedDF\n      if (termtext.contains(\"highTF\")) {\n        if (termtext.contains(\"medDF\")) {\n          assertEquals(\"doc freq is not as expected\", 5, terms[i].docFreq);\n        } else {\n          assertEquals(\"doc freq is not as expected\", 1, terms[i].docFreq);\n        }\n      } else {\n        int n = Integer.parseInt(termtext);\n        assertEquals(\"doc freq is not as expected\", getExpecteddocFreq(n),\n            terms[i].docFreq);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24bbea3efc4507c483f922462353c5994867de42","date":1284405081,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testGetHighFreqTerms().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testGetHighFreqTerms().mjava","sourceNew":"  public void testGetHighFreqTerms () throws Exception{\n    int numTerms=12;\n    String field=\"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n       \n    for (int i = 0; i < terms.length; i++) {\n      String termtext = terms[i].termtext.utf8ToString();\n      // hardcoded highTF or highTFmedDF\n      if (termtext.contains(\"highTF\")) {\n        if (termtext.contains(\"medDF\")) {\n          assertEquals(\"doc freq is not as expected\", 5, terms[i].docFreq);\n        } else {\n          assertEquals(\"doc freq is not as expected\", 1, terms[i].docFreq);\n        }\n      } else {\n        int n = Integer.parseInt(termtext);\n        assertEquals(\"doc freq is not as expected\", getExpecteddocFreq(n),\n            terms[i].docFreq);\n      }\n    }\n  }\n\n","sourceOld":"  public static void testGetHighFreqTerms () throws Exception{\n    int numTerms=12;\n    String field=\"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n       \n    for (int i = 0; i < terms.length; i++) {\n      String termtext = terms[i].termtext.utf8ToString();\n      // hardcoded highTF or highTFmedDF\n      if (termtext.contains(\"highTF\")) {\n        if (termtext.contains(\"medDF\")) {\n          assertEquals(\"doc freq is not as expected\", 5, terms[i].docFreq);\n        } else {\n          assertEquals(\"doc freq is not as expected\", 1, terms[i].docFreq);\n        }\n      } else {\n        int n = Integer.parseInt(termtext);\n        assertEquals(\"doc freq is not as expected\", getExpecteddocFreq(n),\n            terms[i].docFreq);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testGetHighFreqTerms().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testGetHighFreqTerms().mjava","sourceNew":"  public void testGetHighFreqTerms () throws Exception{\n    int numTerms=12;\n    String field=\"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n       \n    for (int i = 0; i < terms.length; i++) {\n      String termtext = terms[i].termtext.utf8ToString();\n      // hardcoded highTF or highTFmedDF\n      if (termtext.contains(\"highTF\")) {\n        if (termtext.contains(\"medDF\")) {\n          assertEquals(\"doc freq is not as expected\", 5, terms[i].docFreq);\n        } else {\n          assertEquals(\"doc freq is not as expected\", 1, terms[i].docFreq);\n        }\n      } else {\n        int n = Integer.parseInt(termtext);\n        assertEquals(\"doc freq is not as expected\", getExpecteddocFreq(n),\n            terms[i].docFreq);\n      }\n    }\n  }\n\n","sourceOld":"  public static void testGetHighFreqTerms () throws Exception{\n    int numTerms=12;\n    String field=\"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n       \n    for (int i = 0; i < terms.length; i++) {\n      String termtext = terms[i].termtext.utf8ToString();\n      // hardcoded highTF or highTFmedDF\n      if (termtext.contains(\"highTF\")) {\n        if (termtext.contains(\"medDF\")) {\n          assertEquals(\"doc freq is not as expected\", 5, terms[i].docFreq);\n        } else {\n          assertEquals(\"doc freq is not as expected\", 1, terms[i].docFreq);\n        }\n      } else {\n        int n = Integer.parseInt(termtext);\n        assertEquals(\"doc freq is not as expected\", getExpecteddocFreq(n),\n            terms[i].docFreq);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testGetHighFreqTerms().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testGetHighFreqTerms().mjava","sourceNew":"  public void testGetHighFreqTerms () throws Exception{\n    int numTerms=12;\n    String field=\"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n       \n    for (int i = 0; i < terms.length; i++) {\n      String termtext = terms[i].termtext.utf8ToString();\n      // hardcoded highTF or highTFmedDF\n      if (termtext.contains(\"highTF\")) {\n        if (termtext.contains(\"medDF\")) {\n          assertEquals(\"doc freq is not as expected\", 5, terms[i].docFreq);\n        } else {\n          assertEquals(\"doc freq is not as expected\", 1, terms[i].docFreq);\n        }\n      } else {\n        int n = Integer.parseInt(termtext);\n        assertEquals(\"doc freq is not as expected\", getExpecteddocFreq(n),\n            terms[i].docFreq);\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetHighFreqTerms () throws Exception{\n    int numTerms=12;\n    String field=\"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n       \n    for (int i = 0; i < terms.length; i++) {\n      String termtext = terms[i].termtext.utf8ToString();\n      // hardcoded highTF or highTFmedDF\n      if (termtext.contains(\"highTF\")) {\n        if (termtext.contains(\"medDF\")) {\n          assertEquals(\"doc freq is not as expected\", 5, terms[i].docFreq);\n        } else {\n          assertEquals(\"doc freq is not as expected\", 1, terms[i].docFreq);\n        }\n      } else {\n        int n = Integer.parseInt(termtext);\n        assertEquals(\"doc freq is not as expected\", getExpecteddocFreq(n),\n            terms[i].docFreq);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"24bbea3efc4507c483f922462353c5994867de42":["1513361122ebc5ddd6075f633cd77d2345611767"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["24bbea3efc4507c483f922462353c5994867de42"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1513361122ebc5ddd6075f633cd77d2345611767","24bbea3efc4507c483f922462353c5994867de42"],"1513361122ebc5ddd6075f633cd77d2345611767":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"24bbea3efc4507c483f922462353c5994867de42":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1513361122ebc5ddd6075f633cd77d2345611767"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1513361122ebc5ddd6075f633cd77d2345611767":["24bbea3efc4507c483f922462353c5994867de42","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}