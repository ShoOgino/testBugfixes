{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestRerankBase#doTestParamsToMap(String,LinkedHashMap[String,Object]).mjava","commits":[{"id":"3f27a5f25d51fe6793a354a34b299ef83c34ca9f","date":1557418786,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestRerankBase#doTestParamsToMap(String,LinkedHashMap[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  protected static void doTestParamsToMap(String featureClassName,\n      LinkedHashMap<String,Object> featureParams) throws Exception {\n\n    // start with default parameters\n    final LinkedHashMap<String,Object> paramsA = new LinkedHashMap<String,Object>();\n    final Object defaultValue;\n    switch (random().nextInt(6)) {\n      case 0:\n        defaultValue = null;\n        break;\n      case 1:\n        defaultValue = \"1.2\";\n        break;\n      case 2:\n        defaultValue = Double.valueOf(3.4d);\n        break;\n      case 3:\n        defaultValue = Float.valueOf(0.5f);\n        break;\n      case 4:\n        defaultValue = Integer.valueOf(67);\n        break;\n      case 5:\n        defaultValue = Long.valueOf(89);\n        break;\n      default:\n        defaultValue = null;\n        fail(\"unexpected defaultValue choice\");\n        break;\n    }\n    if (defaultValue != null) {\n      paramsA.put(\"defaultValue\", defaultValue);\n    }\n\n    // then add specific parameters\n    paramsA.putAll(featureParams);\n\n    // next choose a random feature name\n    final String featureName = \"randomFeatureName\"+random().nextInt(10);\n\n    // create a feature from the parameters\n    final Feature featureA = Feature.getInstance(solrResourceLoader,\n        featureClassName, featureName, paramsA);\n\n    // turn the feature back into parameters\n    final LinkedHashMap<String,Object> paramsB = featureA.paramsToMap();\n\n    // create feature B from feature A's parameters\n    final Feature featureB = Feature.getInstance(solrResourceLoader,\n        featureClassName, featureName, paramsB);\n\n    // check that feature A and feature B are identical\n    assertEquals(featureA, featureB);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f27a5f25d51fe6793a354a34b299ef83c34ca9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f27a5f25d51fe6793a354a34b299ef83c34ca9f"]},"commit2Childs":{"3f27a5f25d51fe6793a354a34b299ef83c34ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f27a5f25d51fe6793a354a34b299ef83c34ca9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}