{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    OriginalQueryParserHelper parser = new OriginalQueryParserHelper();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws QueryNodeException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new AnalyzerReturningNull());\n\n    Query q = parser.parse(\"bla AND blo\", null);\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not\n    // analyzed anyway:\n    q = parser.parse(\"bla*\", null);\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\", null);\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\", null);\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}