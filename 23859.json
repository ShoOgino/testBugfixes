{"path":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.build().getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.build().getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.build().getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}