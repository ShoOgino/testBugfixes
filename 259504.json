{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,boolean,int,boolean).mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,boolean,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Hunspell2StemFilter#Hunspell2StemFilter(TokenStream,Dictionary,boolean,int).mjava","sourceNew":"  /**\n   * Creates a new HunspellStemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * Dictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param dedup true if only unique terms should be output.\n   * @param recursionCap maximum level of recursion stemmer can go into, defaults to <code>2</code>\n   * @param longestOnly true if only the longest term should be output.\n   */\n  public HunspellStemFilter(TokenStream input, Dictionary dictionary, boolean dedup, int recursionCap, boolean longestOnly) {\n    super(input);\n    this.dedup = dedup && longestOnly == false; // don't waste time deduping if longestOnly is set\n    this.stemmer = new Stemmer(dictionary, recursionCap);\n    this.longestOnly = longestOnly;\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellStemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * Dictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param dedup true if only unique terms should be output.\n   * @param recursionCap maximum level of recursion stemmer can go into, defaults to <code>2</code>\n   */\n  public Hunspell2StemFilter(TokenStream input, Dictionary dictionary, boolean dedup, int recursionCap) {\n    super(input);\n    this.dedup = dedup;\n    this.stemmer = new Stemmer(dictionary, recursionCap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,boolean,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new HunspellStemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * Dictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param dedup true if only unique terms should be output.\n   * @param recursionCap maximum level of recursion stemmer can go into, defaults to <code>2</code>\n   * @param longestOnly true if only the longest term should be output.\n   */\n  public HunspellStemFilter(TokenStream input, Dictionary dictionary, boolean dedup, int recursionCap, boolean longestOnly) {\n    super(input);\n    this.dedup = dedup && longestOnly == false; // don't waste time deduping if longestOnly is set\n    this.stemmer = new Stemmer(dictionary, recursionCap);\n    this.longestOnly = longestOnly;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7","date":1393724838,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,boolean,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,boolean,int,boolean).mjava","sourceNew":"  /**\n   * Creates a new HunspellStemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * Dictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param longestOnly true if only the longest term should be output.\n   */\n  public HunspellStemFilter(TokenStream input, Dictionary dictionary, boolean dedup,  boolean longestOnly) {\n    super(input);\n    this.dedup = dedup && longestOnly == false; // don't waste time deduping if longestOnly is set\n    this.stemmer = new Stemmer(dictionary);\n    this.longestOnly = longestOnly;\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellStemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * Dictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param dedup true if only unique terms should be output.\n   * @param recursionCap maximum level of recursion stemmer can go into, defaults to <code>2</code>\n   * @param longestOnly true if only the longest term should be output.\n   */\n  public HunspellStemFilter(TokenStream input, Dictionary dictionary, boolean dedup, int recursionCap, boolean longestOnly) {\n    super(input);\n    this.dedup = dedup && longestOnly == false; // don't waste time deduping if longestOnly is set\n    this.stemmer = new Stemmer(dictionary, recursionCap);\n    this.longestOnly = longestOnly;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"]},"commit2Childs":{"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}