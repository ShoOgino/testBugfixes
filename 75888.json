{"path":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","sourceNew":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) throws IOException {\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","sourceOld":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) throws IOException {\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ebb4b4370532662eb5f3238d02b002836b38b2","date":1331733267,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","sourceNew":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) throws IOException {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","sourceOld":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) throws IOException {\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","sourceNew":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","sourceOld":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) throws IOException {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","bugFix":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","sourceNew":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","sourceOld":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) throws IOException {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa968010b9c6598d02666b7b879c12e3cb0db4ee","date":1359063766,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","sourceNew":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  // nocommit: move this shit and any other vint bogusness to fieldcacheimpl!\n  public long copyUsingLengthPrefix(BytesRef bytes) {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","sourceOld":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9eafdf27a0bda3d70664dd39f3a1683d8416dcf","date":1359644871,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","sourceNew":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  // TODO: this really needs to be refactored into fieldcacheimpl!\n  public long copyUsingLengthPrefix(BytesRef bytes) {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","sourceOld":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  // nocommit: move this shit and any other vint bogusness to fieldcacheimpl!\n  public long copyUsingLengthPrefix(BytesRef bytes) {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","sourceNew":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  // TODO: this really needs to be refactored into fieldcacheimpl!\n  public long copyUsingLengthPrefix(BytesRef bytes) {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","sourceOld":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d943163030bbd7a9caf93cb5fea92257390a2a99","date":1403094254,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","sourceNew":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  // TODO: this really needs to be refactored into fieldcacheimpl!\n  public long copyUsingLengthPrefix(BytesRef bytes) {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        addBlock(currentBlock);     \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","sourceOld":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  // TODO: this really needs to be refactored into fieldcacheimpl!\n  public long copyUsingLengthPrefix(BytesRef bytes) {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","sourceNew":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  // TODO: this really needs to be refactored into fieldcacheimpl!\n  public long copyUsingLengthPrefix(BytesRef bytes) {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        addBlock(currentBlock);     \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","sourceOld":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  // TODO: this really needs to be refactored into fieldcacheimpl!\n  public long copyUsingLengthPrefix(BytesRef bytes) {\n    if (bytes.length >= 32768) {\n      throw new IllegalArgumentException(\"max length is 32767 (got \" + bytes.length + \")\");\n    }\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa968010b9c6598d02666b7b879c12e3cb0db4ee":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","e9eafdf27a0bda3d70664dd39f3a1683d8416dcf"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["d4d69c535930b5cce125cff868d40f6373dc27d4","d943163030bbd7a9caf93cb5fea92257390a2a99"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9eafdf27a0bda3d70664dd39f3a1683d8416dcf":["fa968010b9c6598d02666b7b879c12e3cb0db4ee"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["09ebb4b4370532662eb5f3238d02b002836b38b2","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d943163030bbd7a9caf93cb5fea92257390a2a99":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["09ebb4b4370532662eb5f3238d02b002836b38b2"],"09ebb4b4370532662eb5f3238d02b002836b38b2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d943163030bbd7a9caf93cb5fea92257390a2a99"]},"commit2Childs":{"fa968010b9c6598d02666b7b879c12e3cb0db4ee":["e9eafdf27a0bda3d70664dd39f3a1683d8416dcf"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","d943163030bbd7a9caf93cb5fea92257390a2a99"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"e9eafdf27a0bda3d70664dd39f3a1683d8416dcf":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["09ebb4b4370532662eb5f3238d02b002836b38b2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fa968010b9c6598d02666b7b879c12e3cb0db4ee","d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"09ebb4b4370532662eb5f3238d02b002836b38b2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}