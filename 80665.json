{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#IntersectBlockReader(CompiledAutomaton,BytesRef,IndexDictionary.BrowserSupplier,IndexInput,PostingsReaderBase,FieldMetadata,BlockDecoder).mjava","commits":[{"id":"42f6185d883389450f593fb00103d2e89a0b8336","date":1577705030,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#IntersectBlockReader(CompiledAutomaton,BytesRef,IndexDictionary.BrowserSupplier,IndexInput,PostingsReaderBase,FieldMetadata,BlockDecoder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#IntersectBlockReader(CompiledAutomaton,BytesRef,DictionaryBrowserSupplier,IndexInput,PostingsReaderBase,FieldMetadata,BlockDecoder).mjava","sourceNew":"  public IntersectBlockReader(CompiledAutomaton compiled, BytesRef startTerm,\n                              IndexDictionary.BrowserSupplier dictionaryBrowserSupplier, IndexInput blockInput, PostingsReaderBase postingsReader,\n                              FieldMetadata fieldMetadata, BlockDecoder blockDecoder) throws IOException {\n    super(dictionaryBrowserSupplier, blockInput, postingsReader, fieldMetadata, blockDecoder);\n    this.nextStringCalculator = new AutomatonNextTermCalculator(compiled);\n    Automaton automaton = Objects.requireNonNull(compiled.automaton);\n    this.runAutomaton = Objects.requireNonNull(compiled.runAutomaton);\n    this.commonSuffixRef = compiled.commonSuffixRef; // maybe null\n    this.commonPrefixRef = Operations.getCommonPrefixBytesRef(automaton); // never null\n\n    this.startTerm = startTerm;\n    assert startTerm == null || StringHelper.startsWith(startTerm, commonPrefixRef);\n    // it is thus also true that startTerm >= commonPrefixRef\n\n    this.seekTerm = startTerm != null ? startTerm : commonPrefixRef;\n  }\n\n","sourceOld":"  public IntersectBlockReader(CompiledAutomaton compiled, BytesRef startTerm,\n                              DictionaryBrowserSupplier dictionaryBrowserSupplier, IndexInput blockInput, PostingsReaderBase postingsReader,\n                              FieldMetadata fieldMetadata, BlockDecoder blockDecoder) throws IOException {\n    super(dictionaryBrowserSupplier, blockInput, postingsReader, fieldMetadata, blockDecoder);\n    this.nextStringCalculator = new AutomatonNextTermCalculator(compiled);\n    Automaton automaton = Objects.requireNonNull(compiled.automaton);\n    this.runAutomaton = Objects.requireNonNull(compiled.runAutomaton);\n    this.commonSuffixRef = compiled.commonSuffixRef; // maybe null\n    this.commonPrefixRef = Operations.getCommonPrefixBytesRef(automaton); // never null\n\n    this.startTerm = startTerm;\n    assert startTerm == null || StringHelper.startsWith(startTerm, commonPrefixRef);\n    // it is thus also true that startTerm >= commonPrefixRef\n\n    this.seekTerm = startTerm != null ? startTerm : commonPrefixRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e478fa10594a2ef9d1ddf7d195020300453c4e","date":1577783287,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#IntersectBlockReader(CompiledAutomaton,BytesRef,IndexDictionary.BrowserSupplier,IndexInput,PostingsReaderBase,FieldMetadata,BlockDecoder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#IntersectBlockReader(CompiledAutomaton,BytesRef,DictionaryBrowserSupplier,IndexInput,PostingsReaderBase,FieldMetadata,BlockDecoder).mjava","sourceNew":"  public IntersectBlockReader(CompiledAutomaton compiled, BytesRef startTerm,\n                              IndexDictionary.BrowserSupplier dictionaryBrowserSupplier, IndexInput blockInput, PostingsReaderBase postingsReader,\n                              FieldMetadata fieldMetadata, BlockDecoder blockDecoder) throws IOException {\n    super(dictionaryBrowserSupplier, blockInput, postingsReader, fieldMetadata, blockDecoder);\n    this.nextStringCalculator = new AutomatonNextTermCalculator(compiled);\n    Automaton automaton = Objects.requireNonNull(compiled.automaton);\n    this.runAutomaton = Objects.requireNonNull(compiled.runAutomaton);\n    this.commonSuffixRef = compiled.commonSuffixRef; // maybe null\n    this.commonPrefixRef = Operations.getCommonPrefixBytesRef(automaton); // never null\n\n    this.startTerm = startTerm;\n    assert startTerm == null || StringHelper.startsWith(startTerm, commonPrefixRef);\n    // it is thus also true that startTerm >= commonPrefixRef\n\n    this.seekTerm = startTerm != null ? startTerm : commonPrefixRef;\n  }\n\n","sourceOld":"  public IntersectBlockReader(CompiledAutomaton compiled, BytesRef startTerm,\n                              DictionaryBrowserSupplier dictionaryBrowserSupplier, IndexInput blockInput, PostingsReaderBase postingsReader,\n                              FieldMetadata fieldMetadata, BlockDecoder blockDecoder) throws IOException {\n    super(dictionaryBrowserSupplier, blockInput, postingsReader, fieldMetadata, blockDecoder);\n    this.nextStringCalculator = new AutomatonNextTermCalculator(compiled);\n    Automaton automaton = Objects.requireNonNull(compiled.automaton);\n    this.runAutomaton = Objects.requireNonNull(compiled.runAutomaton);\n    this.commonSuffixRef = compiled.commonSuffixRef; // maybe null\n    this.commonPrefixRef = Operations.getCommonPrefixBytesRef(automaton); // never null\n\n    this.startTerm = startTerm;\n    assert startTerm == null || StringHelper.startsWith(startTerm, commonPrefixRef);\n    // it is thus also true that startTerm >= commonPrefixRef\n\n    this.seekTerm = startTerm != null ? startTerm : commonPrefixRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23fcccd57316410c404dd37307a496ab850efa9c","date":1582897939,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#IntersectBlockReader(CompiledAutomaton,BytesRef,IndexDictionary.BrowserSupplier,IndexInput,PostingsReaderBase,FieldMetadata,BlockDecoder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#IntersectBlockReader(CompiledAutomaton,BytesRef,IndexDictionary.BrowserSupplier,IndexInput,PostingsReaderBase,FieldMetadata,BlockDecoder).mjava","sourceNew":"  protected IntersectBlockReader(CompiledAutomaton compiled, BytesRef startTerm,\n                                 IndexDictionary.BrowserSupplier dictionaryBrowserSupplier, IndexInput blockInput,\n                                 PostingsReaderBase postingsReader, FieldMetadata fieldMetadata,\n                                 BlockDecoder blockDecoder) throws IOException {\n    super(dictionaryBrowserSupplier, blockInput, postingsReader, fieldMetadata, blockDecoder);\n    automaton = compiled.automaton;\n    runAutomaton = compiled.runAutomaton;\n    finite = compiled.finite;\n    commonSuffix = compiled.commonSuffixRef;\n    minTermLength = getMinTermLength();\n    nextStringCalculator = new AutomatonNextTermCalculator(compiled);\n    seekTerm = startTerm;\n  }\n\n","sourceOld":"  public IntersectBlockReader(CompiledAutomaton compiled, BytesRef startTerm,\n                              IndexDictionary.BrowserSupplier dictionaryBrowserSupplier, IndexInput blockInput, PostingsReaderBase postingsReader,\n                              FieldMetadata fieldMetadata, BlockDecoder blockDecoder) throws IOException {\n    super(dictionaryBrowserSupplier, blockInput, postingsReader, fieldMetadata, blockDecoder);\n    this.nextStringCalculator = new AutomatonNextTermCalculator(compiled);\n    Automaton automaton = Objects.requireNonNull(compiled.automaton);\n    this.runAutomaton = Objects.requireNonNull(compiled.runAutomaton);\n    this.commonSuffixRef = compiled.commonSuffixRef; // maybe null\n    this.commonPrefixRef = Operations.getCommonPrefixBytesRef(automaton); // never null\n\n    this.startTerm = startTerm;\n    assert startTerm == null || StringHelper.startsWith(startTerm, commonPrefixRef);\n    // it is thus also true that startTerm >= commonPrefixRef\n\n    this.seekTerm = startTerm != null ? startTerm : commonPrefixRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f6185d883389450f593fb00103d2e89a0b8336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62e478fa10594a2ef9d1ddf7d195020300453c4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f6185d883389450f593fb00103d2e89a0b8336"],"23fcccd57316410c404dd37307a496ab850efa9c":["42f6185d883389450f593fb00103d2e89a0b8336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23fcccd57316410c404dd37307a496ab850efa9c"]},"commit2Childs":{"42f6185d883389450f593fb00103d2e89a0b8336":["62e478fa10594a2ef9d1ddf7d195020300453c4e","23fcccd57316410c404dd37307a496ab850efa9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42f6185d883389450f593fb00103d2e89a0b8336","62e478fa10594a2ef9d1ddf7d195020300453c4e"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":[],"23fcccd57316410c404dd37307a496ab850efa9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}