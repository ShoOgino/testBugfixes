{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#deleteById(List[String],int).mjava","commits":[{"id":"818d704eaaf0fba0561d0d2752832e1015053482","date":1327419676,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#deleteById(List[String],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Deletes a list of documents by unique ID, specifying max time before commit\n   * @param ids  the list of document IDs to delete \n   * @param commitWithinMs  max time (in ms) before a commit will happen \n   * @throws SolrServerException\n   * @throws IOException\n   * @since 3.6\n   */\n  public UpdateResponse deleteById(List<String> ids, int commitWithinMs) throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.deleteById(ids);\n    req.setCommitWithin(commitWithinMs);\n    return req.process(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#deleteById(List[String],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Deletes a list of documents by unique ID, specifying max time before commit\n   * @param ids  the list of document IDs to delete \n   * @param commitWithinMs  max time (in ms) before a commit will happen \n   * @throws SolrServerException\n   * @throws IOException\n   * @since 3.6\n   */\n  public UpdateResponse deleteById(List<String> ids, int commitWithinMs) throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.deleteById(ids);\n    req.setCommitWithin(commitWithinMs);\n    return req.process(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#deleteById(List[String],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Deletes a list of documents by unique ID, specifying max time before commit\n   * @param ids  the list of document IDs to delete \n   * @param commitWithinMs  max time (in ms) before a commit will happen \n   * @throws SolrServerException\n   * @throws IOException\n   * @since 3.6\n   */\n  public UpdateResponse deleteById(List<String> ids, int commitWithinMs) throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.deleteById(ids);\n    req.setCommitWithin(commitWithinMs);\n    return req.process(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#deleteById(List[String],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#deleteById(List[String],int).mjava","sourceNew":"  /**\n   * Deletes a list of documents by unique ID, specifying max time before commit\n   * @param ids  the list of document IDs to delete \n   * @param commitWithinMs  max time (in ms) before a commit will happen \n   * @throws IOException If there is a low-level I/O error.\n   * @since 3.6\n   */\n  public UpdateResponse deleteById(List<String> ids, int commitWithinMs) throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.deleteById(ids);\n    req.setCommitWithin(commitWithinMs);\n    return req.process(this);\n  }\n\n","sourceOld":"  /**\n   * Deletes a list of documents by unique ID, specifying max time before commit\n   * @param ids  the list of document IDs to delete \n   * @param commitWithinMs  max time (in ms) before a commit will happen \n   * @throws SolrServerException\n   * @throws IOException\n   * @since 3.6\n   */\n  public UpdateResponse deleteById(List<String> ids, int commitWithinMs) throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.deleteById(ids);\n    req.setCommitWithin(commitWithinMs);\n    return req.process(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#deleteById(List[String],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#deleteById(List[String],int).mjava","sourceNew":"  /**\n   * Deletes a list of documents by unique ID, specifying max time before commit\n   * @param ids  the list of document IDs to delete \n   * @param commitWithinMs  max time (in ms) before a commit will happen \n   * @throws IOException If there is a low-level I/O error.\n   * @since 3.6\n   */\n  public UpdateResponse deleteById(List<String> ids, int commitWithinMs) throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.deleteById(ids);\n    req.setCommitWithin(commitWithinMs);\n    return req.process(this);\n  }\n\n","sourceOld":"  /**\n   * Deletes a list of documents by unique ID, specifying max time before commit\n   * @param ids  the list of document IDs to delete \n   * @param commitWithinMs  max time (in ms) before a commit will happen \n   * @throws IOException If there is a low-level I/O error.\n   * @since 3.6\n   */\n  public UpdateResponse deleteById(List<String> ids, int commitWithinMs) throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.deleteById(ids);\n    req.setCommitWithin(commitWithinMs);\n    return req.process(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["818d704eaaf0fba0561d0d2752832e1015053482"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","818d704eaaf0fba0561d0d2752832e1015053482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","818d704eaaf0fba0561d0d2752832e1015053482"],"bafca15d8e408346a67f4282ad1143b88023893b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"818d704eaaf0fba0561d0d2752832e1015053482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["bafca15d8e408346a67f4282ad1143b88023893b"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","818d704eaaf0fba0561d0d2752832e1015053482"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"818d704eaaf0fba0561d0d2752832e1015053482":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}