{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","commits":[{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(boolean,int).mjava","sourceNew":"  private void waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.nanoTime() / (float)(10^9)) + \"ms\");\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","sourceOld":"  private void waitForReplicasToComeUp(boolean weAreReplacement, int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.nanoTime() / (float)(10^9)) + \"ms\");\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(boolean,int).mjava","sourceNew":"  private void waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.nanoTime() / (float)(10^9)) + \"ms\");\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","sourceOld":"  private void waitForReplicasToComeUp(boolean weAreReplacement, int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.nanoTime() / (float)(10^9)) + \"ms\");\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d48804b73be4dcb41299caa3ce29ad58f4be07f","date":1414159011,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","sourceNew":"  private void waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\" + found\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicasMap().size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","sourceOld":"  private void waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.nanoTime() / (float)(10^9)) + \"ms\");\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","bugFix":null,"bugIntro":["1d44b4a9eb67e68d542dc1ee2674e96f05b56eb0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d44b4a9eb67e68d542dc1ee2674e96f05b56eb0","date":1414159671,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","sourceNew":"  private void waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicasMap().size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      cnt++;\n    }\n  }\n\n","sourceOld":"  private void waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\" + found\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicasMap().size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","bugFix":["5d48804b73be4dcb41299caa3ce29ad58f4be07f","c5a558d54519c651068ddb202f03befefb1514a7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d307d6a381e7b6f0e272e550d925d41e3c736c4","date":1416916176,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","sourceNew":"  private void waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicasMap().size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      cnt++;\n    }\n  }\n\n","sourceOld":"  private void waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicasMap().size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      cnt++;\n    }\n  }\n\n","bugFix":["709ec1e7204705625cbd074102a6ced459df9c99"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78277631929de308318c889be36ed69ce7a85048","date":1443977344,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicasMap().size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return false;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","sourceOld":"  private void waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicasMap().size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      cnt++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return false;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicasMap().size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return false;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return false;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicasMap().size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return false;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    Slice slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return false;\n\n      }\n      \n      Thread.sleep(500);\n      docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n      slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return false;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","bugFix":["a6378064655e76cd7b908b1cab4ce425b384b508","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    Slice slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return false;\n\n      }\n      \n      Thread.sleep(500);\n      docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n      slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return false;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    Slice slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            if (log.isInfoEnabled()) {\n              log.info(\"Waiting until we see more replicas up for shard {}: total={} found={} timeoute in={}ms\"\n                  , shardId, slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size(), found,\n                  TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n            }\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: {} for collection {}\", shardId, collection);\n\n        return false;\n\n      }\n      \n      Thread.sleep(500);\n      docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n      slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    Slice slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard {}: total={}\"\n              + \" found={}\"\n              + \" timeoutin={}ms\",\n                shardId, slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size(), found,\n                TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return false;\n\n      }\n      \n      Thread.sleep(500);\n      docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n      slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n\n    DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    Slice slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n\n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            if (log.isInfoEnabled()) {\n              log.info(\"Waiting until we see more replicas up for shard {}: total={} found={} timeoute in={}ms\"\n                  , shardId, slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size(), found,\n                  TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n            }\n          }\n        }\n\n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: {} for collection {}\", shardId, collection);\n\n        return false;\n\n      }\n\n      Thread.sleep(500);\n      docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n      slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    Slice slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            if (log.isInfoEnabled()) {\n              log.info(\"Waiting until we see more replicas up for shard {}: total={} found={} timeoute in={}ms\"\n                  , shardId, slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size(), found,\n                  TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n            }\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: {} for collection {}\", shardId, collection);\n\n        return false;\n\n      }\n      \n      Thread.sleep(500);\n      docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n      slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61c45e99cf6676da48f19d7511c73712ad39402b":["78277631929de308318c889be36ed69ce7a85048"],"5d48804b73be4dcb41299caa3ce29ad58f4be07f":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"344b0840364d990b29b97467bfcc766ff8325d11":["61c45e99cf6676da48f19d7511c73712ad39402b"],"1d44b4a9eb67e68d542dc1ee2674e96f05b56eb0":["5d48804b73be4dcb41299caa3ce29ad58f4be07f"],"ad4957cde742defe6db19689abdc267c5d948066":["344b0840364d990b29b97467bfcc766ff8325d11"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["78277631929de308318c889be36ed69ce7a85048","61c45e99cf6676da48f19d7511c73712ad39402b"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["e9017cf144952056066919f1ebc7897ff9bd71b1","344b0840364d990b29b97467bfcc766ff8325d11"],"78277631929de308318c889be36ed69ce7a85048":["7d307d6a381e7b6f0e272e550d925d41e3c736c4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"7d307d6a381e7b6f0e272e550d925d41e3c736c4":["1d44b4a9eb67e68d542dc1ee2674e96f05b56eb0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["ad4957cde742defe6db19689abdc267c5d948066"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"61c45e99cf6676da48f19d7511c73712ad39402b":["344b0840364d990b29b97467bfcc766ff8325d11","e9017cf144952056066919f1ebc7897ff9bd71b1"],"5d48804b73be4dcb41299caa3ce29ad58f4be07f":["1d44b4a9eb67e68d542dc1ee2674e96f05b56eb0"],"344b0840364d990b29b97467bfcc766ff8325d11":["ad4957cde742defe6db19689abdc267c5d948066","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"1d44b4a9eb67e68d542dc1ee2674e96f05b56eb0":["7d307d6a381e7b6f0e272e550d925d41e3c736c4"],"ad4957cde742defe6db19689abdc267c5d948066":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["5d48804b73be4dcb41299caa3ce29ad58f4be07f","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"78277631929de308318c889be36ed69ce7a85048":["61c45e99cf6676da48f19d7511c73712ad39402b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"7d307d6a381e7b6f0e272e550d925d41e3c736c4":["78277631929de308318c889be36ed69ce7a85048"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5455c7b3fed6c1671990a44c19071cb0488c2c25","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}