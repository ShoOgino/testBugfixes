{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#shouldExpandNodeWithDirectAddressing(Builder[T],Builder.UnCompiledNode[T],int,int,int).mjava","commits":[{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#shouldExpandNodeWithDirectAddressing(Builder[T],Builder.UnCompiledNode[T],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns whether the given node should be expanded with direct addressing instead of binary search.\n   * <p>\n   * Prefer direct addressing for performance if it does not oversize binary search byte size too much,\n   * so that the arcs can be directly addressed by label.\n   *\n   * @see Builder#getDirectAddressingMaxOversizingFactor()\n   */\n  private boolean shouldExpandNodeWithDirectAddressing(Builder<T> builder, Builder.UnCompiledNode<T> nodeIn,\n                                                       int numBytesPerArc, int maxBytesPerArcWithoutLabel, int labelRange) {\n    // Anticipate precisely the size of the encodings.\n    int sizeForBinarySearch = numBytesPerArc * nodeIn.numArcs;\n    int sizeForDirectAddressing = getNumPresenceBytes(labelRange) + builder.numLabelBytesPerArc[0]\n        + maxBytesPerArcWithoutLabel * nodeIn.numArcs;\n\n    // Determine the allowed oversize compared to binary search.\n    // This is defined by a parameter of FST Builder (default 1: no oversize).\n    int allowedOversize = (int) (sizeForBinarySearch * builder.getDirectAddressingMaxOversizingFactor());\n    int expansionCost = sizeForDirectAddressing - allowedOversize;\n\n    // Select direct addressing if either:\n    // - Direct addressing size is smaller than binary search.\n    //   In this case, increment the credit by the reduced size (to use it later).\n    // - Direct addressing size is larger than binary search, but the positive credit allows the oversizing.\n    //   In this case, decrement the credit by the oversize.\n    // In addition, do not try to oversize to a clearly too large node size\n    // (this is the DIRECT_ADDRESSING_MAX_OVERSIZE_WITH_CREDIT_FACTOR parameter).\n    if (expansionCost <= 0 || (builder.directAddressingExpansionCredit >= expansionCost\n        && sizeForDirectAddressing <= allowedOversize * DIRECT_ADDRESSING_MAX_OVERSIZE_WITH_CREDIT_FACTOR)) {\n      builder.directAddressingExpansionCredit -= expansionCost;\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#shouldExpandNodeWithDirectAddressing(FSTCompiler[T],FSTCompiler.UnCompiledNode[T],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#shouldExpandNodeWithDirectAddressing(Builder[T],Builder.UnCompiledNode[T],int,int,int).mjava","sourceNew":"  /**\n   * Returns whether the given node should be expanded with direct addressing instead of binary search.\n   * <p>\n   * Prefer direct addressing for performance if it does not oversize binary search byte size too much,\n   * so that the arcs can be directly addressed by label.\n   *\n   * @see FSTCompiler#getDirectAddressingMaxOversizingFactor()\n   */\n  private boolean shouldExpandNodeWithDirectAddressing(FSTCompiler<T> fstCompiler, FSTCompiler.UnCompiledNode<T> nodeIn,\n                                                       int numBytesPerArc, int maxBytesPerArcWithoutLabel, int labelRange) {\n    // Anticipate precisely the size of the encodings.\n    int sizeForBinarySearch = numBytesPerArc * nodeIn.numArcs;\n    int sizeForDirectAddressing = getNumPresenceBytes(labelRange) + fstCompiler.numLabelBytesPerArc[0]\n        + maxBytesPerArcWithoutLabel * nodeIn.numArcs;\n\n    // Determine the allowed oversize compared to binary search.\n    // This is defined by a parameter of FST Builder (default 1: no oversize).\n    int allowedOversize = (int) (sizeForBinarySearch * fstCompiler.getDirectAddressingMaxOversizingFactor());\n    int expansionCost = sizeForDirectAddressing - allowedOversize;\n\n    // Select direct addressing if either:\n    // - Direct addressing size is smaller than binary search.\n    //   In this case, increment the credit by the reduced size (to use it later).\n    // - Direct addressing size is larger than binary search, but the positive credit allows the oversizing.\n    //   In this case, decrement the credit by the oversize.\n    // In addition, do not try to oversize to a clearly too large node size\n    // (this is the DIRECT_ADDRESSING_MAX_OVERSIZE_WITH_CREDIT_FACTOR parameter).\n    if (expansionCost <= 0 || (fstCompiler.directAddressingExpansionCredit >= expansionCost\n        && sizeForDirectAddressing <= allowedOversize * DIRECT_ADDRESSING_MAX_OVERSIZE_WITH_CREDIT_FACTOR)) {\n      fstCompiler.directAddressingExpansionCredit -= expansionCost;\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns whether the given node should be expanded with direct addressing instead of binary search.\n   * <p>\n   * Prefer direct addressing for performance if it does not oversize binary search byte size too much,\n   * so that the arcs can be directly addressed by label.\n   *\n   * @see Builder#getDirectAddressingMaxOversizingFactor()\n   */\n  private boolean shouldExpandNodeWithDirectAddressing(Builder<T> builder, Builder.UnCompiledNode<T> nodeIn,\n                                                       int numBytesPerArc, int maxBytesPerArcWithoutLabel, int labelRange) {\n    // Anticipate precisely the size of the encodings.\n    int sizeForBinarySearch = numBytesPerArc * nodeIn.numArcs;\n    int sizeForDirectAddressing = getNumPresenceBytes(labelRange) + builder.numLabelBytesPerArc[0]\n        + maxBytesPerArcWithoutLabel * nodeIn.numArcs;\n\n    // Determine the allowed oversize compared to binary search.\n    // This is defined by a parameter of FST Builder (default 1: no oversize).\n    int allowedOversize = (int) (sizeForBinarySearch * builder.getDirectAddressingMaxOversizingFactor());\n    int expansionCost = sizeForDirectAddressing - allowedOversize;\n\n    // Select direct addressing if either:\n    // - Direct addressing size is smaller than binary search.\n    //   In this case, increment the credit by the reduced size (to use it later).\n    // - Direct addressing size is larger than binary search, but the positive credit allows the oversizing.\n    //   In this case, decrement the credit by the oversize.\n    // In addition, do not try to oversize to a clearly too large node size\n    // (this is the DIRECT_ADDRESSING_MAX_OVERSIZE_WITH_CREDIT_FACTOR parameter).\n    if (expansionCost <= 0 || (builder.directAddressingExpansionCredit >= expansionCost\n        && sizeForDirectAddressing <= allowedOversize * DIRECT_ADDRESSING_MAX_OVERSIZE_WITH_CREDIT_FACTOR)) {\n      builder.directAddressingExpansionCredit -= expansionCost;\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#shouldExpandNodeWithDirectAddressing(FSTCompiler[T],FSTCompiler.UnCompiledNode[T],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#shouldExpandNodeWithDirectAddressing(Builder[T],Builder.UnCompiledNode[T],int,int,int).mjava","sourceNew":"  /**\n   * Returns whether the given node should be expanded with direct addressing instead of binary search.\n   * <p>\n   * Prefer direct addressing for performance if it does not oversize binary search byte size too much,\n   * so that the arcs can be directly addressed by label.\n   *\n   * @see FSTCompiler#getDirectAddressingMaxOversizingFactor()\n   */\n  private boolean shouldExpandNodeWithDirectAddressing(FSTCompiler<T> fstCompiler, FSTCompiler.UnCompiledNode<T> nodeIn,\n                                                       int numBytesPerArc, int maxBytesPerArcWithoutLabel, int labelRange) {\n    // Anticipate precisely the size of the encodings.\n    int sizeForBinarySearch = numBytesPerArc * nodeIn.numArcs;\n    int sizeForDirectAddressing = getNumPresenceBytes(labelRange) + fstCompiler.numLabelBytesPerArc[0]\n        + maxBytesPerArcWithoutLabel * nodeIn.numArcs;\n\n    // Determine the allowed oversize compared to binary search.\n    // This is defined by a parameter of FST Builder (default 1: no oversize).\n    int allowedOversize = (int) (sizeForBinarySearch * fstCompiler.getDirectAddressingMaxOversizingFactor());\n    int expansionCost = sizeForDirectAddressing - allowedOversize;\n\n    // Select direct addressing if either:\n    // - Direct addressing size is smaller than binary search.\n    //   In this case, increment the credit by the reduced size (to use it later).\n    // - Direct addressing size is larger than binary search, but the positive credit allows the oversizing.\n    //   In this case, decrement the credit by the oversize.\n    // In addition, do not try to oversize to a clearly too large node size\n    // (this is the DIRECT_ADDRESSING_MAX_OVERSIZE_WITH_CREDIT_FACTOR parameter).\n    if (expansionCost <= 0 || (fstCompiler.directAddressingExpansionCredit >= expansionCost\n        && sizeForDirectAddressing <= allowedOversize * DIRECT_ADDRESSING_MAX_OVERSIZE_WITH_CREDIT_FACTOR)) {\n      fstCompiler.directAddressingExpansionCredit -= expansionCost;\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns whether the given node should be expanded with direct addressing instead of binary search.\n   * <p>\n   * Prefer direct addressing for performance if it does not oversize binary search byte size too much,\n   * so that the arcs can be directly addressed by label.\n   *\n   * @see Builder#getDirectAddressingMaxOversizingFactor()\n   */\n  private boolean shouldExpandNodeWithDirectAddressing(Builder<T> builder, Builder.UnCompiledNode<T> nodeIn,\n                                                       int numBytesPerArc, int maxBytesPerArcWithoutLabel, int labelRange) {\n    // Anticipate precisely the size of the encodings.\n    int sizeForBinarySearch = numBytesPerArc * nodeIn.numArcs;\n    int sizeForDirectAddressing = getNumPresenceBytes(labelRange) + builder.numLabelBytesPerArc[0]\n        + maxBytesPerArcWithoutLabel * nodeIn.numArcs;\n\n    // Determine the allowed oversize compared to binary search.\n    // This is defined by a parameter of FST Builder (default 1: no oversize).\n    int allowedOversize = (int) (sizeForBinarySearch * builder.getDirectAddressingMaxOversizingFactor());\n    int expansionCost = sizeForDirectAddressing - allowedOversize;\n\n    // Select direct addressing if either:\n    // - Direct addressing size is smaller than binary search.\n    //   In this case, increment the credit by the reduced size (to use it later).\n    // - Direct addressing size is larger than binary search, but the positive credit allows the oversizing.\n    //   In this case, decrement the credit by the oversize.\n    // In addition, do not try to oversize to a clearly too large node size\n    // (this is the DIRECT_ADDRESSING_MAX_OVERSIZE_WITH_CREDIT_FACTOR parameter).\n    if (expansionCost <= 0 || (builder.directAddressingExpansionCredit >= expansionCost\n        && sizeForDirectAddressing <= allowedOversize * DIRECT_ADDRESSING_MAX_OVERSIZE_WITH_CREDIT_FACTOR)) {\n      builder.directAddressingExpansionCredit -= expansionCost;\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["71d31a7d5773508492505519bb5230b87c8937ad","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["71d31a7d5773508492505519bb5230b87c8937ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71d31a7d5773508492505519bb5230b87c8937ad"],"71d31a7d5773508492505519bb5230b87c8937ad":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}