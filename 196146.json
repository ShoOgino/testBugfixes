{"path":"lucene/backwards/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#quickSort(DocFieldProcessorPerField[],int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#quickSort(DocFieldProcessorPerField[],int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#quickSort(DocFieldProcessorPerField[],int,int).mjava","sourceNew":"  void quickSort(DocFieldProcessorPerField[] array, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (array[lo].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n        final DocFieldProcessorPerField tmp = array[lo];\n        array[lo] = array[hi];\n        array[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[lo];\n      array[lo] = array[mid];\n      array[mid] = tmp;\n    }\n\n    if (array[mid].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[mid];\n      array[mid] = array[hi];\n      array[hi] = tmp;\n\n      if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n        DocFieldProcessorPerField tmp2 = array[lo];\n        array[lo] = array[mid];\n        array[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    DocFieldProcessorPerField partition = array[mid];\n\n    for (; ;) {\n      while (array[right].fieldInfo.name.compareTo(partition.fieldInfo.name) > 0)\n        --right;\n\n      while (left < right && array[left].fieldInfo.name.compareTo(partition.fieldInfo.name) <= 0)\n        ++left;\n\n      if (left < right) {\n        DocFieldProcessorPerField tmp = array[left];\n        array[left] = array[right];\n        array[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(array, lo, left);\n    quickSort(array, left + 1, hi);\n  }\n\n","sourceOld":"  void quickSort(DocFieldProcessorPerField[] array, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (array[lo].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n        final DocFieldProcessorPerField tmp = array[lo];\n        array[lo] = array[hi];\n        array[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[lo];\n      array[lo] = array[mid];\n      array[mid] = tmp;\n    }\n\n    if (array[mid].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[mid];\n      array[mid] = array[hi];\n      array[hi] = tmp;\n\n      if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n        DocFieldProcessorPerField tmp2 = array[lo];\n        array[lo] = array[mid];\n        array[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    DocFieldProcessorPerField partition = array[mid];\n\n    for (; ;) {\n      while (array[right].fieldInfo.name.compareTo(partition.fieldInfo.name) > 0)\n        --right;\n\n      while (left < right && array[left].fieldInfo.name.compareTo(partition.fieldInfo.name) <= 0)\n        ++left;\n\n      if (left < right) {\n        DocFieldProcessorPerField tmp = array[left];\n        array[left] = array[right];\n        array[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(array, lo, left);\n    quickSort(array, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#quickSort(DocFieldProcessorPerField[],int,int).mjava","sourceNew":null,"sourceOld":"  void quickSort(DocFieldProcessorPerField[] array, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (array[lo].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n        final DocFieldProcessorPerField tmp = array[lo];\n        array[lo] = array[hi];\n        array[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[lo];\n      array[lo] = array[mid];\n      array[mid] = tmp;\n    }\n\n    if (array[mid].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[mid];\n      array[mid] = array[hi];\n      array[hi] = tmp;\n\n      if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n        DocFieldProcessorPerField tmp2 = array[lo];\n        array[lo] = array[mid];\n        array[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    DocFieldProcessorPerField partition = array[mid];\n\n    for (; ;) {\n      while (array[right].fieldInfo.name.compareTo(partition.fieldInfo.name) > 0)\n        --right;\n\n      while (left < right && array[left].fieldInfo.name.compareTo(partition.fieldInfo.name) <= 0)\n        ++left;\n\n      if (left < right) {\n        DocFieldProcessorPerField tmp = array[left];\n        array[left] = array[right];\n        array[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(array, lo, left);\n    quickSort(array, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}