{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.out.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((CommonsHttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.out.println(\"shard:\" + slice.getKey());\n            System.out.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE)) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.out.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.out.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.out.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((CommonsHttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.out.println(\"shard:\" + slice.getKey());\n            System.out.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE)) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.out.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.out.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.out.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((CommonsHttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.out.println(\"shard:\" + slice.getKey());\n            System.out.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE)) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.out.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.out.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94f787671ca16d65e86976f99bd603595f757a91","date":1330045652,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((CommonsHttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE)) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.out.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((CommonsHttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.out.println(\"shard:\" + slice.getKey());\n            System.out.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE)) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.out.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.out.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((CommonsHttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE)) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.out.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((CommonsHttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.out.println(\"shard:\" + slice.getKey());\n            System.out.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE)) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.out.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.out.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE)) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((CommonsHttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE)) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ef6348b84bf0f8a649826b69a70ac815ff560e2","date":1343106054,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE) && zkStateReader.getCloudState().liveNodesContain(clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE)) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217c5e3cedf564c6d370670858e1b1edab16fcac","date":1343114420,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE) && zkStateReader.getCloudState().liveNodesContain(clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","date":1343203827,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE)) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE)) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = clientToInfo.get(new CloudSolrServerClient(client))\n          .get(ZkStateReader.STATE_PROP);\n      if (currentState != null && currentState.equals(ZkStateReader.ACTIVE)) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":null,"sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    CloudState cloudState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      cloudState = zk.getCloudState();\n      slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","94f787671ca16d65e86976f99bd603595f757a91"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["94f787671ca16d65e86976f99bd603595f757a91"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","217c5e3cedf564c6d370670858e1b1edab16fcac"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"6ef6348b84bf0f8a649826b69a70ac815ff560e2":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["217c5e3cedf564c6d370670858e1b1edab16fcac"],"94f787671ca16d65e86976f99bd603595f757a91":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"aba371508186796cc6151d8223a5b4e16d02e26e":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","217c5e3cedf564c6d370670858e1b1edab16fcac"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["6ef6348b84bf0f8a649826b69a70ac815ff560e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","217c5e3cedf564c6d370670858e1b1edab16fcac"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","6ef6348b84bf0f8a649826b69a70ac815ff560e2","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"6ef6348b84bf0f8a649826b69a70ac815ff560e2":["217c5e3cedf564c6d370670858e1b1edab16fcac"],"94f787671ca16d65e86976f99bd603595f757a91":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","3f767f8c99eaedb984df754fe61f21c5de260f94","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","94f787671ca16d65e86976f99bd603595f757a91","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}