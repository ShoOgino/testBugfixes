{"path":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMaxMergesAndThreads(int,int).mjava","commits":[{"id":"be3b141eed4372b3eb04def61ab79f86f572f481","date":1372468407,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMaxMergesAndThreads(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the maximum number of merge threads and simultaneous merges allowed.\n   * \n   * @param maxMergeCount the max # simultaneous merges that are allowed.\n   *       If a merge is necessary yet we already have this many\n   *       threads running, the incoming thread (that is calling\n   *       add/updateDocument) will block until a merge thread\n   *       has completed.  Note that we will only run the\n   *       smallest <code>maxThreadCount</code> merges at a time.\n   * @param maxThreadCount the max # simultaneous merge threads that should\n   *       be running at once.  This must be &lt;= <code>maxMergeCount</code>\n   */\n  public void setMaxMergesAndThreads(int maxMergeCount, int maxThreadCount) {\n    if (maxThreadCount < 1) {\n      throw new IllegalArgumentException(\"maxThreadCount should be at least 1\");\n    }\n    if (maxMergeCount < 1) {\n      throw new IllegalArgumentException(\"maxMergeCount should be at least 1\");\n    }\n    if (maxThreadCount > maxMergeCount) {\n      throw new IllegalArgumentException(\"maxThreadCount should be <= maxMergeCount (= \" + maxMergeCount + \")\");\n    }\n    this.maxThreadCount = maxThreadCount;\n    this.maxMergeCount = maxMergeCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMaxMergesAndThreads(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the maximum number of merge threads and simultaneous merges allowed.\n   * \n   * @param maxMergeCount the max # simultaneous merges that are allowed.\n   *       If a merge is necessary yet we already have this many\n   *       threads running, the incoming thread (that is calling\n   *       add/updateDocument) will block until a merge thread\n   *       has completed.  Note that we will only run the\n   *       smallest <code>maxThreadCount</code> merges at a time.\n   * @param maxThreadCount the max # simultaneous merge threads that should\n   *       be running at once.  This must be &lt;= <code>maxMergeCount</code>\n   */\n  public void setMaxMergesAndThreads(int maxMergeCount, int maxThreadCount) {\n    if (maxThreadCount < 1) {\n      throw new IllegalArgumentException(\"maxThreadCount should be at least 1\");\n    }\n    if (maxMergeCount < 1) {\n      throw new IllegalArgumentException(\"maxMergeCount should be at least 1\");\n    }\n    if (maxThreadCount > maxMergeCount) {\n      throw new IllegalArgumentException(\"maxThreadCount should be <= maxMergeCount (= \" + maxMergeCount + \")\");\n    }\n    this.maxThreadCount = maxThreadCount;\n    this.maxMergeCount = maxMergeCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1db7bd2068060be0b68fcca95c8270c7cb60f6c","date":1419003415,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMaxMergesAndThreads(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMaxMergesAndThreads(int,int).mjava","sourceNew":"  /**\n   * Expert: directly set the maximum number of merge threads and\n   * simultaneous merges allowed.\n   * \n   * @param maxMergeCount the max # simultaneous merges that are allowed.\n   *       If a merge is necessary yet we already have this many\n   *       threads running, the incoming thread (that is calling\n   *       add/updateDocument) will block until a merge thread\n   *       has completed.  Note that we will only run the\n   *       smallest <code>maxThreadCount</code> merges at a time.\n   * @param maxThreadCount the max # simultaneous merge threads that should\n   *       be running at once.  This must be &lt;= <code>maxMergeCount</code>\n   */\n  public synchronized void setMaxMergesAndThreads(int maxMergeCount, int maxThreadCount) {\n    if (maxMergeCount == AUTO_DETECT_MERGES_AND_THREADS && maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      // OK\n      this.maxMergeCount = AUTO_DETECT_MERGES_AND_THREADS;\n      this.maxThreadCount = AUTO_DETECT_MERGES_AND_THREADS;\n    } else if (maxMergeCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      throw new IllegalArgumentException(\"both maxMergeCount and maxThreadCount must be AUTO_DETECT_MERGES_AND_THREADS\");\n    } else if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      throw new IllegalArgumentException(\"both maxMergeCount and maxThreadCount must be AUTO_DETECT_MERGES_AND_THREADS\");\n    } else {\n      if (maxThreadCount < 1) {\n        throw new IllegalArgumentException(\"maxThreadCount should be at least 1\");\n      }\n      if (maxMergeCount < 1) {\n        throw new IllegalArgumentException(\"maxMergeCount should be at least 1\");\n      }\n      if (maxThreadCount > maxMergeCount) {\n        throw new IllegalArgumentException(\"maxThreadCount should be <= maxMergeCount (= \" + maxMergeCount + \")\");\n      }\n      this.maxThreadCount = maxThreadCount;\n      this.maxMergeCount = maxMergeCount;\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the maximum number of merge threads and simultaneous merges allowed.\n   * \n   * @param maxMergeCount the max # simultaneous merges that are allowed.\n   *       If a merge is necessary yet we already have this many\n   *       threads running, the incoming thread (that is calling\n   *       add/updateDocument) will block until a merge thread\n   *       has completed.  Note that we will only run the\n   *       smallest <code>maxThreadCount</code> merges at a time.\n   * @param maxThreadCount the max # simultaneous merge threads that should\n   *       be running at once.  This must be &lt;= <code>maxMergeCount</code>\n   */\n  public void setMaxMergesAndThreads(int maxMergeCount, int maxThreadCount) {\n    if (maxThreadCount < 1) {\n      throw new IllegalArgumentException(\"maxThreadCount should be at least 1\");\n    }\n    if (maxMergeCount < 1) {\n      throw new IllegalArgumentException(\"maxMergeCount should be at least 1\");\n    }\n    if (maxThreadCount > maxMergeCount) {\n      throw new IllegalArgumentException(\"maxThreadCount should be <= maxMergeCount (= \" + maxMergeCount + \")\");\n    }\n    this.maxThreadCount = maxThreadCount;\n    this.maxMergeCount = maxMergeCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","be3b141eed4372b3eb04def61ab79f86f572f481"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["be3b141eed4372b3eb04def61ab79f86f572f481"],"be3b141eed4372b3eb04def61ab79f86f572f481":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","be3b141eed4372b3eb04def61ab79f86f572f481"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be3b141eed4372b3eb04def61ab79f86f572f481":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}