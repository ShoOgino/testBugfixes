{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#testReplicaCount(Row,AtomicReference[TestStatus],int).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#testReplicaCount(Row,AtomicReference[TestStatus],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Clause#testReplicaCount(Row,AtomicReference[TestStatus],int).mjava","sourceNew":"  private void testReplicaCount(Row row, AtomicReference<TestStatus> result, int count) {\n    if(\"node\".equals(tag.name)) if(!tag.isPass(row.node)) return;\n    boolean checkCount = replica.op.match(replica.val, 0) != PASS || count > 0;\n    if (replica.op == WILDCARD && count > 0 && !tag.isPass(row)) {\n      result.set(FAIL);\n    } else if (checkCount && !replica.isPass(count)) {\n      if (tag.op != WILDCARD && tag.isPass(row)) {\n        result.set(FAIL);\n      } else {\n        result.set(FAIL);\n      }\n    }\n  }\n\n","sourceOld":"  private void testReplicaCount(Row row, AtomicReference<TestStatus> result, int count) {\n    if(\"node\".equals(tag.name)) if(!tag.isPass(row.node)) return;\n    boolean checkCount = replica.op.match(replica.val, 0) != PASS || count > 0;\n    if (replica.op == WILDCARD && count > 0 && !tag.isPass(row)) {\n      result.set(FAIL);\n    } else if (checkCount && !replica.isPass(count)) {\n      if (tag.op != WILDCARD && tag.isPass(row)) {\n        result.set(FAIL);\n      } else {\n        result.set(FAIL);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#testReplicaCount(Row,AtomicReference[TestStatus],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#testReplicaCount(Row,AtomicReference[TestStatus],int).mjava","sourceNew":"  private void testReplicaCount(Row row, AtomicReference<TestStatus> result, int count) {\n    if(\"node\".equals(tag.name)) if(!tag.isPass(row.node)) return;\n    boolean checkCount = replica.op.match(replica.val, 0) != PASS || count > 0;\n    if (replica.op == WILDCARD && count > 0 && !tag.isPass(row)) {//nodeRole:'!overseer', strict:false\n      result.set(FAIL);\n    } else if (checkCount && !replica.isPass(count)) {\n      if (tag.op != WILDCARD && tag.isPass(row)) {\n        result.set(FAIL);\n      } else {\n        result.set(FAIL);\n      }\n    }\n  }\n\n","sourceOld":"  private void testReplicaCount(Row row, AtomicReference<TestStatus> result, int count) {\n    if(\"node\".equals(tag.name)) if(!tag.isPass(row.node)) return;\n    boolean checkCount = replica.op.match(replica.val, 0) != PASS || count > 0;\n    if (replica.op == WILDCARD && count > 0 && !tag.isPass(row)) {\n      result.set(FAIL);\n    } else if (checkCount && !replica.isPass(count)) {\n      if (tag.op != WILDCARD && tag.isPass(row)) {\n        result.set(FAIL);\n      } else {\n        result.set(FAIL);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8439b737e0aa59b02fd1f14b436d75050e70076f","date":1493715391,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#testReplicaCount(Row,AtomicReference[TestStatus],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#testReplicaCount(Row,AtomicReference[TestStatus],int).mjava","sourceNew":"  private void testReplicaCount(Row row, AtomicReference<TestStatus> result, int count) {\n    if (\"node\".equals(tag.name)) if (!tag.isPass(row.node)) return;\n    boolean checkCount = replica.op.match(replica.val, 0) != PASS || count > 0;\n    if (replica.op == WILDCARD && count > 0 && !tag.isPass(row)) {//nodeRole:'!overseer', strict:false\n      result.set(FAIL);\n    } else if (checkCount && !replica.isPass(count)) {\n      if (tag.op != WILDCARD && tag.isPass(row)) {\n        result.set(FAIL);\n      } else {\n        result.set(FAIL);\n      }\n    }\n  }\n\n","sourceOld":"  private void testReplicaCount(Row row, AtomicReference<TestStatus> result, int count) {\n    if(\"node\".equals(tag.name)) if(!tag.isPass(row.node)) return;\n    boolean checkCount = replica.op.match(replica.val, 0) != PASS || count > 0;\n    if (replica.op == WILDCARD && count > 0 && !tag.isPass(row)) {//nodeRole:'!overseer', strict:false\n      result.set(FAIL);\n    } else if (checkCount && !replica.isPass(count)) {\n      if (tag.op != WILDCARD && tag.isPass(row)) {\n        result.set(FAIL);\n      } else {\n        result.set(FAIL);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fca549db64ee4c87a83a94e7c224506fa20d396","date":1495433449,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#testReplicaCount(Row,AtomicReference[TestStatus],int).mjava","sourceNew":null,"sourceOld":"  private void testReplicaCount(Row row, AtomicReference<TestStatus> result, int count) {\n    if (\"node\".equals(tag.name)) if (!tag.isPass(row.node)) return;\n    boolean checkCount = replica.op.match(replica.val, 0) != PASS || count > 0;\n    if (replica.op == WILDCARD && count > 0 && !tag.isPass(row)) {//nodeRole:'!overseer', strict:false\n      result.set(FAIL);\n    } else if (checkCount && !replica.isPass(count)) {\n      if (tag.op != WILDCARD && tag.isPass(row)) {\n        result.set(FAIL);\n      } else {\n        result.set(FAIL);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8439b737e0aa59b02fd1f14b436d75050e70076f":["86fff6c123a5a1d38adb665dd045347219798da9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1fca549db64ee4c87a83a94e7c224506fa20d396":["8439b737e0aa59b02fd1f14b436d75050e70076f"],"86fff6c123a5a1d38adb665dd045347219798da9":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8439b737e0aa59b02fd1f14b436d75050e70076f":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1fca549db64ee4c87a83a94e7c224506fa20d396":[],"86fff6c123a5a1d38adb665dd045347219798da9":["8439b737e0aa59b02fd1f14b436d75050e70076f"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["86fff6c123a5a1d38adb665dd045347219798da9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1fca549db64ee4c87a83a94e7c224506fa20d396","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}