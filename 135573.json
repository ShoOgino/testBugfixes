{"path":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#advance(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n\n    // first term\n    int doc = chunkStates[0].posEnum.advance(target);\n    if (doc == DocsEnum.NO_MORE_DOCS) {\n      docID = DocsEnum.NO_MORE_DOCS;\n      return doc;\n    }\n\n    while(true) {\n      \n      // not-first terms\n      int i = 1;\n      while(i < chunkStates.length) {\n        int doc2 = chunkStates[i].posEnum.docID();\n        if (doc2 < doc) {\n          doc2 = chunkStates[i].posEnum.advance(doc);\n        }\n        if (doc2 > doc) {\n          break;\n        }\n        i++;\n      }\n\n      if (i == chunkStates.length) {\n        // this doc has all the terms -- now test whether\n        // phrase occurs\n        docID = doc;\n        freq = phraseFreq();\n        if (freq != 0) {\n          return docID;\n        }\n      }\n\n      doc = chunkStates[0].posEnum.nextDoc();\n      if (doc == DocsEnum.NO_MORE_DOCS) {\n        docID = doc;\n        return doc;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n\n    // first term\n    int doc = chunkStates[0].posEnum.advance(target);\n    if (doc == DocsEnum.NO_MORE_DOCS) {\n      docID = DocsEnum.NO_MORE_DOCS;\n      return doc;\n    }\n\n    while(true) {\n      \n      // not-first terms\n      int i = 1;\n      while(i < chunkStates.length) {\n        int doc2 = chunkStates[i].posEnum.docID();\n        if (doc2 < doc) {\n          doc2 = chunkStates[i].posEnum.advance(doc);\n        }\n        if (doc2 > doc) {\n          break;\n        }\n        i++;\n      }\n\n      if (i == chunkStates.length) {\n        // this doc has all the terms -- now test whether\n        // phrase occurs\n        docID = doc;\n        freq = phraseFreq();\n        if (freq != 0) {\n          return docID;\n        }\n      }\n\n      doc = chunkStates[0].posEnum.nextDoc();\n      if (doc == DocsEnum.NO_MORE_DOCS) {\n        docID = doc;\n        return doc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n\n    // first term\n    int doc = chunkStates[0].posEnum.advance(target);\n    if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n      docID = DocIdSetIterator.NO_MORE_DOCS;\n      return doc;\n    }\n\n    while(true) {\n      \n      // not-first terms\n      int i = 1;\n      while(i < chunkStates.length) {\n        int doc2 = chunkStates[i].posEnum.docID();\n        if (doc2 < doc) {\n          doc2 = chunkStates[i].posEnum.advance(doc);\n        }\n        if (doc2 > doc) {\n          break;\n        }\n        i++;\n      }\n\n      if (i == chunkStates.length) {\n        // this doc has all the terms -- now test whether\n        // phrase occurs\n        docID = doc;\n        freq = phraseFreq();\n        if (freq != 0) {\n          return docID;\n        }\n      }\n\n      doc = chunkStates[0].posEnum.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        docID = doc;\n        return doc;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n\n    // first term\n    int doc = chunkStates[0].posEnum.advance(target);\n    if (doc == DocsEnum.NO_MORE_DOCS) {\n      docID = DocsEnum.NO_MORE_DOCS;\n      return doc;\n    }\n\n    while(true) {\n      \n      // not-first terms\n      int i = 1;\n      while(i < chunkStates.length) {\n        int doc2 = chunkStates[i].posEnum.docID();\n        if (doc2 < doc) {\n          doc2 = chunkStates[i].posEnum.advance(doc);\n        }\n        if (doc2 > doc) {\n          break;\n        }\n        i++;\n      }\n\n      if (i == chunkStates.length) {\n        // this doc has all the terms -- now test whether\n        // phrase occurs\n        docID = doc;\n        freq = phraseFreq();\n        if (freq != 0) {\n          return docID;\n        }\n      }\n\n      doc = chunkStates[0].posEnum.nextDoc();\n      if (doc == DocsEnum.NO_MORE_DOCS) {\n        docID = doc;\n        return doc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n\n    // first term\n    int doc = chunkStates[0].posEnum.advance(target);\n    if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n      docID = DocIdSetIterator.NO_MORE_DOCS;\n      return doc;\n    }\n\n    while(true) {\n      \n      // not-first terms\n      int i = 1;\n      while(i < chunkStates.length) {\n        int doc2 = chunkStates[i].posEnum.docID();\n        if (doc2 < doc) {\n          doc2 = chunkStates[i].posEnum.advance(doc);\n        }\n        if (doc2 > doc) {\n          break;\n        }\n        i++;\n      }\n\n      if (i == chunkStates.length) {\n        // this doc has all the terms -- now test whether\n        // phrase occurs\n        docID = doc;\n        freq = phraseFreq();\n        if (freq != 0) {\n          return docID;\n        }\n      }\n\n      doc = chunkStates[0].posEnum.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        docID = doc;\n        return doc;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n\n    // first term\n    int doc = chunkStates[0].posEnum.advance(target);\n    if (doc == DocsEnum.NO_MORE_DOCS) {\n      docID = DocsEnum.NO_MORE_DOCS;\n      return doc;\n    }\n\n    while(true) {\n      \n      // not-first terms\n      int i = 1;\n      while(i < chunkStates.length) {\n        int doc2 = chunkStates[i].posEnum.docID();\n        if (doc2 < doc) {\n          doc2 = chunkStates[i].posEnum.advance(doc);\n        }\n        if (doc2 > doc) {\n          break;\n        }\n        i++;\n      }\n\n      if (i == chunkStates.length) {\n        // this doc has all the terms -- now test whether\n        // phrase occurs\n        docID = doc;\n        freq = phraseFreq();\n        if (freq != 0) {\n          return docID;\n        }\n      }\n\n      doc = chunkStates[0].posEnum.nextDoc();\n      if (doc == DocsEnum.NO_MORE_DOCS) {\n        docID = doc;\n        return doc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d4e5ccb1c589a2962235f13b65cc725050818d9","date":1404995758,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    return docID = doNext(lead.advance(target));\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n\n    // first term\n    int doc = chunkStates[0].posEnum.advance(target);\n    if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n      docID = DocIdSetIterator.NO_MORE_DOCS;\n      return doc;\n    }\n\n    while(true) {\n      \n      // not-first terms\n      int i = 1;\n      while(i < chunkStates.length) {\n        int doc2 = chunkStates[i].posEnum.docID();\n        if (doc2 < doc) {\n          doc2 = chunkStates[i].posEnum.advance(doc);\n        }\n        if (doc2 > doc) {\n          break;\n        }\n        i++;\n      }\n\n      if (i == chunkStates.length) {\n        // this doc has all the terms -- now test whether\n        // phrase occurs\n        docID = doc;\n        freq = phraseFreq();\n        if (freq != 0) {\n          return docID;\n        }\n      }\n\n      doc = chunkStates[0].posEnum.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        docID = doc;\n        return doc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    return doNext(conjunction.advance(target));\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    return docID = doNext(lead.advance(target));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#advance(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    return doNext(conjunction.advance(target));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d4e5ccb1c589a2962235f13b65cc725050818d9":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["3d4e5ccb1c589a2962235f13b65cc725050818d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"3d4e5ccb1c589a2962235f13b65cc725050818d9":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3d4e5ccb1c589a2962235f13b65cc725050818d9","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}