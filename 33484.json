{"path":"solr/core/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","commits":[{"id":"c4a408f0a2714ee03537e8ea104efce9f5782db2","date":1328101304,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    Mode mode = args.get(MODE) != null ? Mode.valueOf(args.get(MODE).toUpperCase(Locale.ENGLISH)) : Mode.NORMAL;\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        this.segmenter = new Segmenter(new UserDictionary(reader), mode);\n      } else {\n        this.segmenter = new Segmenter(mode);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    Mode mode = args.get(MODE) != null ? Mode.valueOf(args.get(MODE).toUpperCase(Locale.ENGLISH)) : Mode.NORMAL;\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        this.segmenter = new Segmenter(new UserDictionary(reader), mode);\n      } else {\n        this.segmenter = new Segmenter(mode);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dec88baade6dd7634684f48a462b3934ee3d73a6","date":1328445673,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    Mode mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        this.segmenter = new Segmenter(new UserDictionary(reader), mode);\n      } else {\n        this.segmenter = new Segmenter(mode);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    Mode mode = args.get(MODE) != null ? Mode.valueOf(args.get(MODE).toUpperCase(Locale.ENGLISH)) : Mode.NORMAL;\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        this.segmenter = new Segmenter(new UserDictionary(reader), mode);\n      } else {\n        this.segmenter = new Segmenter(mode);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b302f78108081466bd4718e8f2b4daf80585d0ee","date":1328826924,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        userDictionary = new UserDictionary(reader);\n      } else {\n        userDictionary = null;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    Mode mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        this.segmenter = new Segmenter(new UserDictionary(reader), mode);\n      } else {\n        this.segmenter = new Segmenter(mode);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":5,"author":"Christian Moen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/JapaneseTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        userDictionary = new UserDictionary(reader);\n      } else {\n        userDictionary = null;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    mode = getMode(args);\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        userDictionary = new UserDictionary(reader);\n      } else {\n        userDictionary = null;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dec88baade6dd7634684f48a462b3934ee3d73a6":["c4a408f0a2714ee03537e8ea104efce9f5782db2"],"c4a408f0a2714ee03537e8ea104efce9f5782db2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["b302f78108081466bd4718e8f2b4daf80585d0ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"b302f78108081466bd4718e8f2b4daf80585d0ee":["dec88baade6dd7634684f48a462b3934ee3d73a6"]},"commit2Childs":{"dec88baade6dd7634684f48a462b3934ee3d73a6":["b302f78108081466bd4718e8f2b4daf80585d0ee"],"c4a408f0a2714ee03537e8ea104efce9f5782db2":["dec88baade6dd7634684f48a462b3934ee3d73a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4a408f0a2714ee03537e8ea104efce9f5782db2"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b302f78108081466bd4718e8f2b4daf80585d0ee":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}