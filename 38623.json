{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd65164c607d597fe7bb977735aa1ddfff22ed36","date":1377140532,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n\n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n\n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n\n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n\n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n\n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n\n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":null,"sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n\n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n\n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":null,"sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n\n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n\n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2f948dd442d23baa6cbb28daf77c8db78b351329","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["fd65164c607d597fe7bb977735aa1ddfff22ed36"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd65164c607d597fe7bb977735aa1ddfff22ed36":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["fd65164c607d597fe7bb977735aa1ddfff22ed36","2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fd65164c607d597fe7bb977735aa1ddfff22ed36":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["5eb2511ababf862ea11e10761c70ee560cd84510","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}