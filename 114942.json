{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#next().mjava","commits":[{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        //System.out.println(\"BTR.next() seekPending=\" + seekPending + \" pendingSeekCount=\" + state.termBlockOrd);\n\n        // If seek was previously called and the term was cached,\n        // usually caller is just going to pull a D/&PEnum or get\n        // docFreq, etc.  But, if they then call next(),\n        // this method catches up all internal state so next()\n        // works properly:\n        if (seekPending) {\n          assert !indexIsCurrent;\n          in.seek(state.blockFilePointer);\n          final int pendingSeekCount = state.termBlockOrd;\n          boolean result = nextBlock();\n\n          final long savOrd = state.ord;\n\n          // Block must exist since seek(TermState) was called w/ a\n          // TermState previously returned by this enum when positioned\n          // on a real term:\n          assert result;\n\n          while(state.termBlockOrd < pendingSeekCount) {\n            BytesRef nextResult = _next();\n            assert nextResult != null;\n          }\n          seekPending = false;\n          state.ord = savOrd;\n        }\n        return _next();\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":null,"sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        //System.out.println(\"BTR.next() seekPending=\" + seekPending + \" pendingSeekCount=\" + state.termBlockOrd);\n\n        // If seek was previously called and the term was cached,\n        // usually caller is just going to pull a D/&PEnum or get\n        // docFreq, etc.  But, if they then call next(),\n        // this method catches up all internal state so next()\n        // works properly:\n        if (seekPending) {\n          assert !indexIsCurrent;\n          in.seek(state.blockFilePointer);\n          final int pendingSeekCount = state.termBlockOrd;\n          boolean result = nextBlock();\n\n          final long savOrd = state.ord;\n\n          // Block must exist since seek(TermState) was called w/ a\n          // TermState previously returned by this enum when positioned\n          // on a real term:\n          assert result;\n\n          while(state.termBlockOrd < pendingSeekCount) {\n            BytesRef nextResult = _next();\n            assert nextResult != null;\n          }\n          seekPending = false;\n          state.ord = savOrd;\n        }\n        return _next();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}