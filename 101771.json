{"path":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMultipleFields().mjava","commits":[{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMultipleFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleFields() throws IOException {\n    Query q = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"id\", \"1\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\")), BooleanClause.Occur.MUST)\n        .build();\n    Weight w = searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE, 1);\n\n    LeafReaderContext ctx = searcher.leafContexts.get(ReaderUtil.subIndex(1, searcher.leafContexts));\n    Matches m = w.matches(ctx, 1 - ctx.docBase);\n    assertNotNull(m);\n    checkFieldMatches(m.getMatches(\"id\"), new int[]{ -1, 0, 0, -1, -1 });\n    checkFieldMatches(m.getMatches(FIELD_WITH_OFFSETS), new int[]{ -1, 1, 1, 3, 5, 3, 3, 9, 11 });\n    assertNull(m.getMatches(\"bogus\"));\n\n    Set<String> fields = new HashSet<>();\n    for (String field : m) {\n      fields.add(field);\n    }\n    assertEquals(2, fields.size());\n    assertTrue(fields.contains(FIELD_WITH_OFFSETS));\n    assertTrue(fields.contains(\"id\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMultipleFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleFields() throws IOException {\n    Query q = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"id\", \"1\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\")), BooleanClause.Occur.MUST)\n        .build();\n    Weight w = searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE, 1);\n\n    LeafReaderContext ctx = searcher.leafContexts.get(ReaderUtil.subIndex(1, searcher.leafContexts));\n    Matches m = w.matches(ctx, 1 - ctx.docBase);\n    assertNotNull(m);\n    checkFieldMatches(m.getMatches(\"id\"), new int[]{ -1, 0, 0, -1, -1 });\n    checkFieldMatches(m.getMatches(FIELD_WITH_OFFSETS), new int[]{ -1, 1, 1, 3, 5, 3, 3, 9, 11 });\n    assertNull(m.getMatches(\"bogus\"));\n\n    Set<String> fields = new HashSet<>();\n    for (String field : m) {\n      fields.add(field);\n    }\n    assertEquals(2, fields.size());\n    assertTrue(fields.contains(FIELD_WITH_OFFSETS));\n    assertTrue(fields.contains(\"id\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69d70ba91a4999a5387559a9ad50e3cfe9cfd970","date":1565173681,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMultipleFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMultipleFields().mjava","sourceNew":"  public void testMultipleFields() throws IOException {\n    Query q = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"id\", \"1\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\")), BooleanClause.Occur.MUST)\n        .build();\n    Weight w = searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE, 1);\n\n    LeafReaderContext ctx = searcher.leafContexts.get(ReaderUtil.subIndex(1, searcher.leafContexts));\n    Matches m = w.matches(ctx, 1 - ctx.docBase);\n    assertNotNull(m);\n    checkFieldMatches(m.getMatches(\"id\"), new int[]{ -1, 0, 0, -1, -1 });\n    checkFieldMatches(m.getMatches(FIELD_WITH_OFFSETS), new int[]{ -1, 1, 1, 3, 5, 3, 3, 9, 11 });\n    assertNull(m.getMatches(\"bogus\"));\n\n    Set<String> fields = new HashSet<>();\n    for (String field : m) {\n      fields.add(field);\n    }\n    assertEquals(2, fields.size());\n    assertTrue(fields.contains(FIELD_WITH_OFFSETS));\n    assertTrue(fields.contains(\"id\"));\n\n    assertEquals(2, AssertingMatches.unWrap(m).getSubMatches().size());\n  }\n\n","sourceOld":"  public void testMultipleFields() throws IOException {\n    Query q = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"id\", \"1\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\")), BooleanClause.Occur.MUST)\n        .build();\n    Weight w = searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE, 1);\n\n    LeafReaderContext ctx = searcher.leafContexts.get(ReaderUtil.subIndex(1, searcher.leafContexts));\n    Matches m = w.matches(ctx, 1 - ctx.docBase);\n    assertNotNull(m);\n    checkFieldMatches(m.getMatches(\"id\"), new int[]{ -1, 0, 0, -1, -1 });\n    checkFieldMatches(m.getMatches(FIELD_WITH_OFFSETS), new int[]{ -1, 1, 1, 3, 5, 3, 3, 9, 11 });\n    assertNull(m.getMatches(\"bogus\"));\n\n    Set<String> fields = new HashSet<>();\n    for (String field : m) {\n      fields.add(field);\n    }\n    assertEquals(2, fields.size());\n    assertTrue(fields.contains(FIELD_WITH_OFFSETS));\n    assertTrue(fields.contains(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69d70ba91a4999a5387559a9ad50e3cfe9cfd970":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69d70ba91a4999a5387559a9ad50e3cfe9cfd970"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"69d70ba91a4999a5387559a9ad50e3cfe9cfd970":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["69d70ba91a4999a5387559a9ad50e3cfe9cfd970"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}