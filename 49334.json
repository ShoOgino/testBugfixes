{"path":"lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElementAdapter#findConflictsBeneathNode(IvyNodeElement).mjava","commits":[{"id":"b3e4bd3aed493904d0bbb6c6e0394f619e175087","date":1401446035,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElementAdapter#findConflictsBeneathNode(IvyNodeElement).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Derives configuration conflicts that exist between node and all of its descendant dependencies.\n   */\n  private static void findConflictsBeneathNode(IvyNodeElement node) {\n    // Derive conflicts\n    Map<ModuleId,Collection<IvyNodeElement>> moduleRevisionMap = new HashMap<>();\n    IvyNodeElement[] deepDependencies = node.getDeepDependencies();\n    for (int i = 0; i < deepDependencies.length; i++) {\n      if (deepDependencies[i].isEvicted())\n        continue;\n\n      ModuleId moduleId = deepDependencies[i].getModuleRevisionId().getModuleId();\n      if (moduleRevisionMap.containsKey(moduleId)) {\n        Collection<IvyNodeElement> conflicts = moduleRevisionMap.get(moduleId);\n        conflicts.add(deepDependencies[i]);\n        for (Iterator iter = conflicts.iterator(); iter.hasNext();) {\n          IvyNodeElement conflict = (IvyNodeElement) iter.next();\n          conflict.setConflicts(conflicts);\n        }\n      } else {\n        List<IvyNodeElement> immutableMatchingSet = Arrays.asList(deepDependencies[i]);\n        moduleRevisionMap.put(moduleId, new HashSet<>(immutableMatchingSet));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec1a71fbd0f533ceb6c940816637d33e90394dc1","date":1439660103,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElementAdapter#findConflictsBeneathNode(IvyNodeElement).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElementAdapter#findConflictsBeneathNode(IvyNodeElement).mjava","sourceNew":"  /**\n   * Derives configuration conflicts that exist between node and all of its descendant dependencies.\n   */\n  private static void findConflictsBeneathNode(IvyNodeElement node) {\n    // Derive conflicts\n    Map<ModuleId,Collection<IvyNodeElement>> moduleRevisionMap = new HashMap<>();\n    IvyNodeElement[] deepDependencies = node.getDeepDependencies();\n    for (int i = 0; i < deepDependencies.length; i++) {\n      if (deepDependencies[i].isEvicted())\n        continue;\n\n      ModuleId moduleId = deepDependencies[i].getModuleRevisionId().getModuleId();\n      if (moduleRevisionMap.containsKey(moduleId)) {\n        Collection<IvyNodeElement> conflicts = moduleRevisionMap.get(moduleId);\n        conflicts.add(deepDependencies[i]);\n        for (Iterator<IvyNodeElement> iter = conflicts.iterator(); iter.hasNext();) {\n          IvyNodeElement conflict = iter.next();\n          conflict.setConflicts(conflicts);\n        }\n      } else {\n        List<IvyNodeElement> immutableMatchingSet = Arrays.asList(deepDependencies[i]);\n        moduleRevisionMap.put(moduleId, new HashSet<>(immutableMatchingSet));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Derives configuration conflicts that exist between node and all of its descendant dependencies.\n   */\n  private static void findConflictsBeneathNode(IvyNodeElement node) {\n    // Derive conflicts\n    Map<ModuleId,Collection<IvyNodeElement>> moduleRevisionMap = new HashMap<>();\n    IvyNodeElement[] deepDependencies = node.getDeepDependencies();\n    for (int i = 0; i < deepDependencies.length; i++) {\n      if (deepDependencies[i].isEvicted())\n        continue;\n\n      ModuleId moduleId = deepDependencies[i].getModuleRevisionId().getModuleId();\n      if (moduleRevisionMap.containsKey(moduleId)) {\n        Collection<IvyNodeElement> conflicts = moduleRevisionMap.get(moduleId);\n        conflicts.add(deepDependencies[i]);\n        for (Iterator iter = conflicts.iterator(); iter.hasNext();) {\n          IvyNodeElement conflict = (IvyNodeElement) iter.next();\n          conflict.setConflicts(conflicts);\n        }\n      } else {\n        List<IvyNodeElement> immutableMatchingSet = Arrays.asList(deepDependencies[i]);\n        moduleRevisionMap.put(moduleId, new HashSet<>(immutableMatchingSet));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fa75aa4c057ce99897cc92f867734664926152c","date":1598037592,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElementAdapter#findConflictsBeneathNode(IvyNodeElement).mjava","sourceNew":null,"sourceOld":"  /**\n   * Derives configuration conflicts that exist between node and all of its descendant dependencies.\n   */\n  private static void findConflictsBeneathNode(IvyNodeElement node) {\n    // Derive conflicts\n    Map<ModuleId,Collection<IvyNodeElement>> moduleRevisionMap = new HashMap<>();\n    IvyNodeElement[] deepDependencies = node.getDeepDependencies();\n    for (int i = 0; i < deepDependencies.length; i++) {\n      if (deepDependencies[i].isEvicted())\n        continue;\n\n      ModuleId moduleId = deepDependencies[i].getModuleRevisionId().getModuleId();\n      if (moduleRevisionMap.containsKey(moduleId)) {\n        Collection<IvyNodeElement> conflicts = moduleRevisionMap.get(moduleId);\n        conflicts.add(deepDependencies[i]);\n        for (Iterator<IvyNodeElement> iter = conflicts.iterator(); iter.hasNext();) {\n          IvyNodeElement conflict = iter.next();\n          conflict.setConflicts(conflicts);\n        }\n      } else {\n        List<IvyNodeElement> immutableMatchingSet = Arrays.asList(deepDependencies[i]);\n        moduleRevisionMap.put(moduleId, new HashSet<>(immutableMatchingSet));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bb030802697db4b7a61bfa93c54ba39679032b6","date":1598043478,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElementAdapter#findConflictsBeneathNode(IvyNodeElement).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Derives configuration conflicts that exist between node and all of its descendant dependencies.\n   */\n  private static void findConflictsBeneathNode(IvyNodeElement node) {\n    // Derive conflicts\n    Map<ModuleId,Collection<IvyNodeElement>> moduleRevisionMap = new HashMap<>();\n    IvyNodeElement[] deepDependencies = node.getDeepDependencies();\n    for (int i = 0; i < deepDependencies.length; i++) {\n      if (deepDependencies[i].isEvicted())\n        continue;\n\n      ModuleId moduleId = deepDependencies[i].getModuleRevisionId().getModuleId();\n      if (moduleRevisionMap.containsKey(moduleId)) {\n        Collection<IvyNodeElement> conflicts = moduleRevisionMap.get(moduleId);\n        conflicts.add(deepDependencies[i]);\n        for (Iterator<IvyNodeElement> iter = conflicts.iterator(); iter.hasNext();) {\n          IvyNodeElement conflict = iter.next();\n          conflict.setConflicts(conflicts);\n        }\n      } else {\n        List<IvyNodeElement> immutableMatchingSet = Arrays.asList(deepDependencies[i]);\n        moduleRevisionMap.put(moduleId, new HashSet<>(immutableMatchingSet));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64cc3a6df6159ad66d60c3ce53ecfbaf044dea90","date":1598621476,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElementAdapter#findConflictsBeneathNode(IvyNodeElement).mjava","sourceNew":null,"sourceOld":"  /**\n   * Derives configuration conflicts that exist between node and all of its descendant dependencies.\n   */\n  private static void findConflictsBeneathNode(IvyNodeElement node) {\n    // Derive conflicts\n    Map<ModuleId,Collection<IvyNodeElement>> moduleRevisionMap = new HashMap<>();\n    IvyNodeElement[] deepDependencies = node.getDeepDependencies();\n    for (int i = 0; i < deepDependencies.length; i++) {\n      if (deepDependencies[i].isEvicted())\n        continue;\n\n      ModuleId moduleId = deepDependencies[i].getModuleRevisionId().getModuleId();\n      if (moduleRevisionMap.containsKey(moduleId)) {\n        Collection<IvyNodeElement> conflicts = moduleRevisionMap.get(moduleId);\n        conflicts.add(deepDependencies[i]);\n        for (Iterator<IvyNodeElement> iter = conflicts.iterator(); iter.hasNext();) {\n          IvyNodeElement conflict = iter.next();\n          conflict.setConflicts(conflicts);\n        }\n      } else {\n        List<IvyNodeElement> immutableMatchingSet = Arrays.asList(deepDependencies[i]);\n        moduleRevisionMap.put(moduleId, new HashSet<>(immutableMatchingSet));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bb030802697db4b7a61bfa93c54ba39679032b6":["1fa75aa4c057ce99897cc92f867734664926152c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1fa75aa4c057ce99897cc92f867734664926152c":["ec1a71fbd0f533ceb6c940816637d33e90394dc1"],"ec1a71fbd0f533ceb6c940816637d33e90394dc1":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"64cc3a6df6159ad66d60c3ce53ecfbaf044dea90":["7bb030802697db4b7a61bfa93c54ba39679032b6"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64cc3a6df6159ad66d60c3ce53ecfbaf044dea90"]},"commit2Childs":{"7bb030802697db4b7a61bfa93c54ba39679032b6":["64cc3a6df6159ad66d60c3ce53ecfbaf044dea90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"1fa75aa4c057ce99897cc92f867734664926152c":["7bb030802697db4b7a61bfa93c54ba39679032b6"],"ec1a71fbd0f533ceb6c940816637d33e90394dc1":["1fa75aa4c057ce99897cc92f867734664926152c"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["ec1a71fbd0f533ceb6c940816637d33e90394dc1"],"64cc3a6df6159ad66d60c3ce53ecfbaf044dea90":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}