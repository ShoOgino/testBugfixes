{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","commits":[{"id":"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","date":1308411958,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"/dev/null","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits skipDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.skipDocs = skipDocs;\n      docID = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"/dev/null","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits skipDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.skipDocs = skipDocs;\n      docID = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","sourceOld":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits skipDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.skipDocs = skipDocs;\n      docID = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","sourceOld":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits skipDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.skipDocs = skipDocs;\n      docID = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","sourceOld":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits skipDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.skipDocs = skipDocs;\n      docID = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","sourceOld":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["7b91922b55d15444d554721b352861d028eb8278","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}