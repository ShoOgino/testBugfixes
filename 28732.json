{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.MV#collect(int).mjava","commits":[{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > groupFieldTermsIndex.docID()) {\n        groupFieldTermsIndex.advance(doc);\n      }\n\n      int groupOrd;\n      if (doc == groupFieldTermsIndex.docID()) {\n        groupOrd = groupFieldTermsIndex.ordValue();\n      } else {\n        groupOrd = -1;\n      }\n      \n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (doc > facetFieldDocTermOrds.docID()) {\n        facetFieldDocTermOrds.advance(doc);\n      }\n      boolean empty = true;\n      if (doc == facetFieldDocTermOrds.docID()) {\n        long ord;\n        while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          process(groupOrd, (int) ord);\n          empty = false;\n        }\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > groupFieldTermsIndex.docID()) {\n        groupFieldTermsIndex.advance(doc);\n      }\n\n      int groupOrd;\n      if (doc == groupFieldTermsIndex.docID()) {\n        groupOrd = groupFieldTermsIndex.ordValue();\n      } else {\n        groupOrd = -1;\n      }\n      \n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (doc > facetFieldDocTermOrds.docID()) {\n        facetFieldDocTermOrds.advance(doc);\n      }\n      boolean empty = true;\n      if (doc == facetFieldDocTermOrds.docID()) {\n        long ord;\n        while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          process(groupOrd, (int) ord);\n          empty = false;\n        }\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > groupFieldTermsIndex.docID()) {\n        groupFieldTermsIndex.advance(doc);\n      }\n\n      int groupOrd;\n      if (doc == groupFieldTermsIndex.docID()) {\n        groupOrd = groupFieldTermsIndex.ordValue();\n      } else {\n        groupOrd = -1;\n      }\n      \n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (doc > facetFieldDocTermOrds.docID()) {\n        facetFieldDocTermOrds.advance(doc);\n      }\n      boolean empty = true;\n      if (doc == facetFieldDocTermOrds.docID()) {\n        long ord;\n        while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          process(groupOrd, (int) ord);\n          empty = false;\n        }\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > groupFieldTermsIndex.docID()) {\n        groupFieldTermsIndex.advance(doc);\n      }\n\n      int groupOrd;\n      if (doc == groupFieldTermsIndex.docID()) {\n        groupOrd = groupFieldTermsIndex.ordValue();\n      } else {\n        groupOrd = -1;\n      }\n      \n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (doc > facetFieldDocTermOrds.docID()) {\n        facetFieldDocTermOrds.advance(doc);\n      }\n      boolean empty = true;\n      if (doc == facetFieldDocTermOrds.docID()) {\n        long ord;\n        while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          process(groupOrd, (int) ord);\n          empty = false;\n        }\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7ae958a739da1866696f442384393ba2f13e33e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}