{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_get(FST[T],IntsRef).mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#get(IntsRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public T get(IntsRef input) throws IOException {\n    assert inputType == INPUT_TYPE.BYTE4;\n\n    if (input.length == 0) {\n      return getEmptyOutput();\n    }\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = new FST.Arc<T>();\n    int node = getStartNode();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (!hasArcs(node)) {\n        // hit end of FST before input end\n        return null;\n      }\n\n      if (findArc(node, input.ints[input.offset + i], arc) != null) {\n        node = arc.target;\n        if (arc.output != NO_OUTPUT) {\n          output = outputs.add(output, arc.output);\n        }\n      } else {\n        return null;\n      }\n    }\n\n    if (!arc.isFinal()) {\n      // hit input's end before end node\n      return null;\n    }\n\n    if (arc.nextFinalOutput != NO_OUTPUT) {\n      output = outputs.add(output, arc.nextFinalOutput);\n    }\n\n    return output;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_get(FST[T],IntsRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_get(FST[T],IntsRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Util#[T]_get(FST[T],IntsRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted. FST must be\n   *  INPUT_TYPE.BYTE4. */\n  public static<T> T get(FST<T> fst, IntsRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE4;\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.ints[input.offset + i], arc, arc) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        output = fst.outputs.add(output, arc.output);\n      }\n    }\n\n    if (fst.findTargetArc(FST.END_LABEL, arc, arc) == null) {\n      return null;\n    } else if (arc.output != NO_OUTPUT) {\n      return fst.outputs.add(output, arc.output);\n    } else {\n      return output;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["56da903869515527852ee21ea7ef7bfe414cd40d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["56da903869515527852ee21ea7ef7bfe414cd40d","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["70ad682703b8585f5d0a637efec044d57ec05efb","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}