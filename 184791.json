{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/FacetRequestTest#testHashAndEquals().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/FacetRequestTest#testHashAndEquals().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/params/FacetRequestTest#testHashAndEquals().mjava","sourceNew":"  @Test\n  public void testHashAndEquals() {\n    CountFacetRequest fr1 = new CountFacetRequest(new CategoryPath(\"a\"), 8);\n    CountFacetRequest fr2 = new CountFacetRequest(new CategoryPath(\"a\"), 8);\n    assertEquals(\"hashCode() should agree on both objects\", fr1.hashCode(), fr2.hashCode());\n    assertTrue(\"equals() should return true\", fr1.equals(fr2));\n    fr1.setDepth(10);\n    assertFalse(\"equals() should return false as fr1.depth != fr2.depth\", fr1.equals(fr2));\n  }\n\n","sourceOld":"  @Test\n  public void testHashAndEquals() {\n    CountFacetRequest fr1 = new CountFacetRequest(new CategoryPath(\"a\"), 8);\n    CountFacetRequest fr2 = new CountFacetRequest(new CategoryPath(\"a\"), 8);\n    assertEquals(\"hashCode() should agree on both objects\", fr1.hashCode(), fr2.hashCode());\n    assertTrue(\"equals() should return true\", fr1.equals(fr2));\n    fr1.setDepth(10);\n    assertFalse(\"equals() should return false as fr1.depth != fr2.depth\", fr1.equals(fr2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/FacetRequestTest#testHashAndEquals().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/FacetRequestTest#testHashAndEquals().mjava","sourceNew":"  @Test\n  public void testHashAndEquals() {\n    CountFacetRequest fr1 = new CountFacetRequest(new FacetLabel(\"a\"), 8);\n    CountFacetRequest fr2 = new CountFacetRequest(new FacetLabel(\"a\"), 8);\n    assertEquals(\"hashCode() should agree on both objects\", fr1.hashCode(), fr2.hashCode());\n    assertTrue(\"equals() should return true\", fr1.equals(fr2));\n    fr1.setDepth(10);\n    assertFalse(\"equals() should return false as fr1.depth != fr2.depth\", fr1.equals(fr2));\n  }\n\n","sourceOld":"  @Test\n  public void testHashAndEquals() {\n    CountFacetRequest fr1 = new CountFacetRequest(new CategoryPath(\"a\"), 8);\n    CountFacetRequest fr2 = new CountFacetRequest(new CategoryPath(\"a\"), 8);\n    assertEquals(\"hashCode() should agree on both objects\", fr1.hashCode(), fr2.hashCode());\n    assertTrue(\"equals() should return true\", fr1.equals(fr2));\n    fr1.setDepth(10);\n    assertFalse(\"equals() should return false as fr1.depth != fr2.depth\", fr1.equals(fr2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/FacetRequestTest#testHashAndEquals().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testHashAndEquals() {\n    CountFacetRequest fr1 = new CountFacetRequest(new FacetLabel(\"a\"), 8);\n    CountFacetRequest fr2 = new CountFacetRequest(new FacetLabel(\"a\"), 8);\n    assertEquals(\"hashCode() should agree on both objects\", fr1.hashCode(), fr2.hashCode());\n    assertTrue(\"equals() should return true\", fr1.equals(fr2));\n    fr1.setDepth(10);\n    assertFalse(\"equals() should return false as fr1.depth != fr2.depth\", fr1.equals(fr2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/FacetRequestTest#testHashAndEquals().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testHashAndEquals() {\n    CountFacetRequest fr1 = new CountFacetRequest(new CategoryPath(\"a\"), 8);\n    CountFacetRequest fr2 = new CountFacetRequest(new CategoryPath(\"a\"), 8);\n    assertEquals(\"hashCode() should agree on both objects\", fr1.hashCode(), fr2.hashCode());\n    assertTrue(\"equals() should return true\", fr1.equals(fr2));\n    fr1.setDepth(10);\n    assertFalse(\"equals() should return false as fr1.depth != fr2.depth\", fr1.equals(fr2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}