{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#testEquals().mjava","commits":[{"id":"1b94ee88533be95160c1e115704acb00317ae796","date":1362127395,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() throws Exception {\n    RegexpQuery a1 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery a2 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery b = new RegexpQuery(new Term(fieldName, \"[bB]\"), RegExp.NONE);\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    \n    a1.setRewriteMethod(new FieldCacheRewriteMethod());\n    a2.setRewriteMethod(new FieldCacheRewriteMethod());\n    b.setRewriteMethod(new FieldCacheRewriteMethod());\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    QueryUtils.check(a1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    RegexpQuery a1 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery a2 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery b = new RegexpQuery(new Term(fieldName, \"[bB]\"), RegExp.NONE);\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    \n    a1.setRewriteMethod(new DocValuesRewriteMethod());\n    a2.setRewriteMethod(new DocValuesRewriteMethod());\n    b.setRewriteMethod(new DocValuesRewriteMethod());\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    QueryUtils.check(a1);\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    RegexpQuery a1 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery a2 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery b = new RegexpQuery(new Term(fieldName, \"[bB]\"), RegExp.NONE);\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    \n    a1.setRewriteMethod(new FieldCacheRewriteMethod());\n    a2.setRewriteMethod(new FieldCacheRewriteMethod());\n    b.setRewriteMethod(new FieldCacheRewriteMethod());\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    QueryUtils.check(a1);\n  }\n\n","bugFix":["1b94ee88533be95160c1e115704acb00317ae796"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    RegexpQuery a1 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery a2 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery b = new RegexpQuery(new Term(fieldName, \"[bB]\"), RegExp.NONE);\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    \n    a1.setRewriteMethod(new DocValuesRewriteMethod());\n    a2.setRewriteMethod(new DocValuesRewriteMethod());\n    b.setRewriteMethod(new DocValuesRewriteMethod());\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    QueryUtils.check(a1);\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    RegexpQuery a1 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery a2 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery b = new RegexpQuery(new Term(fieldName, \"[bB]\"), RegExp.NONE);\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    \n    a1.setRewriteMethod(new FieldCacheRewriteMethod());\n    a2.setRewriteMethod(new FieldCacheRewriteMethod());\n    b.setRewriteMethod(new FieldCacheRewriteMethod());\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    QueryUtils.check(a1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    RegexpQuery a1 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery a2 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery b = new RegexpQuery(new Term(fieldName, \"[bB]\"), RegExp.NONE);\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    \n    a1.setRewriteMethod(new DocValuesRewriteMethod());\n    a2.setRewriteMethod(new DocValuesRewriteMethod());\n    b.setRewriteMethod(new DocValuesRewriteMethod());\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    QueryUtils.check(a1);\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    RegexpQuery a1 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery a2 = new RegexpQuery(new Term(fieldName, \"[aA]\"), RegExp.NONE);\n    RegexpQuery b = new RegexpQuery(new Term(fieldName, \"[bB]\"), RegExp.NONE);\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    \n    a1.setRewriteMethod(new FieldCacheRewriteMethod());\n    a2.setRewriteMethod(new FieldCacheRewriteMethod());\n    b.setRewriteMethod(new FieldCacheRewriteMethod());\n    assertEquals(a1, a2);\n    assertFalse(a1.equals(b));\n    QueryUtils.check(a1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9274621789ce990dbfef455dabdf026bb3184821":["1b94ee88533be95160c1e115704acb00317ae796"],"1b94ee88533be95160c1e115704acb00317ae796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["1b94ee88533be95160c1e115704acb00317ae796","9274621789ce990dbfef455dabdf026bb3184821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["1b94ee88533be95160c1e115704acb00317ae796","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"1b94ee88533be95160c1e115704acb00317ae796":["9274621789ce990dbfef455dabdf026bb3184821","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b94ee88533be95160c1e115704acb00317ae796"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}