{"path":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testReflection().mjava","commits":[{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testReflection().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * future proof TolerantUpdateProcessor against new default method impls being added to UpdateProcessor \n   * to ensure that every method involved in a processor chain life cycle is overridden with \n   * exception catching/tracking.\n   */\n  public void testReflection() {\n    for (Method method : TolerantUpdateProcessor.class.getMethods()) {\n      if (method.getDeclaringClass().equals(Object.class)) {\n        continue;\n      }\n      assertEquals(\"base class(es) has changed, TolerantUpdateProcessor needs updated to ensure it \" +\n                   \"overrides all solr update lifcycle methods with exception tracking: \" + method.toString(),\n                   TolerantUpdateProcessor.class, method.getDeclaringClass());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6","date":1487775028,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testReflection().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testReflection().mjava","sourceNew":"  /**\n   * future proof TolerantUpdateProcessor against new default method impls being added to UpdateProcessor \n   * to ensure that every method involved in a processor chain life cycle is overridden with \n   * exception catching/tracking.\n   */\n  public void testReflection() {\n    for (Method method : TolerantUpdateProcessor.class.getMethods()) {\n      if (method.getDeclaringClass().equals(Object.class) || method.getName().equals(\"close\")) {\n        continue;\n      }\n      assertEquals(\"base class(es) has changed, TolerantUpdateProcessor needs updated to ensure it \" +\n                   \"overrides all solr update lifcycle methods with exception tracking: \" + method.toString(),\n                   TolerantUpdateProcessor.class, method.getDeclaringClass());\n    }\n  }\n\n","sourceOld":"  /**\n   * future proof TolerantUpdateProcessor against new default method impls being added to UpdateProcessor \n   * to ensure that every method involved in a processor chain life cycle is overridden with \n   * exception catching/tracking.\n   */\n  public void testReflection() {\n    for (Method method : TolerantUpdateProcessor.class.getMethods()) {\n      if (method.getDeclaringClass().equals(Object.class)) {\n        continue;\n      }\n      assertEquals(\"base class(es) has changed, TolerantUpdateProcessor needs updated to ensure it \" +\n                   \"overrides all solr update lifcycle methods with exception tracking: \" + method.toString(),\n                   TolerantUpdateProcessor.class, method.getDeclaringClass());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6"],"2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}