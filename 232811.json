{"path":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","pathOld":"modules/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","sourceNew":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  public void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","sourceOld":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  public void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989634d06bbb0922e9fd38706f0a5497bd647402","date":1345164052,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","sourceNew":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","sourceOld":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  public void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","bugFix":["67748b41458c73d49a48168362cc7f4c960a2542"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","sourceNew":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","sourceOld":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  public void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","sourceNew":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","sourceOld":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  public void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","sourceNew":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = e.next();\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(e.next(), id_cmd);\n  }\n\n","sourceOld":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","sourceNew":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = e.next();\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(e.next(), id_cmd);\n  }\n\n","sourceOld":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","sourceNew":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = e.next();\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(e.next(), id_cmd);\n  }\n\n","sourceOld":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989634d06bbb0922e9fd38706f0a5497bd647402":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["989634d06bbb0922e9fd38706f0a5497bd647402"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["989634d06bbb0922e9fd38706f0a5497bd647402","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","989634d06bbb0922e9fd38706f0a5497bd647402"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["b89678825b68eccaf09e6ab71675fc0b0af1e099","989634d06bbb0922e9fd38706f0a5497bd647402"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["989634d06bbb0922e9fd38706f0a5497bd647402","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"989634d06bbb0922e9fd38706f0a5497bd647402":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["989634d06bbb0922e9fd38706f0a5497bd647402","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}