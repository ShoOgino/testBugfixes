{"path":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","sourceNew":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      assert bits <= FieldsWriter.FIELD_IS_COMPRESSED + FieldsWriter.FIELD_IS_TOKENIZED + FieldsWriter.FIELD_IS_BINARY;\n\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      assert (compressed ? (format < FieldsWriter.FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS) : true)\n        : \"compressed fields are only allowed in indexes of version <= 2.9\";\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      assert bits <= FieldsWriter.FIELD_IS_COMPRESSED + FieldsWriter.FIELD_IS_TOKENIZED + FieldsWriter.FIELD_IS_BINARY;\n\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      assert (compressed ? (format < FieldsWriter.FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS) : true)\n        : \"compressed fields are only allowed in indexes of version <= 2.9\";\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","sourceNew":null,"sourceOld":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      assert bits <= FieldsWriter.FIELD_IS_COMPRESSED + FieldsWriter.FIELD_IS_TOKENIZED + FieldsWriter.FIELD_IS_BINARY;\n\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      assert (compressed ? (format < FieldsWriter.FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS) : true)\n        : \"compressed fields are only allowed in indexes of version <= 2.9\";\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}