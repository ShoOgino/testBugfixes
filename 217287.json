{"path":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","commits":[{"id":"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","date":1295478199,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,Similarity,List[Scorer]).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(disableCoord ? 1.0f : ((BooleanWeight)weight).coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              Similarity similarity,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(disableCoord ? 1.0f : similarity.coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, disableCoord ? 1.0f : ((BooleanWeight)weight).coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(disableCoord ? 1.0f : ((BooleanWeight)weight).coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,Similarity,List[Scorer]).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, disableCoord ? 1.0f : ((BooleanWeight)weight).coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              Similarity similarity,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(disableCoord ? 1.0f : similarity.coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","pathOld":"/dev/null","sourceNew":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, disableCoord ? 1.0f : ((BooleanWeight)weight).coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, disableCoord ? 1.0f : ((BooleanWeight)weight).coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, disableCoord ? 1.0f : ((BooleanWeight)weight).coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5e679b9c5f68f1f331de920ae8366af75b44060"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5e679b9c5f68f1f331de920ae8366af75b44060":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}