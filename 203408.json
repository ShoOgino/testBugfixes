{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) throws IOException {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["70505a4870244b22d4d0f1a98951b08b197d5bb0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) throws IOException {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) throws IOException {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4404c73eb4b69219f283c2f08a34a08bfdb6327f","date":1327615748,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) throws IOException {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) throws IOException {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["70505a4870244b22d4d0f1a98951b08b197d5bb0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) throws IOException {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) throws IOException {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) throws IOException {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) throws IOException {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) throws IOException {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) throws IOException {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cad90908fe6b90a8b7310dc8c2dceac34341580c","date":1344538399,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ad158dd03dce94a7f19283d896946a0c8dbf8d","date":1347662441,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ed97e9132b34af23573a6b39c34ec0574e5c67e","date":1420913354,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70505a4870244b22d4d0f1a98951b08b197d5bb0","date":1424906348,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.error(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n        }\n        assert start==0;\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      // Parse tlog id from the filename\n      String filename = tlogFile.getName();\n      id = Long.parseLong(filename.substring(filename.indexOf('.') + 1, filename.indexOf('.') + 20));\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      // Parse tlog id from the filename\n      String filename = tlogFile.getName();\n      id = Long.parseLong(filename.substring(filename.lastIndexOf('.')+1));\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      // Parse tlog id from the filename\n      String filename = tlogFile.getName();\n      id = Long.parseLong(filename.substring(filename.indexOf('.') + 1, filename.indexOf('.') + 20));\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      // Parse tlog id from the filename\n      String filename = tlogFile.getName();\n      id = Long.parseLong(filename.substring(filename.lastIndexOf('.')+1));\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      // Parse tlog id from the filename\n      String filename = tlogFile.getName();\n      id = Long.parseLong(filename.substring(filename.indexOf('.') + 1, filename.indexOf('.') + 20));\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      // Parse tlog id from the filename\n      String filename = tlogFile.getName();\n      id = Long.parseLong(filename.substring(filename.lastIndexOf('.')+1));\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      // Parse tlog id from the filename\n      String filename = tlogFile.getName();\n      id = Long.parseLong(filename.substring(filename.indexOf('.') + 1, filename.indexOf('.') + 20));\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file= {}, exists={}, size={} openExisting={}\"\n            , tlogFile, tlogFile.exists(), tlogFile.length(), openExisting);\n      }\n\n      // Parse tlog id from the filename\n      String filename = tlogFile.getName();\n      id = Long.parseLong(filename.substring(filename.lastIndexOf('.')+1));\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"New transaction log already exists:{} size={}\", tlogFile, raf.length());\n          }\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file=\" + tlogFile + \", exists=\" + tlogFile.exists() + \", size=\" + tlogFile.length() + \", openExisting=\" + openExisting);\n      }\n\n      // Parse tlog id from the filename\n      String filename = tlogFile.getName();\n      id = Long.parseLong(filename.substring(filename.lastIndexOf('.')+1));\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:\" + tlogFile + \" size=\" + raf.length());\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file= {}, exists={}, size={} openExisting={}\"\n            , tlogFile, tlogFile.exists(), tlogFile.length(), openExisting);\n      }\n\n      // Parse tlog id from the filename\n      String filename = tlogFile.getName();\n      id = Long.parseLong(filename.substring(filename.lastIndexOf('.')+1));\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:{} size={}\", tlogFile, raf.length());\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file= {}, exists={}, size={} openExisting={}\"\n            , tlogFile, tlogFile.exists(), tlogFile.length(), openExisting);\n      }\n\n      // Parse tlog id from the filename\n      String filename = tlogFile.getName();\n      id = Long.parseLong(filename.substring(filename.lastIndexOf('.')+1));\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"New transaction log already exists:{} size={}\", tlogFile, raf.length());\n          }\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#TransactionLog(File,Collection[String],boolean).mjava","sourceNew":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file= {}, exists={}, size={} openExisting={}\"\n                , tlogFile, tlogFile.exists(), tlogFile.length(), openExisting);\n      }\n\n      // Parse tlog id from the filename\n      String filename = tlogFile.getName();\n      id = Long.parseLong(filename.substring(filename.lastIndexOf('.') + 1));\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:{} size={}\", tlogFile, raf.length());\n          return;\n        }\n\n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n\n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  TransactionLog(File tlogFile, Collection<String> globalStrings, boolean openExisting) {\n    boolean success = false;\n    try {\n      if (debug) {\n        log.debug(\"New TransactionLog file= {}, exists={}, size={} openExisting={}\"\n            , tlogFile, tlogFile.exists(), tlogFile.length(), openExisting);\n      }\n\n      // Parse tlog id from the filename\n      String filename = tlogFile.getName();\n      id = Long.parseLong(filename.substring(filename.lastIndexOf('.')+1));\n\n      this.tlogFile = tlogFile;\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      long start = raf.length();\n      channel = raf.getChannel();\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      // fos = FastOutputStream.wrap(os);\n\n      if (openExisting) {\n        if (start > 0) {\n          readHeader(null);\n          raf.seek(start);\n          assert channel.position() == start;\n          fos.setWritten(start);    // reflect that we aren't starting at the beginning\n          assert fos.size() == channel.size();\n        } else {\n          addGlobalStrings(globalStrings);\n        }\n      } else {\n        if (start > 0) {\n          log.warn(\"New transaction log already exists:{} size={}\", tlogFile, raf.length());\n          return;\n        }\n       \n        if (start > 0) {\n          raf.setLength(0);\n        }\n        addGlobalStrings(globalStrings);\n      }\n\n      success = true;\n      \n      assert ObjectReleaseTracker.track(this);\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      if (!success && raf != null) {\n        try {\n          raf.close();\n        } catch (Exception e) {\n          log.error(\"Error closing tlog file (after error opening)\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"740d649f013f07efbeb73ca854f106c60166e7c0":["1455c941cc4ce652efc776fc23471b0e499246f6"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["740d649f013f07efbeb73ca854f106c60166e7c0"],"4404c73eb4b69219f283c2f08a34a08bfdb6327f":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"7ed97e9132b34af23573a6b39c34ec0574e5c67e":["54ad158dd03dce94a7f19283d896946a0c8dbf8d"],"1455c941cc4ce652efc776fc23471b0e499246f6":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["70505a4870244b22d4d0f1a98951b08b197d5bb0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7ed97e9132b34af23573a6b39c34ec0574e5c67e","70505a4870244b22d4d0f1a98951b08b197d5bb0"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cad90908fe6b90a8b7310dc8c2dceac34341580c"],"cad90908fe6b90a8b7310dc8c2dceac34341580c":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"70505a4870244b22d4d0f1a98951b08b197d5bb0":["7ed97e9132b34af23573a6b39c34ec0574e5c67e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4404c73eb4b69219f283c2f08a34a08bfdb6327f","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["86290366cefc1b9d4eced13b430858c4a4c0421d","1455c941cc4ce652efc776fc23471b0e499246f6"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ad158dd03dce94a7f19283d896946a0c8dbf8d":["cad90908fe6b90a8b7310dc8c2dceac34341580c"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["575e66bd4b2349209027f6801184da7fc3cba13f"],"f592209545c71895260367152601e9200399776d":["86290366cefc1b9d4eced13b430858c4a4c0421d","1455c941cc4ce652efc776fc23471b0e499246f6"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","cad90908fe6b90a8b7310dc8c2dceac34341580c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"740d649f013f07efbeb73ca854f106c60166e7c0":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"4404c73eb4b69219f283c2f08a34a08bfdb6327f":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"575e66bd4b2349209027f6801184da7fc3cba13f":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"7ed97e9132b34af23573a6b39c34ec0574e5c67e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","70505a4870244b22d4d0f1a98951b08b197d5bb0"],"1455c941cc4ce652efc776fc23471b0e499246f6":["740d649f013f07efbeb73ca854f106c60166e7c0","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["1455c941cc4ce652efc776fc23471b0e499246f6","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"cad90908fe6b90a8b7310dc8c2dceac34341580c":["c7869f64c874ebf7f317d22c00baf2b6857797a6","54ad158dd03dce94a7f19283d896946a0c8dbf8d","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"70505a4870244b22d4d0f1a98951b08b197d5bb0":["86290366cefc1b9d4eced13b430858c4a4c0421d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4404c73eb4b69219f283c2f08a34a08bfdb6327f","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"54ad158dd03dce94a7f19283d896946a0c8dbf8d":["7ed97e9132b34af23573a6b39c34ec0574e5c67e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["cad90908fe6b90a8b7310dc8c2dceac34341580c","fe33227f6805edab2036cbb80645cc4e2d1fa424","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c7869f64c874ebf7f317d22c00baf2b6857797a6","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}