{"path":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUTransformFilterFactory#testDirection().mjava","commits":[{"id":"f06d2946e1cf81da42cf64135b5af1fdf4fdac30","date":1343107672,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUTransformFilterFactory#testDirection().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUTransformFilterFactory#testDirection().mjava","sourceNew":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","sourceOld":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUTransformFilterFactory#testDirection().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUTransformFilterFactory#testDirection().mjava","sourceNew":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","sourceOld":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUTransformFilterFactory#testDirection().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUTransformFilterFactory#testDirection().mjava","sourceNew":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","sourceOld":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUTransformFilterFactory#testDirection().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUTransformFilterFactory#testDirection().mjava","sourceNew":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","sourceOld":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUTransformFilterFactory#testForwardDirection().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUTransformFilterFactory#testDirection().mjava","sourceNew":"  /** test forward and reverse direction */\n  public void testForwardDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory(args);\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n  }\n\n","sourceOld":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUTransformFilterFactory#testReverseDirection().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUTransformFilterFactory#testDirection().mjava","sourceNew":"  public void testReverseDirection() throws Exception {\n    // backward (invokes Latin-Cyrillic)\n    Reader reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    args.put(\"direction\", \"reverse\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory(args);\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","sourceOld":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"f06d2946e1cf81da42cf64135b5af1fdf4fdac30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f06d2946e1cf81da42cf64135b5af1fdf4fdac30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","f06d2946e1cf81da42cf64135b5af1fdf4fdac30","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f06d2946e1cf81da42cf64135b5af1fdf4fdac30":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}