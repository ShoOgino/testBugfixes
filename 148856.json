{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(TemporalAccessor).mjava","commits":[{"id":"33835f41305f4d46c2a650da7c564ac99f485ab1","date":1492023606,"type":0,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(TemporalAccessor).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Evaluate the date based on the specified function\n   *\n   * @param date\n   * @return the evaluated value\n   */\n  private Number evaluate(TemporalAccessor date) throws IOException {\n    try {\n      switch (function) {\n        case year:\n          return date.get(ChronoField.YEAR);\n        case month:\n          return date.get(ChronoField.MONTH_OF_YEAR);\n        case day:\n          return date.get(ChronoField.DAY_OF_MONTH);\n        case dayofyear:\n          return date.get(ChronoField.DAY_OF_YEAR);\n        case hour:\n          return date.get(ChronoField.HOUR_OF_DAY);\n        case minute:\n          return date.get(ChronoField.MINUTE_OF_HOUR);\n        case second:\n          return date.get(ChronoField.SECOND_OF_MINUTE);\n        case dayofquarter:\n          return date.get(IsoFields.DAY_OF_QUARTER);\n        case quarter:\n          return date.get(IsoFields.QUARTER_OF_YEAR);\n        case week:\n          return date.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n        case epoch:\n          if (date instanceof LocalDateTime) {\n            return ((LocalDateTime)date).atZone(ZoneOffset.UTC).toInstant().toEpochMilli();\n          }\n      }\n    } catch (UnsupportedTemporalTypeException utte) {\n      throw new IOException(String.format(Locale.ROOT, \"It is not possible to call '%s' function on %s\", function, date.getClass().getName()));\n    }\n    throw new IOException(String.format(Locale.ROOT, \"Unsupported function '%s' called on %s\", function, date.toString()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"185f3c2b04d778454a3f7231f3b2deee75a8c37d","date":1492023606,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(TemporalAccessor).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(TemporalAccessor).mjava","sourceNew":"  /**\n   * Evaluate the date based on the specified function\n   *\n   * @param date\n   * @return the evaluated value\n   */\n  private Number evaluate(TemporalAccessor date) throws IOException {\n    try {\n      switch (function) {\n        case year:\n          return date.get(ChronoField.YEAR);\n        case month:\n          return date.get(ChronoField.MONTH_OF_YEAR);\n        case day:\n          return date.get(ChronoField.DAY_OF_MONTH);\n        case dayOfYear:\n          return date.get(ChronoField.DAY_OF_YEAR);\n        case hour:\n          return date.get(ChronoField.HOUR_OF_DAY);\n        case minute:\n          return date.get(ChronoField.MINUTE_OF_HOUR);\n        case second:\n          return date.get(ChronoField.SECOND_OF_MINUTE);\n        case dayOfQuarter:\n          return date.get(IsoFields.DAY_OF_QUARTER);\n        case quarter:\n          return date.get(IsoFields.QUARTER_OF_YEAR);\n        case week:\n          return date.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n        case epoch:\n          if (date instanceof LocalDateTime) {\n            return ((LocalDateTime)date).atZone(ZoneOffset.UTC).toInstant().toEpochMilli();\n          }\n      }\n    } catch (UnsupportedTemporalTypeException utte) {\n      throw new IOException(String.format(Locale.ROOT, \"It is not possible to call '%s' function on %s\", function, date.getClass().getName()));\n    }\n    throw new IOException(String.format(Locale.ROOT, \"Unsupported function '%s' called on %s\", function, date.toString()));\n  }\n\n","sourceOld":"  /**\n   * Evaluate the date based on the specified function\n   *\n   * @param date\n   * @return the evaluated value\n   */\n  private Number evaluate(TemporalAccessor date) throws IOException {\n    try {\n      switch (function) {\n        case year:\n          return date.get(ChronoField.YEAR);\n        case month:\n          return date.get(ChronoField.MONTH_OF_YEAR);\n        case day:\n          return date.get(ChronoField.DAY_OF_MONTH);\n        case dayofyear:\n          return date.get(ChronoField.DAY_OF_YEAR);\n        case hour:\n          return date.get(ChronoField.HOUR_OF_DAY);\n        case minute:\n          return date.get(ChronoField.MINUTE_OF_HOUR);\n        case second:\n          return date.get(ChronoField.SECOND_OF_MINUTE);\n        case dayofquarter:\n          return date.get(IsoFields.DAY_OF_QUARTER);\n        case quarter:\n          return date.get(IsoFields.QUARTER_OF_YEAR);\n        case week:\n          return date.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n        case epoch:\n          if (date instanceof LocalDateTime) {\n            return ((LocalDateTime)date).atZone(ZoneOffset.UTC).toInstant().toEpochMilli();\n          }\n      }\n    } catch (UnsupportedTemporalTypeException utte) {\n      throw new IOException(String.format(Locale.ROOT, \"It is not possible to call '%s' function on %s\", function, date.getClass().getName()));\n    }\n    throw new IOException(String.format(Locale.ROOT, \"Unsupported function '%s' called on %s\", function, date.toString()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26c62f13499437ce6143905f35f30ab19f3adf6","date":1492023891,"type":4,"author":"Gethin James","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(TemporalAccessor).mjava","sourceNew":null,"sourceOld":"  /**\n   * Evaluate the date based on the specified function\n   *\n   * @param date\n   * @return the evaluated value\n   */\n  private Number evaluate(TemporalAccessor date) throws IOException {\n    try {\n      switch (function) {\n        case year:\n          return date.get(ChronoField.YEAR);\n        case month:\n          return date.get(ChronoField.MONTH_OF_YEAR);\n        case day:\n          return date.get(ChronoField.DAY_OF_MONTH);\n        case dayOfYear:\n          return date.get(ChronoField.DAY_OF_YEAR);\n        case hour:\n          return date.get(ChronoField.HOUR_OF_DAY);\n        case minute:\n          return date.get(ChronoField.MINUTE_OF_HOUR);\n        case second:\n          return date.get(ChronoField.SECOND_OF_MINUTE);\n        case dayOfQuarter:\n          return date.get(IsoFields.DAY_OF_QUARTER);\n        case quarter:\n          return date.get(IsoFields.QUARTER_OF_YEAR);\n        case week:\n          return date.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n        case epoch:\n          if (date instanceof LocalDateTime) {\n            return ((LocalDateTime)date).atZone(ZoneOffset.UTC).toInstant().toEpochMilli();\n          }\n      }\n    } catch (UnsupportedTemporalTypeException utte) {\n      throw new IOException(String.format(Locale.ROOT, \"It is not possible to call '%s' function on %s\", function, date.getClass().getName()));\n    }\n    throw new IOException(String.format(Locale.ROOT, \"Unsupported function '%s' called on %s\", function, date.toString()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"185f3c2b04d778454a3f7231f3b2deee75a8c37d":["33835f41305f4d46c2a650da7c564ac99f485ab1"],"33835f41305f4d46c2a650da7c564ac99f485ab1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c26c62f13499437ce6143905f35f30ab19f3adf6":["185f3c2b04d778454a3f7231f3b2deee75a8c37d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26c62f13499437ce6143905f35f30ab19f3adf6"]},"commit2Childs":{"185f3c2b04d778454a3f7231f3b2deee75a8c37d":["c26c62f13499437ce6143905f35f30ab19f3adf6"],"33835f41305f4d46c2a650da7c564ac99f485ab1":["185f3c2b04d778454a3f7231f3b2deee75a8c37d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33835f41305f4d46c2a650da7c564ac99f485ab1"],"c26c62f13499437ce6143905f35f30ab19f3adf6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}