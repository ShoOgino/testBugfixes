{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","commits":[{"id":"232252bc7056b698c1e1c550f4b97a9a3c00e520","date":1372943634,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      final TempTermOutputs.TempMetaData meta = new TempTermOutputs.TempMetaData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      postingsWriter.finishTerm(meta.longs, metaWriter, stats);\n      /*\n      meta.bytes = new byte[(int)metaWriter.getFilePointer()];\n      metaWriter.writeTo(meta.bytes, 0);\n      metaWriter.reset();\n      */\n      int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      //System.out.println(\"add term:<\"+text.utf8ToString()+\", \"+meta+\">\");\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a509b6df968a74c38a0528f5bf6ea26f503b756","date":1373188457,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final TempTermOutputs.TempMetaData meta = new TempTermOutputs.TempMetaData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = stats.docFreq;\n      meta.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(meta.longs, metaWriter, stats);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      //System.out.println(\"add term:<\"+text.utf8ToString()+\", \"+meta+\">\");\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      final TempTermOutputs.TempMetaData meta = new TempTermOutputs.TempMetaData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      postingsWriter.finishTerm(meta.longs, metaWriter, stats);\n      /*\n      meta.bytes = new byte[(int)metaWriter.getFilePointer()];\n      metaWriter.writeTo(meta.bytes, 0);\n      metaWriter.reset();\n      */\n      int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      //System.out.println(\"add term:<\"+text.utf8ToString()+\", \"+meta+\">\");\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"050ba1ba249733cac50c2612418b7179591d2df9","date":1374633633,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final TempTermOutputs.TempMetaData meta = new TempTermOutputs.TempMetaData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = stats.docFreq;\n      meta.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(meta.longs, metaWriter, stats);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final TempTermOutputs.TempMetaData meta = new TempTermOutputs.TempMetaData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = stats.docFreq;\n      meta.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(meta.longs, metaWriter, stats);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      //System.out.println(\"add term:<\"+text.utf8ToString()+\", \"+meta+\">\");\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abfc4a4873131874a50c6f6e3deb59a743ee1f44","date":1376737165,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final BlockTermState state = postingsWriter.newTermState();\n      final TempTermOutputs.TempMetaData meta = new TempTermOutputs.TempMetaData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq = stats.docFreq;\n      meta.totalTermFreq = state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final TempTermOutputs.TempMetaData meta = new TempTermOutputs.TempMetaData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = stats.docFreq;\n      meta.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(meta.longs, metaWriter, stats);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final BlockTermState state = postingsWriter.newTermState();\n      final TempTermOutputs.TempMetaData meta = new TempTermOutputs.TempMetaData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq = stats.docFreq;\n      meta.totalTermFreq = state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final BlockTermState state = postingsWriter.newTermState();\n      final TempTermOutputs.TempMetaData meta = new TempTermOutputs.TempMetaData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq = stats.docFreq;\n      meta.totalTermFreq = state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abfc4a4873131874a50c6f6e3deb59a743ee1f44":["050ba1ba249733cac50c2612418b7179591d2df9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"232252bc7056b698c1e1c550f4b97a9a3c00e520":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["abfc4a4873131874a50c6f6e3deb59a743ee1f44"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["232252bc7056b698c1e1c550f4b97a9a3c00e520"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"050ba1ba249733cac50c2612418b7179591d2df9":["3a509b6df968a74c38a0528f5bf6ea26f503b756"]},"commit2Childs":{"abfc4a4873131874a50c6f6e3deb59a743ee1f44":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["232252bc7056b698c1e1c550f4b97a9a3c00e520","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"232252bc7056b698c1e1c550f4b97a9a3c00e520":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["050ba1ba249733cac50c2612418b7179591d2df9"],"050ba1ba249733cac50c2612418b7179591d2df9":["abfc4a4873131874a50c6f6e3deb59a743ee1f44"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}