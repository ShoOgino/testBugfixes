{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(MergePolicy).mjava","commits":[{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(MergePolicy).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(LogMergePolicy).mjava","sourceNew":"  private void assertSetters(MergePolicy lmp) {\n    lmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, lmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    lmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      lmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","sourceOld":"  private void assertSetters(LogMergePolicy lmp) {\n    lmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, lmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    lmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      lmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(MergePolicy).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(MergePolicy).mjava","sourceNew":"  private void assertSetters(MergePolicy lmp) {\n    lmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, lmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    lmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      lmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","sourceOld":"  private void assertSetters(MergePolicy lmp) {\n    lmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, lmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    lmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      lmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(MergePolicy).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(MergePolicy).mjava","sourceNew":"  private void assertSetters(MergePolicy lmp) {\n    lmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, lmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    lmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      lmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","sourceOld":"  private void assertSetters(MergePolicy lmp) {\n    lmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, lmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    lmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      lmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(MergePolicy).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#assertSetters(MergePolicy).mjava","sourceNew":"  private void assertSetters(MergePolicy lmp) {\n    lmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, lmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    lmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      lmp.setMaxCFSSegmentSizeMB(-2.0);\n    });\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","sourceOld":"  private void assertSetters(MergePolicy lmp) {\n    lmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, lmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    lmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., lmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      lmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","bugFix":["c7211b1fba79597955a78855e9f646de9248ca57"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}