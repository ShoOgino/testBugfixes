{"path":"src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#testProtectedOld().mjava","commits":[{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#testProtectedOld().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the protected words mechanism of EnglishPorterFilterFactory\n   */\n  @Deprecated\n  public void testProtectedOld() throws Exception {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      if (test[i].equals(\"fledgling\") == false && test[i].equals(\"banks\") == false) {\n        stemmer.setCurrent(test[i]);\n        stemmer.stem();\n        gold[i] = stemmer.getCurrent();\n      } else {\n        gold[i] = test[i];\n      }\n    }\n\n    EnglishPorterFilterFactory factory = new EnglishPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(SnowballPorterFilterFactory.PROTECTED_TOKENS, \"who-cares.txt\");\n    factory.init(args);\n    List<String> lines = new ArrayList<String>();\n    Collections.addAll(lines, \"banks\", \"fledgling\");\n    factory.inform(new LinesMockSolrResourceLoader(lines));\n    Tokenizer tokenizer = new WhitespaceTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#testProtectedOld().mjava","pathOld":"src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#testProtectedOld().mjava","sourceNew":"  /**\n   * Tests the protected words mechanism of EnglishPorterFilterFactory\n   */\n  @Deprecated\n  public void testProtectedOld() throws Exception {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      if (test[i].equals(\"fledgling\") == false && test[i].equals(\"banks\") == false) {\n        stemmer.setCurrent(test[i]);\n        stemmer.stem();\n        gold[i] = stemmer.getCurrent();\n      } else {\n        gold[i] = test[i];\n      }\n    }\n\n    EnglishPorterFilterFactory factory = new EnglishPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(SnowballPorterFilterFactory.PROTECTED_TOKENS, \"who-cares.txt\");\n    factory.init(args);\n    List<String> lines = new ArrayList<String>();\n    Collections.addAll(lines, \"banks\", \"fledgling\");\n    factory.inform(new LinesMockSolrResourceLoader(lines));\n    Tokenizer tokenizer = new WhitespaceTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","sourceOld":"  /**\n   * Tests the protected words mechanism of EnglishPorterFilterFactory\n   */\n  @Deprecated\n  public void testProtectedOld() throws Exception {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      if (test[i].equals(\"fledgling\") == false && test[i].equals(\"banks\") == false) {\n        stemmer.setCurrent(test[i]);\n        stemmer.stem();\n        gold[i] = stemmer.getCurrent();\n      } else {\n        gold[i] = test[i];\n      }\n    }\n\n    EnglishPorterFilterFactory factory = new EnglishPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(SnowballPorterFilterFactory.PROTECTED_TOKENS, \"who-cares.txt\");\n    factory.init(args);\n    List<String> lines = new ArrayList<String>();\n    Collections.addAll(lines, \"banks\", \"fledgling\");\n    factory.inform(new LinesMockSolrResourceLoader(lines));\n    Tokenizer tokenizer = new WhitespaceTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}