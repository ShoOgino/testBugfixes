{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#DutchAnalyzer(CharArraySet,CharArraySet,CharArrayMap[String]).mjava","commits":[{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#DutchAnalyzer(CharArraySet,CharArraySet,CharArrayMap[String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#DutchAnalyzer(Version,CharArraySet,CharArraySet,CharArrayMap[String]).mjava","sourceNew":"  public DutchAnalyzer(CharArraySet stopwords, CharArraySet stemExclusionTable, CharArrayMap<String> stemOverrideDict) {\n    this.stoptable = CharArraySet.unmodifiableSet(CharArraySet.copy(stopwords));\n    this.excltable = CharArraySet.unmodifiableSet(CharArraySet.copy(stemExclusionTable));\n    if (stemOverrideDict.isEmpty()) {\n      this.stemdict = null;\n    } else {\n      // we don't need to ignore case here since we lowercase in this analyzer anyway\n      StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(false);\n      CharArrayMap<String>.EntryIterator iter = stemOverrideDict.entrySet().iterator();\n      CharsRef spare = new CharsRef();\n      while (iter.hasNext()) {\n        char[] nextKey = iter.nextKey();\n        spare.copyChars(nextKey, 0, nextKey.length);\n        builder.add(spare, iter.currentValue());\n      }\n      try {\n        this.stemdict = builder.build();\n      } catch (IOException ex) {\n        throw new RuntimeException(\"can not build stem dict\", ex);\n      }\n    }\n  }\n\n","sourceOld":"  public DutchAnalyzer(Version matchVersion, CharArraySet stopwords, CharArraySet stemExclusionTable, CharArrayMap<String> stemOverrideDict) {\n    this.matchVersion = matchVersion;\n    this.stoptable = CharArraySet.unmodifiableSet(CharArraySet.copy(matchVersion, stopwords));\n    this.excltable = CharArraySet.unmodifiableSet(CharArraySet.copy(matchVersion, stemExclusionTable));\n    if (stemOverrideDict.isEmpty()) {\n      this.stemdict = null;\n    } else {\n      // we don't need to ignore case here since we lowercase in this analyzer anyway\n      StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(false);\n      CharArrayMap<String>.EntryIterator iter = stemOverrideDict.entrySet().iterator();\n      CharsRef spare = new CharsRef();\n      while (iter.hasNext()) {\n        char[] nextKey = iter.nextKey();\n        spare.copyChars(nextKey, 0, nextKey.length);\n        builder.add(spare, iter.currentValue());\n      }\n      try {\n        this.stemdict = builder.build();\n      } catch (IOException ex) {\n        throw new RuntimeException(\"can not build stem dict\", ex);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#DutchAnalyzer(Version,CharArraySet,CharArraySet,CharArrayMap[String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#DutchAnalyzer(CharArraySet,CharArraySet,CharArrayMap[String]).mjava","sourceNew":"  public DutchAnalyzer(Version matchVersion, CharArraySet stopwords, CharArraySet stemExclusionTable, CharArrayMap<String> stemOverrideDict) {\n    this.matchVersion = matchVersion;\n    this.stoptable = CharArraySet.unmodifiableSet(CharArraySet.copy(matchVersion, stopwords));\n    this.excltable = CharArraySet.unmodifiableSet(CharArraySet.copy(matchVersion, stemExclusionTable));\n    if (stemOverrideDict.isEmpty()) {\n      this.stemdict = null;\n    } else {\n      // we don't need to ignore case here since we lowercase in this analyzer anyway\n      StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(false);\n      CharArrayMap<String>.EntryIterator iter = stemOverrideDict.entrySet().iterator();\n      CharsRef spare = new CharsRef();\n      while (iter.hasNext()) {\n        char[] nextKey = iter.nextKey();\n        spare.copyChars(nextKey, 0, nextKey.length);\n        builder.add(spare, iter.currentValue());\n      }\n      try {\n        this.stemdict = builder.build();\n      } catch (IOException ex) {\n        throw new RuntimeException(\"can not build stem dict\", ex);\n      }\n    }\n  }\n\n","sourceOld":"  public DutchAnalyzer(CharArraySet stopwords, CharArraySet stemExclusionTable, CharArrayMap<String> stemOverrideDict) {\n    this.stoptable = CharArraySet.unmodifiableSet(CharArraySet.copy(stopwords));\n    this.excltable = CharArraySet.unmodifiableSet(CharArraySet.copy(stemExclusionTable));\n    if (stemOverrideDict.isEmpty()) {\n      this.stemdict = null;\n    } else {\n      // we don't need to ignore case here since we lowercase in this analyzer anyway\n      StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(false);\n      CharArrayMap<String>.EntryIterator iter = stemOverrideDict.entrySet().iterator();\n      CharsRef spare = new CharsRef();\n      while (iter.hasNext()) {\n        char[] nextKey = iter.nextKey();\n        spare.copyChars(nextKey, 0, nextKey.length);\n        builder.add(spare, iter.currentValue());\n      }\n      try {\n        this.stemdict = builder.build();\n      } catch (IOException ex) {\n        throw new RuntimeException(\"can not build stem dict\", ex);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#DutchAnalyzer(CharArraySet,CharArraySet,CharArrayMap[String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#DutchAnalyzer(Version,CharArraySet,CharArraySet,CharArrayMap[String]).mjava","sourceNew":"  public DutchAnalyzer(CharArraySet stopwords, CharArraySet stemExclusionTable, CharArrayMap<String> stemOverrideDict) {\n    this.stoptable = CharArraySet.unmodifiableSet(CharArraySet.copy(stopwords));\n    this.excltable = CharArraySet.unmodifiableSet(CharArraySet.copy(stemExclusionTable));\n    if (stemOverrideDict.isEmpty()) {\n      this.stemdict = null;\n    } else {\n      // we don't need to ignore case here since we lowercase in this analyzer anyway\n      StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(false);\n      CharArrayMap<String>.EntryIterator iter = stemOverrideDict.entrySet().iterator();\n      CharsRef spare = new CharsRef();\n      while (iter.hasNext()) {\n        char[] nextKey = iter.nextKey();\n        spare.copyChars(nextKey, 0, nextKey.length);\n        builder.add(spare, iter.currentValue());\n      }\n      try {\n        this.stemdict = builder.build();\n      } catch (IOException ex) {\n        throw new RuntimeException(\"can not build stem dict\", ex);\n      }\n    }\n  }\n\n","sourceOld":"  public DutchAnalyzer(Version matchVersion, CharArraySet stopwords, CharArraySet stemExclusionTable, CharArrayMap<String> stemOverrideDict) {\n    this.matchVersion = matchVersion;\n    this.stoptable = CharArraySet.unmodifiableSet(CharArraySet.copy(matchVersion, stopwords));\n    this.excltable = CharArraySet.unmodifiableSet(CharArraySet.copy(matchVersion, stemExclusionTable));\n    if (stemOverrideDict.isEmpty()) {\n      this.stemdict = null;\n    } else {\n      // we don't need to ignore case here since we lowercase in this analyzer anyway\n      StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(false);\n      CharArrayMap<String>.EntryIterator iter = stemOverrideDict.entrySet().iterator();\n      CharsRef spare = new CharsRef();\n      while (iter.hasNext()) {\n        char[] nextKey = iter.nextKey();\n        spare.copyChars(nextKey, 0, nextKey.length);\n        builder.add(spare, iter.currentValue());\n      }\n      try {\n        this.stemdict = builder.build();\n      } catch (IOException ex) {\n        throw new RuntimeException(\"can not build stem dict\", ex);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#DutchAnalyzer(CharArraySet,CharArraySet,CharArrayMap[String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#DutchAnalyzer(CharArraySet,CharArraySet,CharArrayMap[String]).mjava","sourceNew":"  public DutchAnalyzer(CharArraySet stopwords, CharArraySet stemExclusionTable, CharArrayMap<String> stemOverrideDict) {\n    this.stoptable = CharArraySet.unmodifiableSet(CharArraySet.copy(stopwords));\n    this.excltable = CharArraySet.unmodifiableSet(CharArraySet.copy(stemExclusionTable));\n    if (stemOverrideDict.isEmpty()) {\n      this.stemdict = null;\n    } else {\n      // we don't need to ignore case here since we lowercase in this analyzer anyway\n      StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(false);\n      CharArrayMap<String>.EntryIterator iter = stemOverrideDict.entrySet().iterator();\n      CharsRefBuilder spare = new CharsRefBuilder();\n      while (iter.hasNext()) {\n        char[] nextKey = iter.nextKey();\n        spare.copyChars(nextKey, 0, nextKey.length);\n        builder.add(spare.get(), iter.currentValue());\n      }\n      try {\n        this.stemdict = builder.build();\n      } catch (IOException ex) {\n        throw new RuntimeException(\"can not build stem dict\", ex);\n      }\n    }\n  }\n\n","sourceOld":"  public DutchAnalyzer(CharArraySet stopwords, CharArraySet stemExclusionTable, CharArrayMap<String> stemOverrideDict) {\n    this.stoptable = CharArraySet.unmodifiableSet(CharArraySet.copy(stopwords));\n    this.excltable = CharArraySet.unmodifiableSet(CharArraySet.copy(stemExclusionTable));\n    if (stemOverrideDict.isEmpty()) {\n      this.stemdict = null;\n    } else {\n      // we don't need to ignore case here since we lowercase in this analyzer anyway\n      StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(false);\n      CharArrayMap<String>.EntryIterator iter = stemOverrideDict.entrySet().iterator();\n      CharsRef spare = new CharsRef();\n      while (iter.hasNext()) {\n        char[] nextKey = iter.nextKey();\n        spare.copyChars(nextKey, 0, nextKey.length);\n        builder.add(spare, iter.currentValue());\n      }\n      try {\n        this.stemdict = builder.build();\n      } catch (IOException ex) {\n        throw new RuntimeException(\"can not build stem dict\", ex);\n      }\n    }\n  }\n\n","bugFix":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}