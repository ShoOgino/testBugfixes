{"path":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlop1().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlop1().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlop1().mjava","sourceNew":"  public void testSlop1() throws Exception {\n    // Ensures slop of 1 works with terms in order.\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"two\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"in order\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // Ensures slop of 1 does not work for phrases out of order;\n    // must be at least 2.\n    query = new PhraseQuery();\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reversed, slop not 2 or more\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  public void testSlop1() throws Exception {\n    // Ensures slop of 1 works with terms in order.\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"two\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"in order\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // Ensures slop of 1 does not work for phrases out of order;\n    // must be at least 2.\n    query = new PhraseQuery();\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reversed, slop not 2 or more\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlop1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlop1().mjava","sourceNew":"  public void testSlop1() throws Exception {\n    // Ensures slop of 1 works with terms in order.\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"two\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"in order\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // Ensures slop of 1 does not work for phrases out of order;\n    // must be at least 2.\n    query = new PhraseQuery();\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reversed, slop not 2 or more\", 0, hits.length);\n    QueryUtils.check(random, query,searcher);\n  }\n\n","sourceOld":"  public void testSlop1() throws Exception {\n    // Ensures slop of 1 works with terms in order.\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"two\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"in order\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // Ensures slop of 1 does not work for phrases out of order;\n    // must be at least 2.\n    query = new PhraseQuery();\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reversed, slop not 2 or more\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlop1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlop1().mjava","sourceNew":"  public void testSlop1() throws Exception {\n    // Ensures slop of 1 works with terms in order.\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"two\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"in order\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // Ensures slop of 1 does not work for phrases out of order;\n    // must be at least 2.\n    query = new PhraseQuery();\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reversed, slop not 2 or more\", 0, hits.length);\n    QueryUtils.check(random, query,searcher);\n  }\n\n","sourceOld":"  public void testSlop1() throws Exception {\n    // Ensures slop of 1 works with terms in order.\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"two\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"in order\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // Ensures slop of 1 does not work for phrases out of order;\n    // must be at least 2.\n    query = new PhraseQuery();\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reversed, slop not 2 or more\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlop1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlop1().mjava","sourceNew":"  public void testSlop1() throws Exception {\n    // Ensures slop of 1 works with terms in order.\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"two\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"in order\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // Ensures slop of 1 does not work for phrases out of order;\n    // must be at least 2.\n    query = new PhraseQuery();\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reversed, slop not 2 or more\", 0, hits.length);\n    QueryUtils.check(random, query,searcher);\n  }\n\n","sourceOld":"  public void testSlop1() throws Exception {\n    // Ensures slop of 1 works with terms in order.\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"two\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"in order\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    // Ensures slop of 1 does not work for phrases out of order;\n    // must be at least 2.\n    query = new PhraseQuery();\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reversed, slop not 2 or more\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testSlop1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlop1().mjava","sourceNew":"  public void testSlop1() throws Exception {\n    // Ensures slop of 1 works with terms in order.\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"two\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"in order\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // Ensures slop of 1 does not work for phrases out of order;\n    // must be at least 2.\n    query = new PhraseQuery();\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reversed, slop not 2 or more\", 0, hits.length);\n    QueryUtils.check(random, query,searcher);\n  }\n\n","sourceOld":"  public void testSlop1() throws Exception {\n    // Ensures slop of 1 works with terms in order.\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"two\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"in order\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    // Ensures slop of 1 does not work for phrases out of order;\n    // must be at least 2.\n    query = new PhraseQuery();\n    query.setSlop(1);\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reversed, slop not 2 or more\", 0, hits.length);\n    QueryUtils.check(random, query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"53a31399f2471493d67b19a95c028a74e0113b6a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["53a31399f2471493d67b19a95c028a74e0113b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}