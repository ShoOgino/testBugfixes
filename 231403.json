{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_UNSTORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, customType); // for function scoring\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", customType); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_UNSTORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, customType); // for function scoring\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", customType); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, customType); // for function scoring\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", customType); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_UNSTORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, customType); // for function scoring\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", customType); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new IntField(INT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n\n    f = new FloatField(FLOAT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, customType); // for function scoring\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", customType); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new IntField(INT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n\n    f = new FloatField(FLOAT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, customType); // for function scoring\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", customType); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n    d.add(new SortedDocValuesField(ID_FIELD, new BytesRef(id2String(scoreAndID))));\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new IntField(INT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(INT_FIELD, scoreAndID));\n\n    f = new FloatField(FLOAT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(FLOAT_FIELD, Float.floatToRawIntBits(scoreAndID)));\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new IntField(INT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n\n    f = new FloatField(FLOAT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n    d.add(new SortedDocValuesField(ID_FIELD, new BytesRef(id2String(scoreAndID))));\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new IntField(INT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(INT_FIELD, scoreAndID));\n\n    f = new FloatField(FLOAT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(FLOAT_FIELD, Float.floatToRawIntBits(scoreAndID)));\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new IntField(INT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n\n    f = new FloatField(FLOAT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n    d.add(new SortedDocValuesField(ID_FIELD, new BytesRef(id2String(scoreAndID))));\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new IntField(INT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(INT_FIELD, scoreAndID));\n\n    f = new FloatField(FLOAT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(FLOAT_FIELD, Float.floatToRawIntBits(scoreAndID)));\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new IntField(INT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n\n    f = new FloatField(FLOAT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n    d.add(new SortedDocValuesField(ID_FIELD, new BytesRef(id2String(scoreAndID))));\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new LegacyIntField(INT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(INT_FIELD, scoreAndID));\n\n    f = new LegacyFloatField(FLOAT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(FLOAT_FIELD, Float.floatToRawIntBits(scoreAndID)));\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n    d.add(new SortedDocValuesField(ID_FIELD, new BytesRef(id2String(scoreAndID))));\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new IntField(INT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(INT_FIELD, scoreAndID));\n\n    f = new FloatField(FLOAT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(FLOAT_FIELD, Float.floatToRawIntBits(scoreAndID)));\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0858e338cc7ed91cff3bae1cb26df0fba2b4f254","date":1457453832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n    d.add(new SortedDocValuesField(ID_FIELD, new BytesRef(id2String(scoreAndID))));\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new StoredField(INT_FIELD, scoreAndID); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(INT_FIELD, scoreAndID));\n\n    f = new StoredField(FLOAT_FIELD, scoreAndID); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(FLOAT_FIELD, Float.floatToRawIntBits(scoreAndID)));\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n    d.add(new SortedDocValuesField(ID_FIELD, new BytesRef(id2String(scoreAndID))));\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new LegacyIntField(INT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(INT_FIELD, scoreAndID));\n\n    f = new LegacyFloatField(FLOAT_FIELD, scoreAndID, Store.YES); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(FLOAT_FIELD, Float.floatToRawIntBits(scoreAndID)));\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cc453cd9f503b2ba830b15afa27d11dc109c6af","date":1486406649,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n    d.add(new SortedDocValuesField(ID_FIELD, new BytesRef(id2String(scoreAndID))));\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new StoredField(INT_FIELD, scoreAndID); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(INT_FIELD, scoreAndID));\n\n    f = new StoredField(FLOAT_FIELD, scoreAndID); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(FLOAT_FIELD, Float.floatToRawIntBits(scoreAndID)));\n    \n    f = new StoredField(INT_FIELD_MV_MIN, scoreAndID);\n    d.add(f);\n    f = new StoredField(INT_FIELD_MV_MIN, scoreAndID + 1);\n    d.add(f);\n    d.add(new SortedNumericDocValuesField(INT_FIELD_MV_MIN, scoreAndID));\n    d.add(new SortedNumericDocValuesField(INT_FIELD_MV_MIN, scoreAndID + 1));\n    \n    f = new StoredField(INT_FIELD_MV_MAX, scoreAndID);\n    d.add(f);\n    f = new StoredField(INT_FIELD_MV_MAX, scoreAndID - 1);\n    d.add(f);\n    d.add(new SortedNumericDocValuesField(INT_FIELD_MV_MAX, scoreAndID));\n    d.add(new SortedNumericDocValuesField(INT_FIELD_MV_MAX, scoreAndID - 1));\n    \n    f = new StoredField(FLOAT_FIELD_MV_MIN, scoreAndID);\n    d.add(f);\n    f = new StoredField(FLOAT_FIELD_MV_MIN, scoreAndID + 1);\n    d.add(f);\n    d.add(new SortedNumericDocValuesField(FLOAT_FIELD_MV_MIN, NumericUtils.floatToSortableInt(scoreAndID)));\n    d.add(new SortedNumericDocValuesField(FLOAT_FIELD_MV_MIN, NumericUtils.floatToSortableInt(scoreAndID + 1)));\n    \n    f = new StoredField(FLOAT_FIELD_MV_MAX, scoreAndID);\n    d.add(f);\n    f = new StoredField(FLOAT_FIELD_MV_MAX, scoreAndID - 1);\n    d.add(f);\n    d.add(new SortedNumericDocValuesField(FLOAT_FIELD_MV_MAX, NumericUtils.floatToSortableInt(scoreAndID)));\n    d.add(new SortedNumericDocValuesField(FLOAT_FIELD_MV_MAX, NumericUtils.floatToSortableInt(scoreAndID - 1)));\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n    d.add(new SortedDocValuesField(ID_FIELD, new BytesRef(id2String(scoreAndID))));\n\n    FieldType customType2 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = new StoredField(INT_FIELD, scoreAndID); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(INT_FIELD, scoreAndID));\n\n    f = new StoredField(FLOAT_FIELD, scoreAndID); // for function scoring\n    d.add(f);\n    d.add(new NumericDocValuesField(FLOAT_FIELD, Float.floatToRawIntBits(scoreAndID)));\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7cc453cd9f503b2ba830b15afa27d11dc109c6af":["0858e338cc7ed91cff3bae1cb26df0fba2b4f254"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["04f07771a2a7dd3a395700665ed839c3dae2def2","59a0020b413d44dd79d85d7a66ed5004265fb453"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["59a0020b413d44dd79d85d7a66ed5004265fb453","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"0858e338cc7ed91cff3bae1cb26df0fba2b4f254":["770342641f7b505eaa8dccdc666158bff2419109"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"56572ec06f1407c066d6b7399413178b33176cd8":["59a0020b413d44dd79d85d7a66ed5004265fb453","93dd449115a9247533e44bab47e8429e5dccbc6d"],"770342641f7b505eaa8dccdc666158bff2419109":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7cc453cd9f503b2ba830b15afa27d11dc109c6af"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"7cc453cd9f503b2ba830b15afa27d11dc109c6af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"0858e338cc7ed91cff3bae1cb26df0fba2b4f254":["7cc453cd9f503b2ba830b15afa27d11dc109c6af"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"770342641f7b505eaa8dccdc666158bff2419109":["0858e338cc7ed91cff3bae1cb26df0fba2b4f254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}