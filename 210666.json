{"path":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","commits":[{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(String,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(String term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term, count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"c26f00b574427b55127e869b935845554afde1fa":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}