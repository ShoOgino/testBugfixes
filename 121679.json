{"path":"src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","commits":[{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    Query result = null;\n\n    String[] p1 = DistanceUtils.parsePoint(null, externalVal, dimension);\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    String name = field.getName() + \"_\";\n    String suffix = POLY_FIELD_SEPARATOR + subType.typeName;\n    int len = name.length();\n    StringBuilder bldr = new StringBuilder(len + 3 + suffix.length());//should be enough buffer to handle most values of j.\n    bldr.append(name);\n    for (int i = 0; i < dimension; i++) {\n      bldr.append(i).append(suffix);\n      SchemaField sf1 = schema.getField(bldr.toString());\n      Query tq = subType.getFieldQuery(parser, sf1, p1[i]);\n      //new TermQuery(new Term(bldr.toString(), subType.toInternal(p1[i])));\n      bq.add(tq, BooleanClause.Occur.MUST);\n      bldr.setLength(len);\n    }\n    result = bq;\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aafd8c35feb155ec2e0e4b6e03cc1604204dd52","date":1261676568,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = DistanceUtils.parsePoint(null, externalVal, dimension);\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    Query result = null;\n\n    String[] p1 = DistanceUtils.parsePoint(null, externalVal, dimension);\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    String name = field.getName() + \"_\";\n    String suffix = POLY_FIELD_SEPARATOR + subType.typeName;\n    int len = name.length();\n    StringBuilder bldr = new StringBuilder(len + 3 + suffix.length());//should be enough buffer to handle most values of j.\n    bldr.append(name);\n    for (int i = 0; i < dimension; i++) {\n      bldr.append(i).append(suffix);\n      SchemaField sf1 = schema.getField(bldr.toString());\n      Query tq = subType.getFieldQuery(parser, sf1, p1[i]);\n      //new TermQuery(new Term(bldr.toString(), subType.toInternal(p1[i])));\n      bq.add(tq, BooleanClause.Occur.MUST);\n      bldr.setLength(len);\n    }\n    result = bq;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = DistanceUtils.parsePoint(null, externalVal, dimension);\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = DistanceUtils.parsePoint(null, externalVal, dimension);\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4aafd8c35feb155ec2e0e4b6e03cc1604204dd52":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["4aafd8c35feb155ec2e0e4b6e03cc1604204dd52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["4aafd8c35feb155ec2e0e4b6e03cc1604204dd52"],"4aafd8c35feb155ec2e0e4b6e03cc1604204dd52":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}