{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":null,"sourceOld":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}