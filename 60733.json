{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#splitEarcut(Node,List[Triangle],boolean).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#splitEarcut(Node,List[Triangle],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Attempt to split a polygon and independently triangulate each side **/\n  private static final void splitEarcut(final Node start, final List<Triangle> tessellation, final boolean mortonIndexed) {\n    // Search for a valid diagonal that divides the polygon into two.\n    Node searchNode = start;\n    Node nextNode;\n    do {\n      nextNode = searchNode.next;\n      Node diagonal = nextNode.next;\n      while (diagonal != searchNode.previous) {\n        if(isValidDiagonal(searchNode, diagonal)) {\n          // Split the polygon into two at the point of the diagonal\n          Node splitNode = splitPolygon(searchNode, diagonal);\n          // Filter the resulting polygon.\n          searchNode = filterPoints(searchNode, searchNode.next);\n          splitNode  = filterPoints(splitNode, splitNode.next);\n          // Attempt to earcut both of the resulting polygons\n          earcutLinkedList(searchNode, tessellation, State.INIT, mortonIndexed);\n          earcutLinkedList(splitNode,  tessellation, State.INIT, mortonIndexed);\n          // Finish the iterative search\n          return;\n        }\n        diagonal = diagonal.next;\n      }\n      searchNode = searchNode.next;\n    } while (searchNode != start);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bd39805d25530433bb5db6054c9c16f3bbf3ae3a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#splitEarcut(Node,List[Triangle],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Attempt to split a polygon and independently triangulate each side **/\n  private static final void splitEarcut(final Node start, final List<Triangle> tessellation, final boolean mortonIndexed) {\n    // Search for a valid diagonal that divides the polygon into two.\n    Node searchNode = start;\n    Node nextNode;\n    do {\n      nextNode = searchNode.next;\n      Node diagonal = nextNode.next;\n      while (diagonal != searchNode.previous) {\n        if(isValidDiagonal(searchNode, diagonal)) {\n          // Split the polygon into two at the point of the diagonal\n          Node splitNode = splitPolygon(searchNode, diagonal);\n          // Filter the resulting polygon.\n          searchNode = filterPoints(searchNode, searchNode.next);\n          splitNode  = filterPoints(splitNode, splitNode.next);\n          // Attempt to earcut both of the resulting polygons\n          earcutLinkedList(searchNode, tessellation, State.INIT, mortonIndexed);\n          earcutLinkedList(splitNode,  tessellation, State.INIT, mortonIndexed);\n          // Finish the iterative search\n          return;\n        }\n        diagonal = diagonal.next;\n      }\n      searchNode = searchNode.next;\n    } while (searchNode != start);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#splitEarcut(Node,List[Triangle],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Attempt to split a polygon and independently triangulate each side **/\n  private static final void splitEarcut(final Node start, final List<Triangle> tessellation, final boolean mortonIndexed) {\n    // Search for a valid diagonal that divides the polygon into two.\n    Node searchNode = start;\n    Node nextNode;\n    do {\n      nextNode = searchNode.next;\n      Node diagonal = nextNode.next;\n      while (diagonal != searchNode.previous) {\n        if(isValidDiagonal(searchNode, diagonal)) {\n          // Split the polygon into two at the point of the diagonal\n          Node splitNode = splitPolygon(searchNode, diagonal);\n          // Filter the resulting polygon.\n          searchNode = filterPoints(searchNode, searchNode.next);\n          splitNode  = filterPoints(splitNode, splitNode.next);\n          // Attempt to earcut both of the resulting polygons\n          earcutLinkedList(searchNode, tessellation, State.INIT, mortonIndexed);\n          earcutLinkedList(splitNode,  tessellation, State.INIT, mortonIndexed);\n          // Finish the iterative search\n          return;\n        }\n        diagonal = diagonal.next;\n      }\n      searchNode = searchNode.next;\n    } while (searchNode != start);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed7235f58ecdcb4212c16c44a402263059aa742","date":1541140729,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#splitEarcut(Node,List[Triangle],boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#splitEarcut(Node,List[Triangle],boolean).mjava","sourceNew":"  /** Attempt to split a polygon and independently triangulate each side **/\n  private static final void splitEarcut(final Node start, final List<Triangle> tessellation, final boolean mortonIndexed) {\n    // Search for a valid diagonal that divides the polygon into two.\n    Node searchNode = start;\n    Node nextNode;\n    do {\n      nextNode = searchNode.next;\n      Node diagonal = nextNode.next;\n      while (diagonal != searchNode.previous) {\n        if(isValidDiagonal(searchNode, diagonal)) {\n          // Split the polygon into two at the point of the diagonal\n          Node splitNode = splitPolygon(searchNode, diagonal);\n          // Filter the resulting polygon.\n          searchNode = filterPoints(searchNode, searchNode.next);\n          splitNode  = filterPoints(splitNode, splitNode.next);\n          // Attempt to earcut both of the resulting polygons\n          if (mortonIndexed) {\n            sortByMortonWithReset(searchNode);\n            sortByMortonWithReset(splitNode);\n          }\n          earcutLinkedList(searchNode, tessellation, State.INIT, mortonIndexed);\n          earcutLinkedList(splitNode,  tessellation, State.INIT, mortonIndexed);\n          // Finish the iterative search\n          return;\n        }\n        diagonal = diagonal.next;\n      }\n      searchNode = searchNode.next;\n    } while (searchNode != start);\n  }\n\n","sourceOld":"  /** Attempt to split a polygon and independently triangulate each side **/\n  private static final void splitEarcut(final Node start, final List<Triangle> tessellation, final boolean mortonIndexed) {\n    // Search for a valid diagonal that divides the polygon into two.\n    Node searchNode = start;\n    Node nextNode;\n    do {\n      nextNode = searchNode.next;\n      Node diagonal = nextNode.next;\n      while (diagonal != searchNode.previous) {\n        if(isValidDiagonal(searchNode, diagonal)) {\n          // Split the polygon into two at the point of the diagonal\n          Node splitNode = splitPolygon(searchNode, diagonal);\n          // Filter the resulting polygon.\n          searchNode = filterPoints(searchNode, searchNode.next);\n          splitNode  = filterPoints(splitNode, splitNode.next);\n          // Attempt to earcut both of the resulting polygons\n          earcutLinkedList(searchNode, tessellation, State.INIT, mortonIndexed);\n          earcutLinkedList(splitNode,  tessellation, State.INIT, mortonIndexed);\n          // Finish the iterative search\n          return;\n        }\n        diagonal = diagonal.next;\n      }\n      searchNode = searchNode.next;\n    } while (searchNode != start);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd39805d25530433bb5db6054c9c16f3bbf3ae3a","date":1541141441,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#splitEarcut(Node,List[Triangle],boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#splitEarcut(Node,List[Triangle],boolean).mjava","sourceNew":"  /** Attempt to split a polygon and independently triangulate each side. Return true if the polygon was splitted **/\n  private static final boolean splitEarcut(final Node start, final List<Triangle> tessellation, final boolean mortonIndexed) {\n    // Search for a valid diagonal that divides the polygon into two.\n    Node searchNode = start;\n    Node nextNode;\n    do {\n      nextNode = searchNode.next;\n      Node diagonal = nextNode.next;\n      while (diagonal != searchNode.previous) {\n        if(isValidDiagonal(searchNode, diagonal)) {\n          // Split the polygon into two at the point of the diagonal\n          Node splitNode = splitPolygon(searchNode, diagonal);\n          // Filter the resulting polygon.\n          searchNode = filterPoints(searchNode, searchNode.next);\n          splitNode  = filterPoints(splitNode, splitNode.next);\n          // Attempt to earcut both of the resulting polygons\n          if (mortonIndexed) {\n            sortByMortonWithReset(searchNode);\n            sortByMortonWithReset(splitNode);\n          }\n          earcutLinkedList(searchNode, tessellation, State.INIT, mortonIndexed);\n          earcutLinkedList(splitNode,  tessellation, State.INIT, mortonIndexed);\n          // Finish the iterative search\n          return true;\n        }\n        diagonal = diagonal.next;\n      }\n      searchNode = searchNode.next;\n    } while (searchNode != start);\n    return false;\n  }\n\n","sourceOld":"  /** Attempt to split a polygon and independently triangulate each side **/\n  private static final void splitEarcut(final Node start, final List<Triangle> tessellation, final boolean mortonIndexed) {\n    // Search for a valid diagonal that divides the polygon into two.\n    Node searchNode = start;\n    Node nextNode;\n    do {\n      nextNode = searchNode.next;\n      Node diagonal = nextNode.next;\n      while (diagonal != searchNode.previous) {\n        if(isValidDiagonal(searchNode, diagonal)) {\n          // Split the polygon into two at the point of the diagonal\n          Node splitNode = splitPolygon(searchNode, diagonal);\n          // Filter the resulting polygon.\n          searchNode = filterPoints(searchNode, searchNode.next);\n          splitNode  = filterPoints(splitNode, splitNode.next);\n          // Attempt to earcut both of the resulting polygons\n          if (mortonIndexed) {\n            sortByMortonWithReset(searchNode);\n            sortByMortonWithReset(splitNode);\n          }\n          earcutLinkedList(searchNode, tessellation, State.INIT, mortonIndexed);\n          earcutLinkedList(splitNode,  tessellation, State.INIT, mortonIndexed);\n          // Finish the iterative search\n          return;\n        }\n        diagonal = diagonal.next;\n      }\n      searchNode = searchNode.next;\n    } while (searchNode != start);\n  }\n\n","bugFix":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d","date":1559804329,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#splitEarcut(Polygon,Node,List[Triangle],boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#splitEarcut(Node,List[Triangle],boolean).mjava","sourceNew":"  /** Attempt to split a polygon and independently triangulate each side. Return true if the polygon was splitted **/\n  private static final boolean splitEarcut(Polygon polygon, final Node start, final List<Triangle> tessellation, final boolean mortonIndexed) {\n    // Search for a valid diagonal that divides the polygon into two.\n    Node searchNode = start;\n    Node nextNode;\n    do {\n      nextNode = searchNode.next;\n      Node diagonal = nextNode.next;\n      while (diagonal != searchNode.previous) {\n        if(searchNode.idx != diagonal.idx && isValidDiagonal(searchNode, diagonal)) {\n          // Split the polygon into two at the point of the diagonal\n          Node splitNode = splitPolygon(searchNode, diagonal);\n          // Filter the resulting polygon.\n          searchNode = filterPoints(searchNode, searchNode.next);\n          splitNode  = filterPoints(splitNode, splitNode.next);\n          // Attempt to earcut both of the resulting polygons\n          if (mortonIndexed) {\n            sortByMortonWithReset(searchNode);\n            sortByMortonWithReset(splitNode);\n          }\n          earcutLinkedList(polygon, searchNode, tessellation, State.INIT, mortonIndexed);\n          earcutLinkedList(polygon, splitNode,  tessellation, State.INIT, mortonIndexed);\n          // Finish the iterative search\n          return true;\n        }\n        diagonal = diagonal.next;\n      }\n      searchNode = searchNode.next;\n    } while (searchNode != start);\n    return false;\n  }\n\n","sourceOld":"  /** Attempt to split a polygon and independently triangulate each side. Return true if the polygon was splitted **/\n  private static final boolean splitEarcut(final Node start, final List<Triangle> tessellation, final boolean mortonIndexed) {\n    // Search for a valid diagonal that divides the polygon into two.\n    Node searchNode = start;\n    Node nextNode;\n    do {\n      nextNode = searchNode.next;\n      Node diagonal = nextNode.next;\n      while (diagonal != searchNode.previous) {\n        if(isValidDiagonal(searchNode, diagonal)) {\n          // Split the polygon into two at the point of the diagonal\n          Node splitNode = splitPolygon(searchNode, diagonal);\n          // Filter the resulting polygon.\n          searchNode = filterPoints(searchNode, searchNode.next);\n          splitNode  = filterPoints(splitNode, splitNode.next);\n          // Attempt to earcut both of the resulting polygons\n          if (mortonIndexed) {\n            sortByMortonWithReset(searchNode);\n            sortByMortonWithReset(splitNode);\n          }\n          earcutLinkedList(searchNode, tessellation, State.INIT, mortonIndexed);\n          earcutLinkedList(splitNode,  tessellation, State.INIT, mortonIndexed);\n          // Finish the iterative search\n          return true;\n        }\n        diagonal = diagonal.next;\n      }\n      searchNode = searchNode.next;\n    } while (searchNode != start);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"bd39805d25530433bb5db6054c9c16f3bbf3ae3a":["0ed7235f58ecdcb4212c16c44a402263059aa742"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d":["bd39805d25530433bb5db6054c9c16f3bbf3ae3a"],"0ed7235f58ecdcb4212c16c44a402263059aa742":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3154b8a89750f531ca89c2fc8d7dc22a6ee5739d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0ed7235f58ecdcb4212c16c44a402263059aa742","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"bd39805d25530433bb5db6054c9c16f3bbf3ae3a":["3154b8a89750f531ca89c2fc8d7dc22a6ee5739d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ed7235f58ecdcb4212c16c44a402263059aa742":["bd39805d25530433bb5db6054c9c16f3bbf3ae3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}